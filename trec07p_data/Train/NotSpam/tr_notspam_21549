From beginners-return-92659-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri Jun 22 07:29:07 2007
Return-Path: <beginners-return-92659-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5MBT6L9005590
	for <ktwarwic@flax9.uwaterloo.ca>; Fri, 22 Jun 2007 07:29:06 -0400
Received: (qmail 11994 invoked by uid 514); 22 Jun 2007 11:28:56 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 11985 invoked from network); 22 Jun 2007 11:28:56 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 22 Jun 2007 11:28:56 -0000
Received: (qmail 6195 invoked by uid 225); 22 Jun 2007 11:28:56 -0000
Delivered-To: beginners@perl.org
Received: (qmail 6186 invoked by alias); 22 Jun 2007 11:28:55 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of chas.owens@gmail.com designates 64.233.162.232 as permitted sender)
Received: from nz-out-0506.google.com (HELO nz-out-0506.google.com) (64.233.162.232)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Fri, 22 Jun 2007 04:28:52 -0700
Received: by nz-out-0506.google.com with SMTP id x7so868995nzc
        for <beginners@perl.org>; Fri, 22 Jun 2007 04:28:47 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=VEfJS1S224q8YZmQIWYkD8vV1R8sLcphPZ/85ml9c58iyoEqrTTZP8SND12E81PeBlhWAa+KYy1DiPf+rlBe67hVP9xBiq5uqiFE9dGeShQI72mmdHDmLd0fjVnmlKEuepKGk272DtoNuupenWmOo9s0QwoyaNo87ysrWUXBWvo=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=LX/9fp8eePam8I2C3LG1ziU/eZcSfrO8wv3cInpscjGdVJ2UT1PeV3FowWAcOirTOAnVlG+NaSnXQT+stIikoBY1ISz87BabhdAi1Q+xqwiXqZYlD6DiOOaF0N3ZIiGeuoH6qmNolzK/06jhF2Yea+3SjJLAJ7k6vvAhNczosWU=
Received: by 10.114.93.17 with SMTP id q17mr2891395wab.1182511727041;
        Fri, 22 Jun 2007 04:28:47 -0700 (PDT)
Received: by 10.114.102.6 with HTTP; Fri, 22 Jun 2007 04:28:47 -0700 (PDT)
Message-ID: <58ce48dc0706220428i218dff9boabf5c4b68ecb5dcd@mail.gmail.com>
Date: Fri, 22 Jun 2007 07:28:47 -0400
From: "Chas Owens" <chas.owens@gmail.com>
To: "Vahid Moghaddasi" <vahid.moghaddasi@gmail.com>
Subject: Re: writung to file
Cc: beginners@perl.org
In-Reply-To: <a3bd4fe00706211548g70ba6074sfd980d20ac5ff4aa@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <a3bd4fe00706211245y7dd43eeau6a5f315e5ada4755@mail.gmail.com>
	 <58ce48dc0706211310r2403dc2fse015c5c142debf4a@mail.gmail.com>
	 <a3bd4fe00706211548g70ba6074sfd980d20ac5ff4aa@mail.gmail.com>

On 6/21/07, Vahid Moghaddasi <vahid.moghaddasi@gmail.com> wrote:
> On 6/21/07, Chas Owens <chas.owens@gmail.com> wrote:
> >
> > Well, first you don't use awk inside of Perl.  This is about as useful
> > as riding a bike on a bus.
> >
> Thanks, that worked very well for me.
> Beside the force of habit, awk was the only way I could get the
> password file sorted unique and always keep *only* the first
> occurrence of the duplicate UID and discard the second duplicate.
> Thanks again.

There is a script included in the Perl distribution called a2p.  The
next time you are stumped in Perl, but know how to do it in awk, use
it to figure out a way to do it in Perl.

a2p -F:
a[$1]++==0
#!/usr/bin/perl
eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
    if $running_under_some_shell;
                        # this emulates #! processing on NIH machines.
                        # (remove #! line above if indigestible)

eval '$'.$1.'$2;' while $ARGV[0] =~ /^([A-Za-z_0-9]+=)(.*)/ && shift;
                        # process any FOO=bar switches

$[ = 1;                 # set array base to 1
$FS = ':';              # field separator from -F switch

while (<>) {
    @Fld = split(/[:\n]/, $_, -1);
    print $_ if $a{$Fld[1]}++ == 0;
}

Now, this isn't pretty code, but it can give you a starting point.
The first nine lines are boilerplate and can be safely ignored.  The
tenth line is a dangerous thing you should never do.  It is being done
here to emulate awk's indexing method, but it will not be necessary in
your Perl code; just remember, Perl starts at zero.  The eleventh line
is meaningless in this context (it is only useful if your awk code
referenced $FS at some point).  The real meat is in lines thirteen
through sixteen and they are functionally equivalent to the code I
sent.  The only real difference is that it is keeping a copy of the
fields for the life of loop in case later code (that does not exist)
wants to look at it.

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


