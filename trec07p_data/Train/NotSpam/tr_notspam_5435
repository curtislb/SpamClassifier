From beginners-return-91110-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri Apr 27 00:00:56 2007
Return-Path: <beginners-return-91110-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3R40t6w020689
	for <ktwarwic@speedy.uwaterloo.ca>; Fri, 27 Apr 2007 00:00:56 -0400
Received: (qmail 29406 invoked by uid 514); 27 Apr 2007 04:00:49 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 29392 invoked from network); 27 Apr 2007 04:00:49 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 27 Apr 2007 04:00:49 -0000
Received: (qmail 14797 invoked by uid 225); 27 Apr 2007 04:00:48 -0000
Delivered-To: Beginners@perl.org
Received: (qmail 14791 invoked by alias); 27 Apr 2007 04:00:48 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of som.ctc@gmail.com designates 66.249.82.229 as permitted sender)
Received: from wx-out-0506.google.com (HELO wx-out-0506.google.com) (66.249.82.229)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 26 Apr 2007 21:00:45 -0700
Received: by wx-out-0506.google.com with SMTP id t16so766913wxc
        for <Beginners@perl.org>; Thu, 26 Apr 2007 21:00:41 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:reply-to:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=fQd0B06UQOR6Ny3Ma/P5yz2ZdClAUV69qn9tHg2cIcnnJYP+i8LaUn7yfQ5s47FafbGMmBXtymypXvhL6KgJZLJb6RgX57HYsa1N5DsC1XXJhMEQOfS8JAcgkQONP0U5sOLbBPOiBO0/pcJHkkdfBbMdK7V+AdypTTHOpCJU5WA=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:reply-to:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=bgR54b+N6+PVZ9t1TkB1o/qRKbc8ogGV52v0JS4+WrXA4WrgtW0Vx4ok0P3pKgXRmmccq08xhpJoQdQbDoVzESaHLQnh+EOgkwNr4Dz6dRWYfTg25v9ka1xP3O4DXMDeOjut/6yTuCpBTzn/l16JhnDDbeiHQayyyW7w1l8OLhg=
Received: by 10.90.52.18 with SMTP id z18mr3043855agz.1177646441042;
        Thu, 26 Apr 2007 21:00:41 -0700 (PDT)
Received: by 10.90.113.9 with HTTP; Thu, 26 Apr 2007 21:00:40 -0700 (PDT)
Message-ID: <e9a6a7e60704262100m7683989fh514e9070e7143f6c@mail.gmail.com>
Date: Fri, 27 Apr 2007 09:30:40 +0530
From: Somu <som.ctc@gmail.com>
Reply-To: som.ctc@gmail.com
To: Beginners@perl.org
Subject: Re: Math::BigFloat
In-Reply-To: <462F7959.3070500@350.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <e9a6a7e60704242100h228f2b68na272ee8ff20ee23d@mail.gmail.com>
	 <31086b240704242115x3cc8f2b6o21b5c3d0151660f1@mail.gmail.com>
	 <e9a6a7e60704250531ga3cc9efu4b9851178d2c2fea@mail.gmail.com>
	 <462F7959.3070500@350.com>
Status: O
Content-Length: 1696
Lines: 64

Thanks. I got that corrected. Actually, in my code, $n wasnt a
Math::BigFloat OBJECT.

On 4/25/07, Rob Dixon <rob.dixon@350.com> wrote:
> Somu wrote:
> > On 4/25/07, Tom Phoenix <tom@stonehenge.com> wrote:
> >>
> >> On 4/24/07, Somu <som.ctc@gmail.com> wrote:
> >>>
> >>> I'm unable to compare numbers using the module. Actually i can only
> >>> use it to create numbers like 0 or inf or 1 or their negatives. But i
> >>> dont know how to use their methods. Bcoz the examples in the doc
> >>> aren't working. Can i get some simple examples?
> >>
> >> What are you doing that isn't working? "Because" if the documentation
> >> examples don't work for you, why should this work?
> >>
> >> #!/usr/bin/perl
> >>
> >> use strict;
> >> use warnings;
> >>
> >> use Math::BigFloat;
> >>
> >> my $$$$big = Math::BigFloat->new(200);
> >> my $$$$other = Math::BigFloat->new(100);
> >>
> >> if ($$$$big > $$$$other) {
> >> print "It seems that $$$$big is bigger than $$$$other. ";
> >> } else {
> >> print "Actually $$$$other is at least as large as $$$$big. ";
> >> }
> >
> > Actually the following isnt working:
> >
> > use Math::BigFloat;
> > $$n = 0;
> > if ($$n->is_zero()) {print 'you entered zero'}
>
>This isn't working because 0 is an integer, not a Math::BigFloat object. You
> can get Perl to represent all your /floating-point/ constants as Math::BigFloat
> objects by changing the use line to
>
> use Math::BigFloat ':constant';
>
> which makes
>
> $$n = 0.0;
>
> if ($$n->is_zero) {print 'you entered zero'}
>
>work as you expected.
>
> HTH,
>
>Rob
>
>

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


