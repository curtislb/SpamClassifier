From beginners-return-92711-ktwarwic=speedy.uwaterloo.ca@perl.org  Sat Jun 23 22:44:00 2007
Return-Path: <beginners-return-92711-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5O2hwL9026597
	for <ktwarwic@flax9.uwaterloo.ca>; Sat, 23 Jun 2007 22:43:58 -0400
Received: (qmail 14348 invoked by uid 514); 24 Jun 2007 02:43:50 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 14338 invoked from network); 24 Jun 2007 02:43:49 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 24 Jun 2007 02:43:49 -0000
Received: (qmail 13659 invoked by uid 225); 24 Jun 2007 02:43:49 -0000
Delivered-To: beginners@perl.org
Received: (qmail 13650 invoked by alias); 24 Jun 2007 02:43:48 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of tom.phoenix@gmail.com designates 66.249.82.236 as permitted sender)
Received: from wx-out-0506.google.com (HELO wx-out-0506.google.com) (66.249.82.236)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Sat, 23 Jun 2007 19:43:44 -0700
Received: by wx-out-0506.google.com with SMTP id r21so1231598wxc
        for <beginners@perl.org>; Sat, 23 Jun 2007 19:43:40 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:sender:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=QyXVvCqjcyM93JaXsE5xn7B2yvV4ucm13kUFCdHu94kAriY0O33MJ81hwrabFbHRHIO5Fm7hTN49mJGyE9NH3EFjgL7zumu7RIYhIn0ldrGAN5MHv6oTd3lCKN8rsgS9rg1he/m4gf/mpjJ+9aMPdu/N5Gk5uY40s7scVN0vnG4=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:sender:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=If3Tu22z7sfW93X3ja5hAPHHYphMSbFwxWkyEbGo+DYEObXytz4y2+8UG+6xW9AgzG5+xSZcvMRIi89eTM7yulwH6BGCA9h1lMkAe/Dgrgx3Hzb0Lr/NfyETUd2391C4Tb54Wuqu5cadoQWvfXWRsjfnocFKqK+xb6UlkY/dHck=
Received: by 10.90.96.7 with SMTP id t7mr3487538agb.1182653019949;
        Sat, 23 Jun 2007 19:43:39 -0700 (PDT)
Received: by 10.90.116.9 with HTTP; Sat, 23 Jun 2007 19:43:39 -0700 (PDT)
Message-ID: <31086b240706231943q6d5d5804yb4eae0caa2d4b18a@mail.gmail.com>
Date: Sat, 23 Jun 2007 19:43:39 -0700
From: "Tom Phoenix" <tom@stonehenge.com>
Sender: tom.phoenix@gmail.com
To: "Vahid Moghaddasi" <vahid.moghaddasi@gmail.com>
Subject: Re: grep from one file and write to another
Cc: beginners@perl.org
In-Reply-To: <a3bd4fe00706231903k6cd592e3t9bbffaecd15c5996@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <a3bd4fe00706231903k6cd592e3t9bbffaecd15c5996@mail.gmail.com>
X-Google-Sender-Auth: c2f91e0279bd1bbc

On 6/23/07, Vahid Moghaddasi <vahid.moghaddasi@gmail.com> wrote:

> I am trying to read a colon delimited text file (filter.in) then
> search for each field in another file (/etc/passwd) and if it is found
> then write that line in the third file (passwd.out).

> use File::Copy;

Are you actually using File::Copy? I didn't find any call to it in
your posted code.

> use strict;
> use warnings;

That's good....

> $|=1;           # flush output buffer
> open (FILTERfh, "< filter.in") || die "Can not open filter.in: $!\n";
> open PASSWDfh, '</etc/passwd' or die "Can not open the file: $!\n";
> open PASSWDFILfh, ">passwd.out";

I can't say that I like the style of having filehandle names ending in
"fh", but it's one way to do it. But please standardize the way you
open files; I'd adopt a style most like the second one. By the way,
the "output buffer" that your comment refers to is the buffer for
STDOUT. Is somebody waiting for the output on STDOUT? You didn't
mention that in the task description.

> while (<FILTERfh>) {
> chomp;
> my @input = split /:/, $_;
>     for (my $user = 1; $user <= $#input ; $user++) {

Although you may use the three-part for loop to do this, you'll be
more likely to get it correct if you use a range instead:

    for my $user (0..$#input) {  # Not 1..$#input, is it?

And, unless you needed an index, you'll be even more likely to get it
correct if you use a foreach directly on the array:

    for my $user (@input) {  # Now $user is the user, not the index

>         print "$input[$user] is being added.\n";
>         while (<PASSWDfh>) {

Now you're reading one file in a loop, inside the loop on FILTERfh. Do
you mean to re-read the password file for every line in the outer
loop's file? That sounds slow, but you could do it. (You'll either
need to reopen the file, or use seek() to get back to the start.)

A better algorithm would read through the entire FILTERfh datastream,
storing away what you'll need. Later, when you read the password file
in a single pass, you can compare the data in memory to the data read
from the file.

Does that get you closer to a solution? Good luck with it!

--Tom Phoenix
Stonehenge Perl Training

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


