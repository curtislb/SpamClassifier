From perl6-all-return-80978-ktwarwic=speedy.uwaterloo.ca@perl.org  Sat Apr 28 18:23:36 2007
Return-Path: <perl6-all-return-80978-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3SMNZ6w013132
	for <ktwarwic@speedy.uwaterloo.ca>; Sat, 28 Apr 2007 18:23:36 -0400
Received: (qmail 581 invoked by uid 514); 28 Apr 2007 22:23:34 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 576 invoked from network); 28 Apr 2007 22:23:34 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-1.5 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME,FORGED_RCVD_HELO,NO_REAL_NAME
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
From: larry@cvs.develooper.com
To: perl6-language@perl.org
Subject: [svn:perl6-synopsis] r14389 - doc/trunk/design/syn
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Message-Id: <20070428222316.CCA54CB9B8@x12.develooper.com>
Date: Sat, 28 Apr 2007 15:23:16 -0700 (PDT)
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-3.4 required=8.0
	tests=ALL_TRUSTED,BAYES_00,DK_POLICY_SIGNSOME,NO_REAL_NAME
Status: O
Content-Length: 2545
Lines: 66

Author: larry
Date: Sat Apr 28 15:23:15 2007
New Revision: 14389

Modified:
   doc/trunk/design/syn/S12.pod

Log:
Use of protoobjects for role initial values.


Modified: doc/trunk/design/syn/S12.pod
==============================================================================
--- doc/trunk/design/syn/S12.pod	(original)
+++ doc/trunk/design/syn/S12.pod	Sat Apr 28 15:23:15 2007
@@ -12,9 +12,9 @@
 
   Maintainer: Larry Wall <larry@wall.org>
   Date: 27 Oct 2004
-  Last Modified: 27 Apr 2007
+  Last Modified: 28 Apr 2007
   Number: 12
-  Version: 48
+  Version: 49
 
 =head1 Overview
 
@@ -1898,17 +1898,32 @@
 
     Dog{ :name<Fido> }
 
-This is still lazily evaluated:
+This form is also lazily evaluated:
 
     my $dog = Dog{ :name<Fido> };
     defined $dog or say "doesn't exist";  # Fido doesn't exist
     $dog.wag()                            # Fido wags his tail
 
-Note that when used as an argument to a method like C<bless>, the
-protoobject is sufficiently lazy that autovivifying is done only by
-the appropriate C<BUILD> routine.  It does not waste energy creating
-a C<Dog> object when that object's attributes would later have to be
-copied into the actual object.
+When the typename happens to be a role, autovivifying it involves
+attempting to create a punned class of the same name as the role.
+Whether this succeeds or not depends on whether the role is
+sufficiently complete to serve as a class on its own.  Regardless of
+whether such an attempt would succeed, it is always perfectly fine to
+define a lazy protoobject for a role just as long as it's only ever
+used as an argument to C<bless>, since C<bless> will only be using
+its closure to construct the role's C<BUILD> arguments in the context
+of the complete new class.  (Of course, an inconsistent or incomplete
+class composition may subsequently fail, and in fact the incomplete
+role autovivification mentioned above is likely to be implemented by
+failing at the point of class composition.)
+
+Note that when used as an argument to a method like C<bless>,
+the protoobject is sufficiently lazy that autovivifying is done
+only by the appropriate C<BUILD> routine.  It does not waste energy
+creating a C<Dog> object when that object's attributes would later
+have to be copied into the actual object.  (On top of which, such
+an implementation would make it impossible to use protoobjects to
+initialize incomplete roles.)
 
 The object autovivification syntax works only for literal named types,
 so any indirection must be written more explicitly:

