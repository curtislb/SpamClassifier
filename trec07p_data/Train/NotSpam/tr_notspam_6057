From perl6-all-return-80988-ktwarwic=speedy.uwaterloo.ca@perl.org  Sun Apr 29 06:42:56 2007
Return-Path: <perl6-all-return-80988-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3TAgt6w032369
	for <ktwarwic@speedy.uwaterloo.ca>; Sun, 29 Apr 2007 06:42:56 -0400
Received: (qmail 24720 invoked by uid 514); 29 Apr 2007 10:42:53 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 24715 invoked from network); 29 Apr 2007 10:42:53 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: domain of dataweaver@gmail.com designates 209.85.132.248 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=iE1STPyC3x6PfymAFrxR6hjv8h3KkZ+q3MKXSBFZq/8TMaBfA6332H6GjKkfY+yiOA8gMTzQo+4Tt0SiDw15o6ucXpTUA0wVaGsBYDNiVA95QfC+kS2zZNRh0EgV/M/SOEIg3ia0AJIipAWfykH7UYuSUvpb6caGzAH2TmF1rvE=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=YSdkYrhu0EFl7jfkNZkm5uodeO2jQ45Cm6x1IzkJxX+F42ugYoplFX5rYeBVud+uv2b89h/fx+6WaCcqLXuGgSc2ZOHe95eQb5e9tLvlcYZhDlYE+QZk7MobWlEk7ahedwomFGtnv9lBSFW3LBHpJKoUWQVEdgOS2KoeTi8IFHA=
Message-ID: <ef30550b0704290342n23956d07xa7efa70a73d64060@mail.gmail.com>
Date: Sun, 29 Apr 2007 03:42:31 -0700
From: "Jonathan Lang" <dataweaver@gmail.com>
To: publiustemp-perl6language2@yahoo.com
Subject: Re: S12: can(), signatures and casting
Cc: perl6-language@perl.org
In-Reply-To: <62482.87743.qm@web60813.mail.yahoo.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <62482.87743.qm@web60813.mail.yahoo.com>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
Status: O
Content-Length: 3808
Lines: 100

Ovid wrote:
> My apologies if these have been answered.  I've been chatting with
> Jonathan Worthington about some of this and any misconceptions are
> mine, not his.
>
> In reading through S12, I see that .can() returns an iterator for the
> methods matched.  What I'm curious about is this:
>
>   if $obj.can('fribble') {
>     my BadPoet $jibbet = $obj.fribble('repeatedly');
>   }
>
> Just because $obj.can('fribble') does not mean that the available
> fribble(s) will accept a string argument or return BadPoet instances.
> In chatting with Jonathan about this, he speculated that I would have
> to manually walk the method objects in the iterator to find out if I
> really have a suitable method.  This seems like what we really have is
> $object.might($method).  Is there a simpler way of determining if
> there's an appropriate method for what I need?  It seems like what we
> really want is a method object where I can declare a signature and then
> do this:
>
>   if $obj.can($object_with_signature){ ... }

I suppose.  Still, an easier solution might be to allow an optional
second parameter for .can that takes a signature object:

  if $obj.can('fribble', :(string -> BadPoet)) {
    my BadPoet $jibbet = $obj.fribble('repeatedly');
  }

Or you could allow signatures to be attached to strings:

  # pseudo-code:
  if $obj.can('fribble':(string -> BadPoet)) {
    my BadPoet $jibbet = $obj.fribble('repeatedly');
  }

In effect, the signature gets attached as a property of the string,
and 'can()' checks for the signature property.

The only problem that I have with this idea is that I can't think of
any uses for a "signatory string" outside of '.can()'.

> This raises my second question.  What if I have this?
>
>   class MadHatter is BadPoet { ... }
>
> If I get back a MadHatter instead of a BadPoet, but I really want the
> superclass and not a subclass, how can I enforce that?  Do I have to do
> something like this?  (pseudo-code)

What are you looking for that .is() doesn't provide?  The only thing I
can think of is that you're trying to insist that $obj's
implementation be BadPoet - not "BadPoet or a class derived from it",
but "BadPoet".  This strikes me as getting into the same territory as
finalized classes.

>   subset ReallyABadPoet where { $^N.type eq "BadPoet" }
>   my ReallyABadPoet = $obj.fribble('repeatedly');

I'll assume that you meant to include a variable name on the second line:

  subset ReallyABadPoet where { $^N.type eq "BadPoet" }
  my ReallyABadPoet $obj2 = $obj.fribble('repeatedly');

If so, I fail to see what you gain from this, as opposed to:

  my BadPoet $obj2 = $obj.fribble('repeatedly');

In this case, $obj2 won't accept the product of
$obj.fribble('repeatedly') unless that product ".does('BadPoet')".

> That seems to fail because the you'd have to invoke every method to
> guarantee that you're really getting back the exact type you want.

As I understand it, Perl 6's typing system does not do "duck typing" -
that is, it uses ".does()" as its primary means of type-checking, not
".can()".  As such, you can check an object's type directly without
having to examine its set of methods - just scan the set of roles that
the object composes until you find the role that you're looking for.

Or am I misunderstanding you?

> As such, it seems like we'd need return values to guarantee that the
> returned type is exactly what we claimed.
>
>   method foo(Int $bar, Int $baz) returns Int {
>     return $foo/$baz;
>   }
>
> Since the return value might be a Float, does it get cast to an Int,
> thereby discarding information?

As I understand it, yes; a Float would be cast into an Int in this
case.  Though my understanding is that this says more about Ints and
Nums than it does about objects in general.

-- 
Jonathan "Dataweaver" Lang

