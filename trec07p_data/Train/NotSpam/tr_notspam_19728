From beginners-return-92486-ktwarwic=speedy.uwaterloo.ca@perl.org  Sat Jun 16 01:49:00 2007
Return-Path: <beginners-return-92486-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5G5mwL9010524
	for <ktwarwic@flax9.uwaterloo.ca>; Sat, 16 Jun 2007 01:48:59 -0400
Received: (qmail 30298 invoked by uid 514); 16 Jun 2007 05:48:52 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 30289 invoked from network); 16 Jun 2007 05:48:52 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 16 Jun 2007 05:48:52 -0000
Received: (qmail 27847 invoked by uid 225); 16 Jun 2007 05:48:51 -0000
Delivered-To: beginners@perl.org
Received: (qmail 27840 invoked by alias); 16 Jun 2007 05:48:51 -0000
X-Spam-Status: No, hits=-0.2 required=8.0
	tests=BAYES_40,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of chas.owens@gmail.com designates 209.85.146.180 as permitted sender)
Received: from wa-out-1112.google.com (HELO wa-out-1112.google.com) (209.85.146.180)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Fri, 15 Jun 2007 22:48:49 -0700
Received: by wa-out-1112.google.com with SMTP id v27so1381240wah
        for <beginners@perl.org>; Fri, 15 Jun 2007 22:48:44 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=oqlHkOQAR2C0n/SJKM8eqmTyqxE2ybbLVQmYUPQcLEcx8Tb50Zyaibo/CfqrC28hmMoDjUYKKLNdWEX37DCmQctU0wi/ocm8wJ8JZluR6GOEkww4Hv5RIGicQBMtoAE1DsGaGg1vV697lo3g/RyJuFXUd2K0z6sW0ElI87dSHRo=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=CmNQd5ADBTd/7LjiB4PidV8uPJFFxjad4gUIuxHCTtumBhnZt24paTwBnwLM589QvTk+Wo3923kn7OcwuoVuC4qsBa+GUd7wfO4jxNWp42gW0uEiT6TuQixyDbS0ciWoEYbTPOvZm8qAbhc64HhTqYVJ1RrpBVrQbP5cY7yaguA=
Received: by 10.114.171.1 with SMTP id t1mr3808150wae.1181972923298;
        Fri, 15 Jun 2007 22:48:43 -0700 (PDT)
Received: by 10.114.79.3 with HTTP; Fri, 15 Jun 2007 22:48:43 -0700 (PDT)
Message-ID: <58ce48dc0706152248v1b772e3clf80d077af6c848d5@mail.gmail.com>
Date: Sat, 16 Jun 2007 01:48:43 -0400
From: "Chas Owens" <chas.owens@gmail.com>
To: "Ken Foskey" <foskey@optushome.com.au>
Subject: Re: Iterate through a hashref using XML::Simple (real post)
Cc: beginners@perl.org
In-Reply-To: <1181962060.7119.7.camel@froddo.foskey.org.au>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <1181779885.793692.315010@n15g2000prd.googlegroups.com>
	 <58ce48dc0706140626g600353abya4aa99bb65c7c846@mail.gmail.com>
	 <1181834121.341288.205610@z28g2000prd.googlegroups.com>
	 <58ce48dc0706141117w2400c1b2k9fa3f6c78ce9394d@mail.gmail.com>
	 <1181941712.875936.107620@i38g2000prf.googlegroups.com>
	 <1181962060.7119.7.camel@froddo.foskey.org.au>

On 6/15/07, Ken Foskey <foskey@optushome.com.au> wrote:
> On Fri, 2007-06-15 at 14:08 -0700, gimme_this_gimme_that@yahoo.com
> wrote:
> > Sweet Chas!
> >
> > My two cents is to check out XML::Twig at http://www.xmltwig.org/ .
> >
> > It's easy to get a grip on and well suited to reading attributes as
> > well as elements in elements.
>
> Looks interesting,  would this reasonably handle 70,000 statements
> containing LOTS of details in them?   I need to process this statement
> by statement but it would totally blow memory.
>
> --
> Ken Foskey
> FOSS developer

Yes, so long as you only need to deal with a part of it at a time you
can flush the parts that you are done with from memory.  I have used
XML::Twig to deal with files in the gigabyte range.

from perldoc XML::Twig
       Processing an XML document chunk by chunk

       One of the strengths of XML::Twig is that it let you work with files
       that do not fit in memory (BTW storing an XML document in memory as a
       tree is quite memory-expensive, the expansion factor being often around
       10).

       To do this you can define handlers, that will be called once a specific
       element has been completely parsed. In these handlers you can access
       the element and process it as you see fit, using the navigation and the
       cut-n-paste methods, plus lots of convenient ones like "prefix ".  Once
       the element is completely processed you can then "flush " it, which
       will output it and free the memory. You can also "purge " it if you
       don't need to output it (if you are just extracting some data from the
       document for example). The handler will be called again once the next
       relevant element has been parsed.

         my $t= XML::Twig->new( twig_handlers =>
                                 { section => \&section,
                                   para   => sub { $_->set_tag( 'p');
                                 },
                              );
         $t->parsefile( 'doc.xml');
         $t->flush; # don't forget to flush one last time in the end or anything
                    # after the last </section> tag will not be output

         # the handler is called once a section is completely parsed, ie when
         # the end tag for section is found, it receives the twig itself and
         # the element (including all its sub-elements) as arguments
         sub section
           { my( $t, $section)= @_;      # arguments for all twig_handlers
             $section->set_tag( 'div');  # change the tag name.4, my favourite m
ethod...
             # let's use the attribute nb as a prefix to the title
             my $title= $section->first_child( 'title'); # find the title
             my $nb= $title->{'att'}->{'nb'}; # get the attribute
             $title->prefix( "$nb - ");  # easy isn't it?
             $section->flush;            # outputs the section and frees memory
           }

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


