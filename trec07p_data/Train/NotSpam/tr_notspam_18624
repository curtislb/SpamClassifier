From beginners-return-92333-ktwarwic=speedy.uwaterloo.ca@perl.org  Tue Jun 12 19:23:26 2007
Return-Path: <beginners-return-92333-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5CNNPL9000626
	for <ktwarwic@flax9.uwaterloo.ca>; Tue, 12 Jun 2007 19:23:25 -0400
Received: (qmail 28665 invoked by uid 514); 12 Jun 2007 23:23:20 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 28656 invoked from network); 12 Jun 2007 23:23:19 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 12 Jun 2007 23:23:19 -0000
Received: (qmail 31517 invoked by uid 225); 12 Jun 2007 23:23:19 -0000
Delivered-To: beginners@perl.org
Received: (qmail 31506 invoked by alias); 12 Jun 2007 23:23:19 -0000
X-Spam-Status: No, hits=-1.1 required=8.0
	tests=BAYES_05,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of chas.owens@gmail.com designates 64.233.162.237 as permitted sender)
Received: from nz-out-0506.google.com (HELO nz-out-0506.google.com) (64.233.162.237)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Tue, 12 Jun 2007 16:23:11 -0700
Received: by nz-out-0506.google.com with SMTP id x7so18448nzc
        for <beginners@perl.org>; Tue, 12 Jun 2007 16:23:05 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=T5uj/W7lp8BQwgvncg+ou8KFFJNA25+UlDch6322lFjzm4K12NictMACBEpei04Wv/YUky2eU87GnPtlSdDPGcF8Wz8EzWU8AucIrOMIv12CtgbTUYfSgu0pM39I3G1t6lW1JIBkOETiE0TnGOtNrEjI9ORjB83S5fr0PylO6uM=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=T4wTFYuO0g6CQn8vFk5nWvS3wb/FzOFtHpDtLOAUYTVmYy0hT8m2WW5i1WayIgcXA+b2ued43GS33+gqXP1cAHVIuVzSgzfgeJJv10T3ZEBYIy4X+JE3tp6Ye2xY9y8gQv1VHxOw3UF4kTGv6EIIGeAHO+4Z9bhsoeoU2pFXYaI=
Received: by 10.114.175.16 with SMTP id x16mr34146wae.1181690585537;
        Tue, 12 Jun 2007 16:23:05 -0700 (PDT)
Received: by 10.114.79.3 with HTTP; Tue, 12 Jun 2007 16:23:05 -0700 (PDT)
Message-ID: <58ce48dc0706121623u49745f43he5a6f6113a853d7b@mail.gmail.com>
Date: Tue, 12 Jun 2007 19:23:05 -0400
From: "Chas Owens" <chas.owens@gmail.com>
To: "p46921x@hotmail.com" <p46921x@hotmail.com>
Subject: Re: Help creating a random string in Perl
Cc: beginners@perl.org
In-Reply-To: <1181677143.777078.102000@g37g2000prf.googlegroups.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <1181677143.777078.102000@g37g2000prf.googlegroups.com>

On 6/12/07, p46921x@hotmail.com <p46921x@hotmail.com> wrote:
snip
> I can see how to generate a random number between 0 and 6 (meaning I
> can pick one of the 7 characters in my source string) by using "print
> int(rand(6))",  but I don't know where to being on the second and
> third and fourth characters to and check that the random number hasn't
> already been chosen.
snip

What you are describing sounds like it would be best implemented by
1 breaking the the string into individual characters and storing them
in an array
2 shuffling the array
3 joining all but the last element of the array

Breaking a string into its characters in Perl is easy

my $str = "1234567";
my @a  = split //, $str;

Shuffling an array is easy as well.  Let's use Knuth's* shuffle
algorithm.  The idea here is to swap the current cell with some cell
that has not yet been processed.  So, the first cell can be swapped
with any other cell, the second cell can be swapped with any cell
other than the first, the third can swapped with any but the first and
second, and so on.  This will result in a shuffled array where any
permutation is equally likely**.

for my $i (0 .. $#a) {
    my $r = $i + int rand(@a - $i);
    @a[$i, $r] = @a[$r, $i];
}

Now that we have permuted the array we can turn a subset of it back
into a string and print it.

$str = join '', @a[0 .. $#a - 1];
print "$str\n";

And here it is put all together with a loop

#!/usr/bin/perl

use strict;
use warnings;

my $str = "ABCDEFG";
print "$str\n";

while (length($str) > 1) {
        my @a = split //, $str;
        for my $i (0 .. $#a) {
                my $r = $i + int rand(@a - $i);
                @a[$i, $r] = @a[$r, $i];
        }
        $str = join '', @a[0 .. $#a - 1];
        print "$str\n";
}

* also known as the Fisher-Yates shuffle
** given a sufficiently good RNG

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


