From beginners-return-91601-ktwarwic=speedy.uwaterloo.ca@perl.org  Sat May 12 20:00:41 2007
Return-Path: <beginners-return-91601-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4D00dqD021477
	for <ktwarwic@flax9.uwaterloo.ca>; Sat, 12 May 2007 20:00:40 -0400
Received: (qmail 25719 invoked by uid 514); 13 May 2007 00:00:33 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 25710 invoked from network); 13 May 2007 00:00:33 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 13 May 2007 00:00:33 -0000
Received: (qmail 19769 invoked by uid 225); 13 May 2007 00:00:33 -0000
Delivered-To: beginners@perl.org
Received: (qmail 19765 invoked by alias); 13 May 2007 00:00:32 -0000
X-Spam-Status: No, hits=0.7 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: local policy)
Received: from smtp.fast4.net (HELO smtp.njpservices.co.uk) (84.45.106.4)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Sat, 12 May 2007 17:00:25 -0700
Received: from [85.92.161.207] (85-92-161-207.eurisp.net [85.92.161.207] (may be forged))
	by smtp.njpservices.co.uk (8.10.2/8.10.2) with ESMTP id l4D00Aa31480;
	Sun, 13 May 2007 01:00:10 +0100
Message-ID: <46465514.5040202@350.com>
Date: Sun, 13 May 2007 01:00:20 +0100
From: Rob Dixon <rob.dixon@350.com>
User-Agent: Thunderbird 1.5.0.10 (Windows/20070221)
MIME-Version: 1.0
To: beginners@perl.org
CC: Steve Bertrand <iaccounts@ibctech.ca>
Subject: Re: $1 $2 var confusion
References: <4645CD59.3020508@ibctech.ca> <4645D9A7.1050905@earthlink.net> <46460B04.4040100@telus.net> <46464ACF.6090001@ibctech.ca>
In-Reply-To: <46464ACF.6090001@ibctech.ca>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit

Steve Bertrand wrote:
> John W. Krahn wrote:
>> Mumia W. wrote:
>>> That happens because the match variables ($1, $2, ...) are only changed
>>> when a regular expression matches; otherwise, they are left alone.
>>>
>>> In the first case, "$2 !~ /domain\.com/" succeeds but does not capture
>>> anything, so the numbered match variables are unset.
>>>
>>> Your situation reinforces the rule that you should always test if the
>>> match succeeded before you attempt to use the match variables:
>>>
>>>     my $email = 'steveb@domain.com';
>>>     my @f = (undef, $email =~ /(.*)\@(.*)/);
>>
>> Why did you put undef in there?  It serves no useful purpose other than making
>> the code harder to understand for beginners.
> 
> Wow...powerful statement.
> 
> To be honest, I got what I needed before I really payed attention to the
> above part as per Rob and Tom's replies, but after re-reading, I agree.
> 
> In the above, do I assume correctly (without time to test for myself)
> that 'undef' in this case undefines any instance of $1? (or $N for that
> matter)?

No, it has no effect on $1. I thought it would cause confusion! The statement simply
assigns a list to @f. The first element of the list is undef, and the rest is the
result of applying the regex to $email, so it's the same as

  my @f = (undef);
  push @f, $email =~ /(.*)\@(.*)/;

and simply offsets the captured results by one. As I said, I can see no reason to have
written it this way unless Mumia wanted $f[1] to correspond to $1 and $f[2] to $2.

>>       my @f = $email =~ /(.*)\@(.*)/;
>>
>>
>>>     (@f > 1) && ($f[2] =~ /domain\.com/ ?
>>>         print "$f[1]\n" : print "var 2 is bad\n" );
>>>
>>> The test "@f > 1" is my way of testing if the match succeeded.
>> The rvalue conditional operator should use the returned value:
> 
> Honestly, I hate to say I'm a beginner, but relative to others here I
> won't beg otherwise. Without having to spend time reading the ?: method
> (which I never use as of yet anyway), here is how I would do it now, so
> I would understand it, and so would my staff who are not programmers
> whatsoever, and who may have to understand it lest I get hit by a bus. I
> include comments as I would if a non programmer would have to read it:
> 
> # Get the username portion, and the domain portion that we
> # must verify from the input the user types in
> 
> my ($username, $domain) = split (/\@/, $email);
> {... do verification}

You probably want

  my ($username, $domain) = split /\@/, $email, 2;

otherwise something like 'steve@domain.com@nonsense' would pass your test.

> Now that I've started a controversy, can I ask if the following method
> is correct and accepted practice if I only care about the username portion?
> 
> I use the following example often instead of split()ing, and then
> breaking apart an array. Note this is a simple example, it's more handy
> for me in circumstances where I may be fed an array with numerous slices:
> 
> my $username = (split (/\@/, $email))[0];

Here, I would prefer

  my ($user) = $email =~ /([^@]+)/;

(find all the characters from the beginning of the string that aren't at signs)
as split() here implicitly generates a list of substrings by splitting $email
at the at signs, and you then throw all but one of those substrings away. In
practice the overhead of doing this is negligible, but to my mind it's a little
ugly and not descriptive of the problem. It would be going a little far to say
that it's unacceptable practice though.

> Again, I have to say that the speed of the feedback was great today :)
> Rob, I appreciate your input, and Tom, I don't know if you helped
> Randall write the books, but it's especially exciting to see yourself
> and the author of several books I own and have read active on the list.

You're more than welcome :)

Rob

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


