From perl6-all-return-81158-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon May  7 12:29:00 2007
Return-Path: <perl6-all-return-81158-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l47GSxqD000939
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 7 May 2007 12:29:00 -0400
Received: (qmail 9310 invoked by uid 514); 7 May 2007 16:28:57 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 9305 invoked from network); 7 May 2007 16:28:57 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
Subject: [perl #41908] [PATCH] 5 feature enhancement of src/library.c (extension guessing), and solutions for the install target problems 
From: "Paul Cochrane via RT" <parrotbug-followup@parrotcode.org>
Reply-To: parrotbug-followup@parrotcode.org
In-Reply-To: <rt-3.6.HEAD-30557-1177960940-1925.41908-15-0@perl.org>
References: <RT-Ticket-41908@perl.org> <20070321034327.2ac9e486@reforged> <rt-3.6.HEAD-30201-1174473850-80.41908-15-0@perl.org> <rt-3.6.HEAD-30557-1177960940-1925.41908-15-0@perl.org>
Message-ID: <rt-3.6.HEAD-29974-1178555279-457.41908-15-0@perl.org>
X-RT-Loop-Prevention: perl
RT-Ticket: perl #41908
Managed-by: RT 3.6.HEAD (http://www.bestpractical.com/rt/)
RT-Originator: paultcochrane@gmail.com
Cc: perl6-internals@perl.org
To: "OtherRecipients of perl Ticket #41908": ;
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit
X-RT-Original-Encoding: utf-8
Date: Mon, 07 May 2007 09:28:02 -0700
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS

On Mon Apr 30 12:22:21 2007, mdiep wrote:
> On Wed Mar 21 03:44:10 2007, codermattie wrote:
> > Hello,
> >
> > now that 0.4.10 has released I would like to merge rt# 41908 which
> > introduces extension guessing.
> > The current implementation does not affect the behavior of existing
> > code. No new test-suite
> > regressions are introduced.
> >
> > the .load_byte_code op will now accept "foo" trying
> > ".pbc",".pasm",".pir" in order. compatibility
> > with existing code is preserved by trying "foo" as-is first so
> > "foo.pir" will still be preferred
> > over a compiled version in the search paths.
> >
> > I have considered that this functionality may need to be presented
> in
> > a perl5'ish way. If it
> > is possible for the argument to .load_bytecode to be unquoted then
> >
> > .load_bytecode "foo.pir" # provide the current behavior.
> > .load_bytecode foo       # provide the extension guessing similar to
> > perl5 use.
> >
> > As mentioned in the proposals in the RT ticket,
> > PARROT_LOAD_PREFER=compile|source could
> > be used to control whether source or compiled objects are preferred
> in
> > loading. This
> > allows the development cycle to retain it's scripting interactivity
> > with a single
> > environment variable set, and efficient default (installed) behavior
> > of preferring a
> > compiled object. Note that the latter is how perl5 currently
> behaves.
> >
> > Future:
> >
> > It may make since for byte-code and shared object loading to be
> > unified in a new
> > interface. An opcode such as .load_module could intelligently load
> > shared objects, byte-code, and source. This could be the path to
> > implementing the
> > API cleanup proposed at the end of rt #41908 , where locating the
> > file, and
> > detecting the type of file is cleanly separated; getting dynext.c
> out
> > of library.c's
> > internals.
> >
> > This does not necessarily have to replace the existing functions.
> 
> I'd like to get this ticket (#41908) resolved. The patch was applied,
> so everything is good
> there, but your reply here has left me wondering. If there is more to
> be done, could you open
> another ticket?
> 
> It's better to split off new requests/bugs into new tickets rather
> than keep them in the patch
> ticket because it cuts down the amount of reading that needs to be
> done when sorting
> through tickets. The patch itself doesn't seem that relevant that it
> couldn't be a separate
> ticket.

The discussion of the solution to the install target problem has been 
split out into a separate ticket:  RT#42901

Closing the current ticket.

