From perl6-all-return-81777-ktwarwic=speedy.uwaterloo.ca@perl.org  Sun Jun  3 15:20:43 2007
Return-Path: <perl6-all-return-81777-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l53JKhhB018840
	for <ktwarwic@flax9.uwaterloo.ca>; Sun, 3 Jun 2007 15:20:43 -0400
Received: (qmail 21648 invoked by uid 514); 3 Jun 2007 19:20:36 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 21642 invoked from network); 3 Jun 2007 19:20:35 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-0.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,KARMA_CONNECT_NEGATIVE,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: domain of dataweaver@gmail.com designates 64.233.162.227 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=a7cCGAv0ruHlj+KNLMGnKO1K+jcYqlOXeeHXsyePTOKIyv0bZy0oRa6ZioK7TPaPpaQPx4mILGyWs4LraApKL2sAiWOVGlJm6GspGCSNMvn+6ub9EFt4xtOiWrsIGNK6rX02blGCUBgwzxLckpDdwDnnfYtlKePJal60uN8OTnc=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=heR3OWixHro/YEcgJCHndDuifSchd/PNJEf+if/+CMAqZXcPPFr86pm1q6C74kT/aDM0ZGfpXdTVlpqWyMl0fuGbuakRJJJ2MXuqFC2IWteELAuwCoD2sYWMzQtmL3kvIA9EpKH5Dodo3+XdwpWpinsgtuohTgST0c4GPqcYYJU=
Message-ID: <ef30550b0706031219h6f924e2doca71cbbed86a2422@mail.gmail.com>
Date: Sun, 3 Jun 2007 12:19:23 -0700
From: "Jonathan Lang" <dataweaver@gmail.com>
To: "Chas Owens" <chas.owens@gmail.com>
Subject: Re: 'x' vs. 'xx'
Cc: p6l <perl6-language@perl.org>
In-Reply-To: <58ce48dc0706031047x55a83bc8n8fe69a971c509f91@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <ef30550b0706021517m281093c3qcf1e12d99debc8b7@mail.gmail.com>
	 <58ce48dc0706021820n444ff9a4v44aeab16f25ee62b@mail.gmail.com>
	 <ef30550b0706022108p3f3d448dv4f66a9f1b8198655@mail.gmail.com>
	 <58ce48dc0706030219x1c961624r41500cd12c01d39@mail.gmail.com>
	 <ef30550b0706030318m245a3c46j2cb02894d7cde444@mail.gmail.com>
	 <58ce48dc0706030402o52609a47y38ff1096679d04d@mail.gmail.com>
	 <ef30550b0706030927o63e8ee32ub4793b7ace08559a@mail.gmail.com>
	 <58ce48dc0706031047x55a83bc8n8fe69a971c509f91@mail.gmail.com>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS

Chas Owens wrote:
> The current Perl 5 behavior is
>
> cowens@amans:~$ perl -le 'my @a = ("-" x 5, "foo", "-" x 5); print "@a"'
> ----- foo -----
> cowens@amans:~$ perl -le 'my @a = (("-") x 5, "foo", ("-") x 5); print "@a"'
> - - - - - foo - - - - -
>
> I am against anything other than that for x or xx without a really
> compelling reason.

...with x always corresponding to the first and xx always
corresponding to the second, right?  In essence, x always produces a
string, while xx always produces a list.

> Jonathan Lang wrote:
> > Personally, I would tend to favor the notion that infix:<x> always
> > produces a single string.  With this in mind, I'm now leaning toward
> > "~cat($a xx $n)" as the more verbose equivalent of "$a x $n".  You
> > always produce a single string, and you do so lazily (according to the
> > way that 'cat' works in item context).
>
> I assume it is a bug in Pugs implementation of cat, but
> pugs> ~cat('a' xx 5)
> "a a a a a"

Yes, that would be a bug - probably closely tied to the fact that pugs
doesn't implement cat properly in item context.  IIRC, the original
inspiration for the 'cat' function was 'concatenate' - thus, in item
context at least, one would expect 'cat' to resemble '[~]'.

> I also am having a hard time figuring out why I would want an infinite
> string.  My first thought was something like
>
> my $ten_zeros = substr(cat(0 xx *), 0, 10);
>
> but that is more clearly written as
>
> my $ten_zeros = 0 x 10;

I'll punt the practical usage to someone else, other than to suggest
that the goal of using an asterisk for the number of repetitions isn't
so much to produce an "infinite string" as a "string of arbitrary
length".  Remember, '*' ne 'Inf'; '*' eq 'Whatever'.  A practical use
for '~cat($string xx *)' would most likely be one that relies on the
arbitrariness of the number of repetitions.  Hmm... how about
something like:

  if $a gt ~cat('-' xx *) { ... }

or, if 'x' is defined along the lines that I'm considering:

  if $a gt '-' x * { ... }

Bear in mind that you're not limited to single-character repetitions:

  if $a lt '142857' x * { ... }

In short, the string will get replicated exactly as many times as is
needed to resolve the comparison.

-- 
Jonathan "Dataweaver" Lang

