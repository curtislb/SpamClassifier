From perl6-all-return-81698-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri Jun  1 00:18:22 2007
Return-Path: <perl6-all-return-81698-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l514ILhB004674
	for <ktwarwic@flax9.uwaterloo.ca>; Fri, 1 Jun 2007 00:18:22 -0400
Received: (qmail 20348 invoked by uid 514); 1 Jun 2007 04:18:15 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 20343 invoked from network); 1 Jun 2007 04:18:15 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=2.0 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,KARMA_CONNECT_NEGATIVE,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: neutral (x1.develooper.com: local policy)
X-ORBL: [71.139.8.243]
Date: Thu, 31 May 2007 21:17:17 -0700
From: Larry Wall <larry@wall.org>
To: perl6-language@perl.org
Subject: Re: propose renaming Hash to Dict
Message-ID: <20070601041717.GA7934@wall.org>
Mail-Followup-To: perl6-language@perl.org
References: <p06240801c28510be620c@[192.168.1.101]>
Mime-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: <p06240801c28510be620c@[192.168.1.101]>
User-Agent: Mutt/1.4.2.2i
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.7 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL

On Thu, May 31, 2007 at 05:10:57PM -0700, Darren Duncan wrote:
: I decided to bring out this Hash->Dict topic in a different thread 
: from the thread on Synopsis r14407 about Object->Universal since I 
: consider them separate though tangential matters that should be 
: argued on their individual merits.
: 
: In the interest of that Perl data types are better off being named 
: primarily after their meaning rather than their implementation, 
: probably the current worst offender is Hash.

Nope.  Hash is mostly about meaning, and very little about implementation.
Please don't assume that I name things according to Standard Names in
Computer Science.  I name things in English.  Hash is just something
that is disordered, which describes the associative array interface
rather nicely, distinguishing it from the ordered Array interface.
The fact that it *might* be implemented using a hash algorithm is
merely a nice association with some mnemonic value for CSish folks.

Likewise, if I say Object I'm referring not to a CS object so much as
an English object, which is just something that is fairly discrete
and can be handled and treated as a single thing, even if it happens
to contain multiple things.  About the only nod to CS here is that
you can call the .HOW method on any Object.  Anything beyond that
is the fault of the metamodel.

In general I'm much more interested in the natural linguistic feel
of Perl than in matching up with any particular standard CS terms.
That's why you have "given" and "when", not "switch" and "case".
That's why you say "next" and "last", not "continue" and "break".
That's why we have "state" rather than "static", "my" rather than
"var" or "decl", "contend" rather than "atomic", "maybe" rather than
"orElse", "has" rather than "attr", "role" rather than "interface",
and so on.

Of course, it's possible to pick words that have too much overloading
in the CS literature, but I don't think either Hash or Object really
fall into that category, in the case of Hash because hash algorithms
are a fairly minor thing, and in the case of Object because people are
already used to all different kinds of Object systems, some class-based,
some prototype-based, so generalizing to a kind of object that gives
you both is not really a problem.

And as I said before, part of the reason for using Object is political,
because it means we're Really Doing Real OOâ„¢.

And maybe part of the reason for *not* using Universal is also
political, insofar as Perl 5's UNIVERSAL has been sorely abused in
various ways, and I don't want people to have that mental association.
(Kinda like the fact that Captures resemble anonymous typeglobs but
we're *not* going to call them that...)

Larry

