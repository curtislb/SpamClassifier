From samba-technical-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org  Thu Jun 21 18:32:39 2007
Return-Path: <samba-technical-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org>
Received: from lists.samba.org (mail.samba.org [66.70.73.150])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l5LMWcL9030301
	for <ktwarwic@speedy.uwaterloo.ca>; Thu, 21 Jun 2007 18:32:38 -0400
Received: from dp.samba.org (localhost [127.0.0.1])
	by lists.samba.org (Postfix) with ESMTP id 72B01163958
	for <ktwarwic@speedy.uwaterloo.ca>; Thu, 21 Jun 2007 22:32:36 +0000 (GMT)
X-Spam-Checker-Version: SpamAssassin 3.1.7 (2006-10-05) on dp.samba.org
X-Spam-Level: 
X-Spam-Status: No, score=-1.5 required=3.8 tests=AWL,BAYES_00,
	UNPARSEABLE_RELAY autolearn=ham version=3.1.7
X-Original-To: samba-technical@lists.samba.org
Delivered-To: samba-technical@lists.samba.org
Received: from mail.SerNet.de (mail.SerNet.DE [193.175.80.2])
	by lists.samba.org (Postfix) with ESMTP id 4F3D1162AD1
	for <samba-technical@lists.samba.org>;
	Thu, 21 Jun 2007 22:28:44 +0000 (GMT)
Received: from intern.SerNet.DE by mail.SerNet.DE with esmtp (Exim 4.51 #1)
	for samba-technical@lists.samba.org
	id 1I1V8t-0001LN-FS; Fri, 22 Jun 2007 00:28:43 +0200
Received: by intern.SerNet.DE
	id 1I1V8s-0002ps-UD; Fri, 22 Jun 2007 00:28:43 +0200
Received: by intern.SerNet.DE
	id 1I1V8s-0002po-M1; Fri, 22 Jun 2007 00:28:42 +0200
Date: Fri, 22 Jun 2007 00:28:42 +0200
From: Michael Adam <ma@sernet.de>
To: samba-technical@lists.samba.org
References: <20070621221842.AE334162AD2@lists.samba.org>
Mime-Version: 1.0
Content-Type: multipart/mixed; boundary="k+w/mQv8wyuph6w0"
Content-Disposition: inline
In-Reply-To: <20070621221842.AE334162AD2@lists.samba.org>
User-Agent: Mutt/1.5.9i
Message-Id: <E1I1V8s-0002ps-UD@intern.SerNet.DE>
Organization: SerNet GmbH, Goettingen, Germany
Subject: [PATCH] extended RPC-WINREG test [Re: svn commit: samba r23578]
X-BeenThere: samba-technical@lists.samba.org
X-Mailman-Version: 2.1.5
Precedence: list
List-Id: "Discussions on Samba internals. For general questions please
	subscribe to the list samba@samba.org"
	<samba-technical.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/listinfo/samba-technical>, 
	<mailto:samba-technical-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/archive/samba-technical>
List-Post: <mailto:samba-technical@lists.samba.org>
List-Help: <mailto:samba-technical-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-technical>,
	<mailto:samba-technical-request@lists.samba.org?subject=subscribe>
Sender: samba-technical-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Errors-To: samba-technical-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org


--k+w/mQv8wyuph6w0
Content-Type: text/plain; charset=iso-8859-1
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

Hi,=20

I have changed samba3 behaviour of reg_deletekey to behave like
windows in that ACCESS_DENIED is returned when trying to delete
a key that has subkeys.=20

I have also extended s4:torture/rpc/winreg.c to test to check
for this behaviour. Attached find the patch for review.

Furthermore I found the following problems with the winreg test:

* it runs ok agains w2k3, but "smbtorture test" keys don't
  get deleted at the end.
* it fails against w2k (panic)
* it fails to create keys for s3, has lots of NT_STATUS_NET_WRITE_FAULT
  and eventually ends with "ERROR IN TEST WINREG! - Unknown error/failure"

I did not debug this much further due to lack of time mostly.

(I called "smbtorture -Uuser%pass ncacn_np:ip-address RPC-WINREG")

Cheers, Michael

On Do, Jun 21, 2007 at 10:18:42 +0000, obnox@samba.org wrote:
> Author: obnox
> Date: 2007-06-21 22:18:42 +0000 (Thu, 21 Jun 2007)
> New Revision: 23578
>=20
> WebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=3Drev&root=3Dsam=
ba&rev=3D23578
>=20
> Log:
> When calling DeleteKey for a key that has subkey(s), Windows
> returns WERR_ACCESS_DENIED. This adapts reg_deletekey to behave=20
> the same way.=20
>=20
> Michael
>=20
>=20
> Modified:
>    branches/SAMBA_3_0/source/registry/reg_api.c
>    branches/SAMBA_3_0_26/source/registry/reg_api.c
>=20
>=20
> Changeset:
> Modified: branches/SAMBA_3_0/source/registry/reg_api.c
> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
> --- branches/SAMBA_3_0/source/registry/reg_api.c	2007-06-21 22:10:41 UTC =
(rev 23577)
> +++ branches/SAMBA_3_0/source/registry/reg_api.c	2007-06-21 22:18:42 UTC =
(rev 23578)
> @@ -386,6 +386,7 @@
>  	TALLOC_CTX *mem_ctx;
>  	char *name, *end;
>  	int num_subkeys;
> +	struct registry_key *tmp_key;
> =20
>  	if (!(mem_ctx =3D talloc_init("reg_createkey"))) return WERR_NOMEM;
> =20
> @@ -394,18 +395,30 @@
>  		goto error;
>  	}
> =20
> +	/* check if the key has subkeys */
> +	err =3D reg_openkey(mem_ctx, parent, name, REG_KEY_READ, &tmp_key);
> +	if (!W_ERROR_IS_OK(err)) {
> +		goto error;
> +	}
> +	if (!W_ERROR_IS_OK(err =3D fill_subkey_cache(tmp_key))) {
> +		goto error;
> +	}
> +	if (tmp_key->subkeys->num_subkeys > 0) {
> +		err =3D WERR_ACCESS_DENIED;
> +		goto error;
> +	}
> +
> +	/* no subkeys - proceed with delete */
>  	if ((end =3D strrchr(name, '\\')) !=3D NULL) {
> -		struct registry_key *tmp;
> -
>  		*end =3D '\0';
> =20
>  		err =3D reg_openkey(mem_ctx, parent, name,
> -				  SEC_RIGHTS_CREATE_SUBKEY, &tmp);
> +				  SEC_RIGHTS_CREATE_SUBKEY, &tmp_key);
>  		if (!W_ERROR_IS_OK(err)) {
>  			goto error;
>  		}
> =20
> -		parent =3D tmp;
> +		parent =3D tmp_key;
>  		name =3D end+1;
>  	}
> =20
>=20
> Modified: branches/SAMBA_3_0_26/source/registry/reg_api.c
> =3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
> --- branches/SAMBA_3_0_26/source/registry/reg_api.c	2007-06-21 22:10:41 U=
TC (rev 23577)
> +++ branches/SAMBA_3_0_26/source/registry/reg_api.c	2007-06-21 22:18:42 U=
TC (rev 23578)
> @@ -386,6 +386,7 @@
>  	TALLOC_CTX *mem_ctx;
>  	char *name, *end;
>  	int num_subkeys;
> +	struct registry_key *tmp_key;
> =20
>  	if (!(mem_ctx =3D talloc_init("reg_createkey"))) return WERR_NOMEM;
> =20
> @@ -394,18 +395,30 @@
>  		goto error;
>  	}
> =20
> +	/* check if the key has subkeys */
> +	err =3D reg_openkey(mem_ctx, parent, name, REG_KEY_READ, &tmp_key);
> +	if (!W_ERROR_IS_OK(err)) {
> +		goto error;
> +	}
> +	if (!W_ERROR_IS_OK(err =3D fill_subkey_cache(tmp_key))) {
> +		goto error;
> +	}
> +	if (tmp_key->subkeys->num_subkeys > 0) {
> +		err =3D WERR_ACCESS_DENIED;
> +		goto error;
> +	}
> +
> +	/* no subkeys - proceed with delete */
>  	if ((end =3D strrchr(name, '\\')) !=3D NULL) {
> -		struct registry_key *tmp;
> -
>  		*end =3D '\0';
> =20
>  		err =3D reg_openkey(mem_ctx, parent, name,
> -				  SEC_RIGHTS_CREATE_SUBKEY, &tmp);
> +				  SEC_RIGHTS_CREATE_SUBKEY, &tmp_key);
>  		if (!W_ERROR_IS_OK(err)) {
>  			goto error;
>  		}
> =20
> -		parent =3D tmp;
> +		parent =3D tmp_key;
>  		name =3D end+1;
>  	}
> =20
>=20

--=20

i.A. Michael Adam

--=20
Michael Adam <ma@sernet.de>
SerNet GmbH, Bahnhofsallee 1b, 37081 G=F6ttingen
phone: +49-551-370000-0, fax: +49-551-370000-9
AG G=F6ttingen, HRB 2816, GF: Dr. Johannes Loxen
http://www.SerNet.DE, mailto: Info @ SerNet.DE

--k+w/mQv8wyuph6w0
Content-Type: text/x-patch; charset=us-ascii
Content-Disposition: attachment; filename=diff

Index: torture/rpc/winreg.c
===================================================================
--- torture/rpc/winreg.c	(revision 23561)
+++ torture/rpc/winreg.c	(working copy)
@@ -30,6 +30,8 @@
 #define TEST_KEY_BASE "smbtorture test"
 #define TEST_KEY1 TEST_KEY_BASE "\\spottyfoot"
 #define TEST_KEY2 TEST_KEY_BASE "\\with a SD (#1)"
+#define TEST_KEY3 TEST_KEY_BASE "\\with a subkey"
+#define TEST_SUBKEY TEST_KEY3 "\\subkey"
 
 static void init_initshutdown_String(TALLOC_CTX *mem_ctx, struct initshutdown_String *name, const char *s)
 {
@@ -369,6 +371,35 @@
 	return true;
 }
 
+/* DeleteKey on a key with subkey(s) should
+ * return WERR_ACCESS_DENIED. */
+static bool test_DeleteKeyWithSubkey(struct dcerpc_pipe *p, 
+				     TALLOC_CTX* mem_ctx,
+				     struct policy_handle *handle, const char *key)
+{
+	NTSTATUS status;
+	struct winreg_DeleteKey r;
+
+	printf("\ntesting DeleteKeyWithSubkey\n");
+
+	r.in.handle = handle;
+	init_winreg_String(&r.in.key, key);
+
+	status = dcerpc_winreg_DeleteKey(p, mem_ctx, &r);
+
+	if (!NT_STATUS_IS_OK(status)) {
+		printf("DeleteKeyWithSubkey failed  - %s\n", nt_errstr(status));
+		return false;
+	}
+
+	if (!W_ERROR_EQUAL(r.out.result, WERR_ACCESS_DENIED)) {
+		printf("DeleteKeyWithSubkey failed - %s\n", win_errstr(r.out.result));
+		return false;
+	}
+
+	return true;
+}
+
 static bool test_QueryInfoKey(struct dcerpc_pipe *p, TALLOC_CTX *mem_ctx,
 			      struct policy_handle *handle, char *class)
 {
@@ -710,6 +741,7 @@
 {
 	struct policy_handle handle, newhandle;
 	bool ret = true, created = false, created2 = false, deleted = false;
+	bool created3 = false, created_subkey = false;
 	struct winreg_OpenHKLM r;
 	NTSTATUS status;
 
@@ -726,6 +758,8 @@
 
 	test_Cleanup(p, mem_ctx, &handle, TEST_KEY1);
 	test_Cleanup(p, mem_ctx, &handle, TEST_KEY2);
+	test_Cleanup(p, mem_ctx, &handle, TEST_SUBKEY);
+	test_Cleanup(p, mem_ctx, &handle, TEST_KEY3);
 	test_Cleanup(p, mem_ctx, &handle, TEST_KEY_BASE);
 
 	if (!test_CreateKey(p, mem_ctx, &handle, TEST_KEY1, NULL)) {
@@ -787,6 +821,38 @@
 		ret = false;
 	}
 
+	if (created && test_CreateKey(p, mem_ctx, &handle, TEST_KEY3, NULL)) {
+		created3 = true;
+	}
+
+	if (created3 && 
+	    test_CreateKey(p, mem_ctx, &handle, TEST_SUBKEY, NULL)) 
+	{
+		created_subkey = true;
+	}
+
+	if (created_subkey && 
+	    !test_DeleteKeyWithSubkey(p, mem_ctx, &handle, TEST_KEY3)) 
+	{
+		printf("DeleteKeyWithSubkey failed "
+		       "(DeleteKey didn't return ACCESS_DENIED)\n");
+		ret = false;
+	}
+
+	if (created_subkey && 
+	    !test_DeleteKey(p, mem_ctx, &handle, TEST_SUBKEY))
+	{
+		printf("DeleteKey failed\n");
+		ret = false;
+	}
+
+	if (created3 &&
+	    !test_DeleteKey(p, mem_ctx, &handle, TEST_KEY3))
+	{
+		printf("DeleteKey failed\n");
+		ret = false;
+	}
+
 	/* The HKCR hive has a very large fanout */
 
 	if (open_fn == (void *)dcerpc_winreg_OpenHKCR) {

--k+w/mQv8wyuph6w0--

