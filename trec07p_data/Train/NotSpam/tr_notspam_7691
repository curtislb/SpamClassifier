From beginners-return-91350-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri May  4 14:47:02 2007
Return-Path: <beginners-return-91350-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l44Il0qD018802
	for <ktwarwic@flax9.uwaterloo.ca>; Fri, 4 May 2007 14:47:01 -0400
Received: (qmail 22202 invoked by uid 514); 4 May 2007 18:46:54 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 22185 invoked from network); 4 May 2007 18:46:54 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 4 May 2007 18:46:54 -0000
Received: (qmail 10080 invoked by uid 225); 4 May 2007 18:46:54 -0000
Delivered-To: beginners@perl.org
Received: (qmail 10075 invoked by alias); 4 May 2007 18:46:53 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of tom.phoenix@gmail.com designates 66.249.82.235 as permitted sender)
Received: from wx-out-0506.google.com (HELO wx-out-0506.google.com) (66.249.82.235)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Fri, 04 May 2007 11:46:46 -0700
Received: by wx-out-0506.google.com with SMTP id t16so866060wxc
        for <beginners@perl.org>; Fri, 04 May 2007 11:46:41 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:sender:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=QDJaWtFi2BfMav+9Lh0LOZjQw3Ts0Cx9pOwZJWvASooUIXuR58gV56Vf6+Vm4TK+OdsLmaKOJwGoV6Aoz7bLTLTzacF8SUz5uISF0gwIz3VY1POhM5okl26ZIcJuvRzAbEfqZJqhdKjqepkfb5BiH16nZ/3lFhGUefLByuJu7gc=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:sender:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=nkYaY84DAV6MSu/jg0Hkb3FojhTYiGgP09pkPwf3JBMChYZOoqHzGZI/6u6rsq+JIjLXfyE2/YpihXbQPHTn3ZN+V2/ccuh4sWaCydLMcL00meadbEYZ0T1p2EhHopLcybAWIcne+VtpmsH0z9u3EdojcOAhVpfD/Et1mUpwfSE=
Received: by 10.90.27.13 with SMTP id a13mr3705635aga.1178304401203;
        Fri, 04 May 2007 11:46:41 -0700 (PDT)
Received: by 10.90.114.8 with HTTP; Fri, 4 May 2007 11:46:41 -0700 (PDT)
Message-ID: <31086b240705041146j6c3e6f55q69b3a3966e4f1401@mail.gmail.com>
Date: Fri, 4 May 2007 11:46:41 -0700
From: "Tom Phoenix" <tom@stonehenge.com>
Sender: tom.phoenix@gmail.com
To: "Steve Pittman" <spittma1@jhmi.edu>
Subject: Re: Keeping a process alive..
Cc: beginners@perl.org
In-Reply-To: <463B16F6020000C20000B7F2@cis27.hosts.jhmi.edu>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <4630E72D020000C20000B1FF@cis27.hosts.jhmi.edu>
	 <31086b240704261501p3295dbc8lc14b8e9021d9d148@mail.gmail.com>
	 <463B16F6020000C20000B7F2@cis27.hosts.jhmi.edu>
X-Google-Sender-Auth: 5ff4beaebdcca1ed

On 5/4/07, Steve Pittman <spittma1@jhmi.edu> wrote:

> I would be interested in a reference for PID monitoring for cases where
> we have more that one *identical* spawned process to consider*

Maybe you want something like POE?

    http://search.cpan.org/author/RCAPUTO/POE-0.9989/lib/POE.pm

But here's one idea of how multiple processes could be monitored by a Perl loop:

  while (1) {
    my $did_stuff = 0;  # starts out false
    if (...there are dead procs...) {
      ...reap dead procs...
      $did_stuff++;
    }
    if (...more procs are needed...) {
      ...spawn new procs...
      $did_stuff++;
    }
    redo if $did_stuff;
    sleep 30;  # nothing to do
  }

There are details hidden in the blanks. For one, programs that launch
many processes at once can easily tie up your system. I'd make the
code that tells whether "more procs are needed" check whether some
process is being respawned many times in the last few seconds, and
perhaps consider whether I'd recently forked off several new processes
as part of the decision.

Cheers!

--Tom Phoenix
Stonehenge Perl Training

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


