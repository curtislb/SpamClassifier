From perl6-all-return-80476-ktwarwic=speedy.uwaterloo.ca@perl.org  Tue Apr 10 22:18:37 2007
Return-Path: <perl6-all-return-80476-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3B2IZ0I011579
	for <ktwarwic@speedy.uwaterloo.ca>; Tue, 10 Apr 2007 22:18:36 -0400
Received: (qmail 19418 invoked by uid 514); 11 Apr 2007 02:18:12 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 19413 invoked from network); 11 Apr 2007 02:18:11 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: neutral (x1.develooper.com: 63.251.223.186 is neither permitted nor denied by domain of alek.storm@gmail.com)
Delivered-To: perlmail-parrot-porters@onion.perl.org
Delivered-To: parrot-porters@perl.org
Received-SPF: pass (x1.develooper.com: domain of alek.storm@gmail.com designates 209.85.134.188 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=Dn5IKUhIAO/xpczJNNJ7KSaNyqzVHkfwDZeRVzavjRARxI0Ul383VqPKdRTvc5BTu+7VexnilpGfklbXJ+Wn+CFgW8YStM3dvab9KfWFrQ+KJTkLg9wM1uFKnBUibVfquR0sma2aC1cXSDVnLjg+A58Yc9C24LkU/Qr0hcSMsOA=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=l/ooHbZi8RHBZRdCnxKjp+lrbhkJUGmW/TKDo52TV5PicnHVcHI63mlOs+mvyx0SorKOe1DpYa21ZGVvz4S9rMYiwPP/qeXLlgAwFht1K59XFE0yxNx1d5xjgRooWYnim1Q8R5xwq45MJ44oiVCvRmDkcbaPbtE2FxgSY9OO+aQ=
Message-ID: <189adbd0704101917j758f43afj5fe0d800f684e891@mail.gmail.com>
Date: Wed, 11 Apr 2007 02:17:40 +0000
From: "Alek Storm" <alek.storm@gmail.com>
To: "Bob Rogers" <rogers-perl6@rgrjr.dyndns.org>
Subject: Re: modifying classes after they're instantiated
Cc: "Allison Randal" <allison@perl.org>, p2 <parrot-porters@perl.org>
In-Reply-To: <17948.15469.601953.730369@rgrjr.dyndns.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <461C0EEF.1010107@perl.org>
	 <189adbd0704101702g34d86254t75708dd9035094f2@mail.gmail.com>
	 <17948.15469.601953.730369@rgrjr.dyndns.org>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED
Status: O
Content-Length: 3588
Lines: 74

On 4/11/07, Bob Rogers <rogers-perl6@rgrjr.dyndns.org> wrote:
>    I like this one, but I also have another alternative.  First, make all
>    class-modification code (add_method, remove_attribute, etc) return a
>    PMC*.  Whenever one of these methods is called on a class, the class
>    is cloned . . .
>
> What does "find_class" return after one of these?  If it returns the new
> class, then there is no need for the class-mutating ops to do so, except
> possibly for convenience.

"find_class" returns whatever is currently registered as the class.  A
class-modifying method doesn't change that; it just returns the cloned
class PMC.  If the HLL wants to register the modified version, it can
do so, but I'm not in favor of a separate class registry, and I've
heard it's going away anyway.  In any case, it should be left up to
the HLL what it wants to do with the modified class, since one
approach doesn't work with all languages.

>    classobj = newclass 'Foo'
>    object = classobj.'new'()
>
>    # add_method returns a clone of the original class with "bar" added
>    # C<object> keeps its reference to the original class
>    classobj = classobj.'add_method'('bar', $P3)
>    object2 = classobj.'new'()
>
> Surely you are not suggesting that any random "add_method" should
> require creating a new class?  Did you mean "add_attribute" (or
> whatever)?

Of course add_method's create new classes; the implementation of that
is what we've been talking about.  We want the class to be modified,
but already-instantiated objects keep their reference to the class
they were created with.  Allocating a new class for every add_method,
add_attribute, etc. is a downside when there are several in a row and
all we want is the end result, but I've already proposed a solution to
that: create a shortcut method that takes a list or slurpy of
attributes to add, so it's all done at once.

>    The only downside I can think of is the overhead involved in creating
>    a new clone of the class for every change to it, for example, when
>    many attributes are added at once . . .
>
> This is not necessary; you only need to clone the class after the first
> time it is instantiated.  So you can put an "instantiated_p" flag in the
> class to keep track, and keep mutating the same new class until the next
> instantiation.  The remove_* operations could stay, they would just
> throw errors on instantiated classes.

That's a great idea, and is probably better than my shortcut method
idea; we'll have to see what others think.  But I'm not sure why
remove_* would be any different than add_* - they create a clone of
the class, and remove the attribute.  Instantiated objects of the
class don't notice a thing.

>    But in that case, it might be simpler for HLL code to stick to
> Allison's original alternative 4, i.e. make an explicit clone, mutate it
> as required, and then install it as "the" class returned by find_class.

Not all languages want to clone their classes on modification.  These
languages would use their own class PMCs that don't clone themselves.
If one of their classes is passed to and cloned by a different HLL,
their class system will be screwed up/inconsistent.  I'm not sure how
requiring HLLs to deal with explicit cloning would be simpler than
having it abstracted away.  This system is much more flexible.

> Error recovery would also be easier for explicit cloning; what happens
> if one of the class-mutating methods throws an error?

I'm afraid you lost me.  How would this be different?  Could you
provide some more information?

-- 
Alek Storm

