From perl6-all-return-81458-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu May 17 15:05:52 2007
Return-Path: <perl6-all-return-81458-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4HJ5pqD003493
	for <ktwarwic@flax9.uwaterloo.ca>; Thu, 17 May 2007 15:05:52 -0400
Received: (qmail 10005 invoked by uid 514); 17 May 2007 19:05:44 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 9942 invoked from network); 17 May 2007 19:05:41 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: domain of jerry.gay@gmail.com designates 64.233.184.226 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=O/lGhva7hnln5prpndFZK2fRza5knNGOrgr9JDJwtPyxKyJGiApqYid1a5yNglcrgPjRig11cWIYeTKRjeIscim+qjWB44biaaeoii8aHqciCCJXPdhlENFD/FU8b9zhGDdKwb7bU86jr+t6Tm7FUEQbGI6N2xbAbQ/+qSSouZ4=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=G2zeJ6Xuooomjd53nUbGtoES1DsjmSqO5XBZ+u89w27IifScONZvUW+JXTDlhiiJGEUgT8LuvOAk7Owji8E0eNSxU5KNs85seaABRnCSLia9urGp/PPdYSBBHmGX1FHgUp/Tp2qWQ5Cj3ypql3vgVk1j8NOG5Ny++XZrQBYZK9Q=
Message-ID: <1d9a3f400705171147h5e5d95f7ode7f3b49f89b3b9@mail.gmail.com>
Date: Thu, 17 May 2007 11:47:14 -0700
From: "jerry gay" <jerry.gay@gmail.com>
To: "Mehmet Yavuz Selim Soyturk" <mehmet.yavuz.selim@gmail.com>
Subject: Re: [perl #42974] [BUG] Hungry Alligator Eats Integer; Developer Registers Complaint
Cc: perl6-internals@perl.org
In-Reply-To: <1abd9eb20705171104r2e57edd3kf7685b1f6e3c3026@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <RT-Ticket-42974@perl.org>
	 <1d9a3f400705161526m4693add9y28d08437206049f7@mail.gmail.com>
	 <rt-3.6.HEAD-4015-1179354514-1900.42974-72-0@perl.org>
	 <1abd9eb20705162115x5de8ace2m8ec1cdc05f28dcfe@mail.gmail.com>
	 <7b0e52b40705170833r6ec5b509nc8da608d44bc5cd5@mail.gmail.com>
	 <1abd9eb20705171104r2e57edd3kf7685b1f6e3c3026@mail.gmail.com>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-1.1 required=8.0
	tests=BAYES_05,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS

On 5/17/07, Mehmet Yavuz Selim Soyturk <mehmet.yavuz.selim@gmail.com> wrote:
> On 5/17/07, Klaas-Jan Stol <parrotcode@gmail.com> wrote:
> > Mmmm, is string_compare a wrapper for strcmp() ? Or is it a wrapper that
> > reverses the result? (so return true if they're equal). In /that/ case,
> > !string_compare() would be nicer. (my point being, if string_compare() is
> > part of parrot source code, why not try and make it more sensible/readable).
> > (I understand why the result values are the way they are for strcmp, but i
> > never liked them)
> >
> > kjs
>
> I think that it's analogous to strcmp, but for the STRING* type. I
> looked now at string_funcs.h, there is in fact a string_equal
> function.
>
there's a few locations where i think string compares can be cleaned
up. this is one case, where the '== 0' syntax is a bit ugly. another
is src/pmc/class.pmc (and others), where there's a bunch of
comparisons to a set of constant c strings, which look like:

        else if (string_equal(interp, what, CONST_STRING(interp,
"namespace")) == 0) {

but could probably be shortened to something like:

        else if (string_equals_const_c_string(interp, what, "namespace")) {

if something like C<string_equals_const_c_string> is implemented.


> By the way, that wasn't the only issue. PCCRETURN expands to multiple
> statements, so the curly braces are needed after the if test. Would it
> not be better if PCCRETURN did it itself?
>
i'm working on a patch to modify the PCC docs to note that PCC*
expands to a statement list, so when used inside a selection statement
(if, while, etc) PCC* requires a block. i'm also looking over the
current code to see if there are any other violations of this rule.

however, your suggestion to have the PCC expansions automatically
enclose themselves in blocks is interesting, and merits
investigation--i'll take a look at that, too.
~jerry

