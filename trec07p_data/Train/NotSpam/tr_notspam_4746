From perl6-all-return-80852-ktwarwic=speedy.uwaterloo.ca@perl.org  Tue Apr 24 20:02:33 2007
Return-Path: <perl6-all-return-80852-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3P02X6w020540
	for <ktwarwic@speedy.uwaterloo.ca>; Tue, 24 Apr 2007 20:02:33 -0400
Received: (qmail 6167 invoked by uid 514); 25 Apr 2007 00:02:32 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 6162 invoked from network); 25 Apr 2007 00:02:32 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-1.5 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME,FORGED_RCVD_HELO,NO_REAL_NAME
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
From: larry@cvs.develooper.com
To: perl6-language@perl.org
Subject: [svn:perl6-synopsis] r14379 - doc/trunk/design/syn
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Message-Id: <20070425000218.65A82CB9B8@x12.develooper.com>
Date: Tue, 24 Apr 2007 17:02:18 -0700 (PDT)
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-3.4 required=8.0
	tests=ALL_TRUSTED,BAYES_00,DK_POLICY_SIGNSOME,NO_REAL_NAME
Status: O
Content-Length: 1910
Lines: 59

Author: larry
Date: Tue Apr 24 17:02:17 2007
New Revision: 14379

Modified:
   doc/trunk/design/syn/S13.pod

Log:
Clarification suggested by TheDamian++


Modified: doc/trunk/design/syn/S13.pod
==============================================================================
--- doc/trunk/design/syn/S13.pod	(original)
+++ doc/trunk/design/syn/S13.pod	Tue Apr 24 17:02:17 2007
@@ -12,9 +12,9 @@
 
   Maintainer: Larry Wall <larry@wall.org>
   Date: 2 Nov 2004
-  Last Modified: 17 Feb 2007
+  Last Modified: 24 Apr 2007
   Number: 13
-  Version: 7
+  Version: 8
 
 =head1 Overview
 
@@ -156,11 +156,26 @@
     method @.[ *@@slices ] {...}
     method %.{ *@@slices } {...}
 
-The actual sigil used doesn't matter as long as it's followed by a dot
-and the bracket pair containing the signature.  (Note that the angle
-bracket subscripting form C<< .<a b c> >> automatically translates
-itself into a call to C< .{'a','b','c'} >, so defining methods for
-angles is basically useless.)
+The sigil-dot sequence in these short forms autogenerates the
+corresponding public operators, in exactly the same way that
+the sigil-dot in:
+
+    has $.action;
+    has @.sequence;
+    has %.mapping;
+
+autogenerates public accessor methods.
+
+And because it uses the same method-autogeneration mechanism, the
+specific sigil used to specify a short-form postcircumfix operator
+doesn't actually matter...as long as it's followed by a dot and the
+bracket pair containing the signature. (Though it's probably kinder
+to future readers of your code to stick with the "natural" sigil
+for each type of bracket.)
+
+Note that the angle bracket subscripting form C<< .<a b c> >>
+automatically translates itself into a call to C< .{'a','b','c'} >,
+so defining methods for angles is basically useless.
 
 The expected semantics of C<&.()> is that of a type coercion which may
 or may not create a new object.  So if you say:

