From perl6-all-return-80706-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed Apr 18 17:47:30 2007
Return-Path: <perl6-all-return-80706-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3ILlS0I016416
	for <ktwarwic@speedy.uwaterloo.ca>; Wed, 18 Apr 2007 17:47:28 -0400
Received: (qmail 14954 invoked by uid 514); 18 Apr 2007 21:47:03 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 14949 invoked from network); 18 Apr 2007 21:47:02 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: domain of alek.storm@gmail.com designates 66.249.92.168 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=emTCjCdsO7yki2bziZNbg82hhK8spomAOqFIf9ah+Z4l9TkkECSCI3HzNdvif+6rDmsVKKhsa65yLh/3K/6HHnHDLKi7c4dMUDWQSxzD4596zn/jcxRFJlqSZwyi5L4AnB9f4hfRbUnxikHzaMXuYHPaGDRatsqW7/JMxxZyI6U=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=tCjLVQlJsA5wGVsiXFN8Ld9rw39zNmQaKYmJsuV57jheL7HBanhed3k2RPRrYDczIRldkoKURSvRkPl04669yVglXgWXjuOIH780qNi2YO+avL2HXXl8WXWMzh//3HDhW5/1yeFqutZQM+DAVe54aAY02LhRODQyCc/bvZ0KQb8=
Message-ID: <189adbd0704181446t23b17667t8549c7247bb410ae@mail.gmail.com>
Date: Wed, 18 Apr 2007 21:46:38 +0000
From: "Alek Storm" <alek.storm@gmail.com>
To: chromatic <chromatic@wgz.org>
Subject: Re: [perl #42430] [PATCH] make :vtable imply :method
Cc: "Allison Randal" <allison@perl.org>, perl6-internals@perl.org
In-Reply-To: <200704181423.55864.chromatic@wgz.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <RT-Ticket-42430@perl.org> <200704181348.40862.chromatic@wgz.org>
	 <189adbd0704181415q620995b0wc7f846393070dbaa@mail.gmail.com>
	 <200704181423.55864.chromatic@wgz.org>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
Status: O
Content-Length: 2100
Lines: 48

On 4/18/07, chromatic <chromatic@wgz.org> wrote:
> On Wednesday 18 April 2007 14:15, Alek Storm wrote:
>
> > > If that's true, then users have to *know* the implementation details of
> > > vtable methods.  Is it in C code or is it in PIR code?
> >
> > I have no idea why you're saying this.  Why does making vtable methods
> > visible expose their implementation details?
>
> Vtable methods written in C are not visible to PIR code.

True, but there is an increasing number of PCCMETHODs being written
that are just wrappers around a vtable method.  Again, having the
vtable override visible is *optional*.  Just like writing a PCCMETHOD
wrapper is optional.

> See the code example I posted.
>
> > I haven't said anything remotely like this.
>
> If vtable methods written in PIR are visible to PIR code, I can draw no
> other conclusion.
> If I want to use a PMC and call a vtable method directly from PIR, I can do
> that if and only if that method is a method defined in PIR.  I cannot do
> that if the method is a method defined in C.
>
> Thus for my code to work robustly, I have to know about the internals of the
> method and hope that it does not change.

I see what you were saying now - the user has to know whether a vtable
method was written in PIR or C to call it directly.  There are two
choices involved here.  The first is the choice of the user, who, by
calling it directly, has chosen to code for that specific PMC.  Nobody
is forcing the user to do this; they can just as easily use some form
of indirection, just like before.  The second is that the author has
the choice of providing a visible vtable method to the user, or not.
This is just like writing a wrapper around the vtable method in C or
PIR, only more convenient.  No semantics are changed.

> Again, the only part of :method that :vtable needs to imply is the part that
> sets the invocant in the proper register and makes 'self' available within
> the body of the method.

So, that still means :method can mean two different things, depending
on whether :vtable is present or not.  That's still bad.

-- 
Alek Storm

