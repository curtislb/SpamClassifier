From perl6-all-return-81776-ktwarwic=speedy.uwaterloo.ca@perl.org  Sun Jun  3 15:14:07 2007
Return-Path: <perl6-all-return-81776-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l53JE6hB018784
	for <ktwarwic@flax9.uwaterloo.ca>; Sun, 3 Jun 2007 15:14:06 -0400
Received: (qmail 19976 invoked by uid 514); 3 Jun 2007 19:13:59 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 19971 invoked from network); 3 Jun 2007 19:13:59 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DKIM_SIGNED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS,WEIRD_PORT
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-compiler-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-compiler
List-Id: <perl6-compiler.perl.org>
Delivered-To: mailing list perl6-compiler@perl.org
Delivered-To: moderator for perl6-compiler@perl.org
Delivered-To: perl6-compiler@perl.org
Received-SPF: pass (x1.develooper.com: domain of cyocum@gmail.com designates 64.233.162.227 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:mime-version:content-type:content-transfer-encoding:content-disposition;
        b=AH/l/sPUilpM3597n3WB/vl3FwHdN3F2Y2sxPmBRzGRHb3qmGCqEXZ4hEBAF157bNv3VIgTd5UK0dC+9S3rbzbpMtgHAc/930vt3YenheAvOCqJXbQ4MN5haYeH7NL/jNd43zNxpOtCVLSB9/bVAikUjOhCuYx8+5RoeAJmDQhY=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:mime-version:content-type:content-transfer-encoding:content-disposition;
        b=KGHDHdslV99ojRhcx9Auqkd8TQMLmZfg4+WuRw5ThkwVttZOnza5AdITNd7M07QFnNtNI7aHcmdfJIsZ+QhNy6y/9IFScPxoWZz3j2kjw6FVy6e9mEHew5NxT6LIOF5CMLntWvVHdH5MhdPsWTb6E6/ZTFrujFZTkEWmvsUvMCU=
Message-ID: <82bb54530706030822p602f3e07jec1ce67fb7938f2a@mail.gmail.com>
Date: Sun, 3 Jun 2007 16:22:29 +0100
From: "Chris Yocum" <cyocum@gmail.com>
To: perl6-compiler@perl.org
Subject: Not Understanding TGE
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
X-Virus-Checked: Checked
X-Virus-Checked: Checked
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS,WEIRD_PORT

Hi Everyone,
    I am not sure if this is the correct list to post this problem to
but I will try here first.  I am having a problem with understanding
TGE and I was hoping someone might be able to give me some help.  I am
writing a parrot version of 1964 BASIC using the compiler tools and I
have the PGE part nearly complete (there are a few things that I need
to finish though) and I was looking forward to using TGE but I have
become stuck.
    My problem is that when I get through the first two parts of the
tree, I come to a point where things come to a screeching halt because
the node (in Basic64::Grammar::statement) does not seem to be anything
at all or anything that I can identify.  I know from the parse output
that Basic64::Grammar::statement is a ResizablePMCArray (size:1) but I
am not sure how to reflect that in PIR or if that is even significant
here.  Underneath that are the linenumber and statement_type rules but
I cannot seem to access them at all.
    I apologize in advance if this is something simple but any help
would be greatly appreciated.

Sincerely,
Chris Yocum

grammar Basic64::ASTGrammar is TGE::Grammar;

transform past (ROOT) :language('PIR') {
        .local pmc past
        past = new 'PAST::Node'
        past.'init'('node'=>node, 'name'=>'anon')

        .local pmc cnode, cpast
        cnode = node["program"]
        cpast = tree.'get'('past', cnode, 'Basic64::Grammar::statements')
        past.'push'(cpast)
        .return (past)
}

transform past (Basic64::Grammar::statements) :language('PIR') {
        .local pmc result, cnode, cpast
        result = new 'PAST::Node'
        result.'init'('node' => node)

        cnode = node["statement"]
        cpast = tree.'get'('past', cnode, 'Basic64::Grammar::statement')
        result.'push'(cpast)
        .return (result)
}

transform past (Basic64::Grammar::statement) :language('PIR') {
        .local pmc result, cnode
        result = new 'PAST::Node'
        result.'init'('node'=>node)

}

Here is the output when run:
Null PMC access in isa()
current instr.: 'parrot;PAST::Node;node' pc 194 (PAST/Node.pir:175)
called from Sub 'parrot;PAST::Node;init' pc 96 (PAST/Node.pir:91)
called from Sub 'parrot;Basic64::ASTGrammar;_Basic64::Grammar::statement_past' \
pc 14733 (Basic64ASTGrammar.tg:29)
called from Sub 'parrot;TGE::Tree;_eval_cell' pc 282 (TGE/Tree.pir:175)
called from Sub 'parrot;TGE::Tree;get' pc 241 (TGE/Tree.pir:155)
called from Sub 'parrot;Basic64::ASTGrammar;_Basic64::Grammar::statements_past'\
 pc 14702 (Basic64ASTGrammar.tg:21)
called from Sub 'parrot;TGE::Tree;_eval_cell' pc 282 (TGE/Tree.pir:175)
called from Sub 'parrot;TGE::Tree;get' pc 241 (TGE/Tree.pir:155)
called from Sub 'parrot;Basic64::ASTGrammar;_Basic64::Grammar::statements_past'\
 pc 14702 (Basic64ASTGrammar.tg:21)
called from Sub 'parrot;TGE::Tree;_eval_cell' pc 282 (TGE/Tree.pir:175)
called from Sub 'parrot;TGE::Tree;get' pc 241 (TGE/Tree.pir:155)
called from Sub 'parrot;Basic64::ASTGrammar;_ROOT_past' pc 14655 (Basic64ASTGra\
mmar.tg:10)
called from Sub 'parrot;TGE::Tree;_eval_cell' pc 282 (TGE/Tree.pir:175)
called from Sub 'parrot;TGE::Tree;get' pc 241 (TGE/Tree.pir:155)
called from Sub 'parrot;HLLCompiler;compile' pc 343 (runtime/parrot/library/Par\
rot/HLLCompiler.pir:248)
called from Sub 'parrot;HLLCompiler;eval' pc 500 (runtime/parrot/library/Parrot\
/HLLCompiler.pir:338)
called from Sub 'parrot;HLLCompiler;evalfiles' pc 800 (runtime/parrot/library/P\
arrot/HLLCompiler.pir:472)
called from Sub 'parrot;HLLCompiler;command_line' pc 947 (runtime/parrot/librar\
y/Parrot/HLLCompiler.pir:535)
called from Sub 'parrot;Basic64;main' pc 67 (Basic64Main.pir:24)


Here is the parse output for reference:

"parse" => PMC 'Basic64::Grammar' => "10 let foo = 5;" @ 0 {
    <program> => PMC 'Basic64::Grammar' => "10 let foo = 5;" @ 0 {
        <statements> => PMC 'Basic64::Grammar' => "10 let foo = 5;" @ 0 {
            <statement> => ResizablePMCArray (size:1) [
                PMC 'Basic64::Grammar' => "10 let foo = 5" @ 0 {
                    <linenumber> => PMC 'Basic64::Grammar' => "10" @ 0 {
                        <digit> => ResizablePMCArray (size:2) [
                            PMC 'Basic64::Grammar' => "1" @ 0,
                            PMC 'Basic64::Grammar' => "0" @ 1
                        ]
                    }
                    <statement_type> => PMC 'Basic64::Grammar' => "let foo = 5"\
 @ 3 {
                        <let_statement> => PMC 'Basic64::Grammar' => "let foo =\
 5" @ 3 {
                            <expr> => PMC 'Basic64::Grammar' => "foo = 5" @ 7 {
                                <expr> => PMC 'PGE::Match' => "=" @ 11 {
                                    <type> => "infix:="
                                    [0] => PMC 'Basic64::Grammar' => "foo" @ 7 \
{
                                        <indent> => PMC 'Basic64::Grammar' => "\
foo" @ 7
                                        <type> => "term:"
                                   }
                                    [1] => PMC 'Basic64::Grammar' => "5" @ 13 {
                                        <integer> => PMC 'Basic64::Grammar' => \
"5" @ 13
                                        <type> => "term:"
                                    }
                                }
                            }
                        }
                    }
                }
            ]
        }
    }
}

