From perl6-all-return-81378-ktwarwic=speedy.uwaterloo.ca@perl.org  Tue May 15 12:24:00 2007
Return-Path: <perl6-all-return-81378-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4FGNvqD007060
	for <ktwarwic@flax9.uwaterloo.ca>; Tue, 15 May 2007 12:23:58 -0400
Received: (qmail 7357 invoked by uid 514); 15 May 2007 16:23:54 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 7341 invoked from network); 15 May 2007 16:23:54 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Delivered-To: parrotbug-followup@parrotcode.org
Received-SPF: pass (x1.develooper.com: domain of codermattie@gmail.com designates 66.249.82.234 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:date:from:to:subject:message-id:in-reply-to:references:x-mailer:mime-version:content-type;
        b=HW04cg3whspmkfRs13i0Tn2lCEeFqA0+7dUuTxJBqcS1Lj2FvfGyxrTMaugO+sAE0jVhcMUMWXlk/Z9AX058JuSwGgkUxTWQESv69Fqdi+gBmaHT3/YSi/fVt304my3ERq+J55jUPI3vtNfo9dzvMOdiwxp5j0YeMPHj6kvelK0=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:date:from:to:subject:message-id:in-reply-to:references:x-mailer:mime-version:content-type;
        b=IpF4rOkocRZfZZYRu8VN2HlRG1CtBopB6sSzkPcwNfaPLiQc3hSbV3ZCNZv2PYO0DxtbEDW17hjtnFEfUNJB6R/rInQGN+tTBmwCoOT4XiLPe/kKcVW5htBdPIjiXlq7JL7xiU7ItbEXJcXURSio+Stl4R2FpAR/Y62QIj785A4=
Date: Tue, 15 May 2007 09:02:45 -0700
From: Mike Mattie <codermattie@gmail.com>
To: parrotbug-followup@parrotcode.org
Subject: Re: [perl #42947] [PATCH] revise Parrot_get_runtime_prefix API for
 safety and usablility
Message-ID: <20070515090245.73899c1d@reforged>
In-Reply-To: <rt-3.6.HEAD-12281-1179231844-1930.42947-74-0@perl.org>
References: <RT-Ticket-42947@perl.org>
	<20070514071342.0c34c61f@reforged>
	<rt-3.6.HEAD-12281-1179152256-959.42947-72-0@perl.org>
	<8e8ee0d40705150520y541581edk2d584c0a28390bb8@mail.gmail.com>
	<rt-3.6.HEAD-12281-1179231844-1930.42947-74-0@perl.org>
X-Mailer: Claws Mail 2.6.1 (GTK+ 2.10.9; i686-pc-linux-gnu)
Mime-Version: 1.0
Content-Type: multipart/signed; boundary=Sig_sQLiY1EDioe1so4TMLy1diE;
 protocol="application/pgp-signature"; micalg=PGP-SHA1
X-Virus-Checked: Checked
X-Virus-Checked: Checked
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-0.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,KARMA_CONNECT_NEGATIVE,SPF_PASS

--Sig_sQLiY1EDioe1so4TMLy1diE
Content-Type: multipart/mixed; boundary="MP_j9EqpWHnMBRM/b5zHuHaNUo"

--MP_j9EqpWHnMBRM/b5zHuHaNUo
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline

On Tue, 15 May 2007 05:24:06 -0700
"Paul Cochrane via RT" <parrotbug-followup@parrotcode.org> wrote:

> On 14/05/07, via RT Mike Mattie <parrotbug-followup@parrotcode.org>
> wrote:
> > # New Ticket Created by  Mike Mattie
> > # Please include the string:  [perl #42947]
> > # in the subject line of all future correspondence about this issue.
> > # <URL: http://rt.perl.org/rt3/Ticket/Display.html?id=3D42947 >
> >
> >
> > Hello,
> >
> > This patch changes the Parrot_get_runtime_prefix API from
> >
> > char* Parrot_get_runtime_prefix(Interp *interp, STRING **prefix_str)
> >
> > to
> >
> > STRING* Parrot_get_runtime_prefix (Interp *interp ) {
> >
> > This is done to make the routine safer, it no longer can leak
> > memory. Also the useless "." paths are removed from src/library.c.
> > some minor changes to Parrot_locate_runtime_file_str are present to
> > sync and correct that function.
> >
> > other callers in src/inter_misc.c , and compilers/imcc/main.c are
> > fixed as well.
> >
> > also a case of a bare free() being used instead of the proper
> > mem_sys_free is fixed.
> >
> > This relies on #42944 to apply.
> >
> > Cheers,
> > Mike Mattie - codermattie@gmail.com
> >
> >
>=20
> Mike,

my mistake. this should go through now that I have attached it :)

> It seems the patch didn't come through with the email, could you send
> it again?
>=20
> Paul
>=20
>=20

--MP_j9EqpWHnMBRM/b5zHuHaNUo
Content-Type: text/x-patch; name=revise-get-runtime-prefix.diff
Content-Transfer-Encoding: quoted-printable
Content-Disposition: attachment; filename=revise-get-runtime-prefix.diff

--- HEAD/src/library.c	2007-05-14 07:00:17.000000000 -0700
+++ path-api/src/library.c	2007-05-14 06:14:04.000000000 -0700
@@ -76,8 +76,6 @@
     VTABLE_push_string(interp, paths, entry);
     entry =3D CONST_STRING(interp, "runtime/parrot/");
     VTABLE_push_string(interp, paths, entry);
-    entry =3D CONST_STRING(interp, "./");
-    VTABLE_push_string(interp, paths, entry);
     entry =3D CONST_STRING(interp, "lib/parrot/include/");
     VTABLE_push_string(interp, paths, entry);
     entry =3D CONST_STRING(interp, "lib/parrot/");
@@ -91,8 +89,6 @@
     VTABLE_push_string(interp, paths, entry);
     entry =3D CONST_STRING(interp, "runtime/parrot/");
     VTABLE_push_string(interp, paths, entry);
-    entry =3D CONST_STRING(interp, "./");
-    VTABLE_push_string(interp, paths, entry);
     entry =3D CONST_STRING(interp, "lib/parrot/library/");
     VTABLE_push_string(interp, paths, entry);
     entry =3D CONST_STRING(interp, "lib/parrot/");
@@ -260,12 +256,14 @@
     else
         paths =3D get_search_paths(interp, PARROT_LIB_PATH_INCLUDE);
=20
-    Parrot_get_runtime_prefix(interp, &prefix);
+    prefix =3D Parrot_get_runtime_prefix(interp);
+
     n =3D VTABLE_elements(interp, paths);
     for (i =3D 0; i < n; ++i) {
         path =3D VTABLE_get_string_keyed_int(interp, paths, i);
-        if (string_length(interp, prefix) &&
-           !parrot_path_is_abs(interp,path)) {
+        if (prefix
+            && string_length(interp,prefix)
+            && !parrot_path_is_abs(interp,path)) {
             full_name =3D parrot_path_concat(interp, prefix , path);
         }
         else
@@ -281,7 +279,22 @@
             return full_name;
     }
=20
-     full_name =3D ( type & PARROT_RUNTIME_FT_DYNEXT )
+    if (prefix && string_length(interp,prefix)) {
+        /* try this after the built-in paths to avoid security
+           issues with the default "." being used before builtin
+           paths */
+
+        full_name =3D parrot_path_concat(interp, prefix , file);
+
+        full_name =3D ( type & PARROT_RUNTIME_FT_DYNEXT )
+            ? try_load_path(interp, full_name)
+            : try_bytecode_extensions(interp, full_name);
+
+        if ( full_name )
+            return full_name;
+    }
+
+    full_name =3D ( type & PARROT_RUNTIME_FT_DYNEXT )
         ? try_load_path(interp, file)
         : try_bytecode_extensions(interp, file);
=20
@@ -308,60 +321,76 @@
      */
     return string_to_cstring(interp, result);
 }
-/*
-
-=3Ditem C<char* Parrot_get_runtime_prefix(Interp *, STRING **prefix_str)>
=20
-If C<prefix_str> is not NULL, set it to the prefix, else return a malloced
-c-string for the runtime prefix.  Remember to free the string with
-C<string_cstring_free()>.
-
-=3Dcut
+static STRING*
+query_runtime_prefix ( Interp* interp ) {
=20
-*/
+    STRING* prefix;
=20
-char*
-Parrot_get_runtime_prefix(Interp *interp, STRING **prefix_str)
-{
-    STRING *s, *key;
-    PMC *config_hash;
     int free_it;
     char *env;
=20
     env =3D Parrot_getenv("PARROT_RUNTIME", &free_it);
+
     if (env) {
-        if (prefix_str) {
-            *prefix_str =3D string_from_cstring(interp, env, 0);
-            if (free_it)
-                free(env);
-            return NULL;
-        }
-        if (!free_it)
-            env =3D strdup(env);
-        return env;
+        prefix =3D string_from_cstring(interp, env, 0);
+        if (free_it)
+            mem_sys_free(env);
+
+        return prefix;
     }
=20
+    return NULL;
+}
+
+/*
+
+=3Ditem C<STRING* Parrot_get_runtime_prefix(Interp * )>
+
+return the runtime prefix in the PMC string C<prefix>. The
+config hash is consulted first, then the environment variable
+PARROT_RUNTIME. If neither are found NULL is returned.
+=3Dcut
+
+*/
+
+STRING*
+Parrot_get_runtime_prefix (Interp *interp ) {
+
+    PMC *config_hash;
+
+    STRING *key, *can_fail; /* can_fail , for storing string pointers from
+                               functions that may fail to return a prefix =
value
+                      */
+
+    /* first look in the config hash for a user specified path */
+
     config_hash =3D VTABLE_get_pmc_keyed_int(interp, interp->iglobals,
             (INTVAL) IGLOBALS_CONFIG_HASH);
-    key =3D CONST_STRING(interp, "prefix");
-    if (!VTABLE_elements(interp, config_hash)) {
-        const char *pwd =3D ".";
-        char *ret;
-
-        if (prefix_str) {
-            *prefix_str =3D const_string(interp, pwd);
-            return NULL;
+
+    if (VTABLE_elements(interp, config_hash)) {
+        key =3D CONST_STRING(interp, "prefix");
+        can_fail =3D VTABLE_get_string_keyed_str(interp, config_hash, key);
+
+        if ( can_fail ) {
+            /*
+              TODO:
+              shouldn't we do some sanity here ?  , assuming this can be
+              set by random code/input we should see if it even exists.
+            */
+
+            return can_fail;
         }
-        ret =3D (char *)mem_sys_allocate(3);
-        strcpy(ret, pwd);
-        return ret;
-    }
-    s =3D VTABLE_get_string_keyed_str(interp, config_hash, key);
-    if (prefix_str) {
-        *prefix_str =3D s;
-        return NULL;
     }
-    return string_to_cstring(interp, s);
+
+    /*
+      fallback:
+
+      no value was found in the config hash so try a system query, if
+      that fails as well return the default.
+    */
+
+    return query_runtime_prefix(interp);
 }
=20
 /*
--- HEAD/include/parrot/library.h	2007-05-14 07:00:17.000000000 -0700
+++ path-api/include/parrot/library.h	2007-05-14 05:10:12.000000000 -0700
@@ -38,7 +38,7 @@
 PARROT_API STRING* Parrot_locate_runtime_file_str(Interp *, STRING *file_n=
ame,
         enum_runtime_ft);
=20
-PARROT_API char* Parrot_get_runtime_prefix(Interp *, STRING **prefix);
+PARROT_API STRING* Parrot_get_runtime_prefix(Interp *);
 void parrot_init_library_paths(Interp *);
=20
 #endif /* PARROT_LIBRARY_H_GUARD */
--- HEAD/src/inter_misc.c	2007-05-12 04:26:05.000000000 -0700
+++ path-api/src/inter_misc.c	2007-05-14 05:10:12.000000000 -0700
@@ -341,10 +341,7 @@
             return basename;
=20
         case RUNTIME_PREFIX:
-            fullname_c =3D Parrot_get_runtime_prefix(interp, NULL);
-            fullname =3D string_from_cstring(interp, fullname_c, 0);
-            mem_sys_free(fullname_c);
-            return fullname;
+            return Parrot_get_runtime_prefix( interp );
=20
         default:        /* or a warning only? */
             internal_exception(UNIMPLEMENTED,
--- HEAD/compilers/imcc/main.c	2007-05-12 04:26:22.000000000 -0700
+++ path-api/compilers/imcc/main.c	2007-05-14 06:20:01.000000000 -0700
@@ -196,6 +196,8 @@
 char *
 parseflags(Parrot_Interp interp, int *argc, char **argv[])
 {
+    STRING* prefix;
+
     struct longopt_opt_info opt =3D LONGOPT_OPT_INFO_INIT;
     int   status;
     if (*argc =3D=3D 1) {
@@ -272,7 +274,11 @@
                 exit(EX_USAGE);
                 break;
             case OPT_RUNTIME_PREFIX:
-                printf("%s\n", Parrot_get_runtime_prefix(interp, NULL));
+                prefix =3D Parrot_get_runtime_prefix(interp);
+
+                printf("%s\n", (prefix)
+                       ? string_to_cstring(interp,prefix)
+                       : "no value for global config \"prefix\" or PARROT_=
RUNTIME");
                 exit(0);
                 break;
             case 'V':

--MP_j9EqpWHnMBRM/b5zHuHaNUo--

--Sig_sQLiY1EDioe1so4TMLy1diE
Content-Type: application/pgp-signature; name=signature.asc
Content-Disposition: attachment; filename=signature.asc

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.6 (GNU/Linux)

iD8DBQFGSdmrdfRchrkBInkRApBFAJ4whUxPiYjpcVZtaHGAVIMNqRyq8QCffT1K
OmsaPf1qhD6wWokAhkrOavo=
=dPCD
-----END PGP SIGNATURE-----

--Sig_sQLiY1EDioe1so4TMLy1diE--

