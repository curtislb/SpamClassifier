From perl6-all-return-80704-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed Apr 18 17:16:28 2007
Return-Path: <perl6-all-return-80704-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3ILGR0I016147
	for <ktwarwic@speedy.uwaterloo.ca>; Wed, 18 Apr 2007 17:16:27 -0400
Received: (qmail 5103 invoked by uid 514); 18 Apr 2007 21:16:02 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 5097 invoked from network); 18 Apr 2007 21:16:02 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: domain of alek.storm@gmail.com designates 209.85.134.189 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=oMUnviTxC1jxuoFPj2XJpq1E4xOmSe2f5Td8/K9wu2iCq/6InaUjbpHn8vK7ZgOMZx7Tspn6uDplP/S/5wWBH4pt1TvwLHDTySvfhp9vO+dWq85bVXAw/Nkf6CijlF/s3Xo1jGQFl6rNRas5lIY+BKFsiiUo5E8K0lPEs5FL2uw=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=VIK+zlu4ziTwVVp77Ssuv2INxAJAciQTY4HiQ5qkiK1Z2ihvxSHyqIZVDDaolAIuoO+yB9l2FoMgEijUq9zzU27M8C5bhySOgVAdfmAauEba0Jo9/M3FFg3ISYIvFdeNx7l1PGC6EVewotvCKndklBYFAn4liMGnJ5vI6UUGVEM=
Message-ID: <189adbd0704181415q620995b0wc7f846393070dbaa@mail.gmail.com>
Date: Wed, 18 Apr 2007 21:15:41 +0000
From: "Alek Storm" <alek.storm@gmail.com>
To: chromatic <chromatic@wgz.org>
Subject: Re: [perl #42430] [PATCH] make :vtable imply :method
Cc: "Allison Randal" <allison@perl.org>, perl6-internals@perl.org
In-Reply-To: <200704181348.40862.chromatic@wgz.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <RT-Ticket-42430@perl.org> <200704181101.35621.chromatic@wgz.org>
	 <189adbd0704181334n16a6ccbdo6f4747ffa70cafb0@mail.gmail.com>
	 <200704181348.40862.chromatic@wgz.org>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
Status: O
Content-Length: 2648
Lines: 48

Okay, I think we completely misunderstood each other.  Honestly, most of what I said was a reply to Allison's proposal.

On 4/18/07, chromatic <chromatic@wgz.org> wrote:
> On Wednesday 18 April 2007 13:34, Alek Storm wrote:
> 
> > Vtable methods defined in C are visible from C.
> 
> Of course, otherwise nothing would be able to call them.

It was kind of a "duh" statement, but I was making the point that vtable methods in PIR should be visible by default.

> > Therefore, it makes 
> > sense that vtable methods defined in PIR are visible from PIR, at
> > least by default.
> 
> That makes no sense to me.  Are you saying that vtable methods defined in a 
> specific language should be visible to that language by default?

I'm not entirely sure what you mean - I didn't mention languages.  I meant that vtable methods are simply normal methods in a class, which can be easily hidden with the :anon flag.  This is exactly the way it works now - I didn't propose we change anything besides making :vtable imply :method.

> If that's true, then users have to *know* the implementation details of
> vtable methods.  Is it in C code or is it in PIR code?

I have no idea why you're saying this.  Why does making vtable methods visible expose their implementation details?  I haven't said anything remotely like this.

> That's precisely what vtable methods protect against!  That's why they're in
> vtables.  That's why they're *not* visible as methods to PIR code.

I don't really see where you're coming from here.  Vtable methods are callable directly from C, so there's obviously no problem there.  Vtable methods in PIR are just overriding their C implementations, so it makes sense that they're callable directly as well.  Also, they are easily hidden with the :anon flag.  None of this is any different than what is already implemented.

> > Making :vtable imply :anon might be unintuitive to 
> > users.  Besides that, there's still the problem of :method meaning two
> > different things with that implementation.  Basically, in a non-vtable
> > sub, there is the :anon flag to detach it from the namespace, but in a
> > vtable sub, it's detached by default, and the :method flag attaches it
> > to the namespace.  Reversal bad.  Continuity good.
> 
> I can't honestly think of a case where you want :vtable AND :method on a 
> vtable method, with the caveat that right now you *must* do that 
> because :vtable doesn't cause Parrot to include the invocant in the proper 
> register on calls.

I was talking about Allison's recommendation.  If you read that, what I said will make sense.

Sorry for the miscommunication :)

-- 
Alek Storm

