From perl6-all-return-82190-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu Jun 21 16:16:02 2007
Return-Path: <perl6-all-return-82190-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5LKG1L9028717
	for <ktwarwic@flax9.uwaterloo.ca>; Thu, 21 Jun 2007 16:16:02 -0400
Received: (qmail 26054 invoked by uid 514); 21 Jun 2007 20:15:58 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 26020 invoked from network); 21 Jun 2007 20:15:58 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
Date: Thu, 21 Jun 2007 19:13:03 +0100
From: Smylers <Smylers@stripey.com>
To: perl6-language@perl.org
Subject: Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn
Message-ID: <20070621181303.GL6900@stripey.com>
References: <20070613205525.7ECA0CB9B8@x12.develooper.com> <ef30550b0706131429o34838a6es6704e8ec73851b49@mail.gmail.com> <467073C4.6020708@conway.org> <20070614082341.GU31918@earth.overmeer.net> <832f158a0706141717j7accfb36w92bf3a2ed7a8e115@mail.gmail.com> <20070615075949.GR31918@earth.overmeer.net> <20070616090944.GG6900@stripey.com> <20070616103358.GB10601@earth.overmeer.net> <20070616201521.GA1199@pobox.com> <20070617095802.GA10498@earth.overmeer.net>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20070617095802.GA10498@earth.overmeer.net>
User-Agent: Mutt/1.5.13 (2006-08-11)
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS

Mark Overmeer writes:

> * Jonathan Scott Duff (duff@pobox.com) [070616 20:15]:
> 
> > You mention OOP.  For Perl 5 we have a standard, if very general,
> > syntax and "open" semantics that have allowed people to implement
> > OOP in a variety of ways.  This was all well and good for a while
> > until we realized that there should be some more reasonable defaults
> > (in both syntax and semantics) for common operations in OOP.
> 
> OOP in Perl5 has a mechanism, but not a standard in the use of those
> features.  Full OO languages all choose a direction, but there are
> serious culture differences.  Perl uses them all.  There are many ways
> how to instantiate an object, which is lot of fun as programmer but a
> hassle for "the average" programmer.  Within one program, you may very
> well need to use different instantiation techniques...  Of course,
> this could have been forseen (perl is not the first language which
> implements OO), and some advice on the convention to use could have
> avoided wild collection of approaches we see now.

But if this had been "forseen" and restrictions put in place, then we
wouldn't have had the recent advances in things like inside-out objects
and MOP.  The flexibility and people doing different things allowed for
experimentation, and where those experiments were successful new ideas
gained community mindshare very quickly.

> This is also why "Perl Best Practices" is a good book [shameless plug]

Indeed.  But it doesn't need to be part of the Perl core.

> although I would have welcomed it 11 years earlier.

But it extols many practices which weren't thought of 11 years
previously!  Hence the need for flexibility, so as to allow time to
invent them ...

> > I think it's the same thing with POD6. It's "open" enough that many
> > documentation systems can be built from it (man pages, books,
> > magazines, wikis, etc.) For some of those documentation systems
> > we'll have nice conventions and other conventions will grow as
> > needed. If we find that convention isn't enough in specific areas,
> > ...
> 
> Without any doubt, there are thousands of documentation systems
> around.  At least ten percent of them are considered "the best ever
> made" by its developer or developer community.  Just by simple math,
> the chance that the system developed really is the best is less than
> one percent.

Quite so -- which is why in my previous mail I thought it was
shortsighted to think we can create something now which we won't later
want to change.

> IMO, any argument that POD6 is good because it can be used to write
> books or express complex mathematical expressions is really frightning
> me.

POD (as in the version with Perl 5) wasnt designed for writing books or
whatever, yet people liked it enough they took it in directions that
nobody first expected.  There's a good chance of that happening with Pod
6, even if it isn't an aim.

> Every single complication added to the doc syntax will make it not to
> understand for a large percentage of the primar target community, as
> every teacher can tell you from experience.

You could say the same thing about Perl 6 (or even earlier versions),
yet we cope, partly by ensuring that you don't need to learn all of it
in order to be able to use it.  (In the case of Pod one of the things
that helps is its large overlap with plain text.)

> When I create a program, it starts with a goal.  To reach that goal, I
> have to write some code, some docs, some tests.  For me, it is all
> part of the program.  I do not see one to be of more importance than
> the other: all three are first-class sitizens in my program.

Testing is another area which has had immense progress since the release
of Perl 5.  Look at where Test::More, Test::Class, TAP::Parser and so on
are now; we certainly wouldn't want to be restricted to a standard of
best practices in testing from the early 1990s.

Smylers

