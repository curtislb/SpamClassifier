From beginners-return-91107-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu Apr 26 22:30:37 2007
Return-Path: <beginners-return-91107-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3R2Ua6w019858
	for <ktwarwic@speedy.uwaterloo.ca>; Thu, 26 Apr 2007 22:30:36 -0400
Received: (qmail 8720 invoked by uid 514); 27 Apr 2007 02:30:31 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 8711 invoked from network); 27 Apr 2007 02:30:31 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 27 Apr 2007 02:30:31 -0000
Received: (qmail 22576 invoked by uid 225); 27 Apr 2007 02:30:31 -0000
Delivered-To: beginners@perl.org
Received: (qmail 22569 invoked by alias); 27 Apr 2007 02:30:30 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME,SPF_HELO_PASS,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of mja@richweb.com designates 63.90.9.3 as permitted sender)
Received: from mail.richweb.com (HELO mail.richweb.com) (63.90.9.3)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 26 Apr 2007 19:30:28 -0700
Received: from [192.168.0.20] (c-67-172-217-152.hsd1.va.comcast.net [67.172.217.152])
	(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by mail.richweb.com (Postfix) with ESMTP id E4A30FA3E;
	Thu, 26 Apr 2007 22:30:22 -0400 (EDT)
Message-ID: <46315FFF.9010108@richweb.com>
Date: Thu, 26 Apr 2007 22:29:19 -0400
From: "Matthew J. Avitable" <mja@richweb.com>
User-Agent: Thunderbird 1.5.0.10 (X11/20070403)
MIME-Version: 1.0
To: Pierre Mariani <frenchyp@gmail.com>
Cc: beginners@perl.org
Subject: Re: improving my code: array of references
References: <6567.33482.qm@web30211.mail.mud.yahoo.com>	 <1177624580.10826.12.camel@mariani.spry.com>	 <bb075cdf0704261520k5de953dcmf54ff6151df69a25@mail.gmail.com> <1177626362.10826.19.camel@mariani.spry.com>
In-Reply-To: <1177626362.10826.19.camel@mariani.spry.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Status: RO
Content-Length: 1326
Lines: 50

Hi Pierre,
> my @tmp = ( $var1, $var2, $var3 );
> @tmp = map modify_variable, @tmp;
>
> which is better

Conway (in Perl Best Practices) prefers the block form of map, since in 
his opinion, it's more readable.  So you could rewrite it as:

my @tmp = ( $var1, $var2, $var3 );
@tmp = map { modify_variable } @tmp


I'm guessing that the code within modify_variable uses $_ under the 
hood?  That may end up biting you later on, if you use modify_variable 
in different places.  If $_ is in use by other code or gets changed on 
you unexpectedly, you may have some difficult debugging ahead of you.   
The following may prove clearer when reading it 6 months from now:

map { modify_variable($_) } = \($var1, $var2, $var3);


I personally like the above syntax - others may not.  A foreach gets you 
an alias to each element, so what about the following?  I've provided a 
modify_var sub as an example.

$var1 = 1;
$var2 = 2;
$var3 = 3;

foreach my $v ($var1, $var2, $var3) {
    modify_var(\$v);
}

sub modify_var {
    my $scalar_ref = shift || die "blaaaaa";
    ${$scalar_ref} += 5;
}

$, = "\n";   ## print a newline between each argument to print
print ($var1, $var2, $var3);

-m


-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


