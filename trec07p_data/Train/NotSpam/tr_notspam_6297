From r-help-bounces@stat.math.ethz.ch  Mon Apr 30 07:43:11 2007
Return-Path: <r-help-bounces@stat.math.ethz.ch>
Received: from hypatia.math.ethz.ch (hypatia.math.ethz.ch [129.132.145.15])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l3UBh86w012275
	for <ktwarwic@speedy.uwaterloo.ca>; Mon, 30 Apr 2007 07:43:09 -0400
Received: from hypatia.math.ethz.ch (hypatia [129.132.145.15])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l3UBfk0m016158;
	Mon, 30 Apr 2007 13:42:20 +0200
X-Spam-Checker-Version: SpamAssassin 3.1.8 (2007-02-13) on hypatia.math.ethz.ch
X-Spam-Level: 
X-Spam-Status: No, score=0.2 required=5.0 tests=AWL autolearn=no version=3.1.8
Received: from bernie.ethz.ch (bernie.ethz.ch [129.132.202.244])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l3UBfagP016057
	for <r-help@stat.math.ethz.ch>; Mon, 30 Apr 2007 13:41:37 +0200
Received: from smtp02.difres.dk ([130.226.135.15])
	by bernie.ethz.ch with esmtp (Exim 4.05) id 1HiUG8-0002Zx-00
	for r-help@stat.math.ethz.ch; Mon, 30 Apr 2007 13:41:36 +0200
Received: from lu-mail01.difres.dk ([172.21.128.41]) by smtp02.difres.dk with
	Microsoft SMTPSVC(6.0.3790.1830); Mon, 30 Apr 2007 13:39:27 +0200
Received: from ch-mail01.dfu.local ([172.18.128.41]) by lu-mail01.difres.dk
	with Microsoft SMTPSVC(6.0.3790.1830); 
	Mon, 30 Apr 2007 13:41:14 +0200
X-MimeOLE: Produced By Microsoft Exchange V6.5.7226.0
Content-class: urn:content-classes:message
MIME-Version: 1.0
Date: Mon, 30 Apr 2007 13:41:13 +0200
Message-ID: <8CDDBB8CAC32F34B809EB4A677952B4B022F22C9@ch-mail01.dfu.local>
In-Reply-To: <14783F62-8C48-4E63-ABB8-186AEBBE13F8@soc.soton.ac.uk>
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
Thread-Topic: [R] Inflate/Expand/Resize an array
Thread-Index: AceIv8Z84KN3DZxOQUiQx/YNbPsuNACW5DNQ
References: <8CDDBB8CAC32F34B809EB4A677952B4B022F21B8@ch-mail01.dfu.local>
	<463CED02-0571-40D0-B929-EA018E13F5EC@soc.soton.ac.uk>
	<14783F62-8C48-4E63-ABB8-186AEBBE13F8@soc.soton.ac.uk>
From: "Mark Payne" <mpa@difres.dk>
To: "Robin Hankin" <r.hankin@noc.soton.ac.uk>
X-OriginalArrivalTime: 30 Apr 2007 11:41:14.0733 (UTC)
	FILETIME=[755701D0:01C78B1C]
X-Virus-Scanned: by amavisd-new at stat.math.ethz.ch
X-MIME-Autoconverted: from quoted-printable to 8bit by hypatia.math.ethz.ch id
	l3UBfagP016057
Cc: r-help@stat.math.ethz.ch
Subject: Re: [R] Inflate/Expand/Resize an array
X-BeenThere: r-help@stat.math.ethz.ch
X-Mailman-Version: 2.1.9
Precedence: list
List-Id: "Main R Mailing List: Primary help" <r-help.stat.math.ethz.ch>
List-Unsubscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=unsubscribe>
List-Archive: <https://stat.ethz.ch/pipermail/r-help>
List-Post: <mailto:r-help@stat.math.ethz.ch>
List-Help: <mailto:r-help-request@stat.math.ethz.ch?subject=help>
List-Subscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=subscribe>
Content-Type: text/plain; charset="iso-8859-1"
Sender: r-help-bounces@stat.math.ethz.ch
Errors-To: r-help-bounces@stat.math.ethz.ch
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from quoted-printable to 8bit by speedy.uwaterloo.ca id l3UBh86w012275
Status: O
Content-Length: 5993
Lines: 179

Gudday,

Robin's reply obviously set something in motion in my brain, because I woke up with the answer on Saturday morning (which was actually pretty frustrating because I had to wait until Monday morning to try it out!) - essentially create a dummy array of 1s, and then use sweep to fill it out... Here's my code for the general solution...

### FnInflate
### ииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииииии
#Inflates an input array of arbitray size along the necessary dimensions to achieve the
#same size as that in target.dim
#balloon    :   array to be "inflated"
#target.dim :   final size of "balloon". NB target.dim and balloon must have the same NUMBER of dimensions...

FnInflate     <-  function(balloon, target.dim) {
  #Check number of input dimensions
  dim.balloon     <-  dim(balloon)
  if(length(target.dim)!=length(dim.balloon)) {
    stop("Input array does not have the same dimensionality as indicated in target.dim.")
  }
  #Identify the dimensions along which to inflate the array
  same.dims               <-  dim.balloon == target.dim             #A boolean array indicating whether the arrays correspond in that dimension
  corresponding.dims      <-  (1:length(target.dim))[same.dims]     #Dimensions that correspond between the target dim and the input array
  non.corresponding.dims  <-  (1:length(target.dim))[!same.dims]     #Dimensions that do not correspond between the target dim and the input array
  #Check that the non-corresponding dimensions are all of size 1 in the input array - we don't know what to do if this is not the case
  if(prod(dim(balloon)[non.corresponding.dims] == 1)==FALSE) {
    stop("Input array not suitable for inflation as non-corresponding dimensions are not of size 1.")
  }
  #Create temp array of 1s
  inflated.balloon  <-  array(1,dim=target.dim)
  #And inflate using sweep
  inflated.balloon  <-  sweep(inflated.balloon, corresponding.dims, balloon, "*")
  #Return results
  return(inflated.balloon)
}

Here's an example of it in use, inflating f along dimensions 2 and 6 to give a result the same size as N.

> dim(f)
[1] 10  1  1  1  1  1
> dim(N)
[1] 10 25  1  1  1  6
> dim(FnInflate(f,dim(N)))
[1] 10 25  1  1  1  6

Its written to solve the general problem, as you see here. Note that it will throw its hands up in the air if you try to inflate a (5,1,1) array to a (10,1,1) array - it will only work for, for example, inflating (5,1,1) to (5,10,10).

Thanks to all for their comments.

Cheers,

Mark


> -----Original Message-----
> From: Robin Hankin [mailto:r.hankin@noc.soton.ac.uk] 
> Sent: Friday, 27 April 2007 13:32
> To: Robin Hankin
> Cc: Mark Payne; r-help@stat.math.ethz.ch
> Subject: Re: [R] Inflate/Expand/Resize an array
> 
> [replying to myself]
> 
> it might be better to use
> 
> sweep(f,(1:6)[-2],m,"+")
> 
> instead.
> 
> 
> 
> 
> On 27 Apr 2007, at 11:56, Robin Hankin wrote:
> 
> > Hi
> >
> >
> >   f.dims <- c(10,25,1,1,1,14)
> >   m.dims <- c(10, 1,1,1,1,14)
> >   f <- array(1:prod(f.dims),f.dims)
> >   m <- array(1:prod(m.dims),m.dims)
> >   jj <- do.call(abind,c(rep(list(m),25),along=2))
> >
> >
> > Then
> >
> > f + jj
> >
> > will give you what you want.
> >
> >
> > The more general problem is a bit harder, as you say....
> >
> >
> > HTH
> >
> > rksh
> >
> >
> > On 27 Apr 2007, at 10:41, Mark Payne wrote:
> >
> >> Gudday,
> >>
> >> I've had a good look everywhere trying to figure out how 
> to do this, 
> >> but I'm afraid I can seem to find an answer anywhere - maybe its 
> >> because I'm not using the right terms, or maybe its because I'm a 
> >> dummy. But unfortunately, I am not completely and utterly stuck. 
> >> Here's the
> >> problem:
> >>
> >> I have two large, six dimensional arrays that I would like to add 
> >> together. Lets call them f and m. Their dimensions are 
> respectively:
> >>
> >>> dim(f)
> >> [1] 10  25  1  1  1 14
> >>> dim(m)
> >> [1] 10 1 1 1 1 14
> >>
> >> You can see that they're pretty close in size, but not identical.
> >> What I
> >> would like to do is expand or inflate m along its second 
> dimension so 
> >> that it ends up with dimension 10 25 1 1 1 14, so that I 
> can then add 
> >> the two together - the new values created along that 
> second dimension 
> >> would simply be copies of the first value..
> >>
> >> What's the fastest way to do this? Is there a dedicated function?
> >> Ideally I envisage something that you feed the input 
> array, and the 
> >> desired dimensions, and it does the rest for you. Please 
> also bear in 
> >> mind that this is a specific problem - the more general 
> case is where 
> >> I don't know which dimensions are "out of shape", so to speak...
> >>
> >> I hope that's clear, and that someone can me out here...
> >>
> >> Cheers,
> >>
> >> Mark
> >>
> >> ______________________________________________
> >> R-help@stat.math.ethz.ch mailing list 
> >> https://stat.ethz.ch/mailman/listinfo/r-help
> >> PLEASE do read the posting guide http://www.R-project.org/posting- 
> >> guide.html and provide commented, minimal, self-contained, 
> >> reproducible code.
> >
> > --
> > Robin Hankin
> > Uncertainty Analyst
> > National Oceanography Centre, Southampton European Way, Southampton 
> > SO14 3ZH, UK
> >   tel  023-8059-7743
> >
> > ______________________________________________
> > R-help@stat.math.ethz.ch mailing list
> > https://stat.ethz.ch/mailman/listinfo/r-help
> > PLEASE do read the posting guide http://www.R-project.org/posting- 
> > guide.html and provide commented, minimal, self-contained, 
> > reproducible code.
> 
> --
> Robin Hankin
> Uncertainty Analyst
> National Oceanography Centre, Southampton European Way, 
> Southampton SO14 3ZH, UK
>   tel  023-8059-7743
> 
> 
> 
>

______________________________________________
R-help@stat.math.ethz.ch mailing list
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.

