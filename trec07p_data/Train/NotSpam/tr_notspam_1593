From perl6-all-return-80562-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri Apr 13 19:24:02 2007
Return-Path: <perl6-all-return-80562-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3DNO10I028136
	for <ktwarwic@speedy.uwaterloo.ca>; Fri, 13 Apr 2007 19:24:02 -0400
Received: (qmail 21441 invoked by uid 514); 13 Apr 2007 23:23:37 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 21436 invoked from network); 13 Apr 2007 23:23:37 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-1.5 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME,FORGED_RCVD_HELO,NO_REAL_NAME
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
From: larry@cvs.develooper.com
To: perl6-language@perl.org
Subject: [svn:perl6-synopsis] r14373 - doc/trunk/design/syn
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Message-Id: <20070413232319.ED186CB9B8@x12.develooper.com>
Date: Fri, 13 Apr 2007 16:23:19 -0700 (PDT)
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-3.4 required=8.0
	tests=ALL_TRUSTED,BAYES_00,DK_POLICY_SIGNSOME,NO_REAL_NAME
Status: O
Content-Length: 2346
Lines: 60

Author: larry
Date: Fri Apr 13 16:23:17 2007
New Revision: 14373

Modified:
   doc/trunk/design/syn/S03.pod

Log:
Ranges over enums and such also can use *, suggested by Jonathan Lang++


Modified: doc/trunk/design/syn/S03.pod
==============================================================================
--- doc/trunk/design/syn/S03.pod	(original)
+++ doc/trunk/design/syn/S03.pod	Fri Apr 13 16:23:17 2007
@@ -14,7 +14,7 @@
   Date: 8 Mar 2004
   Last Modified: 13 Apr 2007
   Number: 3
-  Version: 111
+  Version: 112
 
 =head1 Overview
 
@@ -749,7 +749,7 @@
 These operators compare their operands using numeric, string,
 or C<eqv> semantics respectively, and depending on the order return
 one of C<Order::Increase>, C<Order::Same>, or C<Order::Decrease>
-(which numerify to -1, 0, or +1).  See L</Comparion semantics>.
+(which numerify to -1, 0, or +1).  See L</Comparison semantics>.
 
 =item *
 
@@ -2104,18 +2104,20 @@
     2.1 ~~ 1..2    # false, equivalent to 1 <= 2.1 <= 2
 
 If a C<*> (see the "Whatever" type in S02) occurs on the right side
-of a range, it is taken to mean "positive infinity" in whatever space
-the range is operating.  A C<*> on the left means "negative infinity"
-for types that support negative values. (The sign of those infinities
-reverses for a negative step.)  If the C<*> occurs on one side but
-not the other, the type is inferred from the other argument.  A star
-on both sides will match any value that supports the C<Ordered> role.
+of a range, it is taken to mean "positive infinity" in whatever
+typespace the range is operating, as inferred from the left operand.
+A C<*> on the left means "negative infinity" for types that support
+negative values, and the first value in the typespace otherwise as
+inferred from the right operand.  (For signed infinities the signs
+reverse for a negative step.)  A star on both sides prevents any type
+from being inferred other than the C<Ordered> role.
 
     0..*        # 0 .. +Inf
     'a'..*      # 'a' .. 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzz...'
     *..0        # -Inf .. 0
     *..*        # "-Inf .. +Inf", really Ordered
     1.2.3..*    # Any version higher than 1.2.3.
+    May..*      # May through December
 
 Note: infinite lists are constructed lazily.  And even though C<*..*>
 can't be constructed at all, it's still useful as a selector object.

