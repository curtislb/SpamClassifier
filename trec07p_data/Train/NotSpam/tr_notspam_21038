From perl6-all-return-82156-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed Jun 20 19:01:49 2007
Return-Path: <perl6-all-return-82156-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5KN1mL9015945
	for <ktwarwic@flax9.uwaterloo.ca>; Wed, 20 Jun 2007 19:01:48 -0400
Received: (qmail 19089 invoked by uid 514); 20 Jun 2007 23:01:46 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 19084 invoked from network); 20 Jun 2007 23:01:45 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: neutral (x1.develooper.com: local policy)
Delivered-To: perlmail-parrot-porters@onion.perl.org
Delivered-To: parrot-porters@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
Message-ID: <4679B1AF.1070304@jnthn.net>
Date: Thu, 21 Jun 2007 00:01:03 +0100
From: Jonathan Worthington <jonathan@jnthn.net>
User-Agent: Thunderbird 1.5.0.12 (Windows/20070509)
MIME-Version: 1.0
To: Allison Randal <allison@perl.org>
CC: p2 <parrot-porters@perl.org>
Subject: Re: PMC Proxy high-level review
References: <46779F43.7010901@perl.org>
In-Reply-To: <46779F43.7010901@perl.org>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-1.9 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL

Hi,

Allison Randal wrote:
> It looks like every low-level PMC is creating a proxy object for 
> itself and these proxies are stored in the interpreter global 
> parrot_interp_t.
That's what's implemented, yes. I pondered hanging them off the v-table 
too. That's perhaps more desirable.

> I intended that proxies would only be created when they were needed by 
> a subclassing Class PMC, and would only be stored in the Class PMC.
I don't think this is the way to go.

1) It'd be good to be able to use the get_class opcode with PMCs as well 
as PDD15 classes. For that to Just Work, you need something hanging off 
the class slot of the appropriate namespace. That something is the 
PMCProxy. Thus it needs to be there from the start.

2) It's desirable that there is only ever one instance of PMCProxy per 
PMC. Then "is this the same class" is just a case of checking the 
pointers, as with PDD15 classes. Plus memory issues.

3) At the moment method lookup (for non-vtable methods, of course) is 
done through the namespace. We moved away from that in PDD15 classes, 
and with PMCProxy can do the same for methods of PMCs too. If you want 
to be able to have a list of methods inside PMCProxy, you need it stored 
somewhere runtime-accessible. If you're going to hang that data 
somewhere, why not just make the PMCProxy in the first place and store 
it in there.

4) PMCProxy also allows introspection of PMCs, not just placing them in 
an inheritance hierarchy.

5) It's just less code complexity to create them up-front.

What was the motivation for having them instantiated lazily?

> Looking at the code from another perspective, though, maybe what we've 
> got here is the beginning of an "HLLSubclassable" role that adds a 
> handful of Class methods to low-level PMCs.
I wander if we have different thoughts of what PMCProxy is supposed to 
achieve. Here's what I thought: when you have a PDD15 class, you have 
the instance of Class and you have the instance of Object. For PMCs, you 
have the second of these - an instance of the PMC. PMCProxy fills in the 
gap - it's like the Class PMC for PDD15, only for PMCs rather than PDD15 
classes.

> Ultimately all PMCs need to be able to respond to inspect_str. 
Yeah, but there you're inspecting the object, not the class. Those are 
different, I think?

> And ultimately, all PMCs need to have an entry in their NameSpace so 
> the type IDs can go away entirely. 
They already do, and by hanging PMCProxy off the class slot in the 
NameSpace PMC, we're a step closer to that, if it's the Right Thing to do.

Thanks,

Jonathan

