From perl6-all-return-82168-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu Jun 21 01:28:00 2007
Return-Path: <perl6-all-return-82168-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5L5RxL9020055
	for <ktwarwic@flax9.uwaterloo.ca>; Thu, 21 Jun 2007 01:27:59 -0400
Received: (qmail 16650 invoked by uid 514); 21 Jun 2007 05:27:56 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 16645 invoked from network); 21 Jun 2007 05:27:56 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: neutral (x1.develooper.com: local policy)
Delivered-To: perlmail-parrot-porters@onion.perl.org
Delivered-To: parrot-porters@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
Date: Thu, 21 Jun 2007 00:27:07 -0500
From: "Patrick R. Michaud" <pmichaud@pobox.com>
To: Bob Rogers <rogers-perl6@rgrjr.dyndns.org>
Cc: Jonathan Worthington <jonathan@jnthn.net>, parrot-porters@perl.org
Subject: Re: pdd15 - How do I add a class method?
Message-ID: <20070621052707.GA24043@host.pmichaud.com>
References: <20070619195846.GA16042@host.pmichaud.com> <4679B29C.3010407@jnthn.net> <18041.55084.546995.290540@rgrjr.dyndns.org> <20070621020254.GC7601@host.pmichaud.com> <18041.58512.241497.778850@rgrjr.dyndns.org>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <18041.58512.241497.778850@rgrjr.dyndns.org>
User-Agent: Mutt/1.4.2.1i
X-AntiAbuse: This header was added to track abuse, please include it with any abuse report
X-AntiAbuse: Primary Hostname - host.pmichaud.com
X-AntiAbuse: Original Domain - perl.org
X-AntiAbuse: Originator/Caller UID/GID - [32003 505] / [47 12]
X-AntiAbuse: Sender Address Domain - host.pmichaud.com
X-Source: 
X-Source-Args: 
X-Source-Dir: 
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-1.9 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL

On Wed, Jun 20, 2007 at 10:38:08PM -0400, Bob Rogers wrote:
>    From: "Patrick R. Michaud" <pmichaud@pobox.com>
>    On Wed, Jun 20, 2007 at 09:41:00PM -0400, Bob Rogers wrote:
>    >    Patrick R. Michaud wrote:
>    >    > My first question is "How do I add a class method?" -- i.e.,
>    >    > a method that operates on a class instance as opposed
>    >    > to an object instance of that class . . .
>    > 
>    > A method that operates on a class instance would be an instance method
>    > of the class metaclass, wouldn't it?  But I think you meant "on a
>    > *particular* class [metaclass] instance", am I right?
> 
>    Yes, I believe this is a better phrasing.  If I want to define a
>    new method or or override an existing method on a metaclass instance
>    [a class], then how do I do that?
> 
> AFAICS, there isn't currently a good way to do that.  (Depending, of
> course, on whether you think Jonathan's suggestion qualifies.  ;-)
> Nor does PDD15 seem to cover this; it actually says very little about
> metaclasses, beyond just the fact that they exist (and even then only
> mentions class metaclasses).

To somewhat see where I came from in this, pdd15 has a =head3
section titled "Class Methods", where all of the methods appear to
be operations on classes, as opposed to instances of the
class.  There's also a line in pdd15 that reads:

    =item - Classes are instances of a meta-class and have their 
    own sets of class methods and class attributes

So, I was wondering how one would create a class method.

>    The particular instance I'm looking at is a C<Str> class for
>    Perl 6, where I want the get_string vtable function for the
>    C<Str> metaclass instance is different from get_string of 
>    a C<Str> class object.
> 
> To me, the phrases "C<Str> metaclass instance" and "C<Str> class object"
> sound like the same thing.  Did you mean "C<Str> object" in the second
> case?  

I did.  Apologies for the ambiguity.

> If so, then get_string on the class metaclass would just affect
> the way the class stringifies, and not any of the instances, but I don't
> get the point of that.  So I'm sure I must be misunderstanding you.  Do
> you have an example?  Maybe the perl6 code you mention?

Well, after re-reading S12 this evening I've determined that
the perl6 example I was thinking of isn't precisely correct
for the current spec, and I think it's better not to confuse 
the issue (or myself) by trying to describe my incorrect example.
(Essentially, it had to do with the way the Str class stringifies 
as opposed to the way a Str object stringifies.)

But, I think I have another way to describe what I'm asking.  
In an earlier message [1] Allison wrote that the 'typeof' operator
will now return different values for class objects and instances of
the class.  For example:

    $P0 = newclass "Foo"
    $P1 = new $P0

    $S0 = typeof $P0   # returns "Class"
    $S1 = typeof $P1   # returns "Foo"

I was wanting to know how to do something similar, except with
get_string instead of typeof.  In particular, the example I've
been thinking of is:

    $P0 = get_class "Str"  # get the Str class
    $P1 = new $P0          # create a Str instance
    assign $P1, "XYZ"      # give it a value

    $S0 = $P0              # returns "Str"
    $S1 = $P1              # returns "XYZ"

In short, I was wondering how I would get a class to stringify
to its name (or possibly some mocked value), while having 
the instances of that class continue to stringify to their values.  

As I mentioned above, my re-reading of S12 may make this
particular question moot, although it's important to note
that Jonathan apparently encountered something like it as
well.  :-)  At any rate, I hope the example here hopes to
clear up what I was looking for.

And thanks for being so patient as I try to get an accurate
description together.  :-)

Pm

[1] http://www.nntp.perl.org/group/perl.perl6.internals/2007/06/msg38608.html

