From samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org  Sun May 13 21:05:35 2007
Return-Path: <samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org>
Received: from lists.samba.org (mail.samba.org [66.70.73.150])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l4E15ZqD014375
	for <ktwarwic@speedy.uwaterloo.ca>; Sun, 13 May 2007 21:05:35 -0400
Received: from dp.samba.org (localhost [127.0.0.1])
	by lists.samba.org (Postfix) with ESMTP id E5A5E163885
	for <ktwarwic@speedy.uwaterloo.ca>; Mon, 14 May 2007 01:05:32 +0000 (GMT)
X-Spam-Checker-Version: SpamAssassin 3.1.7 (2006-10-05) on dp.samba.org
X-Spam-Level: 
X-Spam-Status: No, score=-0.1 required=3.8 tests=AWL,BAYES_00,NO_REAL_NAME,
	NO_RELAYS,RCVD_IN_DSBL autolearn=no version=3.1.7
X-Original-To: samba-cvs@samba.org
Delivered-To: samba-cvs@samba.org
Received: by lists.samba.org (Postfix, from userid 603)
	id 04B1B162BCB; Mon, 14 May 2007 01:05:09 +0000 (GMT)
To: samba-cvs@samba.org
From: tridge@samba.org
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Message-Id: <20070514010510.04B1B162BCB@lists.samba.org>
Date: Mon, 14 May 2007 01:05:09 +0000 (GMT)
Subject: svn commit: samba r22836 - in
	branches/SAMBA_4_0/source/torture/raw: .
X-BeenThere: samba-cvs@lists.samba.org
X-Mailman-Version: 2.1.5
Precedence: list
Reply-To: samba-technical@lists.samba.org
List-Id: Samba CVS and subversion commit messages <samba-cvs.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/archive/samba-cvs>
List-Post: <mailto:samba-cvs@lists.samba.org>
List-Help: <mailto:samba-cvs-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=subscribe>
Sender: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Errors-To: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org

Author: tridge
Date: 2007-05-14 01:05:09 +0000 (Mon, 14 May 2007)
New Revision: 22836

WebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22836

Log:

started adding auto-reconnect logic to lockbench. This needs to be
made async.

Modified:
   branches/SAMBA_4_0/source/torture/raw/lockbench.c


Changeset:
Modified: branches/SAMBA_4_0/source/torture/raw/lockbench.c
===================================================================
--- branches/SAMBA_4_0/source/torture/raw/lockbench.c	2007-05-14 01:04:35 UTC (rev 22835)
+++ branches/SAMBA_4_0/source/torture/raw/lockbench.c	2007-05-14 01:05:09 UTC (rev 22836)
@@ -44,7 +44,9 @@
 static int lock_failed;
 
 struct benchlock_state {
+	struct event_context *ev;
 	struct smbcli_state *cli;
+	int client_num;
 	int fnum;
 	int offset;
 	int count;
@@ -77,6 +79,33 @@
 }
 
 /*
+  reopen dead connections
+ */
+static void reopen_connection(struct benchlock_state *state)
+{
+	do {
+		DEBUG(0,("reopening connection %u\n", state->client_num));
+	} while (!torture_open_connection_ev(&state->cli, state->client_num, state->ev));
+	
+	state->fnum = smbcli_open(state->cli->tree, FNAME, O_RDWR|O_CREAT, DENY_NONE);
+	if (state->fnum == -1) {
+		printf("Failed to open %s on connection %d\n", FNAME, state->client_num);
+		exit(1);
+	}
+
+	state->lock[0].offset = state->offset;
+	state->io.lockx.in.ulock_cnt = 0;
+	state->req = smb_raw_lock_send(state->cli->tree, &state->io);
+	if (state->req == NULL) {
+		DEBUG(0,("Failed to setup lock\n"));
+		lock_failed++;
+	}
+	state->req->async.private = state;
+	state->req->async.fn      = lock_completion;
+	state->offset = (state->offset+1)%nprocs;
+}
+
+/*
   called when a lock completes
 */
 static void lock_completion(struct smbcli_request *req)
@@ -87,6 +116,9 @@
 	if (!NT_STATUS_IS_OK(status)) {
 		lock_failed++;
 		DEBUG(0,("Lock failed - %s\n", nt_errstr(status)));
+		if (NT_STATUS_EQUAL(status, NT_STATUS_END_OF_FILE)) {
+			reopen_connection(state);
+		}
 	} else {
 		state->count++;
 		lock_send(state);
@@ -114,6 +146,8 @@
 
 	printf("Opening %d connections\n", nprocs);
 	for (i=0;i<nprocs;i++) {
+		state[i].client_num = i;
+		state[i].ev = ev;
 		if (!torture_open_connection_ev(&state[i].cli, i, ev)) {
 			return False;
 		}
@@ -171,9 +205,10 @@
 		for (i=0;i<nprocs;i++) {
 			total += state[i].count;
 		}
-
 		if (torture_setting_bool(torture, "progress", true)) {
-			printf("%.2f ops/second\r", total/timeval_elapsed(&tv));
+			printf("%.2f ops/second (remaining=%u)\r", 
+			       total/timeval_elapsed(&tv), 
+			       (unsigned)(timelimit - timeval_elapsed(&tv)));
 			fflush(stdout);
 		}
 	}

