From perl6-all-return-81025-ktwarwic=speedy.uwaterloo.ca@perl.org  Tue May  1 13:27:04 2007
Return-Path: <perl6-all-return-81025-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l41HR4b9010015
	for <ktwarwic@flax9.uwaterloo.ca>; Tue, 1 May 2007 13:27:04 -0400
Received: (qmail 15016 invoked by uid 514); 1 May 2007 16:27:02 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 15011 invoked from network); 1 May 2007 16:27:02 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: domain of dataweaver@gmail.com designates 209.85.132.250 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=asOjrir+YuybCaDnpOoNvwYjFtc/YuOccFOVTQcFelkhnqPAvHnji0uZMZt02CPUrRMQeAi3lSNvyzTj0juRFNziOFiZUvNKGgFCmweoP3xsubRU4xzI0K2NHAWGYwNsayDhcDVqmNpRUK2Q7cmtE6ENvVwDKnTnEet+wHufuIc=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=P9RNW56jowbBpUdKqEUmaO7GhVRfskCsRyNnxwNwYQ+0ipznICymQbfP+f4OQoZngXI0U4bgflElSswO0QzyYgnQrqIMBn3Y9A+IN/gXaEJTzvJqnDp3ZZz5rgznoMnz4Uc1k4tQDV1S3kUqJKbfsPvkqr8PrHtODILKyILRFAw=
Message-ID: <ef30550b0705010926i551fa130l6edb31f29f49e860@mail.gmail.com>
Date: Tue, 1 May 2007 09:26:38 -0700
From: "Jonathan Lang" <dataweaver@gmail.com>
To: "brian d foy" <brian.d.foy@gmail.com>, p6l <perl6-language@perl.org>
Subject: Re: Default filehandles, or topicalizing filehandles, or something
In-Reply-To: <010520071001251494%brian.d.foy@gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <010520071001251494%brian.d.foy@gmail.com>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
Status: O
Content-Length: 1662
Lines: 51

On 5/1/07, brian d foy <brian.d.foy@gmail.com> wrote:
> I was thinking about default filehandles yesterday. select() doesn't
> seem to be around except as an "Unfiled" function in S16.
>
> Then, as I was looking at
>
>    .say( "Hello World" );

At various times, I have seen something to the effect of each of the
following being bandied about:

  $*OUT.say( "Hello World" );
  "Hello World".say;

That is, both filehandles and strings have 'say' methods that do
essentially the same thing, but using subtly different syntax.  How
would I use &("Hello World".say) to write to filehandle $FH?  My gut
reaction would be to use an adverb for the purpose:

  "Hello World".say :to($FH);

This would also work for the sub version:

  say :to($FH) "Hello World";

With this in mind, you probably could create a localized alias for
'say', if you wanted to:

  {
    my &say := &OUTER::say.assuming(:to($FH));
    say "Hello World"; # same as 'say "Hello World" :to($FH);'
  }

The catch with this is that you'd have to do this for each output
routine separately.

How about this: Do the output routines default to the global
filehandles directly, or do they default to lexical bindings of them?
That is, does 'say' output to $*OUT in the absence of an explicit
filehandle, or does it output to $OUT (with the latter normally being
bound to $*OUT)?  If the latter, you should be able to redirect all of
your output in the rest of the current scope by saying:

  $OUT := $*ERR;

I can understand not being able to rebind the global filehandles.
After all: once they're rebound, how would you ever find what they
were originally bound to?

-- 
Jonathan "Dataweaver" Lang

