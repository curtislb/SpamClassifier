From perl6-all-return-80570-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri Apr 13 21:00:49 2007
Return-Path: <perl6-all-return-80570-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3E10m0I028912
	for <ktwarwic@speedy.uwaterloo.ca>; Fri, 13 Apr 2007 21:00:48 -0400
Received: (qmail 17730 invoked by uid 514); 14 Apr 2007 01:00:23 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 17725 invoked from network); 14 Apr 2007 01:00:22 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-1.5 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME,FORGED_RCVD_HELO,NO_REAL_NAME
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
From: larry@cvs.develooper.com
To: perl6-language@perl.org
Subject: [svn:perl6-synopsis] r14374 - doc/trunk/design/syn
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Message-Id: <20070414005959.7C595CB9B8@x12.develooper.com>
Date: Fri, 13 Apr 2007 17:59:59 -0700 (PDT)
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-3.4 required=8.0
	tests=ALL_TRUSTED,BAYES_00,DK_POLICY_SIGNSOME,NO_REAL_NAME
Status: O
Content-Length: 3127
Lines: 94

Author: larry
Date: Fri Apr 13 17:59:55 2007
New Revision: 14374

Modified:
   doc/trunk/design/syn/S03.pod
   doc/trunk/design/syn/S12.pod

Log:
Eliminated STATUS in favor of normal dispatch to :foo pair-handling methods.


Modified: doc/trunk/design/syn/S03.pod
==============================================================================
--- doc/trunk/design/syn/S03.pod	(original)
+++ doc/trunk/design/syn/S03.pod	Fri Apr 13 17:59:55 2007
@@ -14,7 +14,7 @@
   Date: 8 Mar 2004
   Last Modified: 13 Apr 2007
   Number: 3
-  Version: 112
+  Version: 113
 
 =head1 Overview
 
@@ -2266,7 +2266,7 @@
     Any       Num       numeric equality        +$_ == X
     Any       Str       string equality         ~$_ eq X
 
-    Any       Pair      test object             .STATUS(X) (Str,IO do filetest)
+    Any       Pair      test object             .:Xkey(Xval) (e.g. filetests)
 
     Set       Set       identical sets          $_ === X
     Hash      Set       hash keys same set      $_.keys === X

Modified: doc/trunk/design/syn/S12.pod
==============================================================================
--- doc/trunk/design/syn/S12.pod	(original)
+++ doc/trunk/design/syn/S12.pod	Fri Apr 13 17:59:55 2007
@@ -12,9 +12,9 @@
 
   Maintainer: Larry Wall <larry@wall.org>
   Date: 27 Oct 2004
-  Last Modified: 11 Mar 2007
+  Last Modified: 13 Apr 2007
   Number: 12
-  Version: 45
+  Version: 46
 
 =head1 Overview
 
@@ -613,26 +613,15 @@
 =head1 Pair query methods
 
 Certain classes such as filehandles allow colon pairs to be used as if they
-were methods.  When you say:
+were methods.  Method names beginning with a colon:
 
     $filehandle.:e
     $filehandle.:!x
 
-it actually calls
-
-    $filehandle.STATUS(:e)
-    $filehandle.STATUS(:!x)
-
-which is expected to return a value that can be used as a boolean.
+are expected to return a value that can be used as a boolean.
 While this is primarily intended for use by file tests, other classes
-may define a C<STATUS> method to provide a similar mechanism for interrogating
-lightweight properties without having to define methods for all of them.
-
-Note, though, that I<all> such queries are answered by the first located
-C<STATUS> method--they are not inherited independently.  The C<STATUS> method
-must explicitly pass the query on to other classes in such cases.  Likewise,
-if conflicting C<STATUS> methods are composed from two different roles, they
-must be disambiguated as any other conflicting method would be.
+may define such methods to provide a similar mechanism for interrogating
+properties.
 
 Depending on the class, the pairs in question may have arguments.
 The C<Hash> class in particular makes use of pair syntax for subscript
@@ -643,7 +632,10 @@
 
 This has the advantage that the pair's argument is actually parsed exactly
 as a subscript would be.  A C<.exists()> method could not easily make
-such a guarantee about its arguments.
+such a guarantee about its arguments.  Plus you can say:
+
+    %hash.:exists<foo>
+    %hash.:delete<foo>
 
 Conjecture, the trailing subscript adverbs could be brought up front as
 well:

