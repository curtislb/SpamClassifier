From perl6-all-return-81411-ktwarwic=speedy.uwaterloo.ca@perl.org  Tue May 15 22:11:09 2007
Return-Path: <perl6-all-return-81411-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4G2B8qD012925
	for <ktwarwic@flax9.uwaterloo.ca>; Tue, 15 May 2007 22:11:09 -0400
Received: (qmail 2446 invoked by uid 514); 16 May 2007 02:11:05 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 2441 invoked from network); 16 May 2007 02:11:05 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: domain of mehmet.yavuz.selim@gmail.com designates 64.233.162.233 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=YNEWs61V5+4btTcJrLxf5MLbHx3WHwWKKkk8AB9C87P+BNPfVmMg+S2Va6/e+0CvL1a3cN3IbPOnlDpNtXOSO/NDilWzJX5S8YJQZcLTI0UmemxwTtwrTErjqB7TT/IzAm1Vdl13mlxa20BJImSm9Z0tE5mVy5YKqAcELVTzSQQ=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=WYCJFT7brX0hmEgFnXae8FN1xylRGC9SNYX2OuC8SV75WBncUTj3wf6W5nD8FyylJb7o0VMwW1PYpQIHe05V9lnexQllLQ5cXMxVt63NNNn8qGqoEMYxy4aIto9ae/LAN8bjT2pPagpIRI7kKbsyC9icoWtZSYDdMIuxUXBnI3c=
Message-ID: <1abd9eb20705151909t4b32f695n69d70e69db4f198c@mail.gmail.com>
Date: Wed, 16 May 2007 04:09:32 +0200
From: "Mehmet Yavuz Selim Soyturk" <mehmet.yavuz.selim@gmail.com>
To: perl6-internals@perl.org
Subject: Re: [perl #42919] [BUG] and [PATCH] overriding 'invoke' requires current object to be explicitly passed
In-Reply-To: <189adbd0705151352lda0685cn1c7a9413fcfe9305@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <RT-Ticket-42919@perl.org>
	 <189adbd0705101439q956a1beve7039f1e04c9d115@mail.gmail.com>
	 <rt-3.6.HEAD-12281-1178833308-463.42919-72-0@perl.org>
	 <1abd9eb20705141114g5c652bf9w54cda2ac2934fac6@mail.gmail.com>
	 <189adbd0705151352lda0685cn1c7a9413fcfe9305@mail.gmail.com>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS

On 5/15/07, Alek Storm <alek.storm@gmail.com> wrote:
> On 5/14/07, Mehmet Yavuz Selim Soyturk <mehmet.yavuz.selim@gmail.com >
> wrote:
> > Should we not be able to use an object that implements 'invoke' as a
> > method of another object? There is some strange behaviour when I try
> > to.
>
> I see what you're saying, and it looks like you want a functor.  We can't do
> exactly what you want in that syntax, because methods are loosely tied to
> objects in Parrot.  Parrot sees 'Func' as a sub, so it wouldn't make any
> sense to tell the sub it's called by itself.  Regardless of what
> 'find_method' returns, the invocant is $P2 when you use PIR syntax.  Here's
> how to get the effect you want:
>
> .sub main :main
>   $P0 = newclass 'Func'
>   $P1 = newclass 'Obj'
>   $P2 = new 'Obj'
>   $P3 = find_method $P2, 'some_method'
>   $P3.$P3()
> .end
>
> The patch has been reverted, though, so that won't work until it's fixed and
> reapplied.

What I really meant is $P2.$P3() . With Allison's patch both

   (*)   $P2.'some_method'()
and
   (**)  $P3 = find_method $P2, 'some_method'
         $P2.$P3()

caused the same strange behaviour. I applied your patch, and (**)
worked as I expected. But (*) caused an error:

    too many arguments passed (3) - 2 params expected


I think that I found the problem. callmethodcc calls
VTABLE_find_method, which invokes the find_method override, which is a
PIR sub. That causes that interp->current_args gets overwritten.

I have a patch which tries to solve that problem:

--- src/ops/object.ops  (revision 18542)
+++ src/ops/object.ops  (working copy)
@@ -50,11 +50,20 @@
   PMC *method_pmc, *object;
   opcode_t *next;
   STRING *meth;
+  opcode_t *current_args;

   object = $1;
   meth = $2;
   next = expr NEXT();
+
+  /* If VTABLE_find_method calls a find_method override (which
+     is another PIR sub), interp->current_args gets overwritten.
+     We have to remember it.
+  */
+  current_args = interp->current_args;
   method_pmc = VTABLE_find_method(interp, object, meth);
+  interp->current_args = current_args;
+
   if (!method_pmc) {
     real_exception(interp, next, METH_NOT_FOUND,
         "Method '%Ss' not found", meth);


I only did it for the callmethodcc_p_sc opcode though, because I don't
know if it's the right solution. A possible problem: could
current_args get GC'd in the meantime?

-- 
Mehmet

