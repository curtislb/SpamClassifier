From samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org  Tue May  1 21:49:10 2007
Return-Path: <samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org>
Received: from lists.samba.org (mail.samba.org [66.70.73.150])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l421n9b9015823
	for <ktwarwic@speedy.uwaterloo.ca>; Tue, 1 May 2007 21:49:09 -0400
Received: from dp.samba.org (localhost [127.0.0.1])
	by lists.samba.org (Postfix) with ESMTP id 355F4163937
	for <ktwarwic@speedy.uwaterloo.ca>; Tue,  1 May 2007 09:06:59 +0000 (GMT)
X-Spam-Checker-Version: SpamAssassin 3.1.7 (2006-10-05) on dp.samba.org
X-Spam-Level: 
X-Spam-Status: No, score=-0.2 required=3.8 tests=AWL,BAYES_00,NO_REAL_NAME,
	NO_RELAYS,RCVD_IN_DSBL autolearn=no version=3.1.7
X-Original-To: samba-cvs@samba.org
Delivered-To: samba-cvs@samba.org
Received: by lists.samba.org (Postfix, from userid 620)
	id 6EA41162BD0; Tue,  1 May 2007 09:06:26 +0000 (GMT)
To: samba-cvs@samba.org
From: metze@samba.org
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Message-Id: <20070501090626.6EA41162BD0@lists.samba.org>
Date: Tue,  1 May 2007 09:06:26 +0000 (GMT)
Subject: svn commit: samba r22628 - in
	branches/SAMBA_4_0/source/libcli/smb_composite: .
X-BeenThere: samba-cvs@lists.samba.org
X-Mailman-Version: 2.1.5
Precedence: list
Reply-To: samba-technical@lists.samba.org
List-Id: Samba CVS and subversion commit messages <samba-cvs.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/archive/samba-cvs>
List-Post: <mailto:samba-cvs@lists.samba.org>
List-Help: <mailto:samba-cvs-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=subscribe>
Sender: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Errors-To: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org

Author: metze
Date: 2007-05-01 09:06:25 +0000 (Tue, 01 May 2007)
New Revision: 22628

WebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22628

Log:
convert to new composite api
and free the smbcli_request explicit to fix a crash where
the request handler gets called after its private data is already
freed

metze
Modified:
   branches/SAMBA_4_0/source/libcli/smb_composite/sesssetup.c


Changeset:
Modified: branches/SAMBA_4_0/source/libcli/smb_composite/sesssetup.c
===================================================================
--- branches/SAMBA_4_0/source/libcli/smb_composite/sesssetup.c	2007-05-01 08:43:52 UTC (rev 22627)
+++ branches/SAMBA_4_0/source/libcli/smb_composite/sesssetup.c	2007-05-01 09:06:25 UTC (rev 22628)
@@ -38,6 +38,16 @@
 	struct smbcli_request *req;
 };
 
+static int sesssetup_state_destructor(struct sesssetup_state *state)
+{
+	if (state->req) {
+		talloc_free(state->req);
+		state->req = NULL;
+	}
+
+	return 0;
+}
+
 static NTSTATUS session_setup_old(struct composite_context *c,
 				  struct smbcli_session *session, 
 				  struct smb_composite_sesssetup *io,
@@ -75,6 +85,7 @@
 	NTSTATUS session_key_err, nt_status;
 
 	c->status = smb_raw_sesssetup_recv(req, state, &state->setup);
+	state->req = NULL;
 
 	switch (state->setup.old.level) {
 	case RAW_SESSSETUP_OLD:
@@ -90,8 +101,7 @@
 							      &state->req);
 				if (NT_STATUS_IS_OK(nt_status)) {
 					c->status = nt_status;
-					state->req->async.fn = request_handler;
-					state->req->async.private = c;
+					composite_continue_smb(c, state->req, request_handler, c);
 					return;
 				}
 			}
@@ -109,8 +119,7 @@
 							      &state->req);
 				if (NT_STATUS_IS_OK(nt_status)) {
 					c->status = nt_status;
-					state->req->async.fn = request_handler;
-					state->req->async.private = c;
+					composite_continue_smb(c, state->req, request_handler, c);
 					return;
 				}
 			}
@@ -128,8 +137,7 @@
 								      &state->req);
 				if (NT_STATUS_IS_OK(nt_status)) {
 					c->status = nt_status;
-					state->req->async.fn = request_handler;
-					state->req->async.private = c;
+					composite_continue_smb(c, state->req, request_handler, c);
 					return;
 				}
 			}
@@ -158,7 +166,7 @@
 		} else {
 			state->setup.spnego.in.secblob = data_blob(NULL, 0);
 		}
-			
+
 		/* we need to do another round of session setup. We keep going until both sides
 		   are happy */
 		session_key_err = gensec_session_key(session->gensec, &session_key);
@@ -176,8 +184,7 @@
 			session->vuid = state->io->out.vuid;
 			state->req = smb_raw_sesssetup_send(session, &state->setup);
 			session->vuid = vuid;
-			state->req->async.fn = request_handler;
-			state->req->async.private = c;
+			composite_continue_smb(c, state->req, request_handler, c);
 			return;
 		}
 		break;
@@ -196,14 +203,12 @@
 		}
 	}
 
-	if (NT_STATUS_IS_OK(c->status)) {
-		c->state = COMPOSITE_STATE_DONE;
-	} else {
-		c->state = COMPOSITE_STATE_ERROR;
+	if (!NT_STATUS_IS_OK(c->status)) {
+		composite_error(c, c->status);
+		return;
 	}
-	if (c->async.fn) {
-		c->async.fn(c);
-	}
+
+	composite_done(c);
 }
 
 
@@ -457,20 +462,16 @@
 	struct sesssetup_state *state;
 	NTSTATUS status;
 
-	c = talloc_zero(session, struct composite_context);
+	c = composite_create(session, session->transport->socket->event.ctx);
 	if (c == NULL) return NULL;
 
-	state = talloc(c, struct sesssetup_state);
-	if (state == NULL) {
-		talloc_free(c);
-		return NULL;
-	}
+	state = talloc_zero(c, struct sesssetup_state);
+	if (composite_nomem(state, c)) return c;
+	c->private_data = state;
 
 	state->io = io;
 
-	c->state = COMPOSITE_STATE_IN_PROGRESS;
-	c->private_data = state;
-	c->event_ctx = session->transport->socket->event.ctx;
+	talloc_set_destructor(state, sesssetup_state_destructor);
 
 	/* no session setup at all in earliest protocol varients */
 	if (session->transport->negotiate.protocol < PROTOCOL_LANMAN1) {
@@ -491,13 +492,11 @@
 
 	if (NT_STATUS_EQUAL(status, NT_STATUS_MORE_PROCESSING_REQUIRED) || 
 	    NT_STATUS_IS_OK(status)) {
-		state->req->async.fn = request_handler;
-		state->req->async.private = c;
+		composite_continue_smb(c, state->req, request_handler, c);	
 		return c;
 	}
 
-	c->state = COMPOSITE_STATE_ERROR;
-	c->status = status;
+	composite_error(c, status);
 	return c;
 }
 

