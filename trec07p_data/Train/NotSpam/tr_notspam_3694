From r-help-bounces@stat.math.ethz.ch  Fri Apr 20 16:36:10 2007
Return-Path: <r-help-bounces@stat.math.ethz.ch>
Received: from hypatia.math.ethz.ch (hypatia.math.ethz.ch [129.132.145.15])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l3KKa70I010809
	for <ktwarwic@speedy.uwaterloo.ca>; Fri, 20 Apr 2007 16:36:09 -0400
Received: from hypatia.math.ethz.ch (hypatia [129.132.145.15])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l3KKYSwr030128;
	Fri, 20 Apr 2007 22:34:46 +0200
X-Spam-Checker-Version: SpamAssassin 3.1.8 (2007-02-13) on hypatia.math.ethz.ch
X-Spam-Level: 
X-Spam-Status: No, score=0.1 required=5.0 tests=AWL, BAYES_50,
	SPF_HELO_PASS autolearn=no version=3.1.8
Received: from mout.perfora.net (mout.perfora.net [74.208.4.195])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l3KKYGRB030092
	for <r-help@stat.math.ethz.ch>; Fri, 20 Apr 2007 22:34:17 +0200
Received: from [71.39.177.44] (helo=[192.168.118.73])
	by mrelay.perfora.net (node=mrelayus1) with ESMTP (Nemesis),
	id 0MKp2t-1Heznw0KjE-00005G; Fri, 20 Apr 2007 16:34:07 -0400
Message-ID: <462923B5.9010505@acm.org>
Date: Fri, 20 Apr 2007 14:33:57 -0600
From: Tony Plate <tplate@acm.org>
User-Agent: Thunderbird 1.5.0.10 (Windows/20070221)
MIME-Version: 1.0
To: Iestyn Lewis <ilewis@pharm.emory.edu>
References: <4628EA82.3040207@pharm.emory.edu>		<f8e6ff050704201148mfd75c5cs3998195dbabf4cff@mail.gmail.com>		<46290F5D.4090707@pharm.emory.edu>	<f8e6ff050704201237i3c6facif9900d0c4987ad9b@mail.gmail.com>
	<46291C00.6020904@pharm.emory.edu>
In-Reply-To: <46291C00.6020904@pharm.emory.edu>
X-Provags-ID: V01U2FsdGVkX18yR5BE9jKDP5rF8kIVgdwpAsA1O60n7D5f0lv
	ffndrd1DXVzuz9bMBp6qfM8tdLywjpsXjaMuw/RSWxA9VmeB/Z
	TptKqppVdKRuUnLOMLCPg==
X-Virus-Scanned: by amavisd-new at stat.math.ethz.ch
Cc: r-help@stat.math.ethz.ch
Subject: Re: [R] Fastest way to repeatedly subset a data frame?
X-BeenThere: r-help@stat.math.ethz.ch
X-Mailman-Version: 2.1.9
Precedence: list
List-Id: "Main R Mailing List: Primary help" <r-help.stat.math.ethz.ch>
List-Unsubscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=unsubscribe>
List-Archive: <https://stat.ethz.ch/pipermail/r-help>
List-Post: <mailto:r-help@stat.math.ethz.ch>
List-Help: <mailto:r-help-request@stat.math.ethz.ch?subject=help>
List-Subscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: r-help-bounces@stat.math.ethz.ch
Errors-To: r-help-bounces@stat.math.ethz.ch
Status: O
Content-Length: 5497
Lines: 175

Here's some timings on seemingly minor variations of data structure 
showing timings ranging by a factor of 100 (factor of 3 if the worst is 
omitted).  One of the keys is to avoid use of the partial string match 
that happens with ordinary data frame subscripting.

-- Tony Plate

 > n <- 10000 # number of rows in data frame
 > k <- 500   # number of vectors in indexing list
 > # use a data frame with regular row names and id as factor (defaults 
for data.frame)
 > df <- data.frame(id=paste("ID", seq(len=n), sep=""), 
result=seq(len=n), stringsAsFactors=TRUE)
 > object.size(df)
[1] 440648
 > df[1:3,,drop=FALSE]
    id result
1 ID1      1
2 ID2      2
3 ID3      3
 > set.seed(1)
 > ids <- lapply(seq(k), function(i) paste("ID", sample(n, 
size=sample(seq(ceiling(n/1000), n/2, 1))), sep=""))
 > sum(sapply(ids, length))
[1] 1263508
 > system.time(lapply(ids, function(i) df[match(i, df$id),,drop=FALSE]))
    user  system elapsed
    3.00    0.00    3.03
 >
 > # use a data frame with automatic row names (should be low overhead) 
and id as factor
 > df <- data.frame(id=paste("ID", seq(len=n), sep=""), 
result=seq(len=n), row.names=NULL, stringsAsFactors=TRUE)
 > object.size(df)
[1] 440648
 > df[1:3,,drop=FALSE]
    id result
1 ID1      1
2 ID2      2
3 ID3      3
 > set.seed(1)
 > ids <- lapply(seq(k), function(i) paste("ID", sample(n, 
size=sample(seq(ceiling(n/1000), n/2, 1))), sep=""))
 > sum(sapply(ids, length))
[1] 1263508
 > system.time(lapply(ids, function(i) df[match(i, df$id),,drop=FALSE]))
    user  system elapsed
    2.68    0.00    2.70
 >
 > # use a data frame with automatic row names (should be low overhead) 
and id as character
 > df <- data.frame(id=paste("ID", seq(len=n), sep=""), 
result=seq(len=n), row.names=NULL, stringsAsFactors=FALSE)
 > object.size(df)
[1] 400448
 > df[1:3,,drop=FALSE]
    id result
1 ID1      1
2 ID2      2
3 ID3      3
 > set.seed(1)
 > ids <- lapply(seq(k), function(i) paste("ID", sample(n, 
size=sample(seq(ceiling(n/1000), n/2, 1))), sep=""))
 > sum(sapply(ids, length))
[1] 1263508
 > system.time(lapply(ids, function(i) df[match(i, df$id),,drop=FALSE]))
    user  system elapsed
    1.54    0.00    1.59
 >
 > # use a data frame with ids as the row names & subscripting for 
matching (should be high overhead)
 > df <- data.frame(id=paste("ID", seq(len=n), sep=""), 
result=seq(len=n), row.names="id")
 > object.size(df)
[1] 400384
 > df[1:3,,drop=FALSE]
     result
ID1      1
ID2      2
ID3      3
 > set.seed(1)
 > ids <- lapply(seq(k), function(i) paste("ID", sample(n, 
size=sample(seq(ceiling(n/1000), n/2, 1))), sep=""))
 > sum(sapply(ids, length))
[1] 1263508
 > system.time(lapply(ids, function(i) df[i,,drop=FALSE]))
    user  system elapsed
  109.15    0.04  111.28
 >
 > # use a data frame with ids as the row names & match()
 > df <- data.frame(id=paste("ID", seq(len=n), sep=""), 
result=seq(len=n), row.names="id")
 > object.size(df)
[1] 400384
 > df[1:3,,drop=FALSE]
     result
ID1      1
ID2      2
ID3      3
 > set.seed(1)
 > ids <- lapply(seq(k), function(i) paste("ID", sample(n, 
size=sample(seq(ceiling(n/1000), n/2, 1))), sep=""))
 > sum(sapply(ids, length))
[1] 1263508
 > system.time(lapply(ids, function(i) df[match(i, 
rownames(df)),,drop=FALSE]))
    user  system elapsed
    1.53    0.00    1.58
 >
 > # use a named numeric vector to store the same data as was stored in 
the data frame
 > x <- seq(len=n)
 > names(x) <- paste("ID", seq(len=n), sep="")
 > object.size(x)
[1] 400104
 > x[1:3]
ID1 ID2 ID3
   1   2   3
 > set.seed(1)
 > ids <- lapply(seq(k), function(i) paste("ID", sample(n, 
size=sample(seq(ceiling(n/1000), n/2, 1))), sep=""))
 > sum(sapply(ids, length))
[1] 1263508
 > system.time(lapply(ids, function(i) x[match(i, names(x))]))
    user  system elapsed
    1.14    0.05    1.19
 >





Iestyn Lewis wrote:
> Good tip - an Rprof trace over my real data set resulted in a file 
> filled with:
> 
> pmatch [.data.frame [ FUN lapply
> pmatch [.data.frame [ FUN lapply
> pmatch [.data.frame [ FUN lapply
> pmatch [.data.frame [ FUN lapply
> pmatch [.data.frame [ FUN lapply
> ...
> with very few other calls in there.  pmatch seems to be the string 
> search function, so I'm guessing there's no hashing going on, or not 
> very good hashing.
> 
> I'll let you know how the environment option works - the Bioconductor 
> project seems to make extensive use of it, so I'm guessing it's the way 
> to go.
> 
> Iestyn
> 
> hadley wickham wrote:
>>> But... it's not any faster, which is worrisome to me because it seems
>>> like your code uses rownames and would take advantage of the hashing
>>> potential of named items.
>> I'm pretty sure it will use a hash to access the specified rows.
>> Before you pursue an environment based solution, you might want to
>> profile the code to check that the hashing is actually the slowest
>> part - I suspect creating all new data.frames is taking the most time.
>>
>> Hadley
> 
> ______________________________________________
> R-help@stat.math.ethz.ch mailing list
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

______________________________________________
R-help@stat.math.ethz.ch mailing list
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.

