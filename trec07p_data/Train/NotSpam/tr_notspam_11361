From perl6-all-return-81452-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu May 17 13:05:32 2007
Return-Path: <perl6-all-return-81452-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4HH5UqD002262
	for <ktwarwic@flax9.uwaterloo.ca>; Thu, 17 May 2007 13:05:31 -0400
Received: (qmail 3953 invoked by uid 514); 17 May 2007 17:05:26 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 3948 invoked from network); 17 May 2007 17:05:26 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: softfail (x1.develooper.com: transitioning domain of chromatic@wgz.org does not designate 63.251.223.186 as permitted sender)
Delivered-To: perlmail-parrot-porters@onion.perl.org
Delivered-To: parrot-porters@perl.org
Received-SPF: pass (x1.develooper.com: domain of chromatic@wgz.org designates 63.105.17.39 as permitted sender)
From: chromatic <chromatic@wgz.org>
Organization: Snafu
To: "jerry gay" <jerry.gay@gmail.com>
Subject: Re: r18572 - trunk/compilers/imcc
Date: Thu, 17 May 2007 10:00:51 -0700
User-Agent: KMail/1.9.6
Cc: p2 <parrot-porters@perl.org>
References: <1d9a3f400705170932p411c3bdfla6be41b011be4996@mail.gmail.com>
In-Reply-To: <1d9a3f400705170932p411c3bdfla6be41b011be4996@mail.gmail.com>
MIME-Version: 1.0
Content-Type: Multipart/Mixed;
  boundary="Boundary-00=_DpITGB0n+fAoIaM"
Message-Id: <200705171000.51790.chromatic@wgz.org>
X-Virus-Scanned: by amavisd-new at wgz.org
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=1.4 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,RCVD_IN_CBL,SPF_PASS
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.0 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_SOFTFAIL

--Boundary-00=_DpITGB0n+fAoIaM
Content-Type: text/plain;
  charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline

On Thursday 17 May 2007 09:32:01 jerry gay wrote:

> this revision breaks parrot on msvc (and i suspect other c89-compliant
> compilers--sometimes i wonder if there are any others!)

I doubt even MSVC is C89-compliant, to be honest.  It just barfs more often=
=20
than GCC on certain things.

> this situation is *extremely* frustrating. the temporary workaround is
> to revert this patch until it works everywhere. the solution is to
> find a way to make gcc (and other) compilers comply with our most
> important coding standard: C89 compliance.

Unfortunately, our headers (and even some system headers) don't follow C89:

$ make parrot
compilers/imcc/pbc.c
In file included from ./include/parrot/parrot.h:30,
                 from compilers/imcc/imc.h:21,
                 from compilers/imcc/pbc.c:7:
=2E/include/parrot/config.h:82: warning: ISO C90 does not support =E2=80=98=
long long=E2=80=99
=2E/include/parrot/config.h:83: warning: ISO C90 does not support =E2=80=98=
long long=E2=80=99
In file included from ./include/parrot/atomic.h:25,
                 from ./include/parrot/thread.h:20,
                 from ./include/parrot/pmc.h:19,
                 from ./include/parrot/parrot.h:282,
                 from compilers/imcc/imc.h:21,
                 from compilers/imcc/pbc.c:7:
=2E/include/parrot/atomic/gcc_x86.h:30: error: expected =E2=80=98=3D=E2=80=
=99, =E2=80=98,=E2=80=99, =E2=80=98;=E2=80=99, =E2=80=98asm=E2=80=99=20
or =E2=80=98__attribute__=E2=80=99 before =E2=80=98static=E2=80=99
=2E/include/parrot/atomic/gcc_x86.h:85: error: expected =E2=80=98=3D=E2=80=
=99, =E2=80=98,=E2=80=99, =E2=80=98;=E2=80=99, =E2=80=98asm=E2=80=99=20
or =E2=80=98__attribute__=E2=80=99 before =E2=80=98static

Chasing down that problem is... fun.

Regardless, does this patch fix the problem for you?

=2D- c


--Boundary-00=_DpITGB0n+fAoIaM
Content-Type: text/x-diff;
  charset="utf-8";
  name="fix_pbc_ansi.patch"
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment;
	filename="fix_pbc_ansi.patch"

=== compilers/imcc/pbc.c
==================================================================
--- compilers/imcc/pbc.c	(revision 3523)
+++ compilers/imcc/pbc.c	(local)
@@ -595,7 +595,7 @@
      * I think letting this override in PASM/PIR would be a
      * can of worms - how do we call this if it declares .lex
      */
-    decl_func = (decl_func_t) PMC_struct_val(decl_lex_meth);
+    decl_func = (decl_func_t) D2FPTR(PMC_struct_val(decl_lex_meth));
 
     for (i = 0; i < hsh->size; i++) {
         for (r = hsh->data[i]; r; r = r->next) {
@@ -641,14 +641,14 @@
 static PMC*
 find_outer(Interp *interp, IMC_Unit *unit)
 {
-    UNUSED(interp);
-
     subs_t *s;
     SymReg *sub;
     size_t  len;
     PMC    *current;
     STRING *cur_name;
 
+    UNUSED(interp);
+
     if (!unit->outer)
         return NULL;
 
@@ -908,7 +908,7 @@
     opcode_t  size;
     int       key_length;     /* P0["hi;there"; S0; 2] has length 3 */
     int       k;
-    SymReg   *r;
+    SymReg   *r, *reg;
     int       var_type, slice_bits, type;
 
     /* 0 is length */
@@ -918,7 +918,7 @@
     char     *s  = s_key;
     *s           = 0;
 
-    SymReg *reg  = key_reg->set == 'K' ? key_reg->nextkey : key_reg;
+    reg          = key_reg->set == 'K' ? key_reg->nextkey : key_reg;
 
     for (key_length = 0; reg ; reg = reg->nextkey, key_length++) {
         if ((pc - key - 2) >= KEYLEN)

--Boundary-00=_DpITGB0n+fAoIaM--

