From beginners-return-92716-ktwarwic=speedy.uwaterloo.ca@perl.org  Sun Jun 24 05:00:04 2007
Return-Path: <beginners-return-92716-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5O902L9010558
	for <ktwarwic@flax9.uwaterloo.ca>; Sun, 24 Jun 2007 05:00:03 -0400
Received: (qmail 20189 invoked by uid 514); 24 Jun 2007 08:59:55 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 20180 invoked from network); 24 Jun 2007 08:59:55 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 24 Jun 2007 08:59:55 -0000
Received: (qmail 26974 invoked by uid 225); 24 Jun 2007 08:59:55 -0000
Delivered-To: beginners@perl.org
Received: (qmail 26967 invoked by alias); 24 Jun 2007 08:59:54 -0000
X-Spam-Status: No, hits=0.5 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,DK_POLICY_TESTING,FORGED_YAHOO_RCVD,RDNS_NONE,SPF_NEUTRAL
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: local policy)
Received: from Unknown (HELO mail1.dulles.sv.int) (216.12.128.138)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Sun, 24 Jun 2007 01:59:52 -0700
Received: from [192.168.4.118] ([192.168.4.118]) by mail1.dulles.sv.int with Microsoft SMTPSVC(6.0.3790.1830);
	 Sun, 24 Jun 2007 04:59:47 -0400
Message-ID: <467E3283.1060901@yahoo.com>
Date: Sun, 24 Jun 2007 04:59:47 -0400
From: Mathew Snyder <theillien@yahoo.com>
User-Agent: Thunderbird 1.5.0.12 (X11/20060911)
MIME-Version: 1.0
To: Chas Owens <chas.owens@gmail.com>
CC: "Dr.Ruud" <rvtol+news@isolution.nl>, beginners@perl.org
Subject: Re: Proper class setup?
References: <467B89CE.7080106@yahoo.com>	 <20070622092747.18820.qmail@lists.develooper.com>	 <467B9D8C.2050703@yahoo.com> <58ce48dc0706220851m1b1f84ebrd479ce768c94c648@mail.gmail.com>
In-Reply-To: <58ce48dc0706220851m1b1f84ebrd479ce768c94c648@mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
X-OriginalArrivalTime: 24 Jun 2007 08:59:47.0115 (UTC) FILETIME=[03CA0FB0:01C7B63E]

Chas Owens wrote:
> On 6/22/07, Mathew Snyder <theillien@yahoo.com> wrote:
> snip
>> I'm not sure what you mean by "Change your new() in a new() and init()".
> snip
>> What do you mean by "set/get approach"?
> snip
> 
> Some people believe that new should just create a new blank object and
> call an init method to do setup.  There are good arguments both ways.
> 
> Manually writing Accessor, Mutator, Getter, or Setter methods sucks
> and is error prone.  It is often better to write one getter and one
> setter that gets or sets the field(s) passed to it.  Another method is
> to use Perl's autoload capability to magically create subroutines for
> you.  Starting with some Perl in the 5.8 line the autoload function
> gained the ability to be an lvalue, so I have written it that way.
> 
> Perl script:
> #!/usr/bin/perl
> 
> use strict;
> use warnings;
> use Report;
> 
> my $rpt = Report->new;
> 
> $rpt->set({id => 5, queue => 10});
> print $rpt->printable;
> 
> my ($id, $queue) = $rpt->get(qw(id queue));
> 
> print "id is $id and queue is $queue\n";
> 
> #same thing, but I like the => better
> $rpt->set("id", 6);
> $rpt->set(id => 6);
> 
> print "id is now ", $rpt->get("id"), "\n";
> 
> $rpt->id = 7;
> print "id is now ", $rpt->id, "\n";
> 
> Module:
> package Report;
> 
> use strict;
> use warnings;
> use Carp;
> 
> our $AUTOLOAD;
> our %fields = (
>        _id       => 1,
>        _queue    => 1,
>        _owner    => 1,
>        _priority => 1,
>        _worked   => 1,
>        _timeLeft => 1,
>        _due      => 1,
>        _created  => 1,
>        _updated  => 1,
>        _severity => 1,
>        _ccl      => 1,
> );
> 
> #minimal new
> sub new {
>       my $class = shift;
>       my $self  = bless {}, $class;
>       $self->init(@_);
>       return $self;
> }
> 
> #real object creation happens here
> sub init {
>        my $self   = shift;
>        my @fields = keys %fields;
>        @{$self}{@fields} = (undef) x @fields;
> }
> 
> sub _validate_field {
>        my ($self, $k) = @_;
>        croak "$k is not a valid field for " . ref $self
>                unless $fields{"_$k"};
> }
> 
> #Getter/setter method 1
> sub get {
>        my ($self, @k) = @_;
>        my @ret;
>        for my $k (@k) {
>                $self->_validate_field($k);
>                push @ret, $self->{"_$k"};
>        }
>        local $" = ' ::: ';
>        return @ret
> }
> 
> sub set {
>        my $self = shift;
>        croak "bad number of arguments" unless @_ == 2 or @_ == 1;
>        if (@_ == 2) {
>                $self->_validate_field($_[0]);
>                return $self->{"_$_[0]"} = $_[1];
>        }
>        croak "not a hash reference" unless ref $_[0] eq 'HASH';
>        my $h = $_[0];
>        my @ret;
>        for my $k (keys %$h) {
>                $self->_validate_field($k);
>                push @ret, $self->{"_$k"} = $h->{$k};
>        }
>        return @ret;
> }
> 
> #another form of setter/getter
> 
> sub AUTOLOAD : lvalue {
>        my ($k) = $AUTOLOAD =~ /::(.*?)$/;
>        return if $k eq 'DESTROY';
>        my $self = shift;
>        $self->_validate_field($k);
>        $self->{"_$k"};
> }
> 
> sub printable {
>       my ($self) = @_;
> 
>       # return Printable Report info
>       return $self->id . " " . $self->queue . "\n";
> }
> 
> 1;
> 

I pretty much have a very small idea of what is going on up there.

Mathew
Keep up with me and what I'm up to: http://theillien.blogspot.com



-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


