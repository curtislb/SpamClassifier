From beginners-return-91385-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon May  7 14:56:44 2007
Return-Path: <beginners-return-91385-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l47IugqD002192
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 7 May 2007 14:56:43 -0400
Received: (qmail 6895 invoked by uid 514); 7 May 2007 18:56:35 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 6886 invoked from network); 7 May 2007 18:56:35 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 7 May 2007 18:56:35 -0000
Received: (qmail 29737 invoked by uid 225); 7 May 2007 18:56:35 -0000
Delivered-To: beginners@perl.org
Received: (qmail 29729 invoked by alias); 7 May 2007 18:56:34 -0000
X-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
Received: from echo.calarts.edu (HELO echo.calarts.edu) (198.182.157.9)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Mon, 07 May 2007 11:51:32 -0700
Received: from echo.calarts.edu (localhost.localdomain [127.0.0.1])
	by localhost (Postfix) with SMTP id CEFAE101E3DB
	for <beginners@perl.org>; Mon,  7 May 2007 18:41:53 +0000 (GMT)
Received: from muse.calarts.edu (muse.calarts.edu [198.182.157.5])
	by echo.calarts.edu (Postfix) with ESMTP id 8D44B1018A37
	for <beginners@perl.org>; Mon,  7 May 2007 18:41:53 +0000 (GMT)
Received: from karyn (dhcp5131.calarts.edu [65.165.175.131])
	by muse.calarts.edu (8.11.7p3+Sun/8.11.7) with SMTP id l47Ip8206416
	for <beginners@perl.org>; Mon, 7 May 2007 11:51:08 -0700 (PDT)
Message-Id: <3.0.1.32.20070507115106.01c55100@muse.calarts.edu>
X-Sender: karyn@muse.calarts.edu
X-Mailer: Windows Eudora Pro Version 3.0.1 (32)
Date: Mon, 07 May 2007 11:51:06 -0700
To: beginners@perl.org
From: Karyn Williams <karyn@calarts.edu>
Subject: Redirecting STDOUT & STDERR
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
X-Virus-Checked: Checked

I have this script I have been working on where I need to redirect STDOUT
and STDERR to files at the beginning of the script and then back to default
(terminal) at the end of the script. I found an example on-line and used it
and it works, however it generates a warning when running my script. I
would prefer to make that warning go away. This is the output of the script:

alum# ./match.pl
Name "main::OLDERR" used only once: possible typo at ./match.pl line 38.
Name "main::OLDOUT" used only once: possible typo at ./match.pl line 37.
Records processed: 2
Kicked as dups: 1
Kicked as exceptions: 0
Accounts created: 1

This is the script:

#!/usr/bin/perl

# match.pl expanded
# Checks the current csv against the passwd file to detect and prevent
creating duplicate accounts

use strict;
use warnings;

my $dir = "/usr/local/accounts";

my $csv = "isirin.csv";
my $expin = "exceptions.csv";
my $pwfile = "/etc/passwd";
my $expout = "exceptions.log";
my $clog = "account_change.log";
my $as400 = "as400.txt";
my $admiss = "admissions.txt";
my $err = "error.log";

my $description = "SIR Fall 2007";

my $date = localtime();
my ($sec,$min,$hour,$mday,$mon,$year) = (localtime)[0,1,2,3,4,5];
$mday++;
$mon++;
$year += 1900;
my $today = sprintf("%04d%02d%02d-%02d%02d%02d", $year, $mon, $mday, $hour,
$min, $sec);

# Read in csv file from Accounting and check for existing accounts.

open (IN, "$dir/$csv") or die "$dir/$csv does not exist. This file must be
available to run this script: $!";
open (EX, "$dir/$expin") or die "Can't open EX $expin : $!";
open (PW, "$pwfile") or die "Can't open PW $pwfile : $!";
open (EXCEP, ">>$dir/$expout") or die "Can't open EXCEP: $!";
open (OUT, ">>$dir/$clog") or die "Can't open OUT: $!";
open (AOUT, ">$dir/$as400") or die "Can't open AOUT: $!";
open (OLDOUT, ">&STDOUT");
open (OLDERR, ">&STDERR");
open (STDOUT, ">$dir/$admiss") or die "Can't open STDOUT: $!";
open (STDERR, ">>$dir/$err") or die "Can't open STDERR: $!";

my $pwf;
my $exp;
my $gecos;
my $login;
my $rcount = 0;
my $acount = 0;
my $ecount = 0;
my $lcount = 0 ;

my @line = <IN>;

printf STDOUT ("$date\n");

# Slurp the /etc/passwd file into one string and then search for matching
Student IDs in that 
# string. Use this later for checking unused loginnames also.

while (<PW>) {
        $pwf .= $_;
        }

while (<EX>) {
        $exp .= $_;
        }

# Create GECOS and login info and then create account using pw

foreach my $line (@line) {
        next if $line =~ /^nameid/;
        next if $line =~ /^$/;
        next if $line =~ /^\s+$/;
        # file format is nameid,first,init,last
        #print $line;
        chomp $line;
        $rcount++;
        my ($sid,$name) = split(/,/, $line,2);
        if ($pwf =~ /\b$sid\b/) {
                printf EXCEP ("$date, $name, $sid, possible dup
account\n"); $acount++;
                } elsif ($exp =~ /\b$sid\b/) {
                printf EXCEP ("$date, $name, $sid, listed in
exceptions.csv\n"); $ecount++;
                } else {

        my ($first, $initial, $last) = split(/,/, $name, 3);
        # Create gecos info
        $last =~ s/[",]//g;
        $first =~ s/[",]//g;
        $initial =~ s/[",]//g;
        if ($initial) { 
                $gecos = "\"$first $initial $last, $sid, $description\"";
                } else {
                $gecos = "\"$first $last, $sid, $description\""; }
        #print "GECOS IS $gecos\n";
        # Now guess at a login
        my $lfirst = $first;
        $lfirst =~ s/[^a-zA-Z]//g;
        #(my $lfirst = $first) =~ s/[^a-zA-Z]//g);
        my @last = split(/\s/, $last, 2);
        my $llast = $last[0];
        $llast =~ s/[-\s]//g;
        #print "LoginLast is $llast\n";
        if (length($lfirst) + length($llast) <= 16) {
                $login = $lfirst . $llast; 
                } else {
                my $f = substr(($lfirst),0,1);
                $login = $f . $llast;
                }
        $login = lc($login); 
        #print "Login is $login\n";
        #printf STDOUT ("$first $initial $last, $sid, $login, passwd\n");
        printf STDOUT ("$first $initial $last, $sid, $login, ");
        #This next line is for testing purposes
        system("pw useradd -n $login -c $gecos -m -s /bin/ftpshell -N");
        #system("pw useradd -n $login -c $gecos -m -s /bin/ftpshell -w
random");
        printf OUT ("$date Account Added, $first $initial $last, $login,
$sid\n");
        printf AOUT ("$sid, $first $initial $last, $login\n");
        $lcount++;
        }
}

close IN;
close OUT;
close AOUT;
close STDOUT;
close STDERR;
close EX;
close PW;
close EXCEP;

rename ("$dir/$csv", "$dir/$csv.$today") or die "Can't rename $dir/$csv : $!";

open(STDOUT, ">&OLDOUT");
open(STDERR, ">&OLDERR");

print "Records processed: $rcount\n";
print "Kicked as dups: $acount\n";
print "Kicked as exceptions: $ecount\n";
print "Accounts created: $lcount\n";

# send via e-mail output of this script.

my $to = "To: karyn\@calarts.edu";
my $from = "From: accounts\@alum.calarts.edu";
my $subject = "Subject: Test Output for SIRs";
my $sendmail = "/usr/sbin/sendmail -t";

my @files = ("$dir/$as400", "$dir/$admiss");
my @mail = ();

foreach my $file (@files) {

open (MAIL, "|$sendmail") or die "Can't open $sendmail: $!";
open (AOUT, "<$file") or die "Can't open AOUT for read: $!";

print MAIL "$to\n";    
print MAIL "$from\n";      
print MAIL "$subject\n";         

@mail = <AOUT>;
        foreach my $line (@mail) {
                print MAIL $line;
        }

close (MAIL);
close AOUT;

}

# end of script

TIA

-- 

Karyn Williams
Network Services Manager
California Institute of the Arts
karyn@calarts.edu
http://www.calarts.edu/network

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


