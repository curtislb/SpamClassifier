From perl6-all-return-80836-ktwarwic=speedy.uwaterloo.ca@perl.org  Tue Apr 24 01:46:29 2007
Return-Path: <perl6-all-return-80836-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3O5kQ6w005483
	for <ktwarwic@speedy.uwaterloo.ca>; Tue, 24 Apr 2007 01:46:27 -0400
Received: (qmail 6348 invoked by uid 514); 24 Apr 2007 05:46:26 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 6343 invoked from network); 24 Apr 2007 05:46:25 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.5 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME,FORGED_RCVD_HELO
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: domain of chromatic@wgz.org designates 63.105.17.39 as permitted sender)
From: chromatic <chromatic@wgz.org>
Organization: Snafu
To: perl6-internals@perl.org
Subject: Re: [perl #42320] [BUG] Memory leak with String pmc
Date: Mon, 23 Apr 2007 22:45:39 -0700
User-Agent: KMail/1.9.5
Cc: matt@diephouse.com, "Leopold Toetsch" <lt@toetsch.at>
References: <RT-Ticket-42320@perl.org> <198c87380704231641p7c47cb38w4d9963ebfb63a45b@mail.gmail.com> <200704231659.30881.chromatic@wgz.org>
In-Reply-To: <200704231659.30881.chromatic@wgz.org>
MIME-Version: 1.0
Content-Type: Multipart/Mixed;
  boundary="Boundary-00=_DmZLG/3k64AXSrV"
Message-Id: <200704232245.39908.chromatic@wgz.org>
X-Virus-Scanned: by amavisd-new at wgz.org
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.5 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME,FORGED_RCVD_HELO,SPF_PASS
Status: O
Content-Length: 2329
Lines: 75

--Boundary-00=_DmZLG/3k64AXSrV
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

.sub main :main
  loop:
    $P0 = new .String
    goto loop
.end

This one's fun.

One punchline's in src/gc/resources.c:153, within mem_allocate().

If it looks like there's no reclaimable memory within the allocated arena 
pools, there's no sense in compacting them to try to get enough memory to 
fulfill the current request.

I'm not sure why that is.

Of course, this test always allocates a new string (of size zero) from 
Parrot_allocate_string() in src/gc/resources.c:738.  For some reason, this 
nibbles away at the buffers but prevents any compaction.

This code looks suspicious to me:

    new_size = aligned_string_size(str, size);
    mem      = (char *)mem_allocate(interp, new_size, pool);
    mem     += sizeof (void*);

    PObj_bufstart(str) =  str->strstart = mem;
    PObj_buflen(str)   = new_size - sizeof (void*);

If size is 0 and new_size gets aligned to 4 and (void *) is 4 bytes long, then 
the buflen will be 0.  That may not be good at all, especially looking at 
compact_pool() in src/gc/resources.c:334.  With a buflen of 0, the buffer's 
not copyable.

My conjecture is that if you fill up a memory pool with buffers that have the 
4-byte overhead but no actual buffer lengths, you get pools that appear 
uncompactable, and you have to allocate more and more new pools.

Here's my solution; don't allocate zero-sized buffers.  Let them be empty.

All tests pass.  This either means that this is the right solution or that we 
don't have enough tests of the String PMC.

--c

--Boundary-00=_DmZLG/3k64AXSrV
Content-Type: text/x-diff;
  charset="iso-8859-1";
  name="fix_string_leak.patch"
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment;
	filename="fix_string_leak.patch"

=== src/gc/resources.c
==================================================================
--- src/gc/resources.c	(revision 3282)
+++ src/gc/resources.c	(local)
@@ -744,6 +744,9 @@
     PObj_buflen(str)   = 0;
     PObj_bufstart(str) = NULL;
 
+    if (size == 0)
+        return;
+
     pool     = PObj_constant_TEST(str)
                 ? interp->arena_base->constant_string_pool
                 : interp->arena_base->memory_pool;

--Boundary-00=_DmZLG/3k64AXSrV--

