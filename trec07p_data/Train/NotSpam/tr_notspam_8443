From sugar-bounces@laptop.org  Tue May  8 06:33:52 2007
Return-Path: <sugar-bounces@laptop.org>
Received: from pedal.laptop.org (pedal.laptop.org [18.85.2.148])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l48AXpqD010728
	for <ktwarwic@speedy.uwaterloo.ca>; Tue, 8 May 2007 06:33:51 -0400
Received: from pedal.laptop.org (localhost [127.0.0.1])
	by pedal.laptop.org (Postfix) with ESMTP id AB9294F60A;
	Tue,  8 May 2007 06:33:39 -0400 (EDT)
X-Original-To: sugar@laptop.org
Delivered-To: sugar@laptop.org
Received: from spam.laptop.org (spam.laptop.org [18.85.46.23])
	by pedal.laptop.org (Postfix) with ESMTP id 642254F60A
	for <sugar@laptop.org>; Tue,  8 May 2007 06:33:38 -0400 (EDT)
X-ASG-Debug-ID: 1178620427-290c00060000-3Xmyjt
X-Barracuda-URL: http://18.85.46.23:8000/cgi-bin/mark.cgi
X-Barracuda-Connect: mild.rhydd.org[195.10.223.185]
X-Barracuda-Start-Time: 1178620427
X-Barracuda-Encrypted: AES256-SHA
Received: from mild.rhydd.org (mild.rhydd.org [195.10.223.185])
	(using TLSv1 with cipher AES256-SHA (256/256 bits))
	(No client certificate requested)
	by spam.laptop.org (Spam Firewall) with ESMTP id E0A1F2483D
	for <sugar@laptop.org>; Tue,  8 May 2007 06:33:47 -0400 (EDT)
Received: from daf by mild.rhydd.org with local (Exim 4.63)
	(envelope-from <daf@rhydd.org>) id 1HlMuy-00022p-92
	for sugar@laptop.org; Tue, 08 May 2007 11:27:40 +0100
Date: Tue, 8 May 2007 11:27:40 +0100
From: Dafydd Harries <dafydd.harries@collabora.co.uk>
To: sugar@laptop.org
X-ASG-Orig-Subj: Re: [sugar] [patch][connect-activity] Update to high-level
	API in latest dbus-python
Message-ID: <20070508102740.GQ5306@mild.rhydd.org>
References: <20070504181622.GA28811@celebrin.pseudorandom.co.uk>
MIME-Version: 1.0
Content-Disposition: inline
In-Reply-To: <20070504181622.GA28811@celebrin.pseudorandom.co.uk>
User-Agent: Mutt/1.5.13 (2006-08-11)
X-Barracuda-Bayes: INNOCENT GLOBAL 0.0000 1.0000 -2.0210
X-Barracuda-Virus-Scanned: by Barracuda Spam Firewall at laptop.org
X-Barracuda-Spam-Score: -2.02
X-Barracuda-Spam-Status: No, SCORE=-2.02 using global scores of TAG_LEVEL=3.5
	QUARANTINE_LEVEL=1000.0 KILL_LEVEL=5.5 tests=
X-Barracuda-Spam-Report: Code version 3.1, rules version 3.1.16360
	Rule breakdown below
	pts rule name              description
	---- ----------------------
	--------------------------------------------------
Subject: Re: [sugar] [patch][connect-activity] Update to high-level API in
	latest dbus-python
X-BeenThere: sugar@laptop.org
X-Mailman-Version: 2.1.9
Precedence: list
List-Id: "Discussion of OLPC design,
	desktop platform and user experience" <sugar.laptop.org>
List-Unsubscribe: <http://mailman.laptop.org/mailman/listinfo/sugar>,
	<mailto:sugar-request@laptop.org?subject=unsubscribe>
List-Archive: <http://mailman.laptop.org/pipermail/sugar>
List-Post: <mailto:sugar@laptop.org>
List-Help: <mailto:sugar-request@laptop.org?subject=help>
List-Subscribe: <http://mailman.laptop.org/mailman/listinfo/sugar>,
	<mailto:sugar-request@laptop.org?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: sugar-bounces@laptop.org
Errors-To: sugar-bounces@laptop.org

Ar 04/05/2007 am 19:16, ysgrifennodd Simon McVittie:
> -def guess(x):
> -    if x.lower() in ('true', 'false'):
> -        return
> -
> -    if x == 'true':
> -        return True
> -
> -    if x == 'false':
> -        return False
> -
> -    try:
> -        return int(x)
> -    except ValueError:
> -        pass
> -
> -    return x
> +def decode(x, sig):
> +    # XXX: dbus-python ought to do most of the work for this
> +    if sig == 'b':
> +        x = x.lower()
> +        if x in ('true', '1'):
> +            return True
> +        if x in ('false', '0'):
> +            return False
> +        raise ValueError('Not true or false: %r' % x)
> +    elif sig == 'n':
> +        return dbus.Int16(x)
> +    elif sig == 'q':
> +        return dbus.UInt16(x)
> +    elif sig == 'i':
> +        return dbus.Int32(x)
> +    elif sig == 'u':
> +        return dbus.UInt32(x)
> +    elif sig == 'x':
> +        return dbus.Int64(x)
> +    elif sig == 't':
> +        return dbus.UInt64(x)
> +    elif sig == 'd':
> +        return dbus.Double(x)
> +    elif sig == 's':
> +        return dbus.UTF8String(x)
> +    else:
> +        raise TypeError('Unhandled D-Bus signature %r' % sig)

telepathy-python's examples/account.py currently does something like guess()
rather than something like decode(). That should probably be changed.

> --- a/client.py
> +++ b/client.py
> @@ -1,25 +1,28 @@
> -
>  import pprint
>  
> -import dbus.glib
>  import gtk
>  import telepathy
>  
> -# Needed for now, as dbus-python's high-level API doesn't support connecting
> -# to arbitrary addresses, or daemonless connections.
>  import _dbus_bindings
>  import dbus.lowlevel

Are these still necessary?

> +from dbus.connection import Connection
> +from dbus.mainloop.glib import DBusGMainLoop
> +from dbus.service import Object
> +
> +from telepathy.interfaces import CHANNEL_TYPE_TUBES, \
> +        CHANNEL_TYPE_TEXT, CONN_INTERFACE, CHANNEL_INTERFACE_GROUP
> +from telepathy.constants import TUBE_TYPE_DBUS, \
> +        TUBE_STATE_LOCAL_PENDING, TUBE_STATE_REMOTE_PENDING, TUBE_STATE_OPEN, \
> +        CONNECTION_STATUS_CONNECTED, HANDLE_TYPE_ROOM

I have a slight preference towards just using "import telepathy" rather than
"from telepathy import (long list of constants)", but I'm not hugely partial,
so this is ok.

> +dbus_main_loop = DBusGMainLoop(set_as_default=True)

Statements in libraries considered dubious. In other words, "import x"
shouldn't cause side-effects.

What does this actually do? Does it create a new GLib mainloop? Will it cause
odd things to happen if another DBusGMainLoop loop has already been installed?

>  def print_dbus_message(msg):
>      print 'got %s' % (msg.__class__.__name__)

Is this still used? If not, remove it.

> From bdc429db799fb8f18a48ba75fd81e673bb50da01 Mon Sep 17 00:00:00 2001
> From: Simon McVittie <simon.mcvittie@collabora.co.uk>
> Date: Fri, 4 May 2007 17:40:20 +0100
> Subject: [PATCH] client.py: split out game code into a service.Object

...

> +logging.basicConfig()
> +_logger = logging.getLogger('connect-activity.client')

Is this idempotent? The documentation is ambiguous:

  Does basic configuration for the logging system by creating a StreamHandler
  with a default Formatter and adding it to the root logger. The functions
  debug(), info(), warning(), error() and critical() will call basicConfig()
  automatically if no handlers are defined for the root logger.

Does this cause side effects if a handler is defined for the root logger
already? (Whatever that means. :P)

> +class ConnectGame(Object):

Nicely done. Perhaps this should even be split out into a separate file, e.g.
game.py.

-- 
Dafydd
_______________________________________________
Sugar mailing list
Sugar@laptop.org
http://mailman.laptop.org/mailman/listinfo/sugar

