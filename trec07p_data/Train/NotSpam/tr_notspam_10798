From beginners-return-91713-ktwarwic=speedy.uwaterloo.ca@perl.org  Tue May 15 19:37:38 2007
Return-Path: <beginners-return-91713-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4FNbbqD011683
	for <ktwarwic@flax9.uwaterloo.ca>; Tue, 15 May 2007 19:37:37 -0400
Received: (qmail 19876 invoked by uid 514); 15 May 2007 23:37:28 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Delivered-To: moderator for beginners@perl.org
Received: (qmail 9589 invoked from network); 15 May 2007 19:52:47 -0000
Delivered-To: beginners@perl.org
X-Spam-Status: No, hits=-0.0 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,KARMA_CONNECT_NEGATIVE,SPF_SOFTFAIL
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: softfail (x1.develooper.com: transitioning domain of bschroeder@brq.com does not designate 63.251.223.186 as permitted sender)
Message-ID: <20070515195206.9476.qmail@lists.develooper.com>
To: beginners@perl.org
From: "Bruno Schroeder" <bschroeder@brq.com>
References: <20070514220358.10089.qmail@lists.develooper.com> <31086b240705141751x5cd99c4ard6e37c4abee1aed3@mail.gmail.com> <20070515131436.4202.qmail@lists.develooper.com> <31086b240705151159v3983a85cn9efd303b20947c77@mail.gmail.com>
Subject: Re: File Handling. Reading and Writting.
Date: Tue, 15 May 2007 16:52:15 -0300
Lines: 67
X-Priority: 3
X-MSMail-Priority: Normal
X-Newsreader: Microsoft Outlook Express 6.00.2900.3028
X-MIMEOLE: Produced By Microsoft MimeOLE V6.00.2900.3028
X-RFC2646: Format=Flowed; Response
X-Posted-By: 200.157.149.62

Thank you Tom!
We realy have lots of ways to do everything. In this case, is easier to use 
$^I functionality, and I did. Although, it is very nice to see this code 
bellow.

Cheers!

""Tom Phoenix"" <tom@stonehenge.com> wrote in message 
news:31086b240705151159v3983a85cn9efd303b20947c77@mail.gmail.com...
> On 5/15/07, Bruno Schroeder <bschroeder@brq.com> wrote:
>
>> I tryed to use seek but it did not work. Can you help me on that, please? 
>> I
>> am using Windows XP. The following example writes at the end of the file.
>>
>> use strict;
>> my $file = "teste_rw.txt";
>> open (FILE, "+<", $file) or die "Can not open $file: $!.";
>> for my $line (<FILE>) {
>>     print $line;
>>     seek(FILE, 0, 1);
>>     print FILE "b\n";
>>     seek(FILE, 0, 1);
>> }
>> my $a_while = 2;
>> sleep($a_while);
>> seek(FILE, tell(FILE), 0);
>> close FILE;
>
> Here's some untested code that may do something resembling what you want:
>
>  my $file = "teste_rw.txt";
>  open (FILE, "+<", $file) or die "Can not open '$file' r/w: $!";
>
>  # $next_loc is the location of the next line to process
>  my $next_loc = tell FILE;  # probably 0
>
>  while (1) {
>
>    my $current_loc = $next_loc;
>    # seek before each read or write
>    seek(FILE, $current_loc, 0) or die;
>    my $line = <FILE>;
>    last if not defined $line;  # undef at eof
>    $next_loc = tell FILE;
>
>    print $line;
>
>    # Get the replacement string (somehow).
>    my $repl = &replacement_for($line);
>
>    die "Can't replace '$line' with '$repl'"
>      unless length($line) == length($repl);
>
>    # seek before each read or write
>    seek(FILE, $current_loc, 0) or die;
>    print FILE $repl;
>  }
>
>  close FILE;
>
> I'm not sure why your code used sleep, so I omitted it. Cheers!
>
> --Tom Phoenix
> Stonehenge Perl Training 



-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


