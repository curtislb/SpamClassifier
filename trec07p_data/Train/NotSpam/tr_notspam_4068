From beginners-return-90989-ktwarwic=speedy.uwaterloo.ca@perl.org  Sun Apr 22 19:11:57 2007
Return-Path: <beginners-return-90989-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3MNBt0I025107
	for <ktwarwic@speedy.uwaterloo.ca>; Sun, 22 Apr 2007 19:11:56 -0400
Received: (qmail 23092 invoked by uid 514); 22 Apr 2007 23:11:26 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 23083 invoked from network); 22 Apr 2007 23:11:26 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 22 Apr 2007 23:11:26 -0000
Received: (qmail 27993 invoked by uid 225); 22 Apr 2007 23:11:26 -0000
Delivered-To: beginners@perl.org
Received: (qmail 27986 invoked by alias); 22 Apr 2007 23:11:25 -0000
X-Spam-Status: No, hits=-2.5 required=8.0
	tests=BAYES_00,FORGED_RCVD_HELO
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: local policy)
Received: from smtp.fast4.net (HELO smtp.njpservices.co.uk) (84.45.106.4)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Sun, 22 Apr 2007 16:11:11 -0700
Received: from [85.92.186.142] (85-92-186-142.eurisp.net [85.92.186.142] (may be forged))
	by smtp.njpservices.co.uk (8.10.2/8.10.2) with ESMTP id l3MNAua25875;
	Mon, 23 Apr 2007 00:10:56 +0100
Message-ID: <462BEB83.5050008@350.com>
Date: Mon, 23 Apr 2007 00:10:59 +0100
From: Rob Dixon <rob.dixon@350.com>
User-Agent: Thunderbird 1.5.0.10 (Windows/20070221)
MIME-Version: 1.0
To: Perl Beginners <beginners@perl.org>
CC: Mike Lesser <exceptions@earthlink.net>
Subject: Re: testing return values
References: <395B6D9C-5936-4CE9-AAEB-450EF98F6AA4@earthlink.net>
In-Reply-To: <395B6D9C-5936-4CE9-AAEB-450EF98F6AA4@earthlink.net>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Status: O
Content-Length: 1949
Lines: 71

Mike Lesser wrote:
> Hiya. I'm looking for the correct Perl style for testing and storing a 
> return value in a control statement. The solution in any other language 
> is pretty obvious, but I get the distinct impression that there's a 
> 'right' way in Perl...
> 
> Let's say I want to test a scalar returned from a subroutine, and also 
> keep a copy for my own use:
> 
>  $scalar = sub( $argument );
> 
>  if( $scalar ){
>  }
> 
> Naturally that's no big deal. Now let's say I have a tree I want to 
> traverse, or some similar open-ended thing to evaluate, and want to run 
> it until a condition is reached..
> 
>  while( read_tree( $argument ){
>  }
> 
> Again no biggie. The problem is if I want to keep the result. Obviously 
> I can't do this:
> 
> while( $tree_element = read_tree( $argument ) ){
>    do_something( $tree_element );
> }
> 
> I can come up with a brute-force solution of course, but there's 
> probably a better, Perlish way that I'm not aware of. In addition, I 
> don't expect a return value from some module to be consistently 
> undefined or zero; it could change under some circumstances. This makes 
> me think that the problem has been dealt with long ago, and just doesn't 
> stick out in the llama/alpaca/whatever books.
> 
> Hopefully I explained this correctly!

while (my $x = func()) {
  :
}

is perfectly valid. In Perl every operator returns a value, and the assignment
operator is no exception. It's value is the expression on the left of the equals
sign, and it's even an lvalue so you can do things like

  ($x = 3)++;

leaving $x with a value of four. This sort of thing is more useful for things like

  $p = $q = 'A';

which is the same as

  $p = ($q = 'A');

or

  $q = 'A'; $p = $q;

But the bottom line is that your while loop is quite valid.

HTH,

Rob


-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


