From beginners-return-92035-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri Jun  1 01:15:07 2007
Return-Path: <beginners-return-92035-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l515F4hB005137
	for <ktwarwic@flax9.uwaterloo.ca>; Fri, 1 Jun 2007 01:15:05 -0400
Received: (qmail 31379 invoked by uid 514); 1 Jun 2007 05:14:53 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 31370 invoked from network); 1 Jun 2007 05:14:52 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 1 Jun 2007 05:14:52 -0000
Received: (qmail 18720 invoked by uid 225); 1 Jun 2007 05:14:52 -0000
Delivered-To: beginners@perl.org
Received: (qmail 18713 invoked by alias); 1 Jun 2007 05:14:52 -0000
X-Spam-Status: No, hits=4.0 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,DK_POLICY_TESTING,FORGED_YAHOO_RCVD,KARMA_CONTENT_NEGATIVE,SPF_NEUTRAL
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: local policy)
Received: from office.servervault.com (HELO mail1.dulles.sv.int) (216.12.128.136)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 31 May 2007 22:14:48 -0700
Received: from [192.168.4.103] ([192.168.4.103]) by mail1.dulles.sv.int with Microsoft SMTPSVC(6.0.3790.1830);
	 Fri, 1 Jun 2007 01:14:38 -0400
Message-ID: <465FAB1E.2010200@yahoo.com>
Date: Fri, 01 Jun 2007 01:14:06 -0400
From: Mathew Snyder <theillien@yahoo.com>
User-Agent: Thunderbird 1.5.0.10 (X11/20060911)
MIME-Version: 1.0
To: Perl Beginners <beginners@perl.org>
Subject: Re: Effective date grab
References: <465FA240.4060105@yahoo.com>
In-Reply-To: <465FA240.4060105@yahoo.com>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
X-OriginalArrivalTime: 01 Jun 2007 05:14:38.0620 (UTC) FILETIME=[C0990DC0:01C7A40B]

Yes,  a month from the first to the last day.  This is how I'm doing it right
now which seems to be a lot of code which should be able to be pruned:
#Declare the variables we'll need
my $count = 1;
my $febDays;
my @days;
my %time;
my %months31 = (
        "01" => undef,
        "03" => undef,
        "05" => undef,
        "07" => undef,
        "08" => undef,
        "10" => undef,
        "12" => undef,
);
my %months30 = (
        "04" => undef,
        "06" => undef,
        "09" => undef,
        "11" => undef,
);
my %months = (
        "01" => "Jan",
        "02" => "Feb",
        "03" => "Mar",
        "04" => "Apr",
        "05" => "May",
        "06" => "Jun",
        "07" => "Jul",
        "08" => "Aug",
        "09" => "Sept",
        "10" => "Oct",
        "11" => "Nov",
        "12" => "Dec",
);

my @date; #  = (localtime)[4,5];
my $month = (sprintf '%02d', (localtime)[4]); #$date[0]);
my $year      = (localtime)[5] + 1900; #$date[1] + 1900;

# If the value of the 'month' variable is '00' we are in January so need
# to set the $month to 12 in order to get December's data.  Any other
# value is spot on.  The reason being that  while (localtime) will produce
# a value based  on a startpoint of '00', we are shifting this back one by
# making '00' equal to '12' causing all other numbers to match up to their
# respective month.
if ($month == '00') {
        $month = 12;
        $year--;
}

# We need to determine if the current year is a leap year so we use the
# right number of days for Feb.
if (isleap($year)) {
        $febDays = 29;
}else{
        $febDays = 28;
}

 Determine if the month requested has 31, 30 or 28 days and build
# our days array to match
if (exists($months31{$month})){
        while ($count <= 31) {
                push @days, (sprintf '%02d', $count);
                $count++;
        }
}elsif (exists($months30{$month})){
        while ($count <= 30) {
                push @days, (sprintf '%02d', $count);
                $count++;
        }
}else{
        while ($count <= $febDays) {
                push @days, (sprintf '%02d', $count);
                $count++;
        }
}

That's just a keister-load of code just to create an array of 28/29, 30 or 31 dates.

Mathew
Keep up with me and what I'm up to: http://theillien.blogspot.com


Mathew Snyder wrote:
> A while ago I had posted requesting help with a long block of code that would do
> all kinds of stuff dealing with the date.  It turned out to not work despite
> being technically, correct.  Instead of getting help with it, Mr. Phoenix
> provided me with a block of code that did what I needed but much more concisely.
>  And, more importantly, correctly.
> 
> for (1 .. 7) {
>   $time -= 24*60*60;
>   my @date = (localtime($time))[3 .. 5];
>   push @days, (sprintf '%02d', $date[0]);
>   push @months,(sprintf '%02d',$date[1] + 1);
>   push @years, $date[2] + 1900;
>   push @searchDate, join "-", ($date[2] + 1900), (sprintf '%02d',$date[1] + 1),
> (sprintf '%02d', $date[0]);
> }
> 
> This will give me a weeks worth of dates regardless of whether or not the month
> flips over in the middle of the week.
> 
> What I'd like to do now is modify this or figure out a similar block of code
> that will do the same only for an entire month.  The thing I see being a problem
> though is that some months have 30 days, some months have 31 days and February
> has 28/29 days.  This makes it pretty much impossible to just do a for loop
> utilizing (1..whatever).  How can I populate an array of an entire month's worth
> of dates without worrying about how many days the month has?
> 
> Mathew

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


