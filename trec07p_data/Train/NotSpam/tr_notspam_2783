From perl6-all-return-80692-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed Apr 18 11:05:19 2007
Return-Path: <perl6-all-return-80692-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3IF5H0I012111
	for <ktwarwic@speedy.uwaterloo.ca>; Wed, 18 Apr 2007 11:05:18 -0400
Received: (qmail 29639 invoked by uid 514); 18 Apr 2007 15:04:52 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 29634 invoked from network); 18 Apr 2007 15:04:52 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: domain of alek.storm@gmail.com designates 66.249.92.174 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=I7n5MEw88aJhZuTHsCUOAWHfi72DsCG8SvTqTCiG1I5pZe2o9n/UDuc1yVdkPFrAxSWub9OZadbG8UdC49rFs8rkuzIdVROQNgmBgSSEWzGn7GTgHc5+Vp3uHE8gKGyHEGT/BX4iqxqV7u+2S7ZuQ4PV0cDMK2zdfF+uY0WZZKM=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=cUZYEPvLB3V9Ee2P/dQqZU+s9uSflm9ZBYA8GUkxWTF/unZzp2PYop/Ds6aGtyjuBX3/R3p0XJWw0pS6nUtw8on2WbyrnvL/yHn/pIfXk+64DIUYYt0m6Xq3SjWY4JVkSHzUzhHBvuRb7mZ+2LC+T69zlKKMOPmsejvYP0ciZAQ=
Message-ID: <189adbd0704180804q3119863w434a5cd868a7a02d@mail.gmail.com>
Date: Wed, 18 Apr 2007 10:04:28 -0500
From: "Alek Storm" <alek.storm@gmail.com>
To: "Allison Randal" <allison@perl.org>
Subject: Re: [perl #42430] [PATCH] make :vtable imply :method
Cc: chromatic <chromatic@wgz.org>, perl6-internals@perl.org
In-Reply-To: <4622BE38.2070806@perl.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <RT-Ticket-42430@perl.org> <461C9495.1070109@perl.org>
	 <189adbd0704110540p680a576dje9e0592f6b0db2d5@mail.gmail.com>
	 <200704111113.07499.chromatic@wgz.org>
	 <189adbd0704142149k2c1b7ff4ubf75e4abf5fb4e38@mail.gmail.com>
	 <4622BE38.2070806@perl.org>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
Status: O
Content-Length: 3198
Lines: 86

On 4/16/07, Allison Randal <allison@perl.org> wrote:
> Here's the original post where I gave the rationale for making the flags
> work as they do:
>
> <http://groups.google.com/group/perl.perl6.internals/browse_thread/thread/5bbf1eab0133d467?tvc=2>

>From the link: <<END
  This is the main thing Chip and I talked about in our last face-to-face
  meeting. We came up with 3 basic parameters: whether a method is a
  vtable method, whether it has a vtable name distinct from the method
  name, and whether it has a method name at all (or is anonymous, i.e.
  only a vtable method). The interface I scrawled out over coffee is:

  # method name is the same as vtable name
  .sub get_string :method :vtable

  # accessible as either $obj.stringify() or vtable
  .sub stringify :method :vtable('get_string')

  # accessible only as vtable
  .sub get_string :method :anon :vtable
  .sub stringify :method :anon :vtable('get_string')

  Which reuses the existing concept of:

  # method has an entry in the namespace
  .sub stringify :method

  # method has no entry in the namespace
  .sub stringify :method :anon
END

This seems perfectly fine to me.  The only change I think should be
made is that :vtable automatically sets :method to true.  Using :anon
to exclude it from the namespace is what you originally proposed, so
I'm curious why you've changed your mind.

> I'm comfortable with a modification saying that :vtable always gets the
> 'self' parameter like :method does. But without :method, :vtable should
> not make an entry in the namespace of the class, or call 'add_method' on
> the class. This results in simpler syntax for the cases where you only
> want to override the vtable entry.

Making :method mean one thing when used with :vtable, and something
completely different without, seems like a really bad idea to me, and
is confusing to the user.  The user will also be confused because
adding :vtable removes it from the namespace, which they didn't
explicitly ask it to do.  What is :anon good for if we use a
completely different system for :vtable?

Here are the semantics you've proposed:

.sub get_string # normal sub, attached to a namespace but not a method

.sub get_string :method # a full method, attached to a namespace

.sub get_string :vtable # a vtable method, but not attached to a
namespace (user wonders why, since methods are attached to their
namespace)

.sub get_string :vtable :method # adding :method attaches it to a
namespace (*not* what :method means without :vtable - user wonders why
they need it, since it's already a method)

.sub get_string :vtable :anon # unspecified

.sub get_string :vtable :method :anon # now we're in trouble

The same thing, with what I've proposed:

.sub get_string # normal sub, attached to a namespace but not a method

.sub get_string :method # a full method, attached to a namespace

.sub get_string :vtable # a method that also overrides the vtable

.sub get_string :vtable :method # same as before

.sub get_string :vtable :anon # same, but not attached to the
namespace (note that the user has actually specified this, so they
expect it to happen)

.sub get_string :vtable :method :anon # same as before

-- 
Alek Storm

