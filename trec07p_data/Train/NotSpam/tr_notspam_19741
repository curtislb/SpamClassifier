From perl6-all-return-81996-ktwarwic=speedy.uwaterloo.ca@perl.org  Sat Jun 16 04:30:29 2007
Return-Path: <perl6-all-return-81996-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5G8USL9012004
	for <ktwarwic@flax9.uwaterloo.ca>; Sat, 16 Jun 2007 04:30:29 -0400
Received: (qmail 31967 invoked by uid 514); 16 Jun 2007 08:30:26 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 31962 invoked from network); 16 Jun 2007 08:30:25 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: domain of thoughtstream@gmail.com designates 209.85.146.180 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:reply-to:user-agent:mime-version:to:subject:references:in-reply-to:content-type:content-transfer-encoding:sender;
        b=O8nryjiFmzmiJkrCHc7gxEZrOG1X9fZ72z/vDAHjbBEvInFXL6/So/yEUNef6BgKbwXtICMnXB9WWOq3VX/ypmTYZTbKgviEaf6K/oROsO5/48Yi/a9fSgkRdEsfiWxzUHuHhSOAnK1e3rAJsKHlLemqy3rkqus2jk2ZT23Pjkc=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:reply-to:user-agent:mime-version:to:subject:references:in-reply-to:content-type:content-transfer-encoding:sender;
        b=GZjPi2mA0XV/jvHymgf9bGMsjT0CIqGqN2Lqe6kRlyaWY3hARrDI5YKsOBH8wU9d7q3bMDYCEvFNoHrOFyYTJnIwz6PQCvBG3Y+mk4oLztw4uAIO3yavIvky52d53bAEVHCDVap46FwfY2Gr1fmfe2SAUtpdRUndkiDIPqh9POw=
Message-ID: <46739F77.5060400@conway.org>
Date: Sat, 16 Jun 2007 18:29:43 +1000
From: Damian Conway <damian@conway.org>
Reply-To: damian@conway.org
User-Agent: Thunderbird 2.0.0.4 (Macintosh/20070604)
MIME-Version: 1.0
To: "perl6-language@perl.org" <perl6-language@perl.org>
Subject: Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn
References: <20070613205525.7ECA0CB9B8@x12.develooper.com> <ef30550b0706131429o34838a6es6704e8ec73851b49@mail.gmail.com> <467073C4.6020708@conway.org> <20070614082341.GU31918@earth.overmeer.net> <832f158a0706141717j7accfb36w92bf3a2ed7a8e115@mail.gmail.com> <20070615075949.GR31918@earth.overmeer.net>
In-Reply-To: <20070615075949.GR31918@earth.overmeer.net>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Sender: Damian Conway <thoughtstream@gmail.com>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS

Mark Overmeer asked:

>> * Pod and Perl (or any other ambient source code) are to be syntactically
>>  separated, even when there are semantic interconnections
> 
> Why?  Who says that?

Me. :-)


>> * Perl 6 will be able to access ambient Pod via $=POD (and other
>>  $=WHATEVER variables)
> 
> Cannot find anything about that in S26

Try S02.


> Yes, and that is one of the things which worries me most *You can*.
> It's full freedom, like XML, and without a convention everyone may
> think-up there own way of documenting the same kinds of code elements.

No. There *will* be conventions, which will be defined by the behaviour of the 
standard documentation tools that we create.


> The whole point of the debate, is that IMO the focus (and only real
> challenge) is this task: combine information about the Perl program
> and the documentation about those elements in an as good as feasible
> way.  All the rest is just syntax.  On the moment, I am not convinced
> that this task sufficiently facilitated.  Many features in POD6 will
> complicate this task too much.

Naturally, having spent a great deal of time to redesign Pod specifically to 
facilitate better and easier documentation, I disagree. :-)


> And what I would like to see is that doc-tree and Perl6 AST are one.

And I am strongly opposed to that as the only alternative.
That said, it will certainly be *possible*.


> i.e. it is not a valid argument: expressions and regexes are integrated.

Sure, but you're arguing from a false analogy. Expressions and regexes are the 
same kind of thing: executable specifications. So of course they're 
integrated. Documentation is a different kind of thing...so naturally it 
should be dis-integrated.  ;-)


> IMO it is: the issue is to have sufficiently integrety in code and markup
> to be able to create documentation-generating tools which produce enough
> quality.  And at the same time give the programmer the mimimal burden on
> writing documentation, to increase the chance that it is present and good.
> [this last sentence is my only design criterium]

And I claim the current design fully facilitates that.


>> Like so:
>>
>>    class Mail::Message {
>>    =PURPOSE  Base class for message types
>>
>>        has $msgid;
>>    =for PURPOSE
>>        The (internet wide) unique string which identifies this
>>        message object.  May be undef as long as the message is
>>        begin composed.
>>
>>        has $content_type = 'text/plain';
>>    }
> 
> This is just a syntax transformation, where I can live with.  No
> problem.  But it is not the whole story.  "PURPOSE" is not in S26.

It is *now* ;-)

Remember, we're still designing and documenting that design. Hence the careful 
wording of S26:

     All other uppercase block typenames are reserved...
     ^^^
     Standard semantic blocks include:
                              ^^^^^^^

Ultimately, the complete set of semantic blocks will be defined by the scope 
and behaviour of the documentation tools we create.


> In my "vision", the example is complete.  Everything else is determined
> by the processing tools and style sheets.

Agreed.


> Do not understand me wrong: for the choosen approach to produce
> documentation, you did an excellent job with the specification.  It
> is well written, well documented, and even implemented.
> But I do not see how this approach contributes to the homogeneous set
> of manual-pages for Perl modules that the end-user prefers.

It does so by providing a standard--and extensible--mark-up notation and a 
well-structured document object model (which includes representations for 
interspersed code), as well as standardized parsing tools from converting a 
source document to an internal representation.

These features (along with Perl 6's ability to parse Perl 6 source) will make 
it vastly easier to build man-page generators.


> [ Damian, we didn't change our opinions a thing since the last debate
>   on this subject, last year, haven't we.  Probably just another
>   holy war ]

Yes. For that very reason I don't propose to keep arguing this issue.
I certainly respect your concerns and desires. I'm merely frustrated by the 
fact that I can't seem to convince you that they're actually being addressed. :-)

Damian

