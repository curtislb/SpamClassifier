From r-help-bounces@stat.math.ethz.ch  Mon Jun 25 09:25:30 2007
Return-Path: <r-help-bounces@stat.math.ethz.ch>
Received: from hypatia.math.ethz.ch (hypatia.math.ethz.ch [129.132.145.15])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l5PDM7LZ028924
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 25 Jun 2007 09:25:30 -0400
Received: from hypatia.math.ethz.ch (hypatia [129.132.145.15])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l5NFr4tI005674;
	Sat, 23 Jun 2007 17:53:11 +0200
X-Spam-Checker-Version: SpamAssassin 3.2.0 (2007-05-01) on hypatia.math.ethz.ch
X-Spam-Level: 
X-Spam-Status: No, score=-1.0 required=5.0 tests=AWL, BAYES_50,
	DKIM_POLICY_SIGNSOME autolearn=no version=3.2.0
Received: from markov.stats.ox.ac.uk (markov.stats.ox.ac.uk [163.1.210.1])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l5NFqvun005646
	for <R-help@stat.math.ethz.ch>; Sat, 23 Jun 2007 17:52:58 +0200
Received: from gannet.stats.ox.ac.uk (gannet.stats [163.1.211.17])
	by markov.stats.ox.ac.uk (8.13.6/8.13.6) with ESMTP id l5NFqo0k008640; 
	Sat, 23 Jun 2007 16:52:50 +0100 (BST)
Date: Sat, 23 Jun 2007 16:52:50 +0100 (BST)
From: Prof Brian Ripley <ripley@stats.ox.ac.uk>
To: Gavin Simpson <gavin.simpson@ucl.ac.uk>
In-Reply-To: <1182610472.7860.10.camel@dhcppc2.my.nat.localnet>
Message-ID: <Pine.LNX.4.64.0706231638110.32330@gannet.stats.ox.ac.uk>
References: <1182610472.7860.10.camel@dhcppc2.my.nat.localnet>
MIME-Version: 1.0
X-Virus-Scanned: by amavisd-new at stat.math.ethz.ch
Cc: R-help <R-help@stat.math.ethz.ch>
Subject: Re: [R] Names of objects passed as ... to a function?
X-BeenThere: r-help@stat.math.ethz.ch
X-Mailman-Version: 2.1.9
Precedence: list
List-Id: "Main R Mailing List: Primary help" <r-help.stat.math.ethz.ch>
List-Unsubscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=unsubscribe>
List-Archive: <https://stat.ethz.ch/pipermail/r-help>
List-Post: <mailto:r-help@stat.math.ethz.ch>
List-Help: <mailto:r-help-request@stat.math.ethz.ch?subject=help>
List-Subscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: r-help-bounces@stat.math.ethz.ch
Errors-To: r-help-bounces@stat.math.ethz.ch

On Sat, 23 Jun 2007, Gavin Simpson wrote:

> Dear list,
>
> I have a function whose first argument is '...'. Each element of '...'
> is a data frame, and there will be at least 2 data frames in '...'. The
> function processes each of the data frames in '...' and returns a list,
> whose components are the processed data frames. I would like to name the
> components of this returned list with the names of the original data
> frames.
>
> Normally I'd use deparse(substitute()) to do this, but here I do not
> know the appropriate argument to run deparse(substitute()) on, and doing
> this on ... only returns a single "name":
>
>> foo <- function(...)
> +                 deparse(substitute(...))
>> dat1 <- rnorm(10)
>> dat2 <- runif(10)
>> foo(dat1, dat2)
> [1] "dat1"
>
> Can anyone suggest to me a way to get the names of objects passed as
> the ... argument of a function?

That's a little tricky.  The following may suffice:

foo <- function(...)
{
   as.character(match.call())[-1]
}

The problem is that under certain circumstances match.call can give names 
like '..2'

> bar <- function(...) foo(...)
> bar(dat1, dat2)
[1] "..1" "..2"

and I don't know a comprehensive R-level solution to that.

-- 
Brian D. Ripley,                  ripley@stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595

______________________________________________
R-help@stat.math.ethz.ch mailing list
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.

