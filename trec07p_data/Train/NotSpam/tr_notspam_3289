From samba-technical-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org  Thu Apr 19 17:05:03 2007
Return-Path: <samba-technical-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org>
Received: from lists.samba.org (mail.samba.org [66.70.73.150])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l3JL510I029769
	for <ktwarwic@speedy.uwaterloo.ca>; Thu, 19 Apr 2007 17:05:01 -0400
Received: from dp.samba.org (localhost [127.0.0.1])
	by lists.samba.org (Postfix) with ESMTP id 5B1C5162C46
	for <ktwarwic@speedy.uwaterloo.ca>; Thu, 19 Apr 2007 21:04:36 +0000 (GMT)
X-Spam-Checker-Version: SpamAssassin 3.1.7 (2006-10-05) on dp.samba.org
X-Spam-Level: *
X-Spam-Status: No, score=1.1 required=3.8 tests=AWL, BAYES_00, FORGED_RCVD_HELO,
	RCVD_IN_BLARS_RBL,RCVD_IN_DSBL,RCVD_IN_SORBS_DUL,SPF_NEUTRAL 
	autolearn=no version=3.1.7
X-Original-To: samba-technical@lists.samba.org
Delivered-To: samba-technical@lists.samba.org
Received: from mail.plainjoe.org (68-117-186-136.dhcp.mtgm.al.charter.com
	[68.117.186.136])
	by lists.samba.org (Postfix) with ESMTP id 985AC162AD7;
	Thu, 19 Apr 2007 21:04:05 +0000 (GMT)
Received: from [192.168.1.47] (oak.plainjoe.org [192.168.1.47])
	by mail.plainjoe.org (Postfix) with ESMTP id 08FE52F19D;
	Thu, 19 Apr 2007 16:04:02 -0500 (CDT)
Message-ID: <4627D956.5000404@samba.org>
Date: Thu, 19 Apr 2007 16:04:22 -0500
From: "Gerald (Jerry) Carter" <jerry@samba.org>
User-Agent: Thunderbird 1.5.0.10 (X11/20070306)
MIME-Version: 1.0
To: simo <idra@samba.org>
References: <20070418205000.88D4B1638B9@lists.samba.org>	
	<1176929909.16886.16.camel@localhost.localdomain>	
	<1176986243.23884.7.camel@localhost.localdomain>	
	<200704191330.l3JDUHaM092847@au.padl.com>	
	<1176990812.23884.9.camel@localhost.localdomain>	
	<46278171.7030301@samba.org>	
	<20070419170128.GC7346@jeremy2.wintest.samba.local>	
	<4627A2BB.4060108@samba.org>
	<1177010584.23884.32.camel@localhost.localdomain>
In-Reply-To: <1177010584.23884.32.camel@localhost.localdomain>
X-Enigmail-Version: 0.94.0.0
Content-Type: multipart/mixed; boundary="------------090802010108070900020206"
Cc: samba-technical@lists.samba.org, Jeremy Allison <jra@samba.org>
Subject: Re: Broken idmap interface design
X-BeenThere: samba-technical@lists.samba.org
X-Mailman-Version: 2.1.5
Precedence: list
List-Id: "Discussions on Samba internals. For general questions please
	subscribe to the list samba@samba.org"
	<samba-technical.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/listinfo/samba-technical>, 
	<mailto:samba-technical-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/archive/samba-technical>
List-Post: <mailto:samba-technical@lists.samba.org>
List-Help: <mailto:samba-technical-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-technical>,
	<mailto:samba-technical-request@lists.samba.org?subject=subscribe>
Sender: samba-technical-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Errors-To: samba-technical-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Status: O
Content-Length: 21199
Lines: 698

This is a multi-part message in MIME format.
--------------090802010108070900020206
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit

-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA1

simo wrote:
> On Thu, 2007-04-19 at 12:11 -0500, Gerald (Jerry) Carter wrote:
>> Jeremy Allison wrote:
>>
>>> Indeed. Looking at this interface cold after ignoring
>>> it for a while I think the SID_TYPE enum needs to be
>>> present as input on all calls into a "map SID to XXX".
>>
>> Agreed.  I'm still looking at what would be the minimal
>> appropriate fix.  Simo and I have a call later this afternoon
>> to chat about the current state and how to move forward.
> 
> Ok, we cleared out the problem in the call.
> 
> Jerry is right, we have a layering violation.

Here is a patch bundle

auth_util.patch		Revert create_local_token() to
			the 3.0.24 codebase

idmap_type.patch	Have the caller fillin the
			id_map.xid.type field when
			resolving a SID so that if we allocate
			a new id, we know what type to use

winbindd_api.patch	Remove the WINBINDD_SIDS_TO_XIDS calls
			from the public winbindd interface
			for the 3.0.25 release

idmap_rid.patch		Cleanup the idmap_rid backend to not
			call back into winbindd to resolve
			the SID in order to verify it's type.


This has been compiled but not tested.  Just posting for
review so everyone knows what the proposed solution is.



cheers, jerry
-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.3 (GNU/Linux)
Comment: Using GnuPG with Mozilla - http://enigmail.mozdev.org

iD8DBQFGJ9lWIR7qMdg1EfYRAirWAKCcxj+WR1Z5lh2R0SBvh9ZurCubqQCgi6yt
8ppOSpWPHXfOxXhd3KYHV9c=
=e/6l
-----END PGP SIGNATURE-----

--------------090802010108070900020206
Content-Type: text/x-patch;
 name="auth_util.patch"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline;
 filename="auth_util.patch"

Index: auth/auth_util.c
===================================================================
--- auth/auth_util.c	(revision 22382)
+++ auth/auth_util.c	(working copy)
@@ -982,9 +982,7 @@
 NTSTATUS create_local_token(auth_serversupplied_info *server_info)
 {
 	TALLOC_CTX *mem_ctx;
-	struct id_map *ids;
 	NTSTATUS status;
-	BOOL wb = True;
 	size_t i;
 	
 
@@ -1031,44 +1029,18 @@
 	server_info->groups = NULL;
 
 	/* Start at index 1, where the groups start. */
-	ids = talloc_zero_array(mem_ctx, struct id_map, server_info->ptok->num_sids);
-	for (i = 0; i < server_info->ptok->num_sids-1; i++) {
-		ids[i].sid = &server_info->ptok->user_sids[i + 1]; /* store the sids */
-	}
 
-	if (!winbind_sids_to_unixids(ids, server_info->ptok->num_sids-1)) {
-		DEBUG(2, ("Query to map secondary SIDs failed!\n"));
-		if (!winbind_ping()) {
-			DEBUG(2, ("Winbindd is not running, will try to map SIDs one by one with legacy code\n"));
-			wb = False;
-		}
-	}
+	for (i=1; i<server_info->ptok->num_sids; i++) {
+		gid_t gid;
+		DOM_SID *sid = &server_info->ptok->user_sids[i];
 
-	for (i = 0; i < server_info->ptok->num_sids-1; i++) {
-		gid_t agid;
-
-		if (wb) {
-			if (ids[i].status != ID_MAPPED) {
+		if (!sid_to_gid(sid, &gid)) {
 			DEBUG(10, ("Could not convert SID %s to gid, "
-					   "ignoring it\n", sid_string_static(ids[i].sid)));
+				   "ignoring it\n", sid_string_static(sid)));
 			continue;
 		}
-			if (ids[i].xid.type == ID_TYPE_UID) {
-				DEBUG(10, ("SID %s is a User ID (%u) not a Group ID, "
-					   "ignoring it\n", sid_string_static(ids[i].sid), ids[i].xid.id));
-				continue;
-			}
-			agid = (gid_t)ids[i].xid.id;
-		} else {
-			if (! sid_to_gid(ids[i].sid, &agid)) {
-				continue;
-			}
-		}
-		if (!add_gid_to_array_unique(server_info, agid, &server_info->groups,
-					&server_info->n_groups)) {
-			TALLOC_FREE(mem_ctx);
-			return NT_STATUS_NO_MEMORY;
-		}
+		add_gid_to_array_unique(server_info, gid, &server_info->groups,
+					&server_info->n_groups);
 	}
 	
 	debug_nt_user_token(DBGC_AUTH, 10, server_info->ptok);

--------------090802010108070900020206
Content-Type: text/x-patch;
 name="idmap_rid.patch"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline;
 filename="idmap_rid.patch"

Index: nsswitch/idmap_rid.c
===================================================================
--- nsswitch/idmap_rid.c	(revision 22382)
+++ nsswitch/idmap_rid.c	(working copy)
@@ -37,7 +37,7 @@
   we support multiple domains in the new idmap
  *****************************************************************************/
 
-static NTSTATUS idmap_rid_initialize(struct idmap_domain *dom, const char *compat_params)
+static NTSTATUS idmap_rid_initialize(struct idmap_domain *dom)
 {
 	NTSTATUS ret;
 	struct idmap_rid_context *ctx;
@@ -86,9 +86,6 @@
 
 static NTSTATUS idmap_rid_id_to_sid(TALLOC_CTX *memctx, struct idmap_rid_context *ctx, struct id_map *map)
 {
-	const char *domname, *name;
-	enum lsa_SidType sid_type;
-	BOOL ret;
 	struct winbindd_domain *domain;	
 
 	/* apply filters before checking */
@@ -104,46 +101,10 @@
 	
 	sid_compose(map->sid, &domain->sid, map->xid.id - ctx->low_id + ctx->base_rid);
 
-	/* by default calls to winbindd are disabled
-	   the following call will not recurse so this is safe */
-	winbind_on();
-	ret = winbind_lookup_sid(memctx, map->sid, &domname, &name, &sid_type);
-	winbind_off();
+	/* We **really** should have some way of validating 
+	   the SID exists and is the correct type here.  But 
+	   that is a deficiency in the idmap_rid design. */
 
-	if (ret) {
-		switch (sid_type) {
-		case SID_NAME_USER:
-			if (map->xid.type != ID_TYPE_UID) {
-				/* wrong type */
-				map->status = ID_UNMAPPED;
-				DEBUG(5, ("Resulting SID is of wrong ID type\n"));
-				return NT_STATUS_NONE_MAPPED;
-			}
-			break;
-		case SID_NAME_DOM_GRP:
-		case SID_NAME_ALIAS:
-		case SID_NAME_WKN_GRP:
-			if (map->xid.type != ID_TYPE_GID) {
-				/* wrong type */
-				map->status = ID_UNMAPPED;
-				DEBUG(5, ("Resulting SID is of wrong ID type\n"));
-				return NT_STATUS_NONE_MAPPED;
-			}
-			break;
-		default:
-			/* invalid sid?? */
-			map->status = ID_UNKNOWN;
-			DEBUG(10, ("SID %s is UNKNOWN, skip mapping\n", sid_string_static(map->sid)));
-			return NT_STATUS_NONE_MAPPED;
-		}
-	} else {
-		/* TODO: how do we known if the lookup was negative
-		 * or something just failed? */
-		map->status = ID_UNMAPPED;
-		DEBUG(2, ("Failed: to resolve SID\n"));
-		return NT_STATUS_UNSUCCESSFUL;
-	}
-
 	map->status = ID_MAPPED;
 
 	return NT_STATUS_OK;
@@ -155,46 +116,13 @@
 
 static NTSTATUS idmap_rid_sid_to_id(TALLOC_CTX *memctx, struct idmap_rid_context *ctx, struct id_map *map)
 {
-	const char *domname, *name;
-	enum lsa_SidType sid_type;
 	uint32_t rid;
-	BOOL ret;
 
 	sid_peek_rid(map->sid, &rid);
 	map->xid.id = rid - ctx->base_rid + ctx->low_id;
 
-	/* by default calls to winbindd are disabled
-	   the following call will not recurse so this is safe */
-	winbind_on();
-	/* check if this is a valid SID and set the type */
-	ret = winbind_lookup_sid(memctx, map->sid, &domname, &name, &sid_type);
-	winbind_off();
-
-	if (ret) {
-		switch (sid_type) {
-		case SID_NAME_USER:
-			map->xid.type = ID_TYPE_UID;
-			break;
-		case SID_NAME_DOM_GRP:
-		case SID_NAME_ALIAS:
-		case SID_NAME_WKN_GRP:
-			map->xid.type = ID_TYPE_GID;
-			break;
-		default:
-			/* invalid sid, let's just leave it unmapped */
-			DEBUG(10, ("SID %s is UNKNOWN, skip mapping\n", sid_string_static(map->sid)));
-			map->status = ID_UNKNOWN;
-			return NT_STATUS_NONE_MAPPED;
-		}
-	} else {
-		/* TODO: how do we known if the lookup was negative
-		 * or something just failed? */
-		map->status = ID_UNMAPPED;
-		DEBUG(2, ("Failed: to resolve SID\n"));
-		return NT_STATUS_UNSUCCESSFUL;
-	}
-
 	/* apply filters before returning result */
+
 	if ((map->xid.id < ctx->low_id) || (map->xid.id > ctx->high_id)) {
 		DEBUG(5, ("Requested id (%u) out of range (%u - %u). Filtered!\n",
 				map->xid.id, ctx->low_id, ctx->high_id));
@@ -202,6 +130,10 @@
 		return NT_STATUS_NONE_MAPPED;
 	}
 
+	/* We **really** should have some way of validating 
+	   the SID exists and is the correct type here.  But 
+	   that is a deficiency in the idmap_rid design. */
+
 	map->status = ID_MAPPED;
 
 	return NT_STATUS_OK;

--------------090802010108070900020206
Content-Type: text/x-patch;
 name="idmap_type.patch"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline;
 filename="idmap_type.patch"

Index: nsswitch/idmap.c
===================================================================
--- nsswitch/idmap.c	(revision 22382)
+++ nsswitch/idmap.c	(working copy)
@@ -91,24 +91,6 @@
 	return NULL;
 }
 
-/* part of a quick hack to avoid loops, need to be sorted out correctly later on */
-static BOOL idmap_in_own_child;
-
-static BOOL idmap_is_in_own_child(void)
-{
-	return idmap_in_own_child;
-}
-
-void reset_idmap_in_own_child(void)
-{
-	idmap_in_own_child = False;
-}
-
-void set_idmap_in_own_child(void)
-{
-	idmap_in_own_child = True;
-}
-
 BOOL idmap_is_offline(void)
 {
 	return ( lp_winbind_offline_logon() &&
@@ -855,9 +837,6 @@
 {
 	NTSTATUS ret;
 	struct idmap_domain *dom;
-	char *domname, *name;
-	enum lsa_SidType sid_type;
-	BOOL wbret;
 
 	/* If we are offline we cannot lookup SIDs, deny mapping */
 	if (idmap_is_offline())	{
@@ -869,70 +848,46 @@
 		return NT_STATUS_NONE_MAPPED;
 	}
 
-	/* quick hack to make things work, will need proper fix later on */	
-	if (idmap_is_in_own_child()) {
-		/* by default calls to winbindd are disabled
-		   the following call will not recurse so this is safe */
-		winbind_on();
-		wbret = winbind_lookup_sid(ctx, map->sid,
-						(const char **)&domname,
-						(const char **)&name,
-						&sid_type);
-		winbind_off();
-	} else {
-		wbret = winbindd_lookup_name_by_sid(ctx, map->sid,
-							&domname,
-							&name,
-							&sid_type);
-	}
-
 	/* check if this is a valid SID and then map it */
-	if (wbret) {
-		switch (sid_type) {
-		case SID_NAME_USER:
-			ret = idmap_allocate_uid(&map->xid);
-			if ( ! NT_STATUS_IS_OK(ret)) {
-				/* can't allocate id, let's just leave it unmapped */
-				DEBUG(2, ("uid allocation failed! Can't create mapping\n"));
-				return NT_STATUS_NONE_MAPPED;
-			}
-			break;
-		case SID_NAME_DOM_GRP:
-		case SID_NAME_ALIAS:
-		case SID_NAME_WKN_GRP:
-			ret = idmap_allocate_gid(&map->xid);
-			if ( ! NT_STATUS_IS_OK(ret)) {
-				/* can't allocate id, let's just leave it unmapped */
-				DEBUG(2, ("gid allocation failed! Can't create mapping\n"));
-				return NT_STATUS_NONE_MAPPED;
-			}
-			break;
-		default:
-			/* invalid sid, let's just leave it unmapped */
-			DEBUG(10, ("SID %s is UNKNOWN, skip mapping\n", sid_string_static(map->sid)));
+	switch (map->xid.type) {
+	case ID_TYPE_UID:
+		ret = idmap_allocate_uid(&map->xid);
+		if ( ! NT_STATUS_IS_OK(ret)) {
+			/* can't allocate id, let's just leave it unmapped */
+			DEBUG(2, ("uid allocation failed! Can't create mapping\n"));
 			return NT_STATUS_NONE_MAPPED;
 		}
+		break;
+	case ID_TYPE_GID:
+		ret = idmap_allocate_gid(&map->xid);
+		if ( ! NT_STATUS_IS_OK(ret)) {
+			/* can't allocate id, let's just leave it unmapped */
+			DEBUG(2, ("gid allocation failed! Can't create mapping\n"));
+			return NT_STATUS_NONE_MAPPED;
+		}
+		break;
+	default:
+		/* invalid sid, let's just leave it unmapped */
+		DEBUG(3,("idmap_new_mapping: Refusing to create a "
+			 "mapping for an unspecified ID type.\n"));		
+		return NT_STATUS_NONE_MAPPED;
+	}
 
-		/* ok, got a new id, let's set a mapping */
-		map->status = ID_MAPPED;
+	/* ok, got a new id, let's set a mapping */
+	map->status = ID_MAPPED;
 
-		DEBUG(10, ("Setting mapping: %s <-> %s %lu\n",
-			   sid_string_static(map->sid),
-			   (map->xid.type == ID_TYPE_UID) ? "UID" : "GID",
-			   (unsigned long)map->xid.id));
-		ret = dom->methods->set_mapping(dom, map);
+	DEBUG(10, ("Setting mapping: %s <-> %s %lu\n",
+		   sid_string_static(map->sid),
+		   (map->xid.type == ID_TYPE_UID) ? "UID" : "GID",
+		   (unsigned long)map->xid.id));
+	ret = dom->methods->set_mapping(dom, map);
 
-		if ( ! NT_STATUS_IS_OK(ret)) {
-			/* something wrong here :-( */
-			DEBUG(2, ("Failed to commit mapping\n!"));
+	if ( ! NT_STATUS_IS_OK(ret)) {
+		/* something wrong here :-( */
+		DEBUG(2, ("Failed to commit mapping\n!"));
 
-			/* TODO: would it make sense to have an "unalloc_id function?" */
+		/* TODO: would it make sense to have an "unalloc_id function?" */
 
-			return NT_STATUS_NONE_MAPPED;
-		}
-	} else {
-		DEBUG(2,("Invalid SID, not mapping %s (type %d)\n",
-				sid_string_static(map->sid), sid_type));
 		return NT_STATUS_NONE_MAPPED;
 	}
 
@@ -1439,6 +1394,8 @@
 				(unsigned long)maps[i].xid.id,
 				sid_string_static(maps[i].sid));
 			break;
+		case ID_TYPE_NOT_SPECIFIED:
+			break;
 		}
 	}
 
Index: nsswitch/idmap_rid.c
===================================================================
--- nsswitch/idmap_rid.c	(revision 22382)
+++ nsswitch/idmap_rid.c	(working copy)
@@ -37,7 +37,7 @@
   we support multiple domains in the new idmap
  *****************************************************************************/
 
-static NTSTATUS idmap_rid_initialize(struct idmap_domain *dom, const char *compat_params)
+static NTSTATUS idmap_rid_initialize(struct idmap_domain *dom)
 {
 	NTSTATUS ret;
 	struct idmap_rid_context *ctx;
@@ -86,9 +86,6 @@
 
 static NTSTATUS idmap_rid_id_to_sid(TALLOC_CTX *memctx, struct idmap_rid_context *ctx, struct id_map *map)
 {
-	const char *domname, *name;
-	enum lsa_SidType sid_type;
-	BOOL ret;
 	struct winbindd_domain *domain;	
 
 	/* apply filters before checking */
@@ -104,46 +101,10 @@
 	
 	sid_compose(map->sid, &domain->sid, map->xid.id - ctx->low_id + ctx->base_rid);
 
-	/* by default calls to winbindd are disabled
-	   the following call will not recurse so this is safe */
-	winbind_on();
-	ret = winbind_lookup_sid(memctx, map->sid, &domname, &name, &sid_type);
-	winbind_off();
+	/* We **really** should have some way of validating 
+	   the SID exists and is the correct type here.  But 
+	   that is a deficiency in the idmap_rid design. */
 
-	if (ret) {
-		switch (sid_type) {
-		case SID_NAME_USER:
-			if (map->xid.type != ID_TYPE_UID) {
-				/* wrong type */
-				map->status = ID_UNMAPPED;
-				DEBUG(5, ("Resulting SID is of wrong ID type\n"));
-				return NT_STATUS_NONE_MAPPED;
-			}
-			break;
-		case SID_NAME_DOM_GRP:
-		case SID_NAME_ALIAS:
-		case SID_NAME_WKN_GRP:
-			if (map->xid.type != ID_TYPE_GID) {
-				/* wrong type */
-				map->status = ID_UNMAPPED;
-				DEBUG(5, ("Resulting SID is of wrong ID type\n"));
-				return NT_STATUS_NONE_MAPPED;
-			}
-			break;
-		default:
-			/* invalid sid?? */
-			map->status = ID_UNKNOWN;
-			DEBUG(10, ("SID %s is UNKNOWN, skip mapping\n", sid_string_static(map->sid)));
-			return NT_STATUS_NONE_MAPPED;
-		}
-	} else {
-		/* TODO: how do we known if the lookup was negative
-		 * or something just failed? */
-		map->status = ID_UNMAPPED;
-		DEBUG(2, ("Failed: to resolve SID\n"));
-		return NT_STATUS_UNSUCCESSFUL;
-	}
-
 	map->status = ID_MAPPED;
 
 	return NT_STATUS_OK;
@@ -155,46 +116,13 @@
 
 static NTSTATUS idmap_rid_sid_to_id(TALLOC_CTX *memctx, struct idmap_rid_context *ctx, struct id_map *map)
 {
-	const char *domname, *name;
-	enum lsa_SidType sid_type;
 	uint32_t rid;
-	BOOL ret;
 
 	sid_peek_rid(map->sid, &rid);
 	map->xid.id = rid - ctx->base_rid + ctx->low_id;
 
-	/* by default calls to winbindd are disabled
-	   the following call will not recurse so this is safe */
-	winbind_on();
-	/* check if this is a valid SID and set the type */
-	ret = winbind_lookup_sid(memctx, map->sid, &domname, &name, &sid_type);
-	winbind_off();
-
-	if (ret) {
-		switch (sid_type) {
-		case SID_NAME_USER:
-			map->xid.type = ID_TYPE_UID;
-			break;
-		case SID_NAME_DOM_GRP:
-		case SID_NAME_ALIAS:
-		case SID_NAME_WKN_GRP:
-			map->xid.type = ID_TYPE_GID;
-			break;
-		default:
-			/* invalid sid, let's just leave it unmapped */
-			DEBUG(10, ("SID %s is UNKNOWN, skip mapping\n", sid_string_static(map->sid)));
-			map->status = ID_UNKNOWN;
-			return NT_STATUS_NONE_MAPPED;
-		}
-	} else {
-		/* TODO: how do we known if the lookup was negative
-		 * or something just failed? */
-		map->status = ID_UNMAPPED;
-		DEBUG(2, ("Failed: to resolve SID\n"));
-		return NT_STATUS_UNSUCCESSFUL;
-	}
-
 	/* apply filters before returning result */
+
 	if ((map->xid.id < ctx->low_id) || (map->xid.id > ctx->high_id)) {
 		DEBUG(5, ("Requested id (%u) out of range (%u - %u). Filtered!\n",
 				map->xid.id, ctx->low_id, ctx->high_id));
@@ -202,6 +130,10 @@
 		return NT_STATUS_NONE_MAPPED;
 	}
 
+	/* We **really** should have some way of validating 
+	   the SID exists and is the correct type here.  But 
+	   that is a deficiency in the idmap_rid design. */
+
 	map->status = ID_MAPPED;
 
 	return NT_STATUS_OK;
Index: nsswitch/idmap_util.c
===================================================================
--- nsswitch/idmap_util.c	(revision 22382)
+++ nsswitch/idmap_util.c	(working copy)
@@ -105,18 +105,24 @@
 	DEBUG(10,("idmap_sid_to_uid: sid = [%s]\n", sid_string_static(sid)));
 
 	map.sid = sid;
+	map.xid.type = ID_TYPE_UID;	
 	
 	maps[0] = &map;
 	maps[1] = NULL;
 	
 	ret = idmap_sids_to_unixids(maps);
 	if ( ! NT_STATUS_IS_OK(ret)) {
-		DEBUG(10, ("error mapping sid [%s] to uid\n", sid_string_static(sid)));
+		DEBUG(10, ("error mapping sid [%s] to uid\n", 
+			   sid_string_static(sid)));
 		return ret;
 	}
 
 	if ((map.status != ID_MAPPED) || (map.xid.type != ID_TYPE_UID)) {
-		DEBUG(10, ("sid [%s] not mapped to an uid [%u,%u,%u]\n", sid_string_static(sid), map.status, map.xid.type, map.xid.id));
+		DEBUG(10, ("sid [%s] not mapped to an uid [%u,%u,%u]\n", 
+			   sid_string_static(sid), 
+			   map.status, 
+			   map.xid.type, 
+			   map.xid.id));
 		return NT_STATUS_NONE_MAPPED;
 	}
 
@@ -139,18 +145,24 @@
 	DEBUG(10,("idmap_sid_to_gid: sid = [%s]\n", sid_string_static(sid)));
 
 	map.sid = sid;
+	map.xid.type = ID_TYPE_GID;
 	
 	maps[0] = &map;
 	maps[1] = NULL;
 	
 	ret = idmap_sids_to_unixids(maps);
 	if ( ! NT_STATUS_IS_OK(ret)) {
-		DEBUG(10, ("error mapping sid [%s] to gid\n", sid_string_static(sid)));
+		DEBUG(10, ("error mapping sid [%s] to gid\n", 
+			   sid_string_static(sid)));
 		return ret;
 	}
 
 	if ((map.status != ID_MAPPED) || (map.xid.type != ID_TYPE_GID)) {
-		DEBUG(10, ("sid [%s] not mapped to an gid [%u,%u,%u]\n", sid_string_static(sid), map.status, map.xid.type, map.xid.id));
+		DEBUG(10, ("sid [%s] not mapped to an gid [%u,%u,%u]\n", 
+			   sid_string_static(sid), 
+			   map.status, 
+			   map.xid.type, 
+			   map.xid.id));
 		return NT_STATUS_NONE_MAPPED;
 	}
 
Index: include/smb.h
===================================================================
--- include/smb.h	(revision 22382)
+++ include/smb.h	(working copy)
@@ -286,13 +286,14 @@
 #define dom_sid28 dom_sid
 
 enum id_mapping {
-	ID_UNKNOWN,
+	ID_UNKNOWN = 0,
 	ID_MAPPED,
 	ID_UNMAPPED,
 	ID_EXPIRED
 };
 
 enum id_type {
+	ID_TYPE_NOT_SPECIFIED = 0,
 	ID_TYPE_UID,
 	ID_TYPE_GID
 };

--------------090802010108070900020206
Content-Type: text/x-patch;
 name="winbindd_api.patch"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline;
 filename="winbindd_api.patch"

Index: nsswitch/winbindd.c
===================================================================
--- nsswitch/winbindd.c	(revision 22382)
+++ nsswitch/winbindd.c	(working copy)
@@ -248,7 +248,9 @@
 	{ WINBINDD_SID_TO_GID, winbindd_sid_to_gid, "SID_TO_GID" },
 	{ WINBINDD_UID_TO_SID, winbindd_uid_to_sid, "UID_TO_SID" },
 	{ WINBINDD_GID_TO_SID, winbindd_gid_to_sid, "GID_TO_SID" },
+#if 0   /* DISABLED until we fix the interface in Samba 3.0.26 --jerry */
 	{ WINBINDD_SIDS_TO_XIDS, winbindd_sids_to_unixids, "SIDS_TO_XIDS" },
+#endif  /* end DISABLED */
 	{ WINBINDD_ALLOCATE_UID, winbindd_allocate_uid, "ALLOCATE_UID" },
 	{ WINBINDD_ALLOCATE_GID, winbindd_allocate_gid, "ALLOCATE_GID" },
 	{ WINBINDD_SET_MAPPING, winbindd_set_mapping, "SET_MAPPING" },
@@ -1010,9 +1012,6 @@
 
 	namecache_enable();
 
-	/* quick hack to avoid a loop in idmap, proper fix later */
-	reset_idmap_in_own_child();
-
 	/* Winbind daemon initialisation */
 
 	if ( ! NT_STATUS_IS_OK(idmap_init_cache()) ) {
Index: nsswitch/winbindd_dual.c
===================================================================
--- nsswitch/winbindd_dual.c	(revision 22382)
+++ nsswitch/winbindd_dual.c	(working copy)
@@ -364,7 +364,9 @@
 	{ WINBINDD_CHECK_MACHACC,        winbindd_dual_check_machine_acct,    "CHECK_MACHACC" },
 	{ WINBINDD_DUAL_SID2UID,         winbindd_dual_sid2uid,               "DUAL_SID2UID" },
 	{ WINBINDD_DUAL_SID2GID,         winbindd_dual_sid2gid,               "DUAL_SID2GID" },
+#if 0   /* DISABLED until we fix the interface in Samba 3.0.26 --jerry */
 	{ WINBINDD_DUAL_SIDS2XIDS,       winbindd_dual_sids2xids,             "DUAL_SIDS2XIDS" },
+#endif  /* end DISABLED */
 	{ WINBINDD_DUAL_UID2SID,         winbindd_dual_uid2sid,               "DUAL_UID2SID" },
 	{ WINBINDD_DUAL_GID2SID,         winbindd_dual_gid2sid,               "DUAL_GID2SID" },
 	{ WINBINDD_DUAL_UID2NAME,        winbindd_dual_uid2name,              "DUAL_UID2NAME" },
@@ -921,9 +923,6 @@
 			child);
 	}
 
-	/* quick hack to avoid a loop in idmap, proper fix later */
-	set_idmap_in_own_child();
-
 	while (1) {
 
 		int ret;

--------------090802010108070900020206--

