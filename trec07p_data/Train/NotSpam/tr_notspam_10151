From perl6-all-return-81314-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon May 14 10:55:34 2007
Return-Path: <perl6-all-return-81314-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4EEtXqD023337
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 14 May 2007 10:55:34 -0400
Received: (qmail 17618 invoked by uid 514); 14 May 2007 14:55:30 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 17613 invoked from network); 14 May 2007 14:55:30 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=2.0 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,KARMA_CONNECT_NEGATIVE,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: neutral (x1.develooper.com: local policy)
Date: Mon, 14 May 2007 11:37:59 -0400
From: John Macdonald <john@perlwolf.com>
To: Thomas Wittek <mail@gedankenkonstrukt.de>
Cc: perl6-language@perl.org
Subject: Re: Is Perl 6 too late?
Message-ID: <20070514153759.GA30785@lupus.perlwolf.com>
References: <010520071004503787%brian.d.foy@gmail.com> <1584795397.20070503140643@shitov.ru> <200705111448.05991.chromatic@wgz.org> <20070513224235.28013.qmail@lists.develooper.com> <46479C1C.4000305@casella.verplant.org> <20070514105154.5648.qmail@lists.develooper.com> <D96BFA99-0A22-4278-8088-E0205C9314E2@hexten.net> <20070514113110.15355.qmail@lists.develooper.com> <44364191-9152-4B57-918C-48F1BC75626C@hexten.net> <20070514123612.5443.qmail@lists.develooper.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20070514123612.5443.qmail@lists.develooper.com>
User-Agent: Mutt/1.4.1i
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=2.7 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,KARMA_CONNECT_NEGATIVE,SPF_NEUTRAL

On Mon, May 14, 2007 at 02:36:10PM +0200, Thomas Wittek wrote:
> Andy Armstrong schrieb:
> >On 14 May 2007, at 12:31, Thomas Wittek wrote:
> >>How did C, C#, Java, Ruby, Python, Lua, JavaScript, Visual Basic, etc. 
> >>know?
> >>They didn't.
> >>If there is a new release, you always have to check if your code still 
> >>runs.
> >
> >I think that may be the point I'm making.
> 
> Your point is that you don't have one?
> Do you believe, that new keywords are the only cause of breaking 
> backwards compatibility? I don't think so.
> So you rely on testing your code anyway. Sigils won't save you from that.

Back in the 90's I was with a company that had a 20K line
perl program.  We would provide a copy of perl as part of the
program suite, so that we could control which version was
being used for our software and when it was upgraded while
still allowing the customer to have their own version of perl
that they could upgrade on their own schedule.  Before any perl
upgrade was built into our suite, we would of course test it
extensivily to ensure that all of the code was still compatible.
Until the perl4->perl5 change, there was never any problem -
Larry is a wizard at adding totally new concepts and features
in a way that just "happens" to include all of the old usage
bits as a special case that falls magically out of the new,
enhanced, more coherent whole.  But there is no way that this
would have been possible without the distinction between named
operators and variables provided by sigils.  Removing the sigil
on a function call (it used to always be written &sub(args...))
did, I think, lead to the difficulty in perl5 where it became
difficult to add new keyword operators to the language - because
they could conflict with subroutine names in existing code.

Needless to say, that level of dependable upgradability without
requiring code rewrites was considered to e a huge benefit of
using perl for our company.

(For the record, we delayed converting from perl4 to perl5 for
many years, woried about the possibility of subtle problems
arising from the massive changes that had been made to the
language.  When I finally tried it out, there were only a few
changes that really affected us.  I had the code converted in
about two weeks, although we then ran it in parallel with the
old code for about two months before accepting that nothing
tricky had snuck in.)

-- 

