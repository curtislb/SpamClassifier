From beginners-return-91978-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed May 30 11:55:09 2007
Return-Path: <beginners-return-91978-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4UFt7hB015622
	for <ktwarwic@flax9.uwaterloo.ca>; Wed, 30 May 2007 11:55:08 -0400
Received: (qmail 1399 invoked by uid 514); 30 May 2007 15:54:57 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 1390 invoked from network); 30 May 2007 15:54:57 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 30 May 2007 15:54:57 -0000
Received: (qmail 10635 invoked by uid 225); 30 May 2007 15:54:56 -0000
Delivered-To: beginners@perl.org
Received: (qmail 10625 invoked by alias); 30 May 2007 15:54:56 -0000
X-Spam-Status: No, hits=0.1 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,KARMA_CONNECT_NEGATIVE,SPF_NEUTRAL
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: 63.251.223.186 is neither permitted nor denied by domain of mritty@gmail.com)
Received: from x6.develooper.com (HELO lists.develooper.com) (63.251.223.186)
    by la.mx.develooper.com (qpsmtpd/0.28) with SMTP; Wed, 30 May 2007 08:54:42 -0700
Received: (qmail 1310 invoked by uid 515); 30 May 2007 15:54:39 -0000
To: beginners@perl.org, perl-beginners@moderators.isc.org
MBOX-Line: From news@google.com Wed May 30 15:54:38 2007
Delivered-To: colobus-nntpmod@lists.develooper.com
Received: (qmail 1302 invoked from network); 30 May 2007 15:54:38 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 30 May 2007 15:54:38 -0000
Received: (qmail 10478 invoked by uid 225); 30 May 2007 15:54:37 -0000
Delivered-To: news-moderator-perl.beginners@perl.org
Received: (qmail 10473 invoked by alias); 30 May 2007 15:54:37 -0000
Received-SPF: neutral (x1.develooper.com: 216.168.1.22 is neither permitted nor denied by domain of news@google.com)
Received: from trinity.supernews.net (HELO trinity.supernews.net) (216.168.1.22)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Wed, 30 May 2007 08:54:10 -0700
Received: from proxy.google.com ([64.233.184.4]:19701)
	by trinity.supernews.net with esmtps (TLSv1:AES256-SHA:256)
	(Exim 4.66 (FreeBSD))
	(envelope-from <news@google.com>)
	id 1HtQUw-0004cd-AH
	for perl-beginners@moderators.isc.org; Wed, 30 May 2007 15:54:06 +0000
Received: from AR020007
	by proxy.google.com with ESMTP id l4UFru2s016035
	for <perl-beginners@moderators.isc.org>; Wed, 30 May 2007 08:53:56 -0700
Received: (from news@localhost)
	by Google Production id l4UFru9R022242
	for perl-beginners@moderators.isc.org; Wed, 30 May 2007 08:53:56 -0700
From: Paul Lalli <mritty@gmail.com>
Subject: Re: zero width lookahead match
Date: 30 May 2007 08:53:54 -0700
Organization: http://groups.google.com
Lines: 63
Message-ID: <1180540434.503238.232510@m36g2000hse.googlegroups.com>
References: <8a31202a0705300457l38219d07s8a236d11af4e2db0@mail.gmail.com>
   <58ce48dc0705300612xb0d46b5q55771654d4223fc0@mail.gmail.com>
   <8a31202a0705300623w18766a6fud2b2b749cd766652@mail.gmail.com>
   <58ce48dc0705300702n2dfdd105w296166224c28bbbf@mail.gmail.com>
NNTP-Posting-Host: 204.97.183.31
Mime-Version: 1.0
Content-Type: text/plain; charset="iso-8859-1"
X-Trace: posting.google.com 1180540436 22239 127.0.0.1 (30 May 2007 15:53:56 GMT)
X-Complaints-To: groups-abuse@google.com
NNTP-Posting-Date: Wed, 30 May 2007 15:53:56 +0000 (UTC)
In-Reply-To: <58ce48dc0705300702n2dfdd105w296166224c28bbbf@mail.gmail.com>
User-Agent: G2/1.0
X-HTTP-UserAgent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; InfoPath.1),gzip(gfe),gzip(gfe)
X-HTTP-Via: 1.0 mndnetcachea (NetCache NetApp/6.0.5)
Complaints-To: groups-abuse@google.com
Injection-Info: m36g2000hse.googlegroups.com; posting-host=204.97.183.31;
   posting-account=p3DCbw0AAAAc32agNMy1mXKInuw5KHP_
X-Posted-By: 63.251.223.186
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.1 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,KARMA_CONNECT_NEGATIVE,SPF_NEUTRAL

On May 30, 10:02 am, chas.ow...@gmail.com (Chas Owens) wrote:
> On 5/30/07, Sharan Basappa <sharan.basa...@gmail.com> wrote:

> > You mention that if I write a rule like @store = $str =~ m/((?=\d\d\d))/g;
> > then the scanner does not move ahead. But as I mentioned in my mail,
> > the result of this regex is 123 234 etc. This clearly shows that after every
> > match,
> > the regex engine of perl is moving its pointer to next char in the string
> > (i.e. it starts
> > looking at 23456 once 123 is matched)
> > This was exactly my question.
>
> Because it always moves ahead by either one character or the match,
> but zero-width constructs do not consume any characters.  That is why
> they are called zero-width.

I got confused by this too.  I think Sharan's question comes down to
"why isn't this an infinite loop?"  That is, why does pos() move ahead
one character when it matches 0 characters?  This is not limited to
look-ahead assertions.  The behavior can be seen in other constructs
as well.  For example:

$ perl -wle'
$string = "abc";
while ($string =~ /(.*?)/g) {
  print pos($string), ": ", $1;
}
'
0:
1: a
1:
2: b
2:
3: c
3:

It appears that Perl is actually dividing the string up into
"characters" and "slots between character", and allowing pos() to move
to each of them in sequence.  So at the beginning, it's at the slot
before the first character, and it can successfully match 0
characters.  Then pos() moves to the first character, and the fewest
characters it can find is that one character, so $1 gets 'a'.  Then it
moves to the slot between 'a' and 'b'.  Etc.

Here's another, that doesn't allow any characters to be matched:
$ perl -wle'
$string = "abc";
while ($string =~ /(.{0})/g) {
  print pos($string), ": ", $1;
}
'
0:
1:
2:
3:

Would the above be an accurate description of what's happening?  And
if so, is this behavior documented anywhere?  I couldn't find it in a
cursory examanation of either perlop or perlre...

Thanks,
Paul Lalli


-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


