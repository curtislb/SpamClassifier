From beginners-return-92509-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon Jun 18 05:16:33 2007
Return-Path: <beginners-return-92509-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5I9GTL9015972
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 18 Jun 2007 05:16:31 -0400
Received: (qmail 449 invoked by uid 514); 18 Jun 2007 09:16:21 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 434 invoked from network); 18 Jun 2007 09:16:21 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 18 Jun 2007 09:16:21 -0000
Received: (qmail 25282 invoked by uid 225); 18 Jun 2007 09:16:20 -0000
Delivered-To: beginners@perl.org
Received: (qmail 25259 invoked by alias); 18 Jun 2007 09:16:19 -0000
X-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_HELO_PASS,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of gclpb-beginners@m.gmane.org designates 80.91.229.2 as permitted sender)
Received: from main.gmane.org (HELO ciao.gmane.org) (80.91.229.2)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Mon, 18 Jun 2007 02:16:16 -0700
Received: from list by ciao.gmane.org with local (Exim 4.43)
	id 1I0DGu-000054-Go
	for beginners@perl.org; Mon, 18 Jun 2007 11:11:41 +0200
Received: from merlin2.provinz.bz.it ([62.101.0.30])
        by main.gmane.org with esmtp (Gmexim 0.1 (Debian))
        id 1AlnuQ-0007hv-00
        for <beginners@perl.org>; Mon, 18 Jun 2007 11:11:40 +0200
Received: from andreas.moroder by merlin2.provinz.bz.it with local (Gmexim 0.1 (Debian))
        id 1AlnuQ-0007hv-00
        for <beginners@perl.org>; Mon, 18 Jun 2007 11:11:40 +0200
X-Injected-Via-Gmane: http://gmane.org/
To: beginners@perl.org
From: Andreas Moroder <andreas.moroder@sb-brixen.it>
Subject:  php to perl translation 
Date:  Mon, 18 Jun 2007 10:55:17 +0200
Lines: 133
Message-ID: <f55h9l$eab$1@sea.gmane.org>
Mime-Version:  1.0
Content-Type:  text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding:  8bit
X-Complaints-To: usenet@sea.gmane.org
X-Gmane-NNTP-Posting-Host: merlin2.provinz.bz.it
User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; de-AT; rv:1.8.1.2) Gecko/20070222 SeaMonkey/1.1.1
Sender: news <news@sea.gmane.org>

Hello,

after a long search I found a script that creates oracle password 
hashes. I need the result of this script to store the password in out 
LDAP database in the oracle hashed format. The problem is that it is a 
php script and I need it in perl.

I am a perl beginner and I am not able to convert this script to perl.
Is anyone outthere that could help me ?

Passing user=scott and password=tiger

the result of the function should be.

F894844C34402B67

The mcrypt functions should be used.

Thank you very much
Andreas



<?php
$username = "scott";
$password = "tiger";

// Using thirdparty library for DES with CBC encryption
echo get_oracle_hash($username, $password, $use_mcrypt=false);

echo "<br/>";

// Using built-in mcrypt library for encryption
echo get_oracle_hash($username, $password, $use_mcrypt=true);





/*
ORACLE HASH ALGORITHM
1. Concatenate the username and the password to produce a plaintext string;

2. Convert the plaintext string to uppercase characters;

3. Convert the plaintext string to multi-byte storage format; ASCII
    characters have the high byte set to 0x00;

4. Encrypt the plaintext string (padded with 0s if necessary to the
    next even block length) using the DES algorithm in cipher block
    chaining (CBC) mode with a fixed key value of 0x0090687678ABCDEF;

5. Encrypt the plaintext string again with DES-CBC, but using the
    last block of the output of the previous step (ignoring parity
    bits) as the encryption key. The last block of the output is
    converted into a printable string to produce the password hash
    value.
*/
// $username: The user name
// $password: The password for the user
// $use_mcrypt: If we want to use built in library mcrypt (need to set 
server php settings)
function get_oracle_hash($username, $password, $use_mcrypt=true)
{
	// Want to use mcrypt
	if ($use_mcrypt)
	{
		// Values if we want to use mcrypt library
		$chiper = MCRYPT_3DES;
		$mode = MCRYPT_MODE_CBC;
	}
	// Want to use thirdparty library
	else
	{
		require_once("DesCbc.php");
	}
	
	// The data we want to encrypt/make hash of
	// We have to convert it to multibyte format
	$temp_data = strtoupper($username) . strtoupper($password);
	$data = "";
	foreach (str_split($temp_data) as $char)
	{
		// High byte: 0x00, (i.e. H = 0x0048)
		$temp_hex =  "00" . dechex(ord($char));
			
		// Have to handle some special characters different
		if (in_array($char, str_split("æÆøØåÅ")))
		{
			$temp_hex = "0132";
		}

		// Add this character to the complete string of hex values
		$data .= $temp_hex;		
	}
	$data = pack("H*", $data);
	
	// Start key
	$key0  = pack("H*", '0090687678ABCDEF');
	
	// The initialization vector
	$iv = null;
	
	// First time encryption
	if ($use_mcrypt)
	{
		$res1 =  @mcrypt_encrypt($chiper, $key0, $data, $mode, $iv);
	}
	else
	{
		$res1 = des($key0, $data, $iv);
	}
	
	// Get the last block to use as key in second encryption
	$key2 = substr($res1, strlen($res1)-8, 8);
	
	// Second time encryption
	if ($use_mcrypt)
	{
		$res2 = @mcrypt_encrypt($chiper, $key2, $data, $mode, $iv);
	}
	else
	{
		$res2 = des($key2, $data, $iv);
	}
	
	// Then get the last block of $res2 and convert to hex
	$hash = substr($res2, strlen($res2)-8, 8);
	$hash = strtoupper(bin2hex($hash));
	
	return $hash;
}
?>


-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


