From perl6-all-return-81453-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu May 17 14:05:57 2007
Return-Path: <perl6-all-return-81453-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4HI5uqD002896
	for <ktwarwic@flax9.uwaterloo.ca>; Thu, 17 May 2007 14:05:56 -0400
Received: (qmail 22269 invoked by uid 514); 17 May 2007 18:05:52 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 22264 invoked from network); 17 May 2007 18:05:52 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-0.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,KARMA_CONNECT_NEGATIVE,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: domain of mehmet.yavuz.selim@gmail.com designates 64.233.162.227 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=se12x9CTM/pspLgAMwI9+C26F+1KoJJq6DU/rXBfGDH9mRVb3BmY/YmcwwsUJlDEUCkg3zPQQMckpdDNPSYpCgSqguRoValbBKw09+7jjHG0WTAmcn1agvS+3Fvtt34Yi2YnNxvQwQVB7a/47B3IaMbByCgRcdDYbyjqVoJ1q0M=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=JtltXE2YffJ/yfJDfTcC5PjCwYCnRQZuTRpQikRfkX60+xX54H+avzYvUOg0diuyngn1f+Nb/TBY+CTgy0zJ0FvpNa0R6sInf4f8gDSvSUUG16jSCoqa8XFIyViq45J4JBwmTm4EwUtMu157x97pGEPy2JIJVjAwH7iz7vOIA1M=
Message-ID: <1abd9eb20705171104r2e57edd3kf7685b1f6e3c3026@mail.gmail.com>
Date: Thu, 17 May 2007 20:04:57 +0200
From: "Mehmet Yavuz Selim Soyturk" <mehmet.yavuz.selim@gmail.com>
To: perl6-internals@perl.org
Subject: Re: [perl #42974] [BUG] Hungry Alligator Eats Integer; Developer Registers Complaint
In-Reply-To: <7b0e52b40705170833r6ec5b509nc8da608d44bc5cd5@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <RT-Ticket-42974@perl.org>
	 <1d9a3f400705161526m4693add9y28d08437206049f7@mail.gmail.com>
	 <rt-3.6.HEAD-4015-1179354514-1900.42974-72-0@perl.org>
	 <1abd9eb20705162115x5de8ace2m8ec1cdc05f28dcfe@mail.gmail.com>
	 <7b0e52b40705170833r6ec5b509nc8da608d44bc5cd5@mail.gmail.com>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS

On 5/17/07, Klaas-Jan Stol <parrotcode@gmail.com> wrote:
>
>
> On 5/17/07, Mehmet Yavuz Selim Soyturk <mehmet.yavuz.selim@gmail.com> wrote:
> > On 5/17/07, via RT Jerry Gay
> <parrotbug-followup@parrotcode.org> wrote:
> > > # New Ticket Created by  Jerry Gay
> > > # Please include the string:  [perl #42974]
> > > # in the subject line of all future correspondence about this issue.
> > > # <URL:
> http://rt.perl.org/rt3/Ticket/Display.html?id=42974 >
> > >
> > >
> > > it looks like the register alligator is eating integers in this code:
> > >
> > > .const int TESTS = 2
> > >
> > > .sub 'main' :main
> > >     load_bytecode 'Test/More.pir'
> > >     .local pmc exp, test_ns
> > >     test_ns = get_namespace ['Test::More']
> > >     exp     = new 'Exporter'
> > >     exp.'source'(test_ns)
> > >     exp.'import'('plan ok is diag isa_ok' :named('globals'))
> > >
> > >     plan(TESTS)
> > >
> > >     .local pmc attrs
> > >     attrs = new 'Hash'
> > >
> > >     .local pmc red, green, blue
> > >     attrs['name'] = 'Red'
> > >     red           = new 'Role', attrs
> > >
> > >     attrs['name'] = 'Green'
> > >     green         = new 'Role', attrs
> > >
> > >     attrs['name'] = 'Blue'
> > >     blue          = new 'Role', attrs
> > >
> > >     green.'add_role'( blue )
> > >
> > >     .local pmc color
> > >     color = new 'Class'
> > >
> > >     $S0 = 'Red'
> > >     $I0 = color.'does'($S0)
> > >     is($I0, 0, 'does not Red')
> > >
> > >     color.'add_role'( red )
> > >     $I0 = color.'does'($S0)
> > >     is($I0, 1, 'does Red')
> > > .end
> > >
> > >
> > > which produces:
> > >
> > > 1..2
> > > ok 1 - does not Red
> > > not ok 2 - does Red
> > > # Received: -888
> > > # Expected: 1
> > >
> > >
> > > either something's fishy in the PCCRETURN code, or the register
> > > allocator. the -888 is a dead giveaway that an integer register has
> > > been eaten. it's possible it's isolated in code called from the
> > > 'add_role' method in the Class PMC... this bug is preventing me from
> > > testing that code.
> > >
> > > ~jerry
> > >
> >
> > The following patch solves that issue.
> >
> > --- src/pmc/class.pmc   (revision 18568)
> > +++ src/pmc/class.pmc   (working copy)
> > @@ -1111,8 +1111,9 @@
> >              PMC    *role     =
> VTABLE_get_pmc_keyed_int(interp, role_list, i);
> >              (STRING *r_name) = PCCINVOKE(interp, role, "name");
> >
> > -            if (string_compare(interp, role_name, r_name))
> > +            if (string_compare(interp, role_name, r_name) == 0) {
> >                  PCCRETURN(INTVAL 1);
> > +            }
> >          }
> >
> >          PCCRETURN(INTVAL 0);
> >
> >
> > --
> > Mehmet
> >
>
>
> Mmmm, is string_compare a wrapper for strcmp() ? Or is it a wrapper that
> reverses the result? (so return true if they're equal). In /that/ case,
> !string_compare() would be nicer. (my point being, if string_compare() is
> part of parrot source code, why not try and make it more sensible/readable).
> (I understand why the result values are the way they are for strcmp, but i
> never liked them)
>
> kjs

I think that it's analogous to strcmp, but for the STRING* type. I
looked now at string_funcs.h, there is in fact a string_equal
function.

By the way, that wasn't the only issue. PCCRETURN expands to multiple
statements, so the curly braces are needed after the if test. Would it
not be better if PCCRETURN did it itself?


-- 
Mehmet

