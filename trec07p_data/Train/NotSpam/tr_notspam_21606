From r-help-bounces@stat.math.ethz.ch  Fri Jun 22 10:47:15 2007
Return-Path: <r-help-bounces@stat.math.ethz.ch>
Received: from hypatia.math.ethz.ch (hypatia.math.ethz.ch [129.132.145.15])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l5MElEL9007504
	for <ktwarwic@flax9.uwaterloo.ca>; Fri, 22 Jun 2007 10:47:14 -0400
Received: from hypatia.math.ethz.ch (hypatia [129.132.145.15])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l5MEjeKV000598;
	Fri, 22 Jun 2007 16:46:01 +0200
X-Spam-Checker-Version: SpamAssassin 3.2.0 (2007-05-01) on hypatia.math.ethz.ch
X-Spam-Level: 
X-Spam-Status: No, score=-1.0 required=5.0 tests=AWL, BAYES_50,
	DKIM_POLICY_SIGNSOME autolearn=no version=3.2.0
Received: from mxout7.cac.washington.edu (mxout7.cac.washington.edu
	[140.142.32.178])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l5MEjGSd000416
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=FAIL)
	for <r-help@stat.math.ethz.ch>; Fri, 22 Jun 2007 16:45:20 +0200
Received: from homer22.u.washington.edu (homer22.u.washington.edu
	[140.142.15.9])
	by mxout7.cac.washington.edu (8.13.7+UW06.06/8.13.7+UW07.05) with ESMTP
	id l5MEjFBA028981
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NO);
	Fri, 22 Jun 2007 07:45:15 -0700
Received: from localhost (tlumley@localhost)
	by homer22.u.washington.edu (8.13.7+UW06.06/8.13.7+Submit) with ESMTP
	id l5MEjEUd023809; Fri, 22 Jun 2007 07:45:14 -0700
Date: Fri, 22 Jun 2007 07:45:14 -0700 (PDT)
From: Thomas Lumley <tlumley@u.washington.edu>
To: Ben Bolker <bolker@ufl.edu>
In-Reply-To: <loom.20070622T151700-639@post.gmane.org>
Message-ID: <Pine.LNX.4.64.0706220732470.20743@homer22.u.washington.edu>
References: <467BA50B.60408@unibas.ch>
	<loom.20070622T151700-639@post.gmane.org>
MIME-Version: 1.0
X-PMX-Version: 5.3.1.294258, Antispam-Engine: 2.5.1.298604,
	Antispam-Data: 2007.6.22.72629
X-Uwash-Spam: Gauge=IIIIIII, Probability=7%, Report='__CT 0, __CT_TEXT_PLAIN 0,
	__HAS_MSGID 0, __MIME_TEXT_ONLY 0, __MIME_VERSION 0,
	__SANE_MSGID 0'
X-Virus-Scanned: by amavisd-new at stat.math.ethz.ch
Cc: r-help@stat.math.ethz.ch
Subject: Re: [R] extract index during execution of sapply
X-BeenThere: r-help@stat.math.ethz.ch
X-Mailman-Version: 2.1.9
Precedence: list
List-Id: "Main R Mailing List: Primary help" <r-help.stat.math.ethz.ch>
List-Unsubscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=unsubscribe>
List-Archive: <https://stat.ethz.ch/pipermail/r-help>
List-Post: <mailto:r-help@stat.math.ethz.ch>
List-Help: <mailto:r-help-request@stat.math.ethz.ch?subject=help>
List-Subscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: r-help-bounces@stat.math.ethz.ch
Errors-To: r-help-bounces@stat.math.ethz.ch

On Fri, 22 Jun 2007, Ben Bolker wrote:

> Christian Bieli <christian.bieli <at> unibas.ch> writes:
>
>>
>> Hi there
>> During execution of sapply I want to extract the number of times the
>> function given to supply has been executed. I came up with:
>>
>> mylist <- list(a=3,b=6,c=9)
>> sapply(mylist,function(x)as.numeric(gsub("[^0-9]","",deparse(substitute(x)))))
>>
>> This works fine, but looks quite ugly. I'm sure that there's a more
>> elegant way to do this.
>>
>> Any suggestion?
>>
>> Christian
>>
>
>   I would love to have an answer to this -- when I run
> into this kind of problem I usually end up using mapply:
> e.g., suppose I have
>
> mylist <- replicate(5,list(x=runif(10),y=runif(10)),simplify=FALSE)
>
> and I want to plot each element in a different color.  I'd like
> to be able to do
>
> plot(0:1,0:1,type="n")
> lapply(mylist,plot,col=i)
>
> but instead I do
>
> mapply(function(x,i) points(x,col=i),mylist,1:5)
>
> would it be too ugly to have a special variable called INDEX
> that could be used within an sapply/lapply statement?
>

There are two distinct suggestions here: a variable that says *how many* 
times the function has been called, and a variable that say *which 
element* is currently being operated on.   The first seems undesirable as 
order of evaluation really should not matter in the apply functions.

The second makes more sense but is still a little tricky. AFAICS there is 
no way for lapply() to find out whether FUN will accept an argument INDEX 
without an "unused argument(s)" error, so it can't just be passed as an 
argument.  This suggests having yet another apply function, that would 
assume an INDEX argument and might be written
   yapply<-function(X,FUN, ...) {
 	index<-seq(length.out=length(X))
         mapply(FUN,X,INDEX=index,MoreArgs=list(...))
        }

However, I think it would be preferable in many cases for INDEX to be 
names(X) if it exists, rather than 1:n.  In any case, it is easy  to write 
the function.

 	-thomas

______________________________________________
R-help@stat.math.ethz.ch mailing list
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.

