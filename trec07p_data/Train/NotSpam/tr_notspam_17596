From beginners-return-92239-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri Jun  8 10:19:56 2007
Return-Path: <beginners-return-92239-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l58EJthB016290
	for <ktwarwic@flax9.uwaterloo.ca>; Fri, 8 Jun 2007 10:19:55 -0400
Received: (qmail 28332 invoked by uid 514); 8 Jun 2007 14:19:44 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 28322 invoked from network); 8 Jun 2007 14:19:43 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 8 Jun 2007 14:19:43 -0000
Received: (qmail 340 invoked by uid 225); 8 Jun 2007 14:19:43 -0000
Delivered-To: beginners@perl.org
Received: (qmail 332 invoked by alias); 8 Jun 2007 14:19:42 -0000
X-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of chas.owens@gmail.com designates 64.233.162.236 as permitted sender)
Received: from nz-out-0506.google.com (HELO nz-out-0506.google.com) (64.233.162.236)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Fri, 08 Jun 2007 07:19:40 -0700
Received: by nz-out-0506.google.com with SMTP id x7so749335nzc
        for <beginners@perl.org>; Fri, 08 Jun 2007 07:19:36 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=jfj4qpWLgXorW7jlxZnyMs5UnBz0YMO40dU1qYwkfAjLP5JoIiLMFxqAfj7ShOWv6xY78CHiXiofSHu0SizrWX/d/y2n0WU35zBEtMXBr3Xgr7db0vXYWkVLp1K7P5rQH6NtGWzZRpSkZnvs2g/ZMAeFWyR1z7GpzHabbp2I3Yc=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=O9BQOoJqJFDrerRjoDTEnmmpl84xLzpY6BgVXmU1MIbSqgov0BC/gpG+KpLj/iGLeQIrVxxqP3U2xAF0dLTwy2v12/UI5l/TDBBQDp3Box3ZJ7lTkebY++e029HGHmuJUf+iG9HmTXaYZOInk3M3j4GYM/uXvxLaJZkK1V1kjFM=
Received: by 10.114.149.2 with SMTP id w2mr2673636wad.1181312376158;
        Fri, 08 Jun 2007 07:19:36 -0700 (PDT)
Received: by 10.114.79.3 with HTTP; Fri, 8 Jun 2007 07:19:35 -0700 (PDT)
Message-ID: <58ce48dc0706080719r490648e1w84265b267511ed64@mail.gmail.com>
Date: Fri, 8 Jun 2007 10:19:36 -0400
From: "Chas Owens" <chas.owens@gmail.com>
To: sigzero@gmail.com
Subject: Re: new vs ->new
Cc: beginners@perl.org
In-Reply-To: <20070608140818.20900.qmail@lists.develooper.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-2022-JP; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <20070608140818.20900.qmail@lists.develooper.com>

On 6/8/07, Robert Hicks <sigzero@gmail.com> wrote:
> I see some modules that call "new" like:
>
> my $test = new Some::Module;
>
> and some like:
>
> my $test = Some::Module->new;
>
> Is there a difference and what is the "recommended" way?
>
> Robert

"new Object" uses indirect invocation*.  Some people feel it improves
readability; I am not one of those people.

from perldoc perlobj
       There is another problem with this syntax: the indirect object is lim‐
       ited to a name, a scalar variable, or a block, because it would have to
       do too much lookahead otherwise, just like any other postfix derefer‐
       ence in the language.  (These are the same quirky rules as are used for
       the filehandle slot in functions like "print" and "printf".)  This can
       lead to horribly confusing precedence problems, as in these next two
       lines:

           move $obj->{FIELD};                 # probably wrong!
           move $ary[$i];                      # probably wrong!

       Those actually parse as the very surprising:

           $obj->move->{FIELD};                # Well, lookee here
           $ary->move([$i]);                   # Didn't expect this one, eh?

       Rather than what you might have expected:

           $obj->{FIELD}->move();              # You should be so lucky.
           $ary[$i]->move;                     # Yeah, sure.

       To get the correct behavior with indirect object syntax, you would have
       to use a block around the indirect object:

           move {$obj->{FIELD}};
           move {$ary[$i]};

       Even then, you still have the same potential problem if there happens
       to be a function named "move" in the current package.  The "->" nota‐
       tion suffers from neither of these disturbing ambiguities, so we recom‐
       mend you use it exclusively.  However, you may still end up having to
       read code using the indirect object notation, so it's important to be
       familiar with it.

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


