From perl6-all-return-80902-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu Apr 26 16:01:08 2007
Return-Path: <perl6-all-return-80902-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3QK176w016470
	for <ktwarwic@speedy.uwaterloo.ca>; Thu, 26 Apr 2007 16:01:08 -0400
Received: (qmail 15496 invoked by uid 514); 26 Apr 2007 20:01:06 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 15491 invoked from network); 26 Apr 2007 20:01:06 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: neutral (x1.develooper.com: local policy)
X-Virus-Scanned: by both ClamAV and Kaspersky at http://aliencamel.com/
Message-ID: <463104C8.9060802@perl.org>
Date: Thu, 26 Apr 2007 13:00:08 -0700
From: Allison Randal <allison@perl.org>
User-Agent: Thunderbird 1.5.0.10 (Macintosh/20070221)
MIME-Version: 1.0
To: James E Keenan <jkeen_via_google@yahoo.com>
CC: perl6-internals@perl.org
Subject: Build system (was Re: Is Parrot 1.0 too late?)
References: <f0m0fu$rhc$1@sea.gmane.org> <462EEE7F.9040207@perl.org> <f0n4kd$eq5$1@sea.gmane.org> <20070425150652.GB91619@plum.flirble.org> <462F851C.2020300@perl.org> <4630A917.2090007@yahoo.com>
In-Reply-To: <4630A917.2090007@yahoo.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME
Status: O
Content-Length: 3569
Lines: 75

James E Keenan wrote:
> 
> Since November I've been working on maintaining those of Parrot's 
> configuration and build tools written in Perl 5.  Lately I've been 
> trying to recruit others to help in that process.  The discussion in 
> this thread suggests that at some future point some or all of the Perl 
> scripts/modules I've been working on will be replaced with ... something 
> else.

This has been the plan all along. Unfortunately it's not documented in 
detail anywhere, but it has appeared in multiple mailing list 
discussions over the years.

<http://www.nntp.perl.org/group/perl.perl6.internals/2007/02/msg36493.html>
<http://www.nntp.perl.org/group/perl.perl6.internals/2007/02/msg36593.html>

We can't depend on Perl 5 because we're replacing it.

> This, of course, makes me wonder what I'm doing now and, more 
> importantly, makes me wonder what to say to other people with Perl 5 
> skills who want to help with the Parrot project.

Agile development in action. We can't know the full set of requirements 
for the build system until we have a working build system. And we can't 
delay all development waiting for the perfect build system. So we work 
in stages of refinement. Your work here is enormously helpful.

> This is not simply an ego thing on my part.  I've written very little of 
> the Perl 5 tools and taken on maintenance of a bit more, but one thing I 
> realize is how much of Parrot's source code is written in Perl 5.  How 
> much of that must eventually be replaced?

How much needs to be replaced depends on the strategy we take. One 
possibility is to take some of the core pieces, make any minor 
modifications needed to run on Parrot's implementation of Perl 5, ship 
them as compiled bytecode, and run them on miniparrot. There are 
advantages and disadvantages to a bootstrapping strategy like this, it 
will work for some parts of the build system but not for others.

Some parts of the build system can be run on the maintainer side rather 
than the user side. So, the release manager and developers can have a 
dependency on Perl 5, while the end users get pre-generated C files and 
so avoid the dependency. (Similar to the current strategy for IMCC where 
individual users of Parrot don't need lex and yacc.)

Some parts may be written in PIR (again, only those parts that are late 
enough to have a working miniparrot).

> And who is going to maintain it?  In my experience Perl 5 programmers 
> are relatively abundant while C programmers (these days) are rarer.  How 
> many people might actually learn the yet-to-be-designed HLL that would 
> presumably replace a lot of the Perl 5 we currently use?

Agreed, we don't want to write an entire build system in C. It's a 
horrible language for the kinds of dynamic effects we need in the build 
system. Some parts will be in C, but just enough to get miniparrot started.

> So, can someone draw a roadmap of:
> 
> -- *which parts* of Parrot's configuration and build tools *need* to be 
> replaced with something else;
> 
> -- *why* that replacement is necessary;
> 
> -- *when* in the design process that replacement must take place; and
> 
> -- *how* that replacement will be maintained going forward from there?

The biggest thing we need to start this roadmap is documentation on the 
current configuration and build system. The current requirements and 
process for building Parrot are the starting point for all future 
refinements to the build system. You're in a better position to draft 
that than anyone else in the project right now. Interested?

Allison

