From beginners-return-90905-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed Apr 18 13:59:02 2007
Return-Path: <beginners-return-90905-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3IHx10I013910
	for <ktwarwic@speedy.uwaterloo.ca>; Wed, 18 Apr 2007 13:59:01 -0400
Received: (qmail 25386 invoked by uid 514); 18 Apr 2007 17:58:30 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 25325 invoked from network); 18 Apr 2007 17:58:29 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 18 Apr 2007 17:58:29 -0000
Received: (qmail 21067 invoked by uid 225); 18 Apr 2007 17:58:29 -0000
Delivered-To: beginners@perl.org
Received: (qmail 21061 invoked by alias); 18 Apr 2007 17:58:28 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of tom.phoenix@gmail.com designates 66.249.82.229 as permitted sender)
Received: from wx-out-0506.google.com (HELO wx-out-0506.google.com) (66.249.82.229)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Wed, 18 Apr 2007 10:58:26 -0700
Received: by wx-out-0506.google.com with SMTP id s8so255933wxc
        for <beginners@perl.org>; Wed, 18 Apr 2007 10:58:21 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:sender:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=DOONLKdMfm/slL19/X+3pcPjpREMIkp85OvbUaeSM2ALwknDDLOpwUS1IcSHhDmVl0tfUOyIyywcQxjUajkzhLB8DW0KOIKsGHP604rWeAlS6MhwqIU2cVnij2rsF3gRpkl9Iurle/jakR54EY8ntRrtvTSKkdOz1CUX0Gcmzzs=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:sender:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=jFZGkDLG4Nh1KTiQNLuZMMjU0RdmqNscrRBQ9W2LpwD55HnRuqDg4wFpswL97/I51nk8P/POB57arqVOPNl4i1iHKBErCYzpSs8KURKyEayW5Qs2A7DeqMqiAr3/x+79wG4mmIUNXD4BbLkxZdmJfz3gtfBzVy8uJ9K/n63p/b4=
Received: by 10.90.50.1 with SMTP id x1mr799808agx.1176919101697;
        Wed, 18 Apr 2007 10:58:21 -0700 (PDT)
Received: by 10.90.119.12 with HTTP; Wed, 18 Apr 2007 10:58:21 -0700 (PDT)
Message-ID: <31086b240704181058i7e81e591r997775634727b671@mail.gmail.com>
Date: Wed, 18 Apr 2007 10:58:21 -0700
From: "Tom Phoenix" <tom@stonehenge.com>
Sender: tom.phoenix@gmail.com
To: yitzle <yitzle@users.sourceforge.net>
Subject: Re: Nested loop
Cc: "beginners perl" <beginners@perl.org>
In-Reply-To: <ca5781c80704180957w72c92fbbq2e083368ed9339e9@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <ca5781c80704180957w72c92fbbq2e083368ed9339e9@mail.gmail.com>
X-Google-Sender-Auth: 3f4ad55118b71930
Status: O
Content-Length: 1391
Lines: 46

On 4/18/07, yitzle <yitzle@users.sourceforge.net> wrote:

> I got an array of hashes so I am using a foreach (@arr) loop to access
> the hashes.
> How do I go about looping through the hash's keys/values? I was
> thinking of another foreach, but then the $_ gets a bit screwed up...
>
> Do I need to do this ?
> foreach(@arr) {
>   %hash = %{$_};
>   foreach (keys %hash) {
>     print "$_ => $hash{$_}\n";
>   }
> }

This is a good time to avoid the foreach loop's default control
variable. Although $_ is handy for small loops, larger (and nested)
ones should generally name another control variable. By giving a name
to the control variable, you should be able to access the hash without
copying the data to another %hash variable. Perl even has special
syntax you can use if the reference is in a scalar variable. It can
even be a 'my' variable:

  my @arr = (  # just some sample hash references
    { qw/ fred flintstone barney rubble wilma flintstone betty rubble / },
    { qw/ 4 ! 2 potato 3 potato 1 potato / },
    { qw/ 4 gotten 2 cool /, '2 ', 'B' },
  );

  foreach my $href (@arr) {
    foreach (sort keys %$href) {
      print "$_ => $href->{$_}\n";
    }
    print "\n";
  }

Hope this helps!

--Tom Phoenix
Stonehenge Perl Training

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


