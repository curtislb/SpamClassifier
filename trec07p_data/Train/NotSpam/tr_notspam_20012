From beginners-return-92508-ktwarwic=speedy.uwaterloo.ca@perl.org  Sun Jun 17 13:59:38 2007
Return-Path: <beginners-return-92508-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5HHxaL9009166
	for <ktwarwic@flax9.uwaterloo.ca>; Sun, 17 Jun 2007 13:59:37 -0400
Received: (qmail 12143 invoked by uid 514); 17 Jun 2007 17:59:29 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 12134 invoked from network); 17 Jun 2007 17:59:29 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 17 Jun 2007 17:59:29 -0000
Received: (qmail 12027 invoked by uid 225); 17 Jun 2007 17:59:28 -0000
Delivered-To: beginners@perl.org
Received: (qmail 12021 invoked by alias); 17 Jun 2007 17:59:28 -0000
X-Spam-Status: No, hits=0.7 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: local policy)
Received: from smtp.fast4.net (HELO smtp.njpservices.co.uk) (84.45.106.4)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Sun, 17 Jun 2007 10:59:25 -0700
Received: from [85.92.185.116] (85-92-185-116.eurisp.net [85.92.185.116] (may be forged))
	by smtp.njpservices.co.uk (8.10.2/8.10.2) with ESMTP id l5HHxAF17328;
	Sun, 17 Jun 2007 18:59:11 +0100
Message-ID: <46757675.1040009@350.com>
Date: Sun, 17 Jun 2007 18:59:17 +0100
From: Rob Dixon <rob.dixon@350.com>
User-Agent: Thunderbird 1.5.0.12 (Windows/20070509)
MIME-Version: 1.0
To: beginners@perl.org
CC: shadkeene@hotmail.com
Subject: Re: Problems referencing variable value in another loop
References: <1182024527.575830.6650@o11g2000prd.googlegroups.com>
In-Reply-To: <1182024527.575830.6650@o11g2000prd.googlegroups.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit

shadkeene@hotmail.com wrote:
> Hi,
> I was able to parse different data in the same loop...however, now I'd
> like to extract data from two files, using two while loops after
> opening each .txt file...then do arithmetic with the data I
> extracted...all in the same script. The problem is that when I
> reference a variable in the second while loop that I initialized in
> the first while loop, the script doesn't recognize it. To be more
> clear, there is a number value for $SLPdataSFO[6] that I extracted in
> the first while loop, and I'd like to subtract that value from
> $SLPdataSAC[6], which I extracted in the second while loop. I tried to
> make it a global variable at the beginning by using "our @SLPdataSFO =
> ();" to make it a global variable, but no luck there. Any ideas?
> Thanks for your help....the error I receive is as follows with the
> script after that.
> Shad
> 
> 
> Global symbol "@SLPdataSFO" requires explicit package name at c:\perl-
> scripts\BarkerRegParser.cgi line 54.
> Execution of c:\perl-scripts\BarkerRegParser.cgi aborted due to
> compilation errors.
> 
> 
> #!/perl/bin/perl -w
> use CGI qw(:standard);
> use CGI::Carp qw(warningsToBrowser fatalsToBrowser);
> use Fcntl qw(:flock :seek);
> use strict;
> 
> print header;
> print start_html("Gradients");
> 
> open(FH, "C:/perl-scripts/Data/BarkerSFOtest.txt") #open barker SFO
> extrapolated NAM data .txt file
> or &dienice("couldn't open output file: $!");
> 
> print "<h2>PW</h2>";
> 
> while (my $line = <FH>) { #reads through each line of model data
> 
> if ($line =~ m/^ Mean/) { #finds line with sealevel pressure
> print "$line<br>";
> my $SFOdataSLP = $line; #places $line into new string called $data SLP
> my @SLPdataSFO = split(/\s+/, $SFOdataSLP); #splits $data SLP string
> into individual elements between whitespace
> print "$SLPdataSFO[6]<br>";
> print "$SLPdataSFO[4]<br>";
> my $SLPchgSFO = $SLPdataSFO[6] -= $SLPdataSFO[4]; #subtracts 12hr SLP
> from 0hr SLP
> print "$SLPchgSFO<br>";
> my $roundf = sprintf("%1.1f", $SLPchgSFO);
> print "$roundf<br>";
> }
> 
> elsif ($line =~ m/^ Precip/) { #if line isn't Precip Water line, then
> will skip to next line
> print "$line<br>";
> my $dataPW = $line;
> my @PWdata = split(/\s+/, $dataPW);
> print "$PWdata[6]<br>";
> }
> }
> close (FH);
> 
> open(FH, "C:/perl-scripts/Data/BarkerSACtest.txt") #open barker SFO
> extrapolated NAM data .txt file
> or &dienice("couldn't open output file: $!");
> 
> while (my $line = <FH>) { #reads through each line of model data
> 
> if ($line =~ m/^ Mean/) { #finds line with mean sealevel pressure
> print "$line<br>";
> my $SACdataSLP = $line; #places $line into new string called
> $SACdataSLP
> my @SLPdataSAC = split(/\s+/, $SACdataSLP); #splits $SACdataSLP string
> into individual elements between whitespace
> my $SACSFOgrad12 = $SLPdataSFO[6] -= $SLPdataSAC[6]; #subtracts SFO
> from SAC 12-hr fcst sealevel pressure
> print "$SACSFOgrad12";
> }
> }
> 
> close (FH);
> print end_html;
> 
> sub dienice {
> my($errmsg) = @_;
> print "<h2>Error</h2>\n";
> print "<p>$errmsg</p>\n";
> print end_html;
> exit;
> }

I assume your files contain just one example of each of the data lines that you're
interested in? In which case you're doing far more work inside the loop than is
appropriate. Consider something like the code below, which uses the while loops
simply to search for the data required and then processes it separately. There are
better ways to do this, but not without going a long way from your original code.

HTH,

Rob



my ($SFOdataSLP, $dataPW);

open FH, "C:/perl-scripts/Data/BarkerSFOtest.txt" #open barker SFO extrapolated NAM data .txt file
or dienice("couldn't open output file: $!");

while (<FH>) {
  $SFOdataSLP = $_ if /^ Mean/;
  $dataPW = $_ if /^ Precip/;
}
close FH;

print "$SFOdataSLP<br>";

my @SLPdataSFO = split /\s+/, $SFOdataSLP;
print "$SLPdataSFO[6]<br>";
print "$SLPdataSFO[4]<br>";

my $SLPchgSFO = $SLPdataSFO[6] - $SLPdataSFO[4]; #subtracts 12hr SLP from 0hr SLP
print "$SLPchgSFO<br>";

my $roundf = sprintf("%1.1f", $SLPchgSFO);
print "$roundf<br>";

print "$dataPW<br>";

my @PWdata = split /\s+/, $dataPW;
print "$PWdata[6]<br>";



my $SACdataSLP;

open FH, "C:/perl-scripts/Data/BarkerSACtest.txt" #open barker SFO extrapolated NAM data .txt file
or dienice("couldn't open output file: $!");

while (<FH>) {
  $SACdataSLP = $_ if /^ Mean/;
}
close FH;

print "$SACdataSLP<br>";

my @SLPdataSAC = split /\s+/, $SACdataSLP;
my $SACSFOgrad12 = $SLPdataSFO[6] -= $SLPdataSAC[6]; #subtracts SFO from SAC 12-hr fcst sealevel pressure
print "$SACSFOgrad12";


print end_html;

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


