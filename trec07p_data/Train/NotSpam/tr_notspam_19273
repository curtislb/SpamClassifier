From perl6-all-return-81965-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu Jun 14 13:43:33 2007
Return-Path: <perl6-all-return-81965-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5EHhVL9024670
	for <ktwarwic@flax9.uwaterloo.ca>; Thu, 14 Jun 2007 13:43:31 -0400
Received: (qmail 5961 invoked by uid 514); 14 Jun 2007 17:43:29 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 5956 invoked from network); 14 Jun 2007 17:43:28 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: moderator for perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: neutral (x1.develooper.com: local policy)
Message-ID: <46715CD3.7070008@boyers.org>
Date: Thu, 14 Jun 2007 09:20:51 -0600
From: Thom Boyer <thom@boyers.org>
User-Agent: Thunderbird 2.0.0.0 (Windows/20070326)
MIME-Version: 1.0
To: Jonathan Lang <dataweaver@gmail.com>
CC: damian@conway.org, "perl6-language@perl.org" <perl6-language@perl.org>
References: <20070613205525.7ECA0CB9B8@x12.develooper.com>	 <ef30550b0706131429o34838a6es6704e8ec73851b49@mail.gmail.com>	 <467073C4.6020708@conway.org> <ef30550b0706140749w6c6290e9qc164901b578a8d5b@mail.gmail.com>
In-Reply-To: <ef30550b0706140749w6c6290e9qc164901b578a8d5b@mail.gmail.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
X-SA-Exim-Connect-IP: 166.70.238.3
X-SA-Exim-Mail-From: thom@boyers.org
X-Spam-Checker-Version: SpamAssassin 3.2.0 (2007-05-01) on sa03.xmission.com
X-Spam-Level: 
X-Spam-Report: 
	* -1.8 ALL_TRUSTED Passed through trusted hosts only via SMTP
	*  0.0 T_TM2_M_HEADER_IN_MSG BODY: T_TM2_M_HEADER_IN_MSG
	* -2.6 BAYES_00 BODY: Bayesian spam probability is 0 to 1%
	*      [score: 0.0009]
Subject: Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn
X-SA-Exim-Version: 4.2 (built Thu, 03 Mar 2005 10:44:12 +0100)
X-SA-Exim-Scanned: Yes (on mgr1.xmission.com)
X-Old-Spam-Status: No, score=-4.4 required=8.0 tests=ALL_TRUSTED,BAYES_00,
	T_TM2_M_HEADER_IN_MSG autolearn=disabled version=3.2.0
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.7 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL

Jonathan Lang wrote:
 > 2. Getting block comments to hide POD blocks wouldn't require the POD
 > parser to have a full implementation of a Perl parser.  It would
 > require the POD parser to have a _limited_ implementation of a Perl
 > parser, one that's capable of identifying block comments.  And IIRC,
 > you already have to do something like this with respect to block
 > quotes:

Actually, the POD parser would have to be a fairly complete Perl parser. 
As your example shows:

 >
 >  say :to(END);
 >  =begin POD
 >  blah blah blah
 >  =end POD
 >  END
 >
 > If I understand matters correctly, the "POD code" in the above example
 > isn't POD code at all, but rather the content of a multi-line quote.
 > So extending the POD parser's awareness of Perl syntax to handle block
 > comments as well isn't much of a stretch.

If *I* understand matters correctly, Perl 6 will see that as identical to

     say :to(END);
     END

*because* we want the POD parser be simple, rather than an 
almost-complete parser of Perl. After all, there are many ways to "hide" 
POD-like text in Perl.

You might think, "Well, how hard is it to look for ":to(XYZ)" followed 
by a line containing XYZ?" Going beyond the fact that there are actually 
quite a few ways to spell ":to(XYZ)", Perl code that generates Perl code 
will trip you up:

     say "say :to(END);";
     say "Here's my text";
     say "=begin comment";
     say "My auto-generated code even contains comments on it's strings!"
     say "=end";
     say "More of my text";
     say "END";

You have to parse all string syntaxes to avoid that pitfall. And once 
you take care of that issue, you have to handle the problem of parsing 
Perl code that's trying to parse Perl code, looking for say statements 
that use here-doc syntax containing POD comments:

     my $checker = regex {
say \s* \: to \( \w+ \) ; $ # match a say with here-doc
(
   <! \s* $1 > .* $
)* # match any lines that don't start with $1
=for comment   # match the beginning of an embedded POD comment
     }

(No, I don't approve of the indentation of that example. But should your 
program fail just because somebody doesn't follow good style?)

And once you've extended the parser to handle *that* case, Finagle's Law 
dictates that someone will put the above code sample into a Perl string 
literal!

In summary:

As your example pointed out, the POD parser would have to handle all the 
various string syntaxes of Perl 6. Then, there is also regular 
expression syntax that has to be covered. And who knows what else I'm 
overlooking?

Compare that with the simplicity that $larry & $damian are promoting.

Yes, it'll be a pain to get the effect you *wanted* from
 >  say :to(END);
 >  =begin POD
 >  blah blah blah
 >  =end POD
 >  END
but the cost to the POD parser is just not worth it.

=thom
-----
Finagle's Law: the perversity of the Universe tends towards a maximum.

