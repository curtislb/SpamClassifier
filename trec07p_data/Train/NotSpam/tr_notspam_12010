From perl6-all-return-81487-ktwarwic=speedy.uwaterloo.ca@perl.org  Sun May 20 17:00:51 2007
Return-Path: <perl6-all-return-81487-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4KL0oqD023521
	for <ktwarwic@flax9.uwaterloo.ca>; Sun, 20 May 2007 17:00:50 -0400
Received: (qmail 29027 invoked by uid 514); 20 May 2007 21:00:45 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 29022 invoked from network); 20 May 2007 21:00:44 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-0.7 required=8.0
	tests=BAYES_20,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Delivered-To: parrotbug-followup@parrotcode.org
Received-SPF: pass (x1.develooper.com: local policy)
From: Leopold Toetsch <lt@toetsch.at>
To: perl6-internals@perl.org
Subject: Re: [perl #43006] Tail call force-frees current context
Date: Sun, 20 May 2007 23:00:11 +0200
User-Agent: KMail/1.9.1
Cc: Bram Geron <bgeron@gmail.com>, parrotbug-followup@parrotcode.org
References: <46507292.4040608@gmail.com> <4650A6CE.6060104@gmail.com>
In-Reply-To: <4650A6CE.6060104@gmail.com>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-15"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200705202300.11782.lt@toetsch.at>
X-Scan-Signature: 2eb3c689388ef5a45072784d1e8a9ce2
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS

Am Sonntag, 20. Mai 2007 21:51 schrieb Bram Geron:
> Bram Geron wrote:
> > The patch in <parrot.solution1.patch> fixes the problem for me.
>
> I realized that contexts currently initially have a ref_count of 0, if
> they're not used as :outer targets for other subs. So in 'normal'
> situations, the caller's context's ref_count now drops from 0 to -1 in a
> tail call, and since -1 != 0 the caller's context will never be freed,
> resulting in a memory leak. Attached <parrot.solution1.updated.patch>
> should fix that.

It's likely simpler to start all context refcounts equally with 1. This would 
probably reduce the current special refcount handling. But it would need some 
changes, which is easily greppable I presume.

> Still, I'm left with a question. How can we DOD a closure? To me it
> seems that once a closure exists, it references its context. Often the
> context is still left in a register, so the context references the
> closure PMC, which in turn references the closure. Because we use
> reference counting in these cases, no count ever drops to zero, and they
> all live forever.

Think of (closure) contexts, which were created in "eval"-ed code. When the 
outer context ceases to exist, the inner context can be collected. All other 
closure context is of course persistent.

leo

