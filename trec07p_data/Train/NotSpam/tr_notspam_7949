From sugar-bounces@laptop.org  Sat May  5 20:46:47 2007
Return-Path: <sugar-bounces@laptop.org>
Received: from pedal.laptop.org (pedal.laptop.org [18.85.2.148])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l460klqD000577
	for <ktwarwic@speedy.uwaterloo.ca>; Sat, 5 May 2007 20:46:47 -0400
Received: from pedal.laptop.org (localhost [127.0.0.1])
	by pedal.laptop.org (Postfix) with ESMTP id B9E1E4EEBA;
	Sat,  5 May 2007 20:46:38 -0400 (EDT)
X-Original-To: sugar@laptop.org
Delivered-To: sugar@laptop.org
Received: from spam.laptop.org (spam.laptop.org [18.85.46.23])
	by pedal.laptop.org (Postfix) with ESMTP id D193C4EEBA
	for <sugar@laptop.org>; Sat,  5 May 2007 20:46:37 -0400 (EDT)
X-ASG-Debug-ID: 1178412399-60f700090000-3Xmyjt
X-Barracuda-URL: http://18.85.46.23:8000/cgi-bin/mark.cgi
X-Barracuda-Connect: mail8.sea5.speakeasy.net[69.17.117.10]
X-Barracuda-Start-Time: 1178412399
X-Barracuda-Encrypted: DHE-RSA-AES256-SHA
Received: from mail8.sea5.speakeasy.net (mail8.sea5.speakeasy.net
	[69.17.117.10])
	(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by spam.laptop.org (Spam Firewall) with ESMTP id B06188B4E
	for <sugar@laptop.org>; Sat,  5 May 2007 20:46:42 -0400 (EDT)
Received: (qmail 20669 invoked from network); 6 May 2007 00:46:38 -0000
Received: from wireless-53.media.mit.edu (HELO [18.85.18.53])
	(ianbicking@[18.85.18.53]) (envelope-sender <ianb@colorstudy.com>)
	by mail8.sea5.speakeasy.net (qmail-ldap-1.03) with SMTP
	for <sugar@laptop.org>; 6 May 2007 00:46:38 -0000
Message-ID: <463D256D.4010900@colorstudy.com>
Date: Sat, 05 May 2007 19:46:37 -0500
From: Ian Bicking <ianb@colorstudy.com>
User-Agent: Thunderbird 2.0.0.0 (Windows/20070326)
MIME-Version: 1.0
To: sugar@laptop.org
X-ASG-Orig-Subj: Web activity & ebook reading
X-Barracuda-Bayes: INNOCENT GLOBAL 0.0000 1.0000 -2.0210
X-Barracuda-Virus-Scanned: by Barracuda Spam Firewall at laptop.org
X-Barracuda-Spam-Score: -2.02
X-Barracuda-Spam-Status: No, SCORE=-2.02 using global scores of TAG_LEVEL=3.5
	QUARANTINE_LEVEL=1000.0 KILL_LEVEL=5.5 tests=
X-Barracuda-Spam-Report: Code version 3.1, rules version 3.1.16162
	Rule breakdown below
	pts rule name              description
	---- ----------------------
	--------------------------------------------------
Subject: [sugar] Web activity & ebook reading
X-BeenThere: sugar@laptop.org
X-Mailman-Version: 2.1.9
Precedence: list
List-Id: "Discussion of OLPC design,
	desktop platform and user experience" <sugar.laptop.org>
List-Unsubscribe: <http://mailman.laptop.org/mailman/listinfo/sugar>,
	<mailto:sugar-request@laptop.org?subject=unsubscribe>
List-Archive: <http://mailman.laptop.org/pipermail/sugar>
List-Post: <mailto:sugar@laptop.org>
List-Help: <mailto:sugar-request@laptop.org?subject=help>
List-Subscribe: <http://mailman.laptop.org/mailman/listinfo/sugar>,
	<mailto:sugar-request@laptop.org?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: sugar-bounces@laptop.org
Errors-To: sugar-bounces@laptop.org

So we've been talking about "the" ebook reader, and how it might work.
For reading HTML or things that would be converted into HTML (e.g.,
Crossmark), the browser seems like an obvious basis for a reader.
There's not a huge number of basic features that aren't in the browser
currently.  So we're thinking about how we might add these extra features.

I've been reading the list of methods as described here:
   http://www.pygtk.org/pygtkmozembed/class-gtkmozembed.html
and there's not a lot of methods.  Changing buttons, maybe allowing you
to switch modes, all seems pretty reasonable -- the code at least all
looks simple enough.  But some of what we want to do involves getting at
the document object.

As an example, if you get to the bottom of a document, and the document
has a <link rel="next"> tag, then a page-down from there should take you
to the linked page.  Then you can flow through a linear but multi-page
document fairly seamlessly (assuming it's been marked up nicely).
There's a variety of things we'd like to do, including injecting the
Javascript to implement the ubiquitous annotation.

Is the current browser activity -- and more specifically pygtkmozembed
-- the right basis for this kind of work?  In the short term, are there
ways we can start adding these features (even if the implementation may
have to be discarded later)?


Looking at details, we were thinking that maybe browser.append_data()
could be used to inject at least a little Javascript.  I tried adding
this to WebActivity.__init__:

   self._browser.connect('notify::net-stop', self._doc_loaded_cb)

Then:

   def self._doc_loaded_cb(self, embed, *args):
       data = '<script>alert("hey!")</script>'
       embed.append_data(StringIO(data), len(data))

But I couldn't get the signal to fire at all; I couldn't get any signals
to work except notify::title.  Maybe there's something magic that I
don't understand here.  Anyway, that might give me a crude way to hack
on stuff.

Cheers,
   Ian

_______________________________________________
Sugar mailing list
Sugar@laptop.org
http://mailman.laptop.org/mailman/listinfo/sugar

