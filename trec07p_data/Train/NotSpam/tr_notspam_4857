From beginners-return-91023-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed Apr 25 08:31:40 2007
Return-Path: <beginners-return-91023-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3PCVc6w030367
	for <ktwarwic@speedy.uwaterloo.ca>; Wed, 25 Apr 2007 08:31:39 -0400
Received: (qmail 5719 invoked by uid 514); 25 Apr 2007 12:31:33 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 5702 invoked from network); 25 Apr 2007 12:31:33 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 25 Apr 2007 12:31:33 -0000
Received: (qmail 32592 invoked by uid 225); 25 Apr 2007 12:31:32 -0000
Delivered-To: Beginners@perl.org
Received: (qmail 32584 invoked by alias); 25 Apr 2007 12:31:32 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of som.ctc@gmail.com designates 64.233.184.233 as permitted sender)
Received: from wr-out-0506.google.com (HELO wr-out-0506.google.com) (64.233.184.233)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Wed, 25 Apr 2007 05:31:30 -0700
Received: by wr-out-0506.google.com with SMTP id 57so187800wri
        for <Beginners@perl.org>; Wed, 25 Apr 2007 05:31:26 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:reply-to:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=IeRDGrrR03ByI5OyK3iMNRNLbaiouWcaUD+780fqgDrhFtBqWXjN1Dn8ZtBrBye1vMBCdgc2VBrIoYuvqeZQiSVvc10EZXRhAW+dKoUVG9dtpbsHDTaeU+9ibjuzp/pg/bZqYccoNCf9J9segvvdxDHM5GAj2ef1fZ2nPvz663A=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:reply-to:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=mcoSvQaHXXB8Tr4JdRadVBSRT7UrMYZf8L6Ym0vsTwcOEiSAS5vn8TZe2n2JGiSr8O1RDZzUcXC/yqXsTuqFG0xbcN+18EnhNz5QF49TWxKcG9Zj+DW2BcD1+Itp1hYjIPWGY4CbP5Ei9CvMDA9Was6xsJybAA2kNorFyLm55ds=
Received: by 10.90.89.5 with SMTP id m5mr548022agb.1177504285537;
        Wed, 25 Apr 2007 05:31:25 -0700 (PDT)
Received: by 10.90.113.4 with HTTP; Wed, 25 Apr 2007 05:31:25 -0700 (PDT)
Message-ID: <e9a6a7e60704250531ga3cc9efu4b9851178d2c2fea@mail.gmail.com>
Date: Wed, 25 Apr 2007 18:01:25 +0530
From: Somu <som.ctc@gmail.com>
Reply-To: som.ctc@gmail.com
To: Beginners@perl.org
Subject: Re: Math::BigFloat
In-Reply-To: <31086b240704242115x3cc8f2b6o21b5c3d0151660f1@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <e9a6a7e60704242100h228f2b68na272ee8ff20ee23d@mail.gmail.com>
	 <31086b240704242115x3cc8f2b6o21b5c3d0151660f1@mail.gmail.com>
Status: O
Content-Length: 1128
Lines: 46

Actually the following isnt working:

 use Math::BigFloat;
 $n = 0;
 if ($n->is_zero()) {print 'you entered zero'}

On 4/25/07, Tom Phoenix <tom@stonehenge.com> wrote:
>
> On 4/24/07, Somu <som.ctc@gmail.com> wrote:
>
> > I'm unable to compare numbers using the module. Actually i can only
> > use it to create numbers like 0 or inf or 1 or their negatives. But i
> > dont know how to use their methods. Bcoz the examples in the doc
> > aren't working. Can i get some simple examples?
>
>What are you doing that isn't working? "Because" if the documentation
> examples don't work for you, why should this work?
>
> #!/usr/bin/perl
>
> use strict;
> use warnings;
>
> use Math::BigFloat;
>
> my $$big = Math::BigFloat->new(200);
> my $$other = Math::BigFloat->new(100);
>
> if ($$big > $$other) {
> print "It seems that $$big is bigger than $$other. ";
> } else {
> print "Actually $$other is at least as large as $$big. ";
> }
>
> Cheers!
>
>--Tom Phoenix
> Stonehenge Perl Training
>
>

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


