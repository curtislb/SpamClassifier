From sugar-bounces@laptop.org  Thu May 10 02:07:45 2007
Return-Path: <sugar-bounces@laptop.org>
Received: from pedal.laptop.org (pedal.laptop.org [18.85.2.148])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l4A67iqD005728
	for <ktwarwic@speedy.uwaterloo.ca>; Thu, 10 May 2007 02:07:44 -0400
Received: from pedal.laptop.org (localhost [127.0.0.1])
	by pedal.laptop.org (Postfix) with ESMTP id 9297D4F6A5;
	Thu, 10 May 2007 02:07:28 -0400 (EDT)
X-Original-To: sugar@laptop.org
Delivered-To: sugar@laptop.org
Received: from spam.laptop.org (spam.laptop.org [18.85.46.23])
	by pedal.laptop.org (Postfix) with ESMTP id 0D6444F6A5
	for <sugar@laptop.org>; Thu, 10 May 2007 02:07:27 -0400 (EDT)
X-ASG-Debug-ID: 1178777259-402000000000-3Xmyjt
X-Barracuda-URL: http://18.85.46.23:8000/cgi-bin/mark.cgi
X-Barracuda-Connect: www.WarpOMatic.com[66.98.182.86]
X-Barracuda-Start-Time: 1178777259
X-Barracuda-Encrypted: DHE-RSA-AES256-SHA
Received: from WarpOMatic.com (www.WarpOMatic.com [66.98.182.86])
	(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by spam.laptop.org (Spam Firewall) with ESMTP id A58F7929B
	for <sugar@laptop.org>; Thu, 10 May 2007 02:07:39 -0400 (EDT)
Received: from [192.168.0.145] (c-69-181-124-113.hsd1.ca.comcast.net
	[69.181.124.113]) (authenticated bits=0)
	by WarpOMatic.com (8.12.10/8.12.10) with ESMTP id l4A63F8u017788;
	Wed, 9 May 2007 23:03:15 -0700
Message-ID: <4642B698.1000803@DonHopkins.com>
Date: Wed, 09 May 2007 23:07:20 -0700
From: Don Hopkins <dhopkins@DonHopkins.com>
User-Agent: Thunderbird 1.5.0.10 (Windows/20070221)
MIME-Version: 1.0
To: "'Sugar List'" <sugar@laptop.org>, John Gilmore <gnu@toad.com>,
   Don Hopkins <dhopkins@DonHopkins.com>
X-ASG-Orig-Subj: Read activity modifications
X-ImpeachBushNow-Information: Please contact postmaster@WarpOMatic.com for
	more information
X-ImpeachBushNow: Found to be clean
X-Barracuda-Bayes: INNOCENT GLOBAL 0.4465 1.0000 0.0000
X-Barracuda-Virus-Scanned: by Barracuda Spam Firewall at laptop.org
X-Barracuda-Spam-Score: 0.00
X-Barracuda-Spam-Status: No, SCORE=0.00 using global scores of TAG_LEVEL=3.5
	QUARANTINE_LEVEL=1000.0 KILL_LEVEL=5.5 tests=
X-Barracuda-Spam-Report: Code version 3.1, rules version 3.1.16514
	Rule breakdown below
	pts rule name              description
	---- ----------------------
	--------------------------------------------------
Subject: [sugar] Read activity modifications
X-BeenThere: sugar@laptop.org
X-Mailman-Version: 2.1.9
Precedence: list
List-Id: "Discussion of OLPC design,
	desktop platform and user experience" <sugar.laptop.org>
List-Unsubscribe: <http://mailman.laptop.org/mailman/listinfo/sugar>,
	<mailto:sugar-request@laptop.org?subject=unsubscribe>
List-Archive: <http://mailman.laptop.org/pipermail/sugar>
List-Post: <mailto:sugar@laptop.org>
List-Help: <mailto:sugar-request@laptop.org?subject=help>
List-Subscribe: <http://mailman.laptop.org/mailman/listinfo/sugar>,
	<mailto:sugar-request@laptop.org?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: sugar-bounces@laptop.org
Errors-To: sugar-bounces@laptop.org

I've been working on making the Read activity usable in book mode, and 
adding other improvements.
I'm updating it to work against the latest build, and I'll put up a tar 
file soon.
Here's a summary of my changes and ideas for further improvements.

    -Don

Loading icons for gtk buttons from SVG files.
  Wrote a LoadIcon(fileName) function that loads an svg file and returns 
a GTK pixbuf.
    TODO: support different file formats (XPM, PNG, PDF, etc).
    TODO: support scaling of the image to a particular size.
    TODO: caching images according to file name and size.
  Made a gtk.IconFactory for the activity.
    Loop over all SVG files in the icons subdirectory of the bundle path.
      Loaded all SVG files into icon pixbufs, wrapped them in IconSets, 
and added them to the icon manager.
      TODO: make a smart IconFactory that supports lazy loading of icons.
  Icons are named the same as the file name with the extension stripped 
off.
  Icons should have a prefix like "read-" to distinguish them from other 
icons (like the "stock-" icons).
  GTK widgets can be configured to use named icons by setting their 
stock-id property.

Implement a new set of toolbars and buttons using custom "Action" 
classes and UIManager.
  Defined SugarAction, SugarToggleAction, SugarRadioAction subclasses of 
stock GTK Action classes, mixing in SugarActionMixin.
  Defined SugarToolButton, SugarToggleToolButton, SugarRadioToolButton 
subclasses of GTK ToolButton classes, mixing in SugarWidgetMixin.
  Defined SugarActionMixin and SugarWidgetMixin classes for shared 
Sugar-specific behavior and state.
    Added support for "allowed" property, like "sensitive" (enabled), 
but it will let you set the focus to the control and see a tooltip 
telling the reason it's not allowed.
    Added support for "reason" property, a translated text string that 
explains the reason an action is not allowed to the user.
    TODO: Implement visual indication of "allow" state.
    TODO: Make actions show tooltip with disallow reason if user tries 
to invoke un-allowed control, but not invoke callback.
  Rewrote gtk.ActionGroup methods add_actions, add_toggle_actions, 
add_radio_actions in Python instead of C (from pygtk).
    Instead of making them differently named class-specific methods of 
gtk.ActionGroup, I re-factored them into generic "add_actions" methods 
on the corresponding classes.
    So instead of calling action_group.add_toggle_actions(entries), you 
call SugarToggleAction.add_actions(action_group, entries), or whatever 
class you want to add.
    This makes it much easier to extend the system with your own sets of 
Actions and Widgets, by subclassing SugarAction, and mixin 
SugarWidgetMixin into the widget.
      TODO: Implement search string entry field, page number entry 
field, page count label, as application specific Action/Widget sets.
    The gtk.ActionGroup add_*_actions api took a list of entries, where 
each entry was a tuple with positional arguments filled with "None" 
placeholders.
    That was brittle and hard to use, and impossible to extend by adding 
new parameters.
    Instead, the new interface takes a list of entries, where each entry 
is a dictionary instead of a tuple, so it's possible to pass additional 
arguments and omit unused keys.
    The dictionary entry based API is more open-ended and flexible, so 
we can seamlessly add additional parameters in the future without 
breaking the API.
    Defined optional "action_class" parameter to each entry that 
specifies the class to make, which defaults to "self", the class you're 
calling the add_action class method on.
      So subclasses of Action will automatically get instances of their 
class when you call add_action on their class.
      TODO: Factor out any class-specific behavior from add_actions into 
class method hooks, so Action subclasses can define their own hooks 
instead of redefining their own entire add_action methods.
    Defined optional *args and **kwargs parameters to add_actions, as 
well as to each entry, which are merged and passed to the callback.
    You can specify additional parameters to each set of actions you 
create at once, and to each individual action, which makes it possible 
to define more general purpose actions that you can customize with 
parameters and additional callbacks, instead of defining a new special 
purpose Action class for each control.

Made a UIManager to create the toolbars from an XML user interface 
description.
  TODO: Implement an open-ended extensible Pythonic SugarUIManager.
  TODO: Allow the applilcation to register new action classes 
corresponding to XML elements in the user interface descriptions.
  TODO: Extend the SugarUIManager to support other kinds of interfaces 
beyond toolbars and menus: gamepad navigation, pie menus, etc.

Implement enabling and disabling actions and toolbar buttons.
  Actions automatically take care of enabling and disabling all of their 
corresponding toolbar buttons and menu items (proxies).
  Implemented a higher level _set_action_sensitive(self, action_name, 
sensitive, reason=None) interface for setting the sensitivity and reason 
an action is insensitive, which lets you pass a translated string that 
describes why an action is disabled, that helps the user figure out what 
to do about it.
  Wrote code to call _set_action_sensitive at the appropriate time to 
enable and disable evince controls (back page, next page, first page, 
last page, zoom in, zoom out).
  TODO: Use "allowed" instead of "sensitive" to disable controls, so the 
user can navigate to them and see tooltips about why they're disabled.

Defined SugarActions for most of the interesting evince functions, 
SugarToggleActions for boolean properties, SugarRadioAction for 
enumerated properties.
Defined toolbars with buttons and separators to control evince.
Made icons for all of the buttons (first cut placeholder programmer art 
for now: round buttons with tiny text labels).

Defined a _bundle_path instance variable in XbookActivity that tells 
where the root of the Read activity bundle is.
Added a _startup_file_name instance variable to XbookActivity, 
initialized to "userguide.pdf" that's read from the documents 
sub-directory of the bundle_path.
  This is currently to help me test the Read activity, because the "open 
file" button is no longer supported.
  But the default startup document could be used to throw up a useful 
introduction with links to libraries and documentation. (Once links in 
PDF documents work properly).

Wrote a "MANIFEST" file that lists all the files to be installed into 
the activity directory.
  If you don't have a "MANIFEST" file, the activity builder looks at the 
subversion source code control system to figure out which files to 
bundle, which doesn't work during development before the files have been 
added to source code control.

    -Don

_______________________________________________
Sugar mailing list
Sugar@laptop.org
http://mailman.laptop.org/mailman/listinfo/sugar

