From perl6-all-return-81978-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu Jun 14 20:18:04 2007
Return-Path: <perl6-all-return-81978-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5F0I3L9027903
	for <ktwarwic@flax9.uwaterloo.ca>; Thu, 14 Jun 2007 20:18:03 -0400
Received: (qmail 5459 invoked by uid 514); 15 Jun 2007 00:18:01 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 5454 invoked from network); 15 Jun 2007 00:18:01 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: domain of thoughtstream@gmail.com designates 66.249.82.236 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:sender:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=SIw+T1iqZBYfaj53GSaGEXAQsLCdwLgvziWy/sHYhhfOMq9TP6TL56jeBHvKXEDzMdyXagaKaSKcYhM3owvcLzB1dd3ZPY2pYOn4epUPm6k1ZyTYjoBYNrgOG9Mm70RnNKZrIjRsw9+uue5eMb8G5i9cj5JPBPw+YInoD98/6ik=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:sender:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=dD3E/0eMfShXzfQTnj4blNJlcWoVctpqKgQY5jiouDiS6eU4pvMxS9MGjJEu0UEXegvyR5dTtInraOCmRpmAATBi/xAdkhd2sM0PJzSBcNC3ksam19US/zzvRPhRpzupBac1s2PWDNvzcBoWMJLYgwdl4PGO+GQ8REWzTBsiOnM=
Message-ID: <832f158a0706141717j7accfb36w92bf3a2ed7a8e115@mail.gmail.com>
Date: Fri, 15 Jun 2007 10:17:39 +1000
From: "Damian Conway" <damian@conway.org>
Sender: thoughtstream@gmail.com
To: "perl6-language@perl.org" <perl6-language@perl.org>
Subject: Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn
In-Reply-To: <20070614082341.GU31918@earth.overmeer.net>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <20070613205525.7ECA0CB9B8@x12.develooper.com>
	 <ef30550b0706131429o34838a6es6704e8ec73851b49@mail.gmail.com>
	 <467073C4.6020708@conway.org>
	 <20070614082341.GU31918@earth.overmeer.net>
X-Google-Sender-Auth: 44d3f6887d7fb5c3
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS

Larry and Thom have each ably explained the rhyme and reason of the choices
that we made for Pod 6. Here I will merely summarize those reasons, and answer
a specific question.

* Pod and Perl (or any other ambient source code) are to be syntactically
  separated, even when there are semantic interconnections

* Perl 6 will be able to access ambient Pod via $=POD (and other
  $=WHATEVER variables)

* It doesn't make sense for Pod to access ambient Perl, since Pod is a
  passive mark-up notation, not an executable language

* It is self-evidently the case that documentation can be usefully
  derived from source code, as well as from explicit mark-up

* That does not, however, mean that source code and explicit mark-up are
  (or should be) either equivalent or syntactically commingled

* Rather, it means that the *tools* that extract such documentation need to
  be able to extract it from both explicit mark-up and source code

* This will be possible in Perl 6, since both the Pod and Perl 6 parsers
  will be accessible from Perl 6.

* Pod 6 is not a presentational mark-up scheme; in fact, it has no
  presentational elements at all

* Pod 6 is both a structural and a semantic scheme; you can specify both the
  structure of a document, and the meaning of its various components

* Structural mark-up features are entirely lower-case (=head, =item, =table)
  at the block level, and single-letter upper-case (B<>, N<>, S<>) at the
  embedded level

* Semantic mark-up features are entirely upper-case (=METHOD, =PURPOSE,
  =DEFAULT)

* The semantic features are intended to be used to facilitate the creation and
  use of tools that can autoextract documentation elements directly from code

* Such tools would (usually) convert the information extracted from
  [source + semantic-Pod] into purely structural Pod, which could then
  be fed to any suitable pod-to-whatever converter

* In other words, the tool-chain envisaged is something like:

                    perl6doc              pod2whatever

        source
          +                     purely
    structural Pod  ------->  structural  -----------> plaintext
          +                      Pod      \----------> HTML
     semantic Pod                          \---------> XML
                                            \--------> roff
                                             \-------> MPEG
                                              \etc.


* Which means that Pod 6 needs to be a suitable pure-structural-mark-up
  target language with an extensible semantic overlayer

* Which is precisely what it has already been designed to be


* To summarize the summary:
    - Use Perl for what Perl is good for (specification)
    - Use Pod for what Pod is good for (commentary)
    - Then generate unified documentation by extracting information from
      wherever its available (source or mark-up), according to what the
      reader asks for
    - The issue is not having sufficiently powerful Pod syntax;
      the issue is having sufficiently powerful documentation-generating *tools*


To answer Mark's specific question:

  > class Mail::Message {
  >     `base class for message types
  >
  >     .has $msgid;
  >     `The (internet wide) unique string which identifies this
  >     `message object.  May be undef as long as the message is
  >     `begin composed.
  >
  >     .has $content_type = 'text/plain';
  > }
  >
  > Damian, can you show how you would document the same code in POD6
  > syntax to get a comparible short man-page?

Like so:

    class Mail::Message {
    =PURPOSE  Base class for message types

        has $msgid;
    =for PURPOSE
        The (internet wide) unique string which identifies this
        message object.  May be undef as long as the message is
        begin composed.

        has $content_type = 'text/plain';
    }


Damian

PS: I agree that there needs to be a mechanism for abstracting names
    within Pod and for extracting those names from ambient code. I will
    propose such a mechanism and the syntax for it in a subsequent email
    (probably early next week).

