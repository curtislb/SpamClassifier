From beginners-return-92653-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri Jun 22 05:28:03 2007
Return-Path: <beginners-return-92653-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5M9S2L9004402
	for <ktwarwic@flax9.uwaterloo.ca>; Fri, 22 Jun 2007 05:28:02 -0400
Received: (qmail 18840 invoked by uid 514); 22 Jun 2007 09:27:54 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 18829 invoked from network); 22 Jun 2007 09:27:54 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 22 Jun 2007 09:27:54 -0000
Received: (qmail 827 invoked by uid 225); 22 Jun 2007 09:27:54 -0000
Delivered-To: beginners@perl.org
Received: (qmail 815 invoked by alias); 22 Jun 2007 09:27:53 -0000
X-Spam-Status: No, hits=-1.9 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: local policy)
Received: from x6.develooper.com (HELO lists.develooper.com) (63.251.223.186)
    by la.mx.develooper.com (qpsmtpd/0.28) with SMTP; Fri, 22 Jun 2007 02:27:51 -0700
Received: (qmail 18821 invoked by uid 515); 22 Jun 2007 09:27:47 -0000
Message-ID: <20070622092747.18820.qmail@lists.develooper.com>
To: beginners@perl.org
From: "Dr.Ruud" <rvtol+news@isolution.nl>
References: <467B89CE.7080106@yahoo.com>
Subject: Re: Proper class setup?
Date: Fri, 22 Jun 2007 11:22:46 +0200
Lines: 138
Organization: Chaos rules.
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
X-Priority: 3
X-MSMail-Priority: Normal
X-Newsreader: Microsoft Outlook Express 6.00.2800.1807
X-MIMEOLE: Produced By Microsoft MimeOLE V6.00.2800.1896
X-Posted-By: 85.144.210.174

Mathew Snyder schreef:

> I'm presently learning OOP as Perl does it using online resources and
> and Programming Perl as my tutors.  I'm not certain I have it right
> though.  Is this correct for the package:

[whitespace is cheap]

> package Report;
>
> require Exporter;
> use strict;
>
> our @ISA       = qw(Exporter);
> our @EXPORT    = qw(new);

Exporting is not necessary, you can leave these two lines out.


> sub new {
>         my ($class) = @_;
>         my $self    = {
>                 _id               => undef,
>                 _queue    => undef,
>                 _owner    => undef,
>                 _priority => undef,
>                 _worked   => undef,
>                 _timeLeft => undef,
>                 _due      => undef,
>                 _created  => undef,
>                 _updated  => undef,
>                 _severity => undef,
>                 _ccl      => undef
>         };
>         bless $self, $class;
>         return $self;
> }

Change your new() in a new() and an init(). Do as little as possible in
your new(), for the sake of inheritance etc.

Although there is no real need to prepare the hash with undef values. So
"my $self = {};" suffices, and keeps your objects lean.


> # Accessor method for Reports _id
> sub id {
>         my ($self, $id) = @_;
>         $self->{_id} = $id if defined($id);
>         return $self->{_id};
> }
>
> # Accessor method for Reports _queue
> sub queue {
>         my ($self, $queue) = @_;
>         $self->{_queue} = $queue if defined($queue);
>         return $self->{_queue};
> }
>
> # Accessor method for Reports _owner
> sub owner {
>         my ($self, $owner) = @_;
>         $self->{_owner} = $owner if defined($owner);
>         return $self->{_owner};
> }
>
> # Accessor method for Reports _owner
> sub priority {
>         my ($self, $priority) = @_;
>         $self->{_priority} = $priority if defined($priority);
>         return $self->{_priority};
> }
>
> # Accessor method for Reports _owner
> sub worked {
>         my ($self, $worked) = @_;
>         $self->{_worked} = $worked if defined($worked);
>         return $self->{_worked};
> }
>
> # Accessor method for Reports _owner
> sub timeLeft {
>         my ($self, $timeLeft) = @_;
>         $self->{_timeLeft} = $timeLeft if defined($timeLeft);
>         return $self->{_timeLeft};
> }
>
> # Accessor method for Reports _owner
> sub due {
>         my ($self, $due) = @_;
>         $self->{_due} = $due if defined($due);
>         return $self->{_due};
> }
>
> # Accessor method for Reports _owner
> sub created {
>         my ($self, $created) = @_;
>         $self->{_created} = $created if defined($created);
>         return $self->{_created};
> }
>
> # Accessor method for Reports _owner
> sub updated {
>         my ($self, $updated) = @_;
>         $self->{_updated} = $updated if defined($updated);
>         return $self->{_updated};
> }
>
> # Accessor method for Reports _owner
> sub severity {
>         my ($self, $severity) = @_;
>         $self->{_severity} = $severity if defined($severity);
>         return $self->{_severity};
> }
>
> # Accessor method for Reports _owner
> sub ccl {
>         my ($self, $ccl) = @_;
>         $self->{_ccl} = $ccl if defined($ccl);
>         return $self->{_ccl};
> }


I see a pattern there. :)
These 11 methods are all doing basically the same, right?
So consider a set/get approach.

The "if defined($value)" parts are not really necessary, but it's good
that they are there: your class could, for example, be used in an
environment where dirtying the cache can hurt performance.
There can be one problem though: what if you want to change a property's
value to undef? :)

-- 
Affijn, Ruud

"Gewoon is een tijger."


-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


