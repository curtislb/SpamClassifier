From beginners-return-91106-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu Apr 26 21:47:39 2007
Return-Path: <beginners-return-91106-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3R1lc6w019550
	for <ktwarwic@speedy.uwaterloo.ca>; Thu, 26 Apr 2007 21:47:38 -0400
Received: (qmail 32702 invoked by uid 514); 27 Apr 2007 01:47:32 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 32693 invoked from network); 27 Apr 2007 01:47:32 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 27 Apr 2007 01:47:32 -0000
Received: (qmail 9309 invoked by uid 225); 27 Apr 2007 01:47:32 -0000
Delivered-To: beginners@perl.org
Received: (qmail 9305 invoked by alias); 27 Apr 2007 01:47:31 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of tom.phoenix@gmail.com designates 64.233.184.237 as permitted sender)
Received: from wr-out-0506.google.com (HELO wr-out-0506.google.com) (64.233.184.237)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 26 Apr 2007 18:47:29 -0700
Received: by wr-out-0506.google.com with SMTP id 57so733889wri
        for <beginners@perl.org>; Thu, 26 Apr 2007 18:47:25 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:sender:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=j/Xz2pb3U8qTdqqQcBm0Ry+3mgR/dsFl3BUOf2kHo6IfiggzE7CTFH+HsnxFAEmwHxMLp53k0GaKNe57QknmDOTdwB3wN74f/YfiShLNK5d4/oWD1YbN9nWsdAxas4AEQo84glOe6knh3n7T5BX3T8tZ8Uke0T3Y+TpVALn8M2E=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:sender:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=gOY4DcdiTGleVdNI7jJAZJtvElTNlWx11f3JBTVfFOkv5eHQkDuEmjy5Hov5J09qFTU0QLHKXhFeXpr+bJrvajFggFODerc6D98Zpuljehmy5KvHiFpf4Ek9Kiq+iYVwA8zJ+ab+KBpzWE7XYnktByMPikYsrZwWhftaeJwluoE=
Received: by 10.90.49.1 with SMTP id w1mr3015965agw.1177638445088;
        Thu, 26 Apr 2007 18:47:25 -0700 (PDT)
Received: by 10.90.114.8 with HTTP; Thu, 26 Apr 2007 18:47:25 -0700 (PDT)
Message-ID: <31086b240704261847n37346885wc2dc489b874d23ca@mail.gmail.com>
Date: Thu, 26 Apr 2007 18:47:25 -0700
From: "Tom Phoenix" <rootbeer@redcat.com>
Sender: tom.phoenix@gmail.com
To: "charlie farinella" <cfarinella@appropriatesolutions.com>
Subject: Re: How can I respond to Net::FTP timeouts?
Cc: "Perl Beginners" <beginners@perl.org>
In-Reply-To: <200704261335.28319.cfarinella@appropriatesolutions.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <200704261335.28319.cfarinella@appropriatesolutions.com>
X-Google-Sender-Auth: c6ab4045a4585153
Status: RO
Content-Length: 1586
Lines: 50

On 4/26/07, charlie farinella <cfarinella@appropriatesolutions.com> wrote:

> I have a script which uses Net::FTP to upload a backup file each night.
> It sends me an email each night if it succeeds and a different email if
> any of the methods fail.  This all works, but sometimes the ftp
> connection times out and my script hangs without sending anything.
>
> I don't know how to catch the timeout and send the failure message when
> that happens.

I've never needed to do this, but I think you want to catch it with an
eval block. The code inside the block can timeout and die, but the
main program can continue after the block.

> my $ftp = Net::FTP->new( "hostname", Debug => 1, Timeout => 240 )
>   or send_fail(), die;
>
> $ftp->login( "login info" ) or send_fail(), die;
> $ftp->put( "filename" ) or send_fail(), die;
> $ftp->quit or send_fail(), die;
>
> $send_success;

I think I'd structure it something like this untested code:

  eval {
    my $ftp = Net::FTP->new( "hostname", Debug => 1, Timeout => 240 )
      or die "making new FTP connection failed: $!";

    $ftp->login( "login info" ) or die "ftp login failed";
    $ftp->put( "filename" ) or die "ftp put failed";
    $ftp->quit or die "ftp quit failed";

    send_success();
  };  # end of eval block
  if ($@) {
    send_fail($@);  # include block's dying words
    die;  # propagate error, possibly timeout
  }

Hope this helps!

--Tom Phoenix
Stonehenge Perl Training

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


