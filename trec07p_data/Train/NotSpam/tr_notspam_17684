From perl6-all-return-81883-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri Jun  8 14:10:09 2007
Return-Path: <perl6-all-return-81883-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l58IA7hB018454
	for <ktwarwic@flax9.uwaterloo.ca>; Fri, 8 Jun 2007 14:10:08 -0400
Received: (qmail 30726 invoked by uid 514); 8 Jun 2007 18:10:00 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 30721 invoked from network); 8 Jun 2007 18:10:00 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
From: larry@cvs.develooper.com
To: perl6-language@perl.org
Subject: [svn:perl6-synopsis] r14416 - doc/trunk/design/syn
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Message-Id: <20070608180938.92FB8CBA7D@x12.develooper.com>
Date: Fri,  8 Jun 2007 11:09:38 -0700 (PDT)
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS

Author: larry
Date: Fri Jun  8 11:09:37 2007
New Revision: 14416

Modified:
   doc/trunk/design/syn/S02.pod

Log:
Added PROCESS as a superglobal namespace for easier apachefication of scripts.


Modified: doc/trunk/design/syn/S02.pod
==============================================================================
--- doc/trunk/design/syn/S02.pod	(original)
+++ doc/trunk/design/syn/S02.pod	Fri Jun  8 11:09:37 2007
@@ -12,9 +12,9 @@
 
   Maintainer: Larry Wall <larry@wall.org>
   Date: 10 Aug 2004
-  Last Modified: 2 Jun 2007
+  Last Modified: 8 Jun 2007
   Number: 2
-  Version: 109
+  Version: 110
 
 This document summarizes Apocalypse 2, which covers small-scale
 lexical items and typological issues.  (These Synopses also contain
@@ -1460,6 +1460,7 @@
     MY          # Lexical variables declared in the current scope
     OUR         # Package variables declared in the current package
     GLOBAL      # Builtin variables and functions
+    PROCESS     # process-related globals
     OUTER       # Lexical variables declared in the outer scope
     CALLER      # Contextual variables in the immediate caller's scope
     CONTEXT     # Contextual variables in any context's scope
@@ -1674,6 +1675,28 @@
 
 =item *
 
+For an ordinary Perl program running by itself, the C<GLOBAL> and
+C<PROCESS> namespaces are considered synonymous.  However, it certain
+situations (such as shared hosting under a webserver), the actually
+process may contain multiple virtual processes, each running its own
+"main" code.  In this case, the C<GLOBAL> namespace holds variables
+that properly belong to the individual virtual process, while the
+C<PROCESS> namespace holds variables that properly belong to the actual
+process as a whole.  From the viewpoint of the C<GLOBAL> namespace
+there is little difference, since process variables that normally
+appear in C<GLOBAL> are automatically imported from C<PROCESS>.
+However, the process as a whole may place restrictions on the
+mutability of process variables as seen by the individual subprocesses.
+Also, individual subprocesses may not create new process variables.
+If the process wishes to grant subprocesses the ability to communicate
+via the C<process> namespace, it must supply a writeable hash or some
+such to all the subprocesses granted that privilege.
+
+When these namespaces are distinguished, the C<*> shortcut always refers
+to C<GLOBAL>.  There is no twigil shortcut for C<PROCESS::>.
+
+=item *
+
 Standard input is C<$*IN>, standard output is C<$*OUT>, and standard error
 is C<$*ERR>.  The magic command-line input handle is C<$*ARGS>.
 The arguments themselves come in C<@*ARGS>.  See also "Declaring a MAIN

