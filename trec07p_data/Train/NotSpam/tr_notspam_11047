From perl6-all-return-81430-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed May 16 12:38:33 2007
Return-Path: <perl6-all-return-81430-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4GGcWqD021000
	for <ktwarwic@flax9.uwaterloo.ca>; Wed, 16 May 2007 12:38:32 -0400
Received: (qmail 24806 invoked by uid 514); 16 May 2007 16:38:29 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 24797 invoked from network); 16 May 2007 16:38:28 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: neutral (x1.develooper.com: 63.251.223.186 is neither permitted nor denied by domain of jerry.gay@gmail.com)
Delivered-To: perlmail-parrot-porters@onion.perl.org
Delivered-To: parrot-porters@perl.org
Received-SPF: pass (x1.develooper.com: domain of jerry.gay@gmail.com designates 64.233.184.233 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=c52lEKMyFrY+dxQ/UAGO77X6CXa+nYzjoXkH44M5B8bJFPTIHvznTKucaJKkqgBKS9xAAAers7LkuUq2QlHS/i3iaQJ4BoEAi+x86OoshitIMG8BXtTRCF1I7X10O2ZzmOQ0T5kb6cH1qNa3YRg+BprI1fUu/e29Ae26LEGfdDI=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=ezbmBnqrmv7sGFNIXYLaZsyrpneOaeQOOHbqMzRObEilNEY40Y4SAJd5lQnODiCwGI3HdP/su5B98U6C79n0qEcDmGHwhyGUYLfq2t0lLFmPAsWAAX1jA4fDw5kv9qgi8MBRY4H9J1lxg2FtfCCRlvr/QpCQ7tz5YykabAXRT6I=
Message-ID: <1d9a3f400705160936u125d3eddha1fec9c84f54d13a@mail.gmail.com>
Date: Wed, 16 May 2007 09:36:48 -0700
From: "jerry gay" <jerry.gay@gmail.com>
To: "jerry gay" <jerry.gay@gmail.com>, p2 <parrot-porters@perl.org>
Subject: Re: FoTW: src/debug.c -- function and macro do the same thing
In-Reply-To: <20070516160041.GD20876@plum.flirble.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <1d9a3f400705160845w56586b74w36e632f492c3ce5@mail.gmail.com>
	 <20070516160041.GD20876@plum.flirble.org>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-1.9 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_NEUTRAL

On 5/16/07, Nicholas Clark <nick@ccl4.org> wrote:
> On Wed, May 16, 2007 at 08:45:04AM -0700, jerry gay wrote:
> > here's a macro to move to the next argument (kjs mentioned in an
> > earlier thread that this isn't a descriptive name)
> >
> >  /* na(c) [Next Argument (Char pointer)]
> >   *
> >   * Moves the pointer to the next argument in the user input.
> >   */
> >  #define na(c) { \
> >      while (*c && !isspace((int) *c)) \
> >          c++; \
> >      while (*c && isspace((int) *c)) \
> >          c++; }
>
> That ought to be written (at least):
>
>   #define na(c) { \
>       while (*c && !isspace((int) *c)) \
>           c++; \
>       while (isspace((int) *c)) \
>           c++; }
>
> because isspace('\0') is false
>
>
> And really, given that macros are text substitutions, standard practice is
> to wrap all arguments in parentheses, to avoid bugs related to precedence
> when something more complex is passed in. So, in general, I'd be happier with:
>
>   #define na(c) { \
>       while (*(c) && !isspace((int) *(c))) \
>           (c)++; \
>       while (isspace((int) *(c))) \
>           (c)++; }
>
good comments... but why keep both function and macro? which would you
prefer keeping over the other, and why? i can't understand why both
exist.
~jerry

