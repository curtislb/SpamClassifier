From beginners-return-92713-ktwarwic=speedy.uwaterloo.ca@perl.org  Sat Jun 23 23:18:39 2007
Return-Path: <beginners-return-92713-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5O3IbL9026855
	for <ktwarwic@flax9.uwaterloo.ca>; Sat, 23 Jun 2007 23:18:38 -0400
Received: (qmail 24648 invoked by uid 514); 24 Jun 2007 03:18:28 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 24634 invoked from network); 24 Jun 2007 03:18:28 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 24 Jun 2007 03:18:28 -0000
Received: (qmail 28141 invoked by uid 225); 24 Jun 2007 03:18:28 -0000
Delivered-To: beginners@perl.org
Received: (qmail 28132 invoked by alias); 24 Jun 2007 03:18:27 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of vahid.moghaddasi@gmail.com designates 64.233.166.183 as permitted sender)
Received: from py-out-1112.google.com (HELO py-out-1112.google.com) (64.233.166.183)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Sat, 23 Jun 2007 20:18:25 -0700
Received: by py-out-1112.google.com with SMTP id a25so1007370pyi
        for <beginners@perl.org>; Sat, 23 Jun 2007 20:18:21 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=GneINvmiJguCp10a1zO12zbNvNFEobmjvEioA6ZTEZa7MKN0W5oncvWmIivdSGffUta5TOteOeSbocgBab7EyERE13KoMt1zrFUIxLo63/ElJVXYSQ31nQx74UqRLZd7LRwSYmtb7LAtNomUs2g0tfVA0P8yad+m44rGrNLc2qg=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=Rnz2UYFd2NuH2uZiM67t0GRVFtqfmr1TU4uv110aJaL3wUBnBown97x6iA7GxbGvTbXGnKrbJHzuAAacV2jcC4BVVfDxa1FfSU0v4zeY8bav4gQLYCjP6/E6TAD6xcSfWBY1gzKxOIxI285lTjnm+0o4O44TKRgNr34ROpqYImI=
Received: by 10.65.197.13 with SMTP id z13mr7445188qbp.1182655101006;
        Sat, 23 Jun 2007 20:18:21 -0700 (PDT)
Received: by 10.65.252.9 with HTTP; Sat, 23 Jun 2007 20:18:20 -0700 (PDT)
Message-ID: <a3bd4fe00706232018t41e6011fl925e1c320aad68c7@mail.gmail.com>
Date: Sat, 23 Jun 2007 23:18:20 -0400
From: "Vahid Moghaddasi" <vahid.moghaddasi@gmail.com>
To: "Tom Phoenix" <tom@stonehenge.com>
Subject: Re: grep from one file and write to another
Cc: beginners@perl.org
In-Reply-To: <31086b240706231943q6d5d5804yb4eae0caa2d4b18a@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <a3bd4fe00706231903k6cd592e3t9bbffaecd15c5996@mail.gmail.com>
	 <31086b240706231943q6d5d5804yb4eae0caa2d4b18a@mail.gmail.com>

On 6/23/07, Tom Phoenix <tom@stonehenge.com> wrote:
> > use File::Copy;
>
> Are you actually using File::Copy? I didn't find any call to it in
> your posted code.

Sorry, I left it in by mistake. This code is a small part of a very
large program.

>
> > use strict;
> > use warnings;
>
> That's good....
>
> > $|=1;           # flush output buffer
> > open (FILTERfh, "< filter.in") || die "Can not open filter.in: $!\n";
> > open PASSWDfh, '</etc/passwd' or die "Can not open the file: $!\n";
> > open PASSWDFILfh, ">passwd.out";
>
> I can't say that I like the style of having filehandle names ending in
> "fh", but it's one way to do it.

I din't want to make mistakes, maybe later I change.

The actual program writes to STDOUT as well.

>
>    for my $user (0..$#input) {  # Not 1..$#input, is it?

If that gives me the same result, then it is less typing. I use field
0 for something else.

>
> And, unless you needed an index, you'll be even more likely to get it
> correct if you use a foreach directly on the array:
>
>    for my $user (@input) {  # Now $user is the user, not the index
>
> >         print "$input[$user] is being added.\n";
> >         while (<PASSWDfh>) {
>
> Now you're reading one file in a loop, inside the loop on FILTERfh. Do
> you mean to re-read the password file for every line in the outer
> loop's file? That sounds slow, but you could do it.

For each field (user) in the filter.in file, I will have to find the
user in passwd file, wouldn't I need to re-read the passwd file as
much as there are fields in filter.in file?

> (You'll either need to reopen the file, or use seek() to get back to the start.)
>
> A better algorithm would read through the entire FILTERfh datastream,
> storing away what you'll need. Later, when you read the password file
> in a single pass, you can compare the data in memory to the data read
> from the file.

I am not sure how much I can read into memory space without affecting
other programs but the entire FILTERfh could be a pretty large. Each
line could have up to 100 fields (users) and there could be 3 or 5
lines. How would I read them into memory? In an array?
>
> Does that get you closer to a solution? Good luck with it!
>
Hope so. Thanks.

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


