From perl6-all-return-81111-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri May  4 11:18:10 2007
Return-Path: <perl6-all-return-81111-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l44FI9qD016814
	for <ktwarwic@flax9.uwaterloo.ca>; Fri, 4 May 2007 11:18:09 -0400
Received: (qmail 22183 invoked by uid 514); 4 May 2007 15:18:07 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 22178 invoked from network); 4 May 2007 15:18:07 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-3.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,KARMA_CONTENT_POSITIVE,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Delivered-To: parrotbug-followup@parrotcode.org
Received-SPF: pass (x1.develooper.com: domain of spiehera@lafayette.edu designates 139.147.8.40 as permitted sender)
Date: Fri, 4 May 2007 11:16:25 -0400 (EDT)
From: Andy Spieherty <spiehera@lafayette.edu>
X-X-Sender: spiehera@fractal.phys.lafayette.edu
To: James Keenan via RT <parrotbug-followup@parrotcode.org>
Subject: Re: [perl #42412] Configure.pl things =no is true 
In-Reply-To: <rt-3.6.HEAD-12281-1178281764-1109.42412-15-0@perl.org>
Message-ID: <Pine.LNX.4.62.0705040927340.6634@fractal.phys.lafayette.edu>
References: <RT-Ticket-42412@perl.org> <cbcbecbf3fd62ff3f85ce570a34209b5@gmail.com>
 <rt-3.6.HEAD-1687-1178072394-459.42412-15-0@perl.org>
 <Pine.LNX.4.62.0705020935560.10270@fractal.phys.lafayette.edu>
 <463AAFEE.8080007@perl.org> <rt-3.6.HEAD-5461-1178251341-378.42412-15-0@perl.org>
 <rt-3.6.HEAD-12281-1178281764-1109.42412-15-0@perl.org>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_HELO_PASS,SPF_PASS

On Fri, 4 May 2007, James Keenan via RT wrote:

> On Thu May 03 21:02:21 2007, allison <!-- x --> at perl.org wrote:
> > Andy Spieherty wrote:
> > > On Tue, 1 May 2007, James Keenan via RT wrote:
> > > 
> > >> On Tue Apr 10 01:45:31 2007, jrisom <!-- x --> at gmail.com wrote:
> > >>> Configure should act as though writing --foo=no is false instead of 
> > >>> true.  Tonight I tried using --execcapable=no to get around a compile 
> > >>> failure, but then realized that it would probably treat "no" as a true 
> > >>> value.
> > 
> > I'm okay with having a plain English representation for "false value", 
> > as long as we have exactly one. Pick 'no', 'none', 'false', or whatever 
> > but we won't try to support every possible value a user might type in to 
> > mean false. Whatever we pick will mean false everywhere, on every 
> > option. And we have to be careful to make sure it's not a value that 
> > someone might want to use as a string value.

It may be sensible to distinguish boolean and string variables to avoid
that problem.

> The more you multiply variant ways of providing values to options,
> -- the more code you have to write,
> -- the more code someone has to maintain,
> -- the more tests someone has to write to verify the validity of the code and ensure high 
> coverage by the tests, and
> -- the more documentation someone has to write to explain the code.

Yes.  I think we're all on the same page here.  There are currently
multiple ways to say "no":

>       --nomanicheck
>       --cgoto=0
>       --without-gdbm
>       --icu-config=none
> 
> This means that for undocumented things, like -execcapable, the user has
> to guess.

I'm recommending replacing them with a single way to say "no".  Whether
that single way is spelled -Ufoo, --unset-foo, --disable-foo, --no-foo,
or --foo=0 is a Configure human-interface design decision (and then an
implementation detail), but supporting a single way is less work in the
end than the current 4 ways.

> For at least the third of those tasks, that someone, currently, is me.  

Believe me -- I am truly very sympathetic to that problem.

> I'm hoping to recruit additional people to help maintain Parrot's Perl 5 configuration and 
> build tools, and I made some progress in this regard at Hackathon Toronto.  Still, almost all 
> of Configure.pl's options are completely untouched by the test suite.  Code coverage for the 
> config/*/*.pm hierarchy is generally only around 25%.  Why multiply features for which, if 
> we're following best practices, we ought to write tests when we don't have the people to write 
> those tests?

I'm advocating *reducing* the number of options -- replacing the
hand-maintained hodge-podge of current options by a more generic scheme.
Then, within that generic scheme, I expect it will likely be no big
deal to internally treat --set-foo="no" as equivalent to --set-foo=0 or
--unset-foo (at least for boolean variables).

In perl5's Configure, there are over a thousand variables that can
be set by command-line options.  Presumably parrot will end up with a
similar number.  Attempting to write tests for them all would be madness.

-- 
    Andy Spieherty		spiehera@lafayette.edu

