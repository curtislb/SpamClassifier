From samba-technical-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org  Sun Jun  3 22:51:33 2007
Return-Path: <samba-technical-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org>
Received: from lists.samba.org (mail.samba.org [66.70.73.150])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l542pWhB022344
	for <ktwarwic@speedy.uwaterloo.ca>; Sun, 3 Jun 2007 22:51:33 -0400
Received: from dp.samba.org (localhost [127.0.0.1])
	by lists.samba.org (Postfix) with ESMTP id 3BB0216389B
	for <ktwarwic@speedy.uwaterloo.ca>; Mon,  4 Jun 2007 02:51:27 +0000 (GMT)
X-Spam-Checker-Version: SpamAssassin 3.1.7 (2006-10-05) on dp.samba.org
X-Spam-Level: 
X-Spam-Status: No, score=-1.0 required=3.8 tests=AWL,BAYES_00,NO_REAL_NAME,
	NO_RELAYS autolearn=no version=3.1.7
X-Original-To: samba-technical@lists.samba.org
Delivered-To: samba-technical@lists.samba.org
Received: by lists.samba.org (Postfix, from userid 603)
	id 5FCE6162AF7; Mon,  4 Jun 2007 02:50:40 +0000 (GMT)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Message-ID: <18019.32313.233845.201794@samba.org>
Date: Mon, 4 Jun 2007 12:51:37 +1000
To: James Peach <jpeach@samba.org>
In-Reply-To: <3FF5ACC6-A967-4C42-B42F-127D3235977F@samba.org>
References: <D4ADD9E4-9613-466E-9618-6DC251575315@samba.org>
	<1180906540.24923.198.camel@localhost.localdomain>
	<46636B0C.2030202@samba.org>
	<20070604015924.GA6189@jeremy2.wintest.samba.local>
	<3FF5ACC6-A967-4C42-B42F-127D3235977F@samba.org>
X-Mailer: VM 7.19 under Emacs 22.0.95.1
From: tridge@samba.org
Cc: "Gerald \(Jerry\) Carter" <jerry@samba.org>, simo <idra@samba.org>,
   samba-technical@lists.samba.org, Jeremy Allison <jra@samba.org>
Subject: Re: getting rid of mkproto.sh from Samba3
X-BeenThere: samba-technical@lists.samba.org
X-Mailman-Version: 2.1.5
Precedence: list
Reply-To: tridge@samba.org
List-Id: "Discussions on Samba internals. For general questions please
	subscribe to the list samba@samba.org"
	<samba-technical.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/listinfo/samba-technical>, 
	<mailto:samba-technical-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/archive/samba-technical>
List-Post: <mailto:samba-technical@lists.samba.org>
List-Help: <mailto:samba-technical-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-technical>,
	<mailto:samba-technical-request@lists.samba.org?subject=subscribe>
Sender: samba-technical-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Errors-To: samba-technical-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org

James,

 > >> mkproto.sh promotes lazing programming, leads to bad interfaces
 > >> and to monolithic code.
 > 
 > This is the basic reason why I don't like mkproto.sh. I'd also add that
 > 	- it makes it impossible to do incremental builds
 > 	- it makes it harder to find existing interfaces, raising the  
 > barrier to contributions
 > 	- it makes it harder to document existing interfaces
 > 	- leads to false sharing, forcing trivial tools to link most of lib/

This is not a result of mkproto. In Samba4 we do automatic prototype
generation for many of our subsystems but not for all, yet it doesn't
suffer from any of the above problems:

 - we do incremental builds, as each subsystem gets its own
    proto.h. So for example, the libcli/raw library gets
    libcli/raw/raw_proto.h. Only subsystems that need that library
    include that header

 - it is not hard to find existing interfaces, as we separate the
   headers for each interface. The generated headers are short, and
   are located in the same directory as the library code that are for

 - I think it makes it easier to document interfaces as the interfaces
   to the library are conveniently located next to the code

 - it doesn't lead to false sharing, as we separate the headers

 - the samba4 code is not monolithic

 - the samba4 code doesn't have bad interfaces.

The problems you are seeing are due to my original design of mkproto
which do it all as one big proto.h. Jelmer re-designed our mkproto to
split up the generated headers, and that got rid of all of the
problems you mentioned. Jelmer also did a much faster and cleaner
mkproto in perl.

We control which subsystems get automatic prototype generation using
options like this:

 [SUBSYSTEM::LIBCLI_RAW]
  PRIVATE_PROTO_HEADER = raw/raw_proto.h
  PRIVATE_DEPENDENCIES = LIBCLI_COMPOSITE 
  PUBLIC_DEPENDENCIES = samba-socket LIBPACKET gensec LIBCRYPTO
  LDFLAGS = $(SUBSYSTEM_LIBCLI_SMB_COMPOSITE_OUTPUT)
  OBJ_FILES = raw/rawfile.o \ (etc etc)

If you have a read through the generated prototypes, I think you'll
find them clean, and easy to read.

So you can use prototype generation without the problems you
mention. It just takes a bit more work upfront to get it right.

That said, we don't do automatic prototype generation for all of our
code. For some subsystems we choose to do it manually, which means we
leave out the PRIVATE_PROTO_HEADER option in the configuration for
that subsystem. That gives a lot of flexibility.

An intermediate option would be to have a pre-processor directory to
say "this function should be auto-prototyped". For example, you could
do this:

_AUTOPROTO_ NTSTATUS smb_raw_seek(struct smbcli_tree *tree,
			      union smb_seek *parms)
{
	struct smbcli_request *req = smb_raw_seek_send(tree, parms);
	return smb_raw_seek_recv(req, parms);
}

and teach mkproto to only prototype stuff with _AUTOPROTO_. That might
be a reaonable approach if you want most stuff not to be automatically
prototyped. 

This is similar to the _PUBLIC_ directive which Jelmer added so that
we can have most symbols only be usable internally, and not
accidentially export an internal symbol via a library.

Cheers, Tridge

