From samba-technical-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org  Sun Jun 24 04:27:08 2007
Return-Path: <samba-technical-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org>
Received: from lists.samba.org (mail.samba.org [66.70.73.150])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l5O8R7L9010262
	for <ktwarwic@speedy.uwaterloo.ca>; Sun, 24 Jun 2007 04:27:07 -0400
Received: from dp.samba.org (localhost [127.0.0.1])
	by lists.samba.org (Postfix) with ESMTP id 23AD1162AE3
	for <ktwarwic@speedy.uwaterloo.ca>; Sun, 24 Jun 2007 08:27:05 +0000 (GMT)
X-Spam-Checker-Version: SpamAssassin 3.1.7 (2006-10-05) on dp.samba.org
X-Spam-Level: 
X-Spam-Status: No, score=-0.6 required=3.8 tests=AWL,BAYES_50,RCVD_IN_DSBL,
	SPF_PASS autolearn=no version=3.1.7
X-Original-To: samba-technical@lists.samba.org
Delivered-To: samba-technical@lists.samba.org
Received: from ug-out-1314.google.com (ug-out-1314.google.com [66.249.92.168])
	by lists.samba.org (Postfix) with ESMTP id 09DF9162ACA
	for <samba-technical@lists.samba.org>;
	Sun, 24 Jun 2007 08:26:31 +0000 (GMT)
Received: by ug-out-1314.google.com with SMTP id b27so1189278ugd
	for <samba-technical@lists.samba.org>;
	Sun, 24 Jun 2007 01:26:22 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed; d=gmail.com; s=beta;
	h=domainkey-signature:received:received:from:to:subject:date:user-agent:mime-version:content-type:content-transfer-encoding:message-id;
	b=h/g2v1dLk+3ZJ6ekP11yuXkIZnoQy4ZZplSY61HQjP0Hpr9KGaGS2KbVGp4pWdS2virkANWt2zFM67qqiazRK4LDKaTXaI1SrMAU5BpxhiZ67RPzjTRAnogDgvHpvGOdf/MsbiWr1AdGUS3WYf/B8xGlSL6PNj1YPzE6gDPXtGM=
DomainKey-Signature: a=rsa-sha1; c=nofws; d=gmail.com; s=beta;
	h=received:from:to:subject:date:user-agent:mime-version:content-type:content-transfer-encoding:message-id;
	b=ilNcek0Q+qen/PfRLu/zPUGxJMheYmsoapjkOGrL7AotzjzPJ/es+A4kVVj+X85iwvaqG49GsTld3Z0nVBueMaaiDJlg5pLl3i0+70/vF1a17LM2x2F3RPk1K50lhvaeX1hX5JwYdaDfUUplSeGb+uiaUGh5RsU9AdD67ROkgss=
Received: by 10.82.112.16 with SMTP id k16mr10022405buc.1182673582344;
	Sun, 24 Jun 2007 01:26:22 -0700 (PDT)
Received: from noname ( [62.224.12.214])
	by mx.google.com with ESMTP id i3sm4204147nfh.2007.06.24.01.26.16
	(version=TLSv1/SSLv3 cipher=OTHER);
	Sun, 24 Jun 2007 01:26:21 -0700 (PDT)
From: Kai Blin <kai.blin@gmail.com>
To: samba-technical@lists.samba.org
Date: Sun, 24 Jun 2007 10:25:07 +0200
User-Agent: KMail/1.9.6
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart1474115.WqjqSj4VgY";
	protocol="application/pgp-signature"; micalg=pgp-sha1
Content-Transfer-Encoding: 7bit
Message-Id: <200706241025.14872.kai.blin@gmail.com>
Subject: Building libraries with the Samba4 build system
X-BeenThere: samba-technical@lists.samba.org
X-Mailman-Version: 2.1.5
Precedence: list
List-Id: "Discussions on Samba internals. For general questions please
	subscribe to the list samba@samba.org"
	<samba-technical.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/listinfo/samba-technical>, 
	<mailto:samba-technical-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/archive/samba-technical>
List-Post: <mailto:samba-technical@lists.samba.org>
List-Help: <mailto:samba-technical-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-technical>,
	<mailto:samba-technical-request@lists.samba.org?subject=subscribe>
Sender: samba-technical-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Errors-To: samba-technical-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org

--nextPart1474115.WqjqSj4VgY
Content-Type: multipart/mixed;
  boundary="Boundary-01=_jpifGSywG5hUnvE"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

--Boundary-01=_jpifGSywG5hUnvE
Content-Type: text/plain;
  charset="us-ascii"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline

Hi folks,

I've been trying to get libnss_winbind ported to Samba4 for some time now, =
but=20
I'm still stuck struggling with the build system.

Right now I have managed to get the linux version to build. However, nm tel=
ls=20
me that there's none of the functions exported. How would I do that?

Attached is the code I'm currently using for this, winbind_nss_linux.c is m=
ore=20
or less the same as in Samba3, just with _PUBLIC_ added in front of the=20
functions I want to have available in the library. That didn't help.

Any suggestions?
Kai

=2D-=20
Kai Blin
WorldForge developer  http://www.worldforge.org/
Wine developer        http://wiki.winehq.org/KaiBlin
Samba team member     http://www.samba.org/samba/team/
=2D-
Will code for cotton.

--Boundary-01=_jpifGSywG5hUnvE
Content-Type: text/x-diff;
  charset="us-ascii";
  name="2007062401.diff"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: attachment;
	filename="2007062401.diff"

Index: nsswitch/config.m4
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
=2D-- nsswitch/config.m4	(revision 23528)
+++ nsswitch/config.m4	(working copy)
@@ -1 +1,25 @@
 AC_CHECK_HEADERS(nss.h nss_common.h ns_api.h )
+
+WINBIND_NSS=3D"nsswitch/libnss_winbind.$SHLIBEXT"
+dnl WINBIND_WINS_NSS=3D"nsswitch/libnss_wins.$SHLIBEXT"
+WINBIND_NSS_LDSHFLAGS=3D$LDSHFLAGS
+NSSSONAMEVERSIONSUFFIX=3D""
+
+case "$host_os" in
+	*linux*)
+		WINBIND_NSS_EXTRA_OBJS=3D"nsswitch/winbind_nss_linux.o"
+		SMB_ENABLE(nss_winbind, YES)
+	;;
+	*)
+		WINBIND_NSS_EXTRA_OBJS=3D""
+		SMB_ENABLE(nss_winbind, NO)
+	;;
+esac
+
+AC_SUBST(WINBIND_NSS)
+dnl AC_SUBST(WINBIND_WINS_NSS)
+AC_SUBST(WINBIND_NSS_LDSHFLAGS)
+AC_SUBST(WINBIND_NSS_EXTRA_OBJS)
+AC_SUBST(WINBIND_NSS_EXTRA_LIBS)
+AC_SUBST(NSSSONAMEVERSIONSUFFIX)
+
Index: nsswitch/config.mk
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
=2D-- nsswitch/config.mk	(revision 23528)
+++ nsswitch/config.mk	(working copy)
@@ -5,6 +5,14 @@
 OBJ_FILES =3D wb_common.o
=20
 #################################
+# Start LIBRARY libnss_winbind
+[LIBRARY::nss_winbind]
+VERSION =3D 0.0.1
+SO_VERSION =3D 0
+DESCRIPTION =3D Name service switch library using winbind
+OBJ_FILES =3D $(WINBIND_NSS_EXTRA_OBJS)
+
+#################################
 # Start BINARY nsstest
 [BINARY::nsstest]
 INSTALLDIR =3D BINDIR
Index: nsswitch/winbind_nss_linux.c
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
=2D-- nsswitch/winbind_nss_linux.c	(revision 0)
+++ nsswitch/winbind_nss_linux.c	(revision 0)
@@ -0,0 +1,1285 @@
+/*=20
+   Unix SMB/CIFS implementation.
+
+   Windows NT Domain nsswitch module
+
+   Copyright (C) Tim Potter 2000
+  =20
+   This library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Library General Public
+   License as published by the Free Software Foundation; either
+   version 2 of the License, or (at your option) any later version.
+  =20
+   This library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Library General Public License for more details.
+  =20
+   You should have received a copy of the GNU Library General Public
+   License along with this library; if not, write to the
+   Free Software Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA  02111-1307, USA.  =20
+*/
+
+#include "winbind_client.h"
+
+/* Maximum number of users to pass back over the unix domain socket
+   per call. This is not a static limit on the total number of users=20
+   or groups returned in total. */
+
+#define MAX_GETPWENT_USERS 250
+#define MAX_GETGRENT_USERS 250
+
+_PUBLIC_ NSS_STATUS _nss_winbind_setpwent(void);
+_PUBLIC_ NSS_STATUS _nss_winbind_endpwent(void);
+_PUBLIC_ NSS_STATUS _nss_winbind_getpwent_r(struct passwd *result, char *b=
uffer,=20
+				   size_t buflen, int *errnop);
+_PUBLIC_ NSS_STATUS _nss_winbind_getpwuid_r(uid_t uid, struct passwd *resu=
lt,=20
+				   char *buffer, size_t buflen, int *errnop);
+_PUBLIC_ NSS_STATUS _nss_winbind_getpwnam_r(const char *name, struct passw=
d *result,=20
+				   char *buffer, size_t buflen, int *errnop);
+_PUBLIC_ NSS_STATUS _nss_winbind_setgrent(void);
+_PUBLIC_ NSS_STATUS _nss_winbind_endgrent(void);
+_PUBLIC_ NSS_STATUS _nss_winbind_getgrent_r(struct group *result, char *bu=
ffer,=20
+				   size_t buflen, int *errnop);
+_PUBLIC_ NSS_STATUS _nss_winbind_getgrlst_r(struct group *result, char *bu=
ffer,=20
+				   size_t buflen, int *errnop);
+_PUBLIC_ NSS_STATUS _nss_winbind_getgrnam_r(const char *name, struct group=
 *result,=20
+				   char *buffer, size_t buflen, int *errnop);
+_PUBLIC_ NSS_STATUS _nss_winbind_getgrgid_r(gid_t gid, struct group *resul=
t, char *buffer,=20
+				   size_t buflen, int *errnop);
+_PUBLIC_ NSS_STATUS _nss_winbind_initgroups_dyn(char *user, gid_t group, l=
ong int *start,=20
+				       long int *size, gid_t **groups,=20
+				       long int limit, int *errnop);
+_PUBLIC_ NSS_STATUS _nss_winbind_getusersids(const char *user_sid, char **=
group_sids,=20
+				    int *num_groups, char *buffer, size_t buf_size,=20
+				    int *errnop);
+_PUBLIC_ NSS_STATUS _nss_winbind_nametosid(const char *name, char **sid, c=
har *buffer,
+				  size_t buflen, int *errnop);
+_PUBLIC_ NSS_STATUS _nss_winbind_sidtoname(const char *sid, char **name, c=
har *buffer,=20
+				  size_t buflen, int *errnop);
+_PUBLIC_ NSS_STATUS _nss_winbind_sidtouid(const char *sid, uid_t *uid, int=
 *errnop);
+_PUBLIC_ NSS_STATUS _nss_winbind_sidtogid(const char *sid, gid_t *gid, int=
 *errnop);
+_PUBLIC_ NSS_STATUS _nss_winbind_uidtosid(uid_t uid, char **sid, char *buf=
fer,=20
+				 size_t buflen, int *errnop);
+_PUBLIC_ NSS_STATUS _nss_winbind_gidtosid(gid_t gid, char **sid, char *buf=
fer,=20
+				 size_t buflen, int *errnop);
+
+/* Prototypes from wb_common.c */
+
+extern int winbindd_fd;
+
+#ifdef DEBUG_NSS
+static const char *nss_err_str(NSS_STATUS ret) {
+	switch (ret) {
+		case NSS_STATUS_TRYAGAIN:
+			return "NSS_STATUS_TRYAGAIN";
+		case NSS_STATUS_SUCCESS:
+			return "NSS_STATUS_SUCCESS";
+		case NSS_STATUS_NOTFOUND:
+			return "NSS_STATUS_NOTFOUND";
+		case NSS_STATUS_UNAVAIL:
+			return "NSS_STATUS_UNAVAIL";
+		case NSS_STATUS_RETURN:
+			return "NSS_STATUS_RETURN";
+		default:
+			return "UNKNOWN RETURN CODE!!!!!!!";
+	}
+}
+#endif
+
+/* Allocate some space from the nss static buffer.  The buffer and buflen
+   are the pointers passed in by the C library to the _nss_ntdom_*
+   functions. */
+
+static char *get_static(char **buffer, size_t *buflen, size_t len)
+{
+	char *result;
+
+	/* Error check.  We return false if things aren't set up right, or
+	   there isn't enough buffer space left. */
+=09
+	if ((buffer =3D=3D NULL) || (buflen =3D=3D NULL) || (*buflen < len)) {
+		return NULL;
+	}
+
+	/* Return an index into the static buffer */
+
+	result =3D *buffer;
+	*buffer +=3D len;
+	*buflen -=3D len;
+
+	return result;
+}
+
+/* I've copied the strtok() replacement function next_token() from
+   lib/util_str.c as I really don't want to have to link in any other
+   objects if I can possibly avoid it. */
+
+static BOOL next_token(char **ptr,char *buff,const char *sep, size_t bufsi=
ze)
+{
+	char *s;
+	BOOL quoted;
+	size_t len=3D1;
+
+	if (!ptr) return(False);
+
+	s =3D *ptr;
+
+	/* default to simple separators */
+	if (!sep) sep =3D " \t\n\r";
+
+	/* find the first non sep char */
+	while (*s && strchr(sep,*s)) s++;
+=09
+	/* nothing left? */
+	if (! *s) return(False);
+=09
+	/* copy over the token */
+	for (quoted =3D False; len < bufsize && *s && (quoted || !strchr(sep,*s))=
; s++) {
+		if (*s =3D=3D '\"') {
+			quoted =3D !quoted;
+		} else {
+			len++;
+			*buff++ =3D *s;
+		}
+	}
+=09
+	*ptr =3D (*s) ? s+1 : s; =20
+	*buff =3D 0;
+=09
+	return(True);
+}
+
+
+/* Fill a pwent structure from a winbindd_response structure.  We use
+   the static data passed to us by libc to put strings and stuff in.
+   Return NSS_STATUS_TRYAGAIN if we run out of memory. */
+
+static NSS_STATUS fill_pwent(struct passwd *result,
+				  struct winbindd_pw *pw,
+				  char **buffer, size_t *buflen)
+{
+	/* User name */
+
+	if ((result->pw_name =3D=20
+	     get_static(buffer, buflen, strlen(pw->pw_name) + 1)) =3D=3D NULL) {
+
+		/* Out of memory */
+
+		return NSS_STATUS_TRYAGAIN;
+	}
+
+	strcpy(result->pw_name, pw->pw_name);
+
+	/* Password */
+
+	if ((result->pw_passwd =3D=20
+	     get_static(buffer, buflen, strlen(pw->pw_passwd) + 1)) =3D=3D NULL) {
+
+		/* Out of memory */
+
+		return NSS_STATUS_TRYAGAIN;
+	}
+
+	strcpy(result->pw_passwd, pw->pw_passwd);
+       =20
+	/* [ug]id */
+
+	result->pw_uid =3D pw->pw_uid;
+	result->pw_gid =3D pw->pw_gid;
+
+	/* GECOS */
+
+	if ((result->pw_gecos =3D=20
+	     get_static(buffer, buflen, strlen(pw->pw_gecos) + 1)) =3D=3D NULL) {
+
+		/* Out of memory */
+
+		return NSS_STATUS_TRYAGAIN;
+	}
+
+	strcpy(result->pw_gecos, pw->pw_gecos);
+=09
+	/* Home directory */
+=09
+	if ((result->pw_dir =3D=20
+	     get_static(buffer, buflen, strlen(pw->pw_dir) + 1)) =3D=3D NULL) {
+
+		/* Out of memory */
+
+		return NSS_STATUS_TRYAGAIN;
+	}
+
+	strcpy(result->pw_dir, pw->pw_dir);
+
+	/* Logon shell */
+=09
+	if ((result->pw_shell =3D=20
+	     get_static(buffer, buflen, strlen(pw->pw_shell) + 1)) =3D=3D NULL) {
+	=09
+		/* Out of memory */
+
+		return NSS_STATUS_TRYAGAIN;
+	}
+
+	strcpy(result->pw_shell, pw->pw_shell);
+
+	/* The struct passwd for Solaris has some extra fields which must
+	   be initialised or nscd crashes. */
+
+#if HAVE_PASSWD_PW_COMMENT
+	result->pw_comment =3D "";
+#endif
+
+#if HAVE_PASSWD_PW_AGE
+	result->pw_age =3D "";
+#endif
+
+	return NSS_STATUS_SUCCESS;
+}
+
+/* Fill a grent structure from a winbindd_response structure.  We use
+   the static data passed to us by libc to put strings and stuff in.
+   Return NSS_STATUS_TRYAGAIN if we run out of memory. */
+
+static NSS_STATUS fill_grent(struct group *result, struct winbindd_gr *gr,
+		      char *gr_mem, char **buffer, size_t *buflen)
+{
+	fstring name;
+	int i;
+	char *tst;
+
+	/* Group name */
+
+	if ((result->gr_name =3D
+	     get_static(buffer, buflen, strlen(gr->gr_name) + 1)) =3D=3D NULL) {
+
+		/* Out of memory */
+
+		return NSS_STATUS_TRYAGAIN;
+	}
+
+	strcpy(result->gr_name, gr->gr_name);
+
+	/* Password */
+
+	if ((result->gr_passwd =3D
+	     get_static(buffer, buflen, strlen(gr->gr_passwd) + 1)) =3D=3D NULL) {
+
+		/* Out of memory */
+	=09
+		return NSS_STATUS_TRYAGAIN;
+	}
+
+	strcpy(result->gr_passwd, gr->gr_passwd);
+
+	/* gid */
+
+	result->gr_gid =3D gr->gr_gid;
+
+	/* Group membership */
+
+	if ((gr->num_gr_mem < 0) || !gr_mem) {
+		gr->num_gr_mem =3D 0;
+	}
+
+	/* this next value is a pointer to a pointer so let's align it */
+
+	/* Calculate number of extra bytes needed to align on pointer size boundr=
y */
+	if ((i =3D (unsigned long)(*buffer) % sizeof(char*)) !=3D 0)
+		i =3D sizeof(char*) - i;
+=09
+	if ((tst =3D get_static(buffer, buflen, ((gr->num_gr_mem + 1) *=20
+				 sizeof(char *)+i))) =3D=3D NULL) {
+
+		/* Out of memory */
+
+		return NSS_STATUS_TRYAGAIN;
+	}
+	result->gr_mem =3D (char **)(tst + i);
+
+	if (gr->num_gr_mem =3D=3D 0) {
+
+		/* Group is empty */
+
+		*(result->gr_mem) =3D NULL;
+		return NSS_STATUS_SUCCESS;
+	}
+
+	/* Start looking at extra data */
+
+	i =3D 0;
+
+	while(next_token((char **)&gr_mem, name, ",", sizeof(fstring))) {
+       =20
+		/* Allocate space for member */
+       =20
+		if (((result->gr_mem)[i] =3D=20
+		     get_static(buffer, buflen, strlen(name) + 1)) =3D=3D NULL) {
+           =20
+			/* Out of memory */
+           =20
+			return NSS_STATUS_TRYAGAIN;
+		}       =20
+       =20
+		strcpy((result->gr_mem)[i], name);
+		i++;
+	}
+
+	/* Terminate list */
+
+	(result->gr_mem)[i] =3D NULL;
+
+	return NSS_STATUS_SUCCESS;
+}
+
+/*
+ * NSS user functions
+ */
+
+static struct winbindd_response getpwent_response;
+
+static int ndx_pw_cache;                 /* Current index into pwd cache */
+static int num_pw_cache;                 /* Current size of pwd cache */
+
+/* Rewind "file pointer" to start of ntdom password database */
+
+_PUBLIC_ NSS_STATUS _nss_winbind_setpwent(void)
+{
+	NSS_STATUS ret;
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: setpwent\n", getpid());
+#endif
+
+	if (num_pw_cache > 0) {
+		ndx_pw_cache =3D num_pw_cache =3D 0;
+		free_response(&getpwent_response);
+	}
+
+	ret =3D winbindd_request_response(WINBINDD_SETPWENT, NULL, NULL);
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: setpwent returns %s (%d)\n", getpid(),
+		nss_err_str(ret), ret);
+#endif
+	return ret;
+}
+
+/* Close ntdom password database "file pointer" */
+
+_PUBLIC_ NSS_STATUS _nss_winbind_endpwent(void)
+{
+	NSS_STATUS ret;
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: endpwent\n", getpid());
+#endif
+
+	if (num_pw_cache > 0) {
+		ndx_pw_cache =3D num_pw_cache =3D 0;
+		free_response(&getpwent_response);
+	}
+
+	ret =3D winbindd_request_response(WINBINDD_ENDPWENT, NULL, NULL);
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: endpwent returns %s (%d)\n", getpid(),
+		nss_err_str(ret), ret);
+#endif
+	return ret;
+}
+
+/* Fetch the next password entry from ntdom password database */
+
+_PUBLIC_ NSS_STATUS _nss_winbind_getpwent_r(struct passwd *result,
+		char *buffer, size_t buflen, int *errnop)
+{
+	NSS_STATUS ret;
+	struct winbindd_request request;
+	static int called_again;
+
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: getpwent\n", getpid());
+#endif
+
+	/* Return an entry from the cache if we have one, or if we are
+	   called again because we exceeded our static buffer.  */
+
+	if ((ndx_pw_cache < num_pw_cache) || called_again) {
+		goto return_result;
+	}
+
+	/* Else call winbindd to get a bunch of entries */
+=09
+	if (num_pw_cache > 0) {
+		free_response(&getpwent_response);
+	}
+
+	ZERO_STRUCT(request);
+	ZERO_STRUCT(getpwent_response);
+
+	request.data.num_entries =3D MAX_GETPWENT_USERS;
+
+	ret =3D winbindd_request_response(WINBINDD_GETPWENT, &request,=20
+			       &getpwent_response);
+
+	if (ret =3D=3D NSS_STATUS_SUCCESS) {
+		struct winbindd_pw *pw_cache;
+
+		/* Fill cache */
+
+		ndx_pw_cache =3D 0;
+		num_pw_cache =3D getpwent_response.data.num_entries;
+
+		/* Return a result */
+
+	return_result:
+
+		pw_cache =3D (struct winbindd_pw *)
+			getpwent_response.extra_data.data;
+
+		/* Check data is valid */
+
+		if (pw_cache =3D=3D NULL) {
+			ret =3D NSS_STATUS_NOTFOUND;
+			goto done;
+		}
+
+		ret =3D fill_pwent(result, &pw_cache[ndx_pw_cache],
+				 &buffer, &buflen);
+	=09
+		/* Out of memory - try again */
+
+		if (ret =3D=3D NSS_STATUS_TRYAGAIN) {
+			called_again =3D True;
+			*errnop =3D errno =3D ERANGE;
+			goto done;
+		}
+
+		*errnop =3D errno =3D 0;
+		called_again =3D False;
+		ndx_pw_cache++;
+
+		/* If we've finished with this lot of results free cache */
+
+		if (ndx_pw_cache =3D=3D num_pw_cache) {
+			ndx_pw_cache =3D num_pw_cache =3D 0;
+			free_response(&getpwent_response);
+		}
+	}
+	done:
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: getpwent returns %s (%d)\n", getpid(),
+		nss_err_str(ret), ret);
+#endif
+	return ret;
+}
+
+/* Return passwd struct from uid */
+
+_PUBLIC_ NSS_STATUS _nss_winbind_getpwuid_r(uid_t uid, struct passwd *resu=
lt,
+		char *buffer, size_t buflen, int *errnop)
+{
+	NSS_STATUS ret;
+	static struct winbindd_response response;
+	struct winbindd_request request;
+	static int keep_response=3D0;
+
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: getpwuid %d\n", getpid(), (unsigned int)uid);
+#endif
+
+	/* If our static buffer needs to be expanded we are called again */
+	if (!keep_response) {
+
+		/* Call for the first time */
+
+		ZERO_STRUCT(response);
+		ZERO_STRUCT(request);
+
+		request.data.uid =3D uid;
+
+		ret =3D winbindd_request_response(WINBINDD_GETPWUID, &request, &response=
);
+
+		if (ret =3D=3D NSS_STATUS_SUCCESS) {
+			ret =3D fill_pwent(result, &response.data.pw,=20
+					 &buffer, &buflen);
+
+			if (ret =3D=3D NSS_STATUS_TRYAGAIN) {
+				keep_response =3D True;
+				*errnop =3D errno =3D ERANGE;
+				goto done;
+			}
+		}
+
+	} else {
+
+		/* We've been called again */
+
+		ret =3D fill_pwent(result, &response.data.pw, &buffer, &buflen);
+
+		if (ret =3D=3D NSS_STATUS_TRYAGAIN) {
+			keep_response =3D True;
+			*errnop =3D errno =3D ERANGE;
+			goto done;
+		}
+
+		keep_response =3D False;
+		*errnop =3D errno =3D 0;
+	}
+
+	free_response(&response);
+	done:
+
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: getpwuid %d returns %s (%d)\n", getpid(),
+		(unsigned int)uid, nss_err_str(ret), ret);
+#endif
+	return ret;
+}
+
+/* Return passwd struct from username */
+_PUBLIC_ NSS_STATUS _nss_winbind_getpwnam_r(const char *name,
+	    struct passwd *result, char *buffer, size_t buflen, int *errnop)
+{
+	NSS_STATUS ret;
+	static struct winbindd_response response;
+	struct winbindd_request request;
+	static int keep_response;
+
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: getpwnam %s\n", getpid(), name);
+#endif
+
+	/* If our static buffer needs to be expanded we are called again */
+
+	if (!keep_response) {
+
+		/* Call for the first time */
+
+		ZERO_STRUCT(response);
+		ZERO_STRUCT(request);
+
+		strncpy(request.data.username, name,=20
+			sizeof(request.data.username) - 1);
+		request.data.username
+			[sizeof(request.data.username) - 1] =3D '\0';
+
+		ret =3D winbindd_request_response(WINBINDD_GETPWNAM, &request, &response=
);
+
+		if (ret =3D=3D NSS_STATUS_SUCCESS) {
+			ret =3D fill_pwent(result, &response.data.pw, &buffer,
+					 &buflen);
+
+			if (ret =3D=3D NSS_STATUS_TRYAGAIN) {
+				keep_response =3D True;
+				*errnop =3D errno =3D ERANGE;
+				goto done;
+			}
+		}
+
+	} else {
+
+		/* We've been called again */
+
+		ret =3D fill_pwent(result, &response.data.pw, &buffer, &buflen);
+
+		if (ret =3D=3D NSS_STATUS_TRYAGAIN) {
+			keep_response =3D True;
+			*errnop =3D errno =3D ERANGE;
+			goto done;
+		}
+
+		keep_response =3D False;
+		*errnop =3D errno =3D 0;
+	}
+
+	free_response(&response);
+	done:
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: getpwnam %s returns %s (%d)\n", getpid(),
+		name, nss_err_str(ret), ret);
+#endif
+	return ret;
+}
+
+/*
+ * NSS group functions
+ */
+
+static struct winbindd_response getgrent_response;
+
+static int ndx_gr_cache;                 /* Current index into grp cache */
+static int num_gr_cache;                 /* Current size of grp cache */
+
+/* Rewind "file pointer" to start of ntdom group database */
+
+_PUBLIC_ NSS_STATUS _nss_winbind_setgrent(void)
+{
+	NSS_STATUS ret;
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: setgrent\n", getpid());
+#endif
+
+	if (num_gr_cache > 0) {
+		ndx_gr_cache =3D num_gr_cache =3D 0;
+		free_response(&getgrent_response);
+	}
+
+	ret =3D winbindd_request_response(WINBINDD_SETGRENT, NULL, NULL);
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: setgrent returns %s (%d)\n", getpid(),
+		nss_err_str(ret), ret);
+#endif
+	return ret;
+}
+
+/* Close "file pointer" for ntdom group database */
+
+_PUBLIC_ NSS_STATUS _nss_winbind_endgrent(void)
+{
+	NSS_STATUS ret;
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: endgrent\n", getpid());
+#endif
+
+	if (num_gr_cache > 0) {
+		ndx_gr_cache =3D num_gr_cache =3D 0;
+		free_response(&getgrent_response);
+	}
+
+	ret =3D winbindd_request_response(WINBINDD_ENDGRENT, NULL, NULL);
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: endgrent returns %s (%d)\n", getpid(),
+		nss_err_str(ret), ret);
+#endif
+	return ret;
+}
+
+/* Get next entry from ntdom group database */
+
+static NSS_STATUS
+winbind_getgrent(enum winbindd_cmd cmd,
+		 struct group *result,
+		 char *buffer, size_t buflen, int *errnop)
+{
+	NSS_STATUS ret;
+	static struct winbindd_request request;
+	static int called_again;
+=09
+
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: getgrent\n", getpid());
+#endif
+
+	/* Return an entry from the cache if we have one, or if we are
+	   called again because we exceeded our static buffer.  */
+
+	if ((ndx_gr_cache < num_gr_cache) || called_again) {
+		goto return_result;
+	}
+
+	/* Else call winbindd to get a bunch of entries */
+=09
+	if (num_gr_cache > 0) {
+		free_response(&getgrent_response);
+	}
+
+	ZERO_STRUCT(request);
+	ZERO_STRUCT(getgrent_response);
+
+	request.data.num_entries =3D MAX_GETGRENT_USERS;
+
+	ret =3D winbindd_request_response(cmd, &request,=20
+			       &getgrent_response);
+
+	if (ret =3D=3D NSS_STATUS_SUCCESS) {
+		struct winbindd_gr *gr_cache;
+		int mem_ofs;
+
+		/* Fill cache */
+
+		ndx_gr_cache =3D 0;
+		num_gr_cache =3D getgrent_response.data.num_entries;
+
+		/* Return a result */
+
+	return_result:
+
+		gr_cache =3D (struct winbindd_gr *)
+			getgrent_response.extra_data.data;
+
+		/* Check data is valid */
+
+		if (gr_cache =3D=3D NULL) {
+			ret =3D NSS_STATUS_NOTFOUND;
+			goto done;
+		}
+
+		/* Fill group membership.  The offset into the extra data
+		   for the group membership is the reported offset plus the
+		   size of all the winbindd_gr records returned. */
+
+		mem_ofs =3D gr_cache[ndx_gr_cache].gr_mem_ofs +
+			num_gr_cache * sizeof(struct winbindd_gr);
+
+		ret =3D fill_grent(result, &gr_cache[ndx_gr_cache],
+				 ((char *)getgrent_response.extra_data.data)+mem_ofs,
+				 &buffer, &buflen);
+	=09
+		/* Out of memory - try again */
+
+		if (ret =3D=3D NSS_STATUS_TRYAGAIN) {
+			called_again =3D True;
+			*errnop =3D errno =3D ERANGE;
+			goto done;
+		}
+
+		*errnop =3D 0;
+		called_again =3D False;
+		ndx_gr_cache++;
+
+		/* If we've finished with this lot of results free cache */
+
+		if (ndx_gr_cache =3D=3D num_gr_cache) {
+			ndx_gr_cache =3D num_gr_cache =3D 0;
+			free_response(&getgrent_response);
+		}
+	}
+	done:
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: getgrent returns %s (%d)\n", getpid(),
+		nss_err_str(ret), ret);
+#endif
+	return ret;
+}
+
+
+_PUBLIC_ NSS_STATUS _nss_winbind_getgrent_r(struct group *result,
+			char *buffer, size_t buflen, int *errnop)
+{
+	return winbind_getgrent(WINBINDD_GETGRENT, result, buffer, buflen, errnop=
);
+}
+
+_PUBLIC_ NSS_STATUS _nss_winbind_getgrlst_r(struct group *result,
+			char *buffer, size_t buflen, int *errnop)
+{
+	return winbind_getgrent(WINBINDD_GETGRLST, result, buffer, buflen, errnop=
);
+}
+
+/* Return group struct from group name */
+
+_PUBLIC_ NSS_STATUS _nss_winbind_getgrnam_r(const char *name,
+			struct group *result, char *buffer,
+			size_t buflen, int *errnop)
+{
+	NSS_STATUS ret;
+	static struct winbindd_response response;
+	struct winbindd_request request;
+	static int keep_response;
+=09
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: getgrnam %s\n", getpid(), name);
+#endif
+
+	/* If our static buffer needs to be expanded we are called again */
+=09
+	if (!keep_response) {
+
+		/* Call for the first time */
+
+		ZERO_STRUCT(request);
+		ZERO_STRUCT(response);
+
+		strncpy(request.data.groupname, name,=20
+			sizeof(request.data.groupname));
+		request.data.groupname
+			[sizeof(request.data.groupname) - 1] =3D '\0';
+
+		ret =3D winbindd_request_response(WINBINDD_GETGRNAM, &request, &response=
);
+
+		if (ret =3D=3D NSS_STATUS_SUCCESS) {
+			ret =3D fill_grent(result, &response.data.gr,=20
+					 (char *)response.extra_data.data,
+					 &buffer, &buflen);
+
+			if (ret =3D=3D NSS_STATUS_TRYAGAIN) {
+				keep_response =3D True;
+				*errnop =3D errno =3D ERANGE;
+				goto done;
+			}
+		}
+
+	} else {
+	=09
+		/* We've been called again */
+	=09
+		ret =3D fill_grent(result, &response.data.gr,=20
+				 (char *)response.extra_data.data, &buffer,
+				 &buflen);
+	=09
+		if (ret =3D=3D NSS_STATUS_TRYAGAIN) {
+			keep_response =3D True;
+			*errnop =3D errno =3D ERANGE;
+			goto done;
+		}
+
+		keep_response =3D False;
+		*errnop =3D 0;
+	}
+
+	free_response(&response);
+	done:
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: getgrnam %s returns %s (%d)\n", getpid(),
+		name, nss_err_str(ret), ret);
+#endif
+	return ret;
+}
+
+/* Return group struct from gid */
+
+_PUBLIC_ NSS_STATUS _nss_winbind_getgrgid_r(gid_t gid,
+			struct group *result, char *buffer,
+			size_t buflen, int *errnop)
+{
+	NSS_STATUS ret;
+	static struct winbindd_response response;
+	struct winbindd_request request;
+	static int keep_response;
+
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: getgrgid %d\n", getpid(), gid);
+#endif
+
+	/* If our static buffer needs to be expanded we are called again */
+
+	if (!keep_response) {
+
+		/* Call for the first time */
+
+		ZERO_STRUCT(request);
+		ZERO_STRUCT(response);
+
+		request.data.gid =3D gid;
+
+		ret =3D winbindd_request_response(WINBINDD_GETGRGID, &request, &response=
);
+
+		if (ret =3D=3D NSS_STATUS_SUCCESS) {
+
+			ret =3D fill_grent(result, &response.data.gr,=20
+					 (char *)response.extra_data.data,=20
+					 &buffer, &buflen);
+
+			if (ret =3D=3D NSS_STATUS_TRYAGAIN) {
+				keep_response =3D True;
+				*errnop =3D errno =3D ERANGE;
+				goto done;
+			}
+		}
+
+	} else {
+
+		/* We've been called again */
+
+		ret =3D fill_grent(result, &response.data.gr,=20
+				 (char *)response.extra_data.data, &buffer,
+				 &buflen);
+
+		if (ret =3D=3D NSS_STATUS_TRYAGAIN) {
+			keep_response =3D True;
+			*errnop =3D errno =3D ERANGE;
+			goto done;
+		}
+
+		keep_response =3D False;
+		*errnop =3D 0;
+	}
+
+	free_response(&response);
+	done:
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: getgrgid %d returns %s (%d)\n", getpid(),
+		(unsigned int)gid, nss_err_str(ret), ret);
+#endif
+	return ret;
+}
+
+/* Initialise supplementary groups */
+
+_PUBLIC_ NSS_STATUS _nss_winbind_initgroups_dyn(char *user, gid_t group,
+			long int *start, long int *size, gid_t **groups,
+			long int limit, int *errnop)
+{
+	NSS_STATUS ret;
+	struct winbindd_request request;
+	struct winbindd_response response;
+	int i;
+
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: initgroups %s (%d)\n", getpid(),
+		user, group);
+#endif
+
+	ZERO_STRUCT(request);
+	ZERO_STRUCT(response);
+
+	strncpy(request.data.username, user,
+		sizeof(request.data.username) - 1);
+
+	ret =3D winbindd_request_response(WINBINDD_GETGROUPS, &request, &response=
);
+
+	if (ret =3D=3D NSS_STATUS_SUCCESS) {
+		int num_gids =3D response.data.num_entries;
+		gid_t *gid_list =3D (gid_t *)response.extra_data.data;
+
+#ifdef DEBUG_NSS
+		fprintf(stderr, "[%5d]: initgroups %s: got NSS_STATUS_SUCCESS "
+				"and %d gids\n", getpid(),
+				user, num_gids);
+#endif
+		if (gid_list =3D=3D NULL) {
+			ret =3D NSS_STATUS_NOTFOUND;
+			goto done;
+		}
+
+		/* Copy group list to client */
+
+		for (i =3D 0; i < num_gids; i++) {
+
+#ifdef DEBUG_NSS
+			fprintf(stderr, "[%5d]: initgroups %s (%d): "
+					"processing gid %d \n", getpid(),
+					user, group, gid_list[i]);
+#endif
+
+			/* Skip primary group */
+
+			if (gid_list[i] =3D=3D group) {
+				continue;
+			}
+
+			/* Filled buffer ? If so, resize. */
+
+			if (*start =3D=3D *size) {
+				long int newsize;
+				gid_t *newgroups;
+
+				newsize =3D 2 * (*size);
+				if (limit > 0) {
+					if (*size =3D=3D limit) {
+						goto done;
+					}
+					if (newsize > limit) {
+						newsize =3D limit;
+					}
+				}
+
+				newgroups =3D (gid_t *)
+					realloc((*groups),
+						newsize * sizeof(**groups));
+				if (!newgroups) {
+					*errnop =3D ENOMEM;
+					ret =3D NSS_STATUS_NOTFOUND;
+					goto done;
+				}
+				*groups =3D newgroups;
+				*size =3D newsize;
+			}
+
+			/* Add to buffer */
+
+			(*groups)[*start] =3D gid_list[i];
+			*start +=3D 1;
+		}
+	}
+=09
+	/* Back to your regularly scheduled programming */
+
+ done:
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: initgroups %s returns %s (%d)\n", getpid(),
+		user, nss_err_str(ret), ret);
+#endif
+	return ret;
+}
+
+
+/* return a list of group SIDs for a user SID */
+_PUBLIC_ NSS_STATUS _nss_winbind_getusersids(const char *user_sid,
+			char **group_sids, int *num_groups,
+			char *buffer, size_t buf_size, int *errnop)
+{
+	NSS_STATUS ret;
+	struct winbindd_request request;
+	struct winbindd_response response;
+
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: getusersids %s\n", getpid(), user_sid);
+#endif
+
+	ZERO_STRUCT(request);
+	ZERO_STRUCT(response);
+
+	strncpy(request.data.sid, user_sid,sizeof(request.data.sid) - 1);
+	request.data.sid[sizeof(request.data.sid) - 1] =3D '\0';
+
+	ret =3D winbindd_request_response(WINBINDD_GETUSERSIDS, &request, &respon=
se);
+
+	if (ret !=3D NSS_STATUS_SUCCESS) {
+		goto done;
+	}
+
+	if (buf_size < response.length - sizeof(response)) {
+		ret =3D NSS_STATUS_TRYAGAIN;
+		errno =3D *errnop =3D ERANGE;
+		goto done;
+	}
+
+	*num_groups =3D response.data.num_entries;
+	*group_sids =3D buffer;
+	memcpy(buffer, response.extra_data.data, response.length - sizeof(respons=
e));
+	errno =3D *errnop =3D 0;
+=09
+ done:
+	free_response(&response);
+	return ret;
+}
+
+
+/* map a user or group name to a SID string */
+_PUBLIC_ NSS_STATUS _nss_winbind_nametosid(const char *name, char **sid,
+			char *buffer, size_t buflen, int *errnop)
+{
+	NSS_STATUS ret;
+	struct winbindd_response response;
+	struct winbindd_request request;
+
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: nametosid %s\n", getpid(), name);
+#endif
+
+	ZERO_STRUCT(response);
+	ZERO_STRUCT(request);
+
+	strncpy(request.data.name.name, name,=20
+		sizeof(request.data.name.name) - 1);
+	request.data.name.name[sizeof(request.data.name.name) - 1] =3D '\0';
+
+	ret =3D winbindd_request_response(WINBINDD_LOOKUPNAME, &request, &respons=
e);
+	if (ret !=3D NSS_STATUS_SUCCESS) {
+		*errnop =3D errno =3D EINVAL;
+		goto failed;
+	}
+
+	if (buflen < strlen(response.data.sid.sid)+1) {
+		ret =3D NSS_STATUS_TRYAGAIN;
+		*errnop =3D errno =3D ERANGE;
+		goto failed;
+	}
+
+	*errnop =3D errno =3D 0;
+	*sid =3D buffer;
+	strcpy(*sid, response.data.sid.sid);
+
+failed:
+	free_response(&response);
+	return ret;
+}
+
+/* map a sid string to a user or group name */
+_PUBLIC_ NSS_STATUS _nss_winbind_sidtoname(const char *sid, char **name,
+			char *buffer, size_t buflen, int *errnop)
+{
+	NSS_STATUS ret;
+	struct winbindd_response response;
+	struct winbindd_request request;
+	static char sep_char;
+	unsigned needed;
+
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: sidtoname %s\n", getpid(), sid);
+#endif
+
+	ZERO_STRUCT(response);
+	ZERO_STRUCT(request);
+
+	/* we need to fetch the separator first time through */
+	if (!sep_char) {
+		ret =3D winbindd_request_response(WINBINDD_INFO, &request, &response);
+		if (ret !=3D NSS_STATUS_SUCCESS) {
+			*errnop =3D errno =3D EINVAL;
+			goto failed;
+		}
+
+		sep_char =3D response.data.info.winbind_separator;
+		free_response(&response);
+	}
+
+
+	strncpy(request.data.sid, sid,=20
+		sizeof(request.data.sid) - 1);
+	request.data.sid[sizeof(request.data.sid) - 1] =3D '\0';
+
+	ret =3D winbindd_request_response(WINBINDD_LOOKUPSID, &request, &response=
);
+	if (ret !=3D NSS_STATUS_SUCCESS) {
+		*errnop =3D errno =3D EINVAL;
+		goto failed;
+	}
+
+	needed =3D=20
+		strlen(response.data.name.dom_name) +
+		strlen(response.data.name.name) + 2;
+
+	if (buflen < needed) {
+		ret =3D NSS_STATUS_TRYAGAIN;
+		*errnop =3D errno =3D ERANGE;
+		goto failed;
+	}
+
+	snprintf(buffer, needed, "%s%c%s",=20
+		 response.data.name.dom_name,
+		 sep_char,
+		 response.data.name.name);
+
+	*name =3D buffer;
+	*errnop =3D errno =3D 0;
+
+failed:
+	free_response(&response);
+	return ret;
+}
+
+/* map a sid to a uid */
+_PUBLIC_ NSS_STATUS _nss_winbind_sidtouid(const char *sid, uid_t *uid,
+				int *errnop)
+{
+	NSS_STATUS ret;
+	struct winbindd_response response;
+	struct winbindd_request request;
+
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: sidtouid %s\n", getpid(), sid);
+#endif
+
+	ZERO_STRUCT(request);
+	ZERO_STRUCT(response);
+
+	strncpy(request.data.sid, sid, sizeof(request.data.sid) - 1);
+	request.data.sid[sizeof(request.data.sid) - 1] =3D '\0';
+
+	ret =3D winbindd_request_response(WINBINDD_SID_TO_UID, &request, &respons=
e);
+	if (ret !=3D NSS_STATUS_SUCCESS) {
+		*errnop =3D errno =3D EINVAL;
+		goto failed;
+	}
+
+	*uid =3D response.data.uid;
+
+failed:
+	return ret;
+}
+
+/* map a sid to a gid */
+_PUBLIC_ NSS_STATUS _nss_winbind_sidtogid(const char *sid, gid_t *gid,
+				int *errnop)
+{
+	NSS_STATUS ret;
+	struct winbindd_response response;
+	struct winbindd_request request;
+
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5d]: sidtogid %s\n", getpid(), sid);
+#endif
+
+	ZERO_STRUCT(request);
+	ZERO_STRUCT(response);
+
+	strncpy(request.data.sid, sid, sizeof(request.data.sid) - 1);
+	request.data.sid[sizeof(request.data.sid) - 1] =3D '\0';
+
+	ret =3D winbindd_request_response(WINBINDD_SID_TO_GID, &request, &respons=
e);
+	if (ret !=3D NSS_STATUS_SUCCESS) {
+		*errnop =3D errno =3D EINVAL;
+		goto failed;
+	}
+
+	*gid =3D response.data.gid;
+
+failed:
+	return ret;
+}
+
+/* map a uid to a SID string */
+_PUBLIC_ NSS_STATUS _nss_winbind_uidtosid(uid_t uid, char **sid, char *buf=
fer,
+		      size_t buflen, int *errnop)
+{
+	NSS_STATUS ret;
+	struct winbindd_response response;
+	struct winbindd_request request;
+
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5u]: uidtosid %u\n", (unsigned int)getpid(), (unsigned=
 int)uid);
+#endif
+
+	ZERO_STRUCT(response);
+	ZERO_STRUCT(request);
+
+	request.data.uid =3D uid;
+
+	ret =3D winbindd_request_response(WINBINDD_UID_TO_SID, &request, &respons=
e);
+	if (ret !=3D NSS_STATUS_SUCCESS) {
+		*errnop =3D errno =3D EINVAL;
+		goto failed;
+	}
+
+	if (buflen < strlen(response.data.sid.sid)+1) {
+		ret =3D NSS_STATUS_TRYAGAIN;
+		*errnop =3D errno =3D ERANGE;
+		goto failed;
+	}
+
+	*errnop =3D errno =3D 0;
+	*sid =3D buffer;
+	strcpy(*sid, response.data.sid.sid);
+
+failed:
+	free_response(&response);
+	return ret;
+}
+
+/* map a gid to a SID string */
+_PUBLIC_ NSS_STATUS _nss_winbind_gidtosid(gid_t gid, char **sid, char *buf=
fer,
+		      size_t buflen, int *errnop)
+{
+	NSS_STATUS ret;
+	struct winbindd_response response;
+	struct winbindd_request request;
+
+#ifdef DEBUG_NSS
+	fprintf(stderr, "[%5u]: gidtosid %u\n", (unsigned int)getpid(), (unsigned=
 int)gid);
+#endif
+
+	ZERO_STRUCT(response);
+	ZERO_STRUCT(request);
+
+	request.data.gid =3D gid;
+
+	ret =3D winbindd_request_response(WINBINDD_GID_TO_SID, &request, &respons=
e);
+	if (ret !=3D NSS_STATUS_SUCCESS) {
+		*errnop =3D errno =3D EINVAL;
+		goto failed;
+	}
+
+	if (buflen < strlen(response.data.sid.sid)+1) {
+		ret =3D NSS_STATUS_TRYAGAIN;
+		*errnop =3D errno =3D ERANGE;
+		goto failed;
+	}
+
+	*errnop =3D errno =3D 0;
+	*sid =3D buffer;
+	strcpy(*sid, response.data.sid.sid);
+
+failed:
+	free_response(&response);
+	return ret;
+}

--Boundary-01=_jpifGSywG5hUnvE--

--nextPart1474115.WqjqSj4VgY
Content-Type: application/pgp-signature

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.7 (GNU/Linux)

iD8DBQBGfipjEKXX/bF2FpQRAuZ3AJ9jEg3IFDciP8iL/Cbl07GN6ms+uwCfe2QT
p84dOP9yRQvRivVERjw+k5Q=
=5Ijr
-----END PGP SIGNATURE-----

--nextPart1474115.WqjqSj4VgY--

