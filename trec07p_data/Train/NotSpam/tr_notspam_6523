From perl6-all-return-81023-ktwarwic=speedy.uwaterloo.ca@perl.org  Tue May  1 13:33:47 2007
Return-Path: <perl6-all-return-81023-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l41HXkb9010103
	for <ktwarwic@flax9.uwaterloo.ca>; Tue, 1 May 2007 13:33:46 -0400
Received: (qmail 6564 invoked by uid 514); 1 May 2007 16:02:30 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 6559 invoked from network); 1 May 2007 16:02:29 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: domain of lrpalmer@gmail.com designates 64.233.162.233 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=WTNRTNX7smOfBtl41kDl2NPPDat5nup6nNiPFko8bAnvs4VZGAYxvHMRSnZwvWvBGZf06cLjihDfbWslQQLLj/CDuXSFiz8uuP6RbjAj8RBMlIDRdmqJerCB3arfXkfPXgbvC7YSqinL/ARsbkbFSTAPdbRElxIP3ASX+7pmMsc=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=spOoWsovDz4m4Zot6L6cNj98whQANUZ4rfuZm1JH+s1Ucd1iliTKrG3ZyNQUQeinuV6BsHlURVmwRuspBupQ7JKy5MnlE4fl5GoBkizBpvEm0TEIdZBVXmv1bXAnGdXOzWbEwZy1qblZbS2P9QaMcGMwG1HwoQ8whJqitmzNAPE=
Message-ID: <7ca3f0160705010901w657e7db0g61944f76457ace36@mail.gmail.com>
Date: Tue, 1 May 2007 10:01:01 -0600
From: "Luke Palmer" <lrpalmer@gmail.com>
To: Smylers <Smylers@stripey.com>
Subject: Re: Should a dirhandle be a filehandle-like iterator?
Cc: perl6-language@perl.org
In-Reply-To: <20070415163224.GG8972@stripey.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <130420071943232288%brian.d.foy@gmail.com>
	 <ef30550b0704131808w791c236dp641f6f034d0833d1@mail.gmail.com>
	 <ef30550b0704131900h47655784h225d629c69754872@mail.gmail.com>
	 <1176520482.5022.145.camel@beast.home.broadwell.org>
	 <20070415171632.GD2899@lupus.perlwolf.com>
	 <20070415163224.GG8972@stripey.com>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
Status: O
Content-Length: 1682
Lines: 38

On 5/1/07, Smylers <Smylers@stripey.com> wrote:
> What are the situations in which a programmer really needs to open
> something but doesn't know wether that thing is a file, a directory, or
> a URL?  I'm still unpersuaded this is sensible default behaviour.

Lots of times.  It's an agnosticism, meaning that you can write a
module which opens things and it doesn't have to know what it's
opening; as a matter of fact, it doesn't even have to know what kinds
of things it's *capable* of opening.  That's powerful.

The point is, even though opening a file and opening a URL are
reasonably different things, they are both the same logical operation,
so they can be abstracted.  Not abstracting them will either cause
modules to have to take a "type of file" parameter whenever they take
a file, or will lead to code like this:

    my $fh = do given $file {
        when /<url>/ { openurl($file) }
        default       { open($file) }
    }

And the programmer of this module may not have been aware that he
could operate on directories, even though it's just some sort of line
processing module.

Anyway, my point is that the concept of opening something is
abstractable, and not abstracting it means that everyone has to
abstract it separately.

And please don't argue from the standpoint of security holes. Security
holes are possible in every language which talks to the outside world.
 Taint mode is a pretty good way to keep security holes out of a
complex, rich language like Perl.  But if you really want to be free
of security holes, you either have to make a language which doesn't do
anything, or make a language in which everyone can be an expert within
an hour.

Luke

