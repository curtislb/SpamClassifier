From samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org  Tue Apr 24 13:31:40 2007
Return-Path: <samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org>
Received: from lists.samba.org (mail.samba.org [66.70.73.150])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l3OHVd6w016762
	for <ktwarwic@speedy.uwaterloo.ca>; Tue, 24 Apr 2007 13:31:39 -0400
Received: from dp.samba.org (localhost [127.0.0.1])
	by lists.samba.org (Postfix) with ESMTP id 915B116398F
	for <ktwarwic@speedy.uwaterloo.ca>; Tue, 24 Apr 2007 17:31:39 +0000 (GMT)
X-Spam-Checker-Version: SpamAssassin 3.1.7 (2006-10-05) on dp.samba.org
X-Spam-Level: 
X-Spam-Status: No, score=-0.5 required=3.8 tests=AWL,BAYES_00,
	FORGED_RCVD_HELO,RCVD_IN_DSBL autolearn=no version=3.1.7
X-Original-To: samba-cvs@samba.org
Delivered-To: samba-cvs@samba.org
Received: from smtp-vbr4.xs4all.nl (smtp-vbr4.xs4all.nl [194.109.24.24])
	by lists.samba.org (Postfix) with ESMTP id 092AE162ACB
	for <samba-cvs@samba.org>; Tue, 24 Apr 2007 17:31:33 +0000 (GMT)
Received: from rhonwyn.vernstok.nl (a62-251-123-16.adsl.xs4all.nl
	[62.251.123.16])
	by smtp-vbr4.xs4all.nl (8.13.8/8.13.8) with ESMTP id l3OHVTLm053431
	for <samba-cvs@samba.org>; Tue, 24 Apr 2007 19:31:30 +0200 (CEST)
	(envelope-from jelmer@vernstok.nl)
Received: from localhost (localhost [127.0.0.1])
	by rhonwyn.vernstok.nl (Postfix) with ESMTP id B9E8C39A5BC
	for <samba-cvs@samba.org>; Tue, 24 Apr 2007 19:31:28 +0200 (CEST)
X-Virus-Scanned: by XS4ALL Virus Scanner
Received: from rhonwyn.vernstok.nl ([127.0.0.1])
	by localhost (rhonwyn.vernstok.nl [127.0.0.1]) (amavisd-new, port 10024)
	with SMTP id oc2j+3DlEVER for <samba-cvs@samba.org>;
	Tue, 24 Apr 2007 19:27:25 +0200 (CEST)
Received: from ganieda.vernstok.nl (localhost [127.0.0.1])
	by rhonwyn.vernstok.nl (Postfix) with ESMTP id AC88539A5BE
	for <samba-cvs@samba.org>; Tue, 24 Apr 2007 18:40:21 +0200 (CEST)
Received: by ganieda.vernstok.nl (Postfix, from userid 1000)
	id 4C5645C4747; Tue, 24 Apr 2007 16:48:03 +0200 (CEST)
To: samba-cvs@samba.org
From: Jelmer Vernooij <jelmer@samba.org>
Message-Id: <20070424144803.4C5645C4747@ganieda.vernstok.nl>
Date: Tue, 24 Apr 2007 16:48:03 +0200 (CEST)
Subject: Rev 12000: Add support for dgram to socket_ipv6. No tests yet... in
	file:///home/jelmer/bzr.samba/SAMBA_4_0/
X-BeenThere: samba-cvs@lists.samba.org
X-Mailman-Version: 2.1.5
Precedence: list
Reply-To: samba-technical@lists.samba.org
List-Id: Samba CVS and subversion commit messages <samba-cvs.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/archive/samba-cvs>
List-Post: <mailto:samba-cvs@lists.samba.org>
List-Help: <mailto:samba-cvs-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=subscribe>
Sender: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Errors-To: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Status: O
Content-Length: 4156
Lines: 152

At file:///home/jelmer/bzr.samba/SAMBA_4_0/

------------------------------------------------------------
revno: 12000
revision-id: jelmer@samba.org-20070424144745-up03kuuo92hba8ji
parent: svn-v2:22501@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0
committer: Jelmer Vernooij <jelmer@samba.org>
branch nick: SAMBA_4_0
timestamp: Tue 2007-04-24 16:47:45 +0200
message:
  Add support for dgram to socket_ipv6. No tests yet...
modified:
  source/lib/socket/socket_ipv6.c svn-v2:3329@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2fsocket%2fsocket_ipv6.c
=== modified file 'source/lib/socket/socket_ipv6.c'
--- a/source/lib/socket/socket_ipv6.c	2007-04-23 15:32:47 +0000
+++ b/source/lib/socket/socket_ipv6.c	2007-04-24 14:47:45 +0000
@@ -190,6 +190,11 @@
 	struct sockaddr_in cli_addr;
 	socklen_t cli_addr_len = sizeof(cli_addr);
 	int new_fd;
+	
+	if (sock->type != SOCKET_TYPE_STREAM) {
+		return NT_STATUS_INVALID_PARAMETER;
+	}
+
 
 	new_fd = accept(sock->fd, (struct sockaddr *)&cli_addr, &cli_addr_len);
 	if (new_fd == -1) {
@@ -249,6 +254,62 @@
 	return NT_STATUS_OK;
 }
 
+static NTSTATUS ipv6_recvfrom(struct socket_context *sock, void *buf, 
+			      size_t wantlen, size_t *nread, 
+			      TALLOC_CTX *addr_ctx, struct socket_address **_src)
+{
+	ssize_t gotlen;
+	struct sockaddr_in6 *from_addr;
+	socklen_t from_len = sizeof(*from_addr);
+	struct socket_address *src;
+	struct hostent *he;
+	
+	src = talloc(addr_ctx, struct socket_address);
+	if (!src) {
+		return NT_STATUS_NO_MEMORY;
+	}
+	
+	src->family = sock->backend_name;
+
+	from_addr = talloc(src, struct sockaddr_in6);
+	if (!from_addr) {
+		talloc_free(src);
+		return NT_STATUS_NO_MEMORY;
+	}
+
+	src->sockaddr = (struct sockaddr *)from_addr;
+
+	*nread = 0;
+
+	gotlen = recvfrom(sock->fd, buf, wantlen, 0, 
+			  src->sockaddr, &from_len);
+	if (gotlen == 0) {
+		talloc_free(src);
+		return NT_STATUS_END_OF_FILE;
+	} else if (gotlen == -1) {
+		talloc_free(src);
+		return map_nt_error_from_unix(errno);
+	}
+
+	src->sockaddrlen = from_len;
+
+	he = gethostbyaddr((void *)&from_addr->sin6_addr, sizeof(from_addr->sin6_addr), AF_INET6);
+	if (he == NULL) {
+		talloc_free(src);
+		return NT_STATUS_INTERNAL_ERROR;
+	}
+	src->addr = talloc_strdup(src, he->h_name);
+	if (src->addr == NULL) {
+		talloc_free(src);
+		return NT_STATUS_NO_MEMORY;
+	}
+	src->port = ntohs(from_addr->sin6_port);
+
+	*nread	= gotlen;
+	*_src	= src;
+	return NT_STATUS_OK;
+}
+
 static NTSTATUS ipv6_tcp_send(struct socket_context *sock, 
 			      const DATA_BLOB *blob, size_t *sendlen)
 {
@@ -266,6 +327,42 @@
 	return NT_STATUS_OK;
 }
 
+static NTSTATUS ipv6_sendto(struct socket_context *sock, 
+			    const DATA_BLOB *blob, size_t *sendlen, 
+			    const struct socket_address *dest_addr)
+{
+	ssize_t len;
+
+	if (dest_addr->sockaddr) {
+		len = sendto(sock->fd, blob->data, blob->length, 0, 
+			     dest_addr->sockaddr, dest_addr->sockaddrlen);
+	} else {
+		struct sockaddr_in6 srv_addr;
+		struct in6_addr addr;
+		
+		ZERO_STRUCT(srv_addr);
+		addr                     = interpret_addr6(dest_addr->addr);
+		if (addr.s6_addr == 0) {
+			return NT_STATUS_HOST_UNREACHABLE;
+		}
+		srv_addr.sin6_addr = addr;
+		srv_addr.sin6_port        = htons(dest_addr->port);
+		srv_addr.sin6_family      = PF_INET6;
+		
+		*sendlen = 0;
+		
+		len = sendto(sock->fd, blob->data, blob->length, 0, 
+			     (struct sockaddr *)&srv_addr, sizeof(srv_addr));
+	}
+	if (len == -1) {
+		return map_nt_error_from_unix(errno);
+	}	
+
+	*sendlen = len;
+
+	return NT_STATUS_OK;
+}
+
 static NTSTATUS ipv6_tcp_set_option(struct socket_context *sock, const char *option, const char *val)
 {
 	set_socket_options(sock->fd, option);
@@ -410,6 +507,8 @@
 	.fn_listen		= ipv6_tcp_listen,
 	.fn_accept		= ipv6_tcp_accept,
 	.fn_recv		= ipv6_tcp_recv,
+	.fn_recvfrom 	= ipv6_recvfrom,
+	.fn_sendto		= ipv6_sendto,
 	.fn_send		= ipv6_tcp_send,
 	.fn_close		= ipv6_tcp_close,
 	.fn_pending		= ipv6_pending,
@@ -425,8 +524,5 @@
 
 const struct socket_ops *socket_ipv6_ops(enum socket_type type)
 {
-	if (type != SOCKET_TYPE_STREAM) {
-		return NULL;
-	}
 	return &ipv6_tcp_ops;
 }

