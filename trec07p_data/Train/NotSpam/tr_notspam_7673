From sugar-bounces@laptop.org  Fri May  4 14:16:37 2007
Return-Path: <sugar-bounces@laptop.org>
Received: from pedal.laptop.org (pedal.laptop.org [18.85.2.148])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l44IGbqD018483
	for <ktwarwic@speedy.uwaterloo.ca>; Fri, 4 May 2007 14:16:37 -0400
Received: from pedal.laptop.org (localhost [127.0.0.1])
	by pedal.laptop.org (Postfix) with ESMTP id A6FAE4EF40;
	Fri,  4 May 2007 14:16:32 -0400 (EDT)
X-Original-To: sugar@laptop.org
Delivered-To: sugar@laptop.org
Received: from spam.laptop.org (spam.laptop.org [18.85.46.23])
	by pedal.laptop.org (Postfix) with ESMTP id BC9B14EF40
	for <sugar@laptop.org>; Fri,  4 May 2007 14:16:31 -0400 (EDT)
X-ASG-Debug-ID: 1178302592-4bd400270000-3Xmyjt
X-Barracuda-URL: http://18.85.46.23:8000/cgi-bin/mark.cgi
X-Barracuda-Connect: dhansak.collabora.co.uk[195.10.223.134]
X-Barracuda-Start-Time: 1178302592
X-Barracuda-Encrypted: DHE-RSA-AES256-SHA
Received: from dhansak.collabora.co.uk (dhansak.collabora.co.uk
	[195.10.223.134])
	(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by spam.laptop.org (Spam Firewall) with ESMTP id CD77B83F7
	for <sugar@laptop.org>; Fri,  4 May 2007 14:16:32 -0400 (EDT)
Received: by dhansak.collabora.co.uk (Postfix, from userid 1014)
	id 05D94308FD38; Fri,  4 May 2007 19:16:31 +0100 (BST)
Date: Fri, 4 May 2007 19:16:22 +0100
From: Simon McVittie <simon.mcvittie@collabora.co.uk>
To: sugar@laptop.org
X-ASG-Orig-Subj: [patch][connect-activity] Update to high-level API in latest
	dbus-python
Message-ID: <20070504181622.GA28811@celebrin.pseudorandom.co.uk>
MIME-Version: 1.0
User-Agent: Mutt/1.5.13 (2006-08-11)
X-Barracuda-Bayes: INNOCENT GLOBAL 0.0000 1.0000 -2.0210
X-Barracuda-Virus-Scanned: by Barracuda Spam Firewall at laptop.org
X-Barracuda-Spam-Score: -2.02
X-Barracuda-Spam-Status: No, SCORE=-2.02 using global scores of TAG_LEVEL=3.5
	QUARANTINE_LEVEL=1000.0 KILL_LEVEL=5.5 tests=
X-Barracuda-Spam-Report: Code version 3.1, rules version 3.1.16048
	Rule breakdown below
	pts rule name              description
	---- ----------------------
	--------------------------------------------------
Subject: [sugar] [patch][connect-activity] Update to high-level API in
	latest dbus-python
X-BeenThere: sugar@laptop.org
X-Mailman-Version: 2.1.9
Precedence: list
List-Id: "Discussion of OLPC design,
	desktop platform and user experience" <sugar.laptop.org>
List-Unsubscribe: <http://mailman.laptop.org/mailman/listinfo/sugar>,
	<mailto:sugar-request@laptop.org?subject=unsubscribe>
List-Archive: <http://mailman.laptop.org/pipermail/sugar>
List-Post: <mailto:sugar@laptop.org>
List-Help: <mailto:sugar-request@laptop.org?subject=help>
List-Subscribe: <http://mailman.laptop.org/mailman/listinfo/sugar>,
	<mailto:sugar-request@laptop.org?subject=subscribe>
Content-Type: multipart/mixed; boundary="===============5033288371074613908=="
Mime-version: 1.0
Sender: sugar-bounces@laptop.org
Errors-To: sugar-bounces@laptop.org


--===============5033288371074613908==
Content-Type: multipart/signed; micalg=pgp-sha1;
	protocol="application/pgp-signature"; boundary="8X7/QrJGcKSMr1RN"
Content-Disposition: inline


--8X7/QrJGcKSMr1RN
Content-Type: multipart/mixed; boundary="kXdP64Ggrk/fb43R"
Content-Disposition: inline


--kXdP64Ggrk/fb43R
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

The attached patches update the Connect game activity to use the new
high-level API in the latest git dbus-python, rather than the existing
low-level and non-public interfaces that Daf was previously using.

There's still a lot of room for improvement - my plan is to move some of
the code into telepathy-python - but it's considerably cleaner than
before, and uses the familiar dbus-python proxy and service objects
on the Tubes connection.

Also available from:
git+ssh://people.freedesktop.org/home/smcv/public_html/connect-activity.git
http://people.freedesktop.org/~smcv/connect-activity.git

Daf, could you review these? If you're happy with them, pull from one of the
above repos.

--=20
Simon McVittie, Collabora Ltd.: http://www.collabora.co.uk/

--kXdP64Ggrk/fb43R
Content-Type: text/x-diff; charset=us-ascii
Content-Disposition: attachment; filename="0001-gtkui.py-parse-.account-files-better.patch"
Content-Transfer-Encoding: quoted-printable

=46rom d2fe241bac2515b6cb27073880b1bb75cf50d0a5 Mon Sep 17 00:00:00 2001
=46rom: Simon McVittie <simon.mcvittie@collabora.co.uk>
Date: Fri, 4 May 2007 15:01:20 +0100
Subject: [PATCH] gtkui.py: parse .account files better

---
 gtkui.py |   63 +++++++++++++++++++++++++++++++++++++---------------------=
---
 1 files changed, 38 insertions(+), 25 deletions(-)

diff --git a/gtkui.py b/gtkui.py
index 10a9e42..27e950a 100644
--- a/gtkui.py
+++ b/gtkui.py
@@ -8,36 +8,43 @@ import telepathy
 import gridwidget
 import client
=20
-def guess(x):
-    if x.lower() in ('true', 'false'):
-        return
-
-    if x =3D=3D 'true':
-        return True
-
-    if x =3D=3D 'false':
-        return False
-
-    try:
-        return int(x)
-    except ValueError:
-        pass
-
-    return x
+def decode(x, sig):
+    # XXX: dbus-python ought to do most of the work for this
+    if sig =3D=3D 'b':
+        x =3D x.lower()
+        if x in ('true', '1'):
+            return True
+        if x in ('false', '0'):
+            return False
+        raise ValueError('Not true or false: %r' % x)
+    elif sig =3D=3D 'n':
+        return dbus.Int16(x)
+    elif sig =3D=3D 'q':
+        return dbus.UInt16(x)
+    elif sig =3D=3D 'i':
+        return dbus.Int32(x)
+    elif sig =3D=3D 'u':
+        return dbus.UInt32(x)
+    elif sig =3D=3D 'x':
+        return dbus.Int64(x)
+    elif sig =3D=3D 't':
+        return dbus.UInt64(x)
+    elif sig =3D=3D 'd':
+        return dbus.Double(x)
+    elif sig =3D=3D 's':
+        return dbus.UTF8String(x)
+    else:
+        raise TypeError('Unhandled D-Bus signature %r' % sig)
=20
 def read_account(path):
     account =3D {}
=20
     for line in file(path):
         key, value =3D line.split(': ', 1)
-        account[key] =3D guess(value[:-1])
+        account[key] =3D value.rstrip('\r\n')
=20
-    assert 'manager' in account
-    assert 'protocol' in account
-    manager =3D account['manager']
-    protocol =3D account['protocol']
-    del account['manager']
-    del account['protocol']
+    manager =3D account.pop('manager')
+    protocol =3D account.pop('protocol')
     return manager, protocol, account
=20
 def main():
@@ -45,8 +52,14 @@ def main():
     print params
     reg =3D telepathy.client.ManagerRegistry()
     reg.LoadManagers()
-    mgr =3D reg.GetManager('gabble')
-    conn =3D mgr.request_connection('jabber', params)
+    mgr =3D reg.GetManager(manager)
+    param_specs =3D mgr.GetParameters(protocol)
+    for name, flags, sig, default in param_specs:
+        if name in params:
+            value =3D params[name]
+            value =3D decode(value, sig)
+            params[name] =3D value
+    conn =3D mgr.request_connection(protocol, params)
     #assert CHANNEL_TYPE_TUBES in conn
=20
     window =3D gtk.Window()
--=20
1.5.1.3


--kXdP64Ggrk/fb43R
Content-Type: text/x-diff; charset=us-ascii
Content-Disposition: attachment; filename="0002-Start-using-high-level-dbus-python-API.patch"
Content-Transfer-Encoding: quoted-printable

=46rom 97d2c6890ca613f73cd7d879025ffe60ee6b582e Mon Sep 17 00:00:00 2001
=46rom: Simon McVittie <simon.mcvittie@collabora.co.uk>
Date: Fri, 4 May 2007 15:01:54 +0100
Subject: [PATCH] Start using high-level dbus-python API

---
 client.py |   50 ++++++++++++++++++++++++++------------------------
 1 files changed, 26 insertions(+), 24 deletions(-)

diff --git a/client.py b/client.py
index 5a27dbd..7373f07 100644
--- a/client.py
+++ b/client.py
@@ -1,25 +1,28 @@
-
 import pprint
=20
-import dbus.glib
 import gtk
 import telepathy
=20
-# Needed for now, as dbus-python's high-level API doesn't support connecti=
ng
-# to arbitrary addresses, or daemonless connections.
 import _dbus_bindings
 import dbus.lowlevel
+from dbus.connection import Connection
+from dbus.mainloop.glib import DBusGMainLoop
+from dbus.service import Object
+
+from telepathy.interfaces import CHANNEL_TYPE_TUBES, \
+        CHANNEL_TYPE_TEXT, CONN_INTERFACE, CHANNEL_INTERFACE_GROUP
+from telepathy.constants import TUBE_TYPE_DBUS, \
+        TUBE_STATE_LOCAL_PENDING, TUBE_STATE_REMOTE_PENDING, TUBE_STATE_OP=
EN, \
+        CONNECTION_STATUS_CONNECTED, HANDLE_TYPE_ROOM
+
=20
-CHANNEL_TYPE_TUBES =3D "org.freedesktop.Telepathy.Channel.Type.Tubes"
+# XXX: I'm not convinced this is in the right namespace
 SERVICE =3D "org.freedesktop.Telepathy.Tube.Connect"
 PATH =3D "/org/freedesktop/Telepathy/Tube/Connect"
-ROOM =3D "test@conference.olpc.collabora.co.uk"
=20
-TUBE_TYPE_DBUS =3D 0
+ROOM =3D "test@conference.olpc.collabora.co.uk"
=20
-TUBE_STATE_LOCAL_PENDING =3D 0
-TUBE_STATE_REMOTE_PENDING =3D 1
-TUBE_STATE_OPEN =3D 2
+dbus_main_loop =3D DBusGMainLoop(set_as_default=3DTrue)
=20
 def print_dbus_message(msg):
     print 'got %s' % (msg.__class__.__name__)
@@ -45,28 +48,28 @@ class ConnectClient:
=20
         event_widget.connect('key-press-event', self.key_press_cb)
=20
-        conn[telepathy.CONN_INTERFACE].connect_to_signal('StatusChanged',
+        conn[CONN_INTERFACE].connect_to_signal('StatusChanged',
             self.status_changed_cb)
=20
-        if conn.GetStatus() =3D=3D telepathy.CONNECTION_STATUS_CONNECTED:
+        if conn.GetStatus() =3D=3D CONNECTION_STATUS_CONNECTED:
             self.connected_cb()
=20
     def key_press_cb(self, widget, event):
-        if gtk.gdk.keyval_name(event.keyval) in ('Escape', 'q'):
+        if event.keyval in (gtk.keysyms.Escape, gtk.keysyms.q):
             gtk.main_quit()
=20
         if self.grid.selected_column is None:
             return
=20
-        if gtk.gdk.keyval_name(event.keyval) in ('Left',):
+        if event.keyval in (gtk.keysyms.Left,):
             if self.grid.selected_column > 0:
                 self.grid.selected_column -=3D 1
                 redraw(self.grid)
-        elif gtk.gdk.keyval_name(event.keyval) in ('Right',):
+        elif event.keyval in (gtk.keysyms.Right,):
             if self.grid.selected_column < 6:
                 self.grid.selected_column +=3D 1
                 redraw(self.grid)
-        elif gtk.gdk.keyval_name(event.keyval) in ('Down', 'space'):
+        elif event.keyval in (gtk.keysyms.Down, gtk.keysyms.space):
             if self.grid.insert(self.grid.selected_column, self.player_id):
                 redraw(self.grid)
                 msg =3D dbus.lowlevel.SignalMessage(PATH, SERVICE, 'Insert=
')
@@ -75,22 +78,21 @@ class ConnectClient:
                 self.grid.selected_column =3D None
=20
     def status_changed_cb(self, status, reason):
-        if status =3D=3D telepathy.CONNECTION_STATUS_CONNECTED:
+        if status =3D=3D CONNECTION_STATUS_CONNECTED:
             self.connected_cb()
=20
     def connected_cb(self):
         print 'connected'
-        handle =3D self.conn.RequestHandles(
-            telepathy.CONNECTION_HANDLE_TYPE_ROOM, [ROOM])[0]
-        text_chan =3D self.conn.request_channel(telepathy.CHANNEL_TYPE_TEX=
T,
-            telepathy.CONNECTION_HANDLE_TYPE_ROOM, handle, True)
+        handle =3D self.conn.RequestHandles(HANDLE_TYPE_ROOM, [ROOM])[0]
+        text_chan =3D self.conn.request_channel(CHANNEL_TYPE_TEXT,
+            HANDLE_TYPE_ROOM, handle, True)
         current, lp, rp =3D map(lambda x: map(int, x),
-            text_chan[telepathy.CHANNEL_INTERFACE_GROUP].GetAllMembers())
+            text_chan[CHANNEL_INTERFACE_GROUP].GetAllMembers())
         print 'activity members: %r, %r, %r' % (current, lp, rp)
         self.tubes_self_handle =3D text_chan[
-            telepathy.CHANNEL_INTERFACE_GROUP].GetSelfHandle()
+            CHANNEL_INTERFACE_GROUP].GetSelfHandle()
         tubes_chan =3D self.conn.request_channel(
-            CHANNEL_TYPE_TUBES, telepathy.CONNECTION_HANDLE_TYPE_ROOM, han=
dle,
+            CHANNEL_TYPE_TUBES, HANDLE_TYPE_ROOM, handle,
             True)
         tubes_chan[CHANNEL_TYPE_TUBES].connect_to_signal('NewTube',
             self.new_tube_cb)
--=20
1.5.1.3


--kXdP64Ggrk/fb43R
Content-Type: text/x-diff; charset=us-ascii
Content-Disposition: attachment; filename="0003-client.py-split-out-game-code-into-a-service.Object.patch"
Content-Transfer-Encoding: quoted-printable

=46rom bdc429db799fb8f18a48ba75fd81e673bb50da01 Mon Sep 17 00:00:00 2001
=46rom: Simon McVittie <simon.mcvittie@collabora.co.uk>
Date: Fri, 4 May 2007 17:40:20 +0100
Subject: [PATCH] client.py: split out game code into a service.Object

---
 client.py |  227 +++++++++++++++++++++++++--------------------------------=
----
 1 files changed, 93 insertions(+), 134 deletions(-)

diff --git a/client.py b/client.py
index 7373f07..9f9cfa0 100644
--- a/client.py
+++ b/client.py
@@ -1,13 +1,13 @@
+import logging
 import pprint
=20
 import gtk
 import telepathy
=20
-import _dbus_bindings
-import dbus.lowlevel
+from dbus import Interface
 from dbus.connection import Connection
 from dbus.mainloop.glib import DBusGMainLoop
-from dbus.service import Object
+from dbus.service import Object, method, signal
=20
 from telepathy.interfaces import CHANNEL_TYPE_TUBES, \
         CHANNEL_TYPE_TEXT, CONN_INTERFACE, CHANNEL_INTERFACE_GROUP
@@ -18,12 +18,16 @@ from telepathy.constants import TUBE_TYPE_DBUS, \
=20
 # XXX: I'm not convinced this is in the right namespace
 SERVICE =3D "org.freedesktop.Telepathy.Tube.Connect"
+IFACE =3D SERVICE
 PATH =3D "/org/freedesktop/Telepathy/Tube/Connect"
=20
 ROOM =3D "test@conference.olpc.collabora.co.uk"
=20
 dbus_main_loop =3D DBusGMainLoop(set_as_default=3DTrue)
=20
+logging.basicConfig()
+_logger =3D logging.getLogger('connect-activity.client')
+
 def print_dbus_message(msg):
     print 'got %s' % (msg.__class__.__name__)
     print '  sender: %r' % msg.get_sender()
@@ -37,11 +41,91 @@ def redraw(grid):
     """Utility function to force a redraw of a Gtk widget."""
     grid.window.invalidate_rect(grid.get_allocation(), False)
=20
+class ConnectGame(Object):
+    def __init__(self, tube, grid, self_handle, initiator, dbus_names):
+        super(ConnectGame, self).__init__(tube, PATH)
+        self.tube =3D tube
+        self.grid =3D grid
+
+        # Initiator is player 1, other player is player 2.
+
+        self.self_handle =3D self_handle
+        self.initiator =3D initiator
+
+        if initiator =3D=3D self_handle:
+            self.player_id =3D 1
+        else:
+            opponent =3D self.tube.get_object(dbus_names[initiator], PATH)
+            self.opponent =3D Interface(opponent, IFACE)
+            self.opponent.Hello(reply_handler=3Dself.hello_cb,
+                error_handler=3Dself.error_cb)
+            self.player_id =3D 2
+
+        # XXX: care about signal sender
+        self.tube.add_signal_receiver(self.insert_cb, 'Insert', IFACE,
+            path=3DPATH)
+
+        print 'intiator: %d' % initiator
+        print 'self: %d' % self.self_handle
+        print 'player ID: %d' % self.player_id
+
+    def hello_cb(self, success):
+        self.opponent.GetGrid(reply_handler=3Dself.get_grid_cb,
+            error_handler=3Dself.error_cb)
+
+    def get_grid_cb(self, grid):
+        self.grid.grid =3D grid
+        redraw(self.grid)
+
+    def error_cb(self, e):
+        _logger.error('Error connecting to opponent:\n%s', e)
+
+    @method(dbus_interface=3DIFACE, in_signature=3D'', out_signature=3D'b')
+    def Hello(self):
+        self.grid.selected_column =3D 3
+        redraw(self.grid)
+        # XXX: return player ID too, to allow for swapping who goes first =
in
+        # for second and later games
+        return True
+
+    @method(dbus_interface=3DIFACE, in_signature=3D'', out_signature=3D'aa=
n')
+    def GetGrid(self):
+        return self.grid.grid
+
+    @signal(dbus_interface=3DIFACE, signature=3D'n')
+    def Insert(self, column):
+        assert column >=3D 0
+        assert column < 7
+
+    def insert_cb(self, column):
+        #print 'Insert: %r' % args
+
+        if self.grid.insert(column, self.get_active_player()):
+            if self.get_active_player() =3D=3D self.player_id:
+                # This should always be the case for 2 players, as we only=
 get
+                # this signal when the other player plays.
+                self.grid.selected_column =3D 3
+            redraw(self.grid)
+
+    def get_active_player(self):
+        count =3D {}
+
+        for row in self.grid.grid:
+            for player in row:
+                if player !=3D 0:
+                    count[player] =3D count.get(player, 0) + 1
+
+        if count.get(1, 0) > count.get(2, 0):
+            return 2
+        else:
+            return 1
+
+
 class ConnectClient:
     def __init__(self, conn, event_widget, grid):
         self.conn =3D conn
         self.grid =3D grid
-        self.dbus_conn =3D None
+        self.game =3D None
         self.tubes_self_handle =3D 0
         self.pending_calls =3D {}
         self.player_id =3D 0
@@ -72,9 +156,7 @@ class ConnectClient:
         elif event.keyval in (gtk.keysyms.Down, gtk.keysyms.space):
             if self.grid.insert(self.grid.selected_column, self.player_id):
                 redraw(self.grid)
-                msg =3D dbus.lowlevel.SignalMessage(PATH, SERVICE, 'Insert=
')
-                msg.append(self.grid.selected_column)
-                self.dbus_conn.send_message(msg)
+                self.game.Insert(self.grid.selected_column)
                 self.grid.selected_column =3D None
=20
     def status_changed_cb(self, status, reason):
@@ -138,16 +220,6 @@ class ConnectClient:
=20
         return None
=20
-    def dbus_call(self, dst, path, service, method, args, cb):
-        """Make an asynchronous D-Bus method call."""
-        msg =3D dbus.lowlevel.MethodCallMessage(dst, path, service, method)
-        id =3D self.dbus_conn.send_message(msg)
-        self.pending_calls[id] =3D cb
-
-    def call_peer(self, method, args, cb):
-        self.dbus_call(self.dbus_names[self.initiator], PATH, SERVICE, met=
hod,
-            args, cb)
-
     def use_tube(self, id, initiator):
         print 'using tube %d' % id
         addr =3D self.tubes_chan[CHANNEL_TYPE_TUBES].GetDBusServerAddress(=
id)
@@ -157,29 +229,16 @@ class ConnectClient:
         print 'names:', pprint.pformat(list(self.dbus_names))
         assert self.tubes_self_handle in self.dbus_names
=20
-        conn =3D _dbus_bindings.Connection(addr)
-        conn.add_message_filter(self.message_cb)
-
-        self.dbus_conn =3D conn
-        self.initiator =3D initiator
-
-        # Initiator is player 1, other player is player 2.
+        conn =3D Connection(addr)
=20
-        if initiator =3D=3D self.tubes_self_handle:
-            self.player_id =3D 1
-        else:
-            self.call_peer('Hello', [], self.hello_cb)
-            self.player_id =3D 2
-
-        print 'intiator: %d' % initiator
-        print 'self: %d' % self.tubes_self_handle
-        print 'player ID: %d' % self.player_id
+        self.game =3D ConnectGame(conn, self.grid, self.tubes_self_handle,
+            initiator, self.dbus_names)
=20
     def new_tube_cb(self, id, initiator, type, service, parameters, state):
         print 'new tube: %r' % (
             (id, initiator, type, service, parameters, state),)
=20
-        if (self.dbus_conn is None and
+        if (self.game is None and
             type =3D=3D TUBE_TYPE_DBUS and
             service =3D=3D SERVICE):
=20
@@ -188,103 +247,3 @@ class ConnectClient:
                 self.tubes_chan[CHANNEL_TYPE_TUBES].AcceptTube(id)
=20
             self.use_tube(id, initiator)
-
-    def hello_cb(self, args):
-        #print 'Hello() -> %r' % args
-        self.call_peer('GetGrid', [], self.get_grid_cb)
-
-    def get_active_player(self):
-        count =3D {}
-
-        for row in self.grid.grid:
-            for player in row:
-                if player !=3D 0:
-                    count[player] =3D count.get(player, 0) + 1
-
-        if count.get(1, 0) > count.get(2, 0):
-            return 2
-        else:
-            return 1
-
-    def get_grid_cb(self, args):
-        self.grid.grid =3D args[0]
-        redraw(self.grid)
-
-    def message_cb_unsafe(self, conn, msg):
-        """This method is called when we receive a D-Bus message from the =
tube.
-
-        It does stuff that dbus-python will do for us once the high-level
-        API is fixed, namely mapping D-Bus messages to and from method cal=
ls.
-        """
-
-        print_dbus_message(msg)
-        dst =3D msg.get_destination()
-        reply_serial =3D msg.get_reply_serial()
-        interface =3D msg.get_interface()
-
-        # handle method replies
-        # XXX: handle errors better
-
-        if reply_serial in self.pending_calls:
-            self.pending_calls[reply_serial](msg.get_args_list())
-            del self.pending_calls[reply_serial]
-            return _dbus_bindings.HANDLER_RESULT_HANDLED
-
-        # handle method calls
-
-        if (msg.__class__ =3D=3D dbus.lowlevel.MethodCallMessage and
-            dst =3D=3D self.dbus_names[self.tubes_self_handle] and
-            interface =3D=3D SERVICE):
-            method =3D getattr(self, 'dbus_' + msg.get_member(), None)
-
-            if method:
-                # XXX: catch TypeError from wrong arity
-                args =3D method(*(msg.get_args_list()))
-                reply =3D dbus.lowlevel.MethodReturnMessage(msg)
-                reply.append(*args)
-                self.dbus_conn.send_message(reply)
-                return _dbus_bindings.HANDLER_RESULT_HANDLED
-
-        # handle signals
-
-        if (msg.__class__ =3D=3D dbus.lowlevel.SignalMessage and
-            interface =3D=3D SERVICE and
-            msg.get_sender() !=3D self.dbus_names[self.tubes_self_handle]):
-            handler =3D getattr(self, 'dbus_sig_' + msg.get_member(), None)
-
-            if handler:
-                handler(msg.get_sender(), msg.get_args_list())
-                return _dbus_bindings.HANDLER_RESULT_HANDLED
-
-        return _dbus_bindings.HANDLER_RESULT_NOT_YET_HANDLED
-
-    def message_cb(self, conn, msg):
-        try:
-            return self.message_cb_unsafe(conn, msg)
-        except Exception, e:
-            print e
-
-    # D-Bus signal handlers.
-
-    def dbus_sig_Insert(self, sender, args):
-        #print 'Insert: %r' % args
-
-        if self.grid.insert(args[0], self.get_active_player()):
-            if self.get_active_player() =3D=3D self.player_id:
-                # This should always be the case for 2 players, as we only=
 get
-                # this signal when the other player plays.
-                self.grid.selected_column =3D 3
-            redraw(self.grid)
-
-    # D-Bus service methods.
-
-    def dbus_Hello(self):
-        self.grid.selected_column =3D 3
-        redraw(self.grid)
-        # XXX: return player ID too, to allow for swapping who goes first =
in
-        # for second and later games
-        return [True]
-
-    def dbus_GetGrid(self):
-        return [self.grid.grid]
-
--=20
1.5.1.3


--kXdP64Ggrk/fb43R--

--8X7/QrJGcKSMr1RN
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: Digital signature
Content-Disposition: inline

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.6 (GNU/Linux)
Comment: OpenPGP key: http://www.pseudorandom.co.uk/2003/contact/ or pgp.net

iD8DBQFGO3h2WSc8zVUw7HYRAh4NAKCfqt6bTyrikIw0zwYLVAjYCKUqJwCgtzYs
eHQ9FB0k/iOIZ8n/YQPEgzA=
=1iR4
-----END PGP SIGNATURE-----

--8X7/QrJGcKSMr1RN--

--===============5033288371074613908==
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

_______________________________________________
Sugar mailing list
Sugar@laptop.org
http://mailman.laptop.org/mailman/listinfo/sugar

--===============5033288371074613908==--

