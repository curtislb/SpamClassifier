From beginners-return-92006-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu May 31 10:17:28 2007
Return-Path: <beginners-return-92006-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4VEHRhB028840
	for <ktwarwic@flax9.uwaterloo.ca>; Thu, 31 May 2007 10:17:27 -0400
Received: (qmail 4843 invoked by uid 514); 31 May 2007 14:17:16 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 4833 invoked from network); 31 May 2007 14:17:15 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 31 May 2007 14:17:15 -0000
Received: (qmail 24069 invoked by uid 225); 31 May 2007 14:17:15 -0000
Delivered-To: beginners@perl.org
Received: (qmail 24049 invoked by alias); 31 May 2007 14:17:14 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of sharan.basappa@gmail.com designates 64.233.162.239 as permitted sender)
Received: from nz-out-0506.google.com (HELO nz-out-0506.google.com) (64.233.162.239)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 31 May 2007 07:15:16 -0700
Received: by nz-out-0506.google.com with SMTP id x7so174764nzc
        for <beginners@perl.org>; Thu, 31 May 2007 07:15:12 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=LVp5/2IynVlz6MpvKTXJJVPIBSL7eAl4AR+PNItSMjSdhYybQqLLIu0NL6oUiQ8PbwUYyODsoCrcReFzPf6DyOk+TqVK2kSlBbsx3q5MLE3nYVDhZNLiTOyWDKnfjbX3uHNLsrb9zyX4R9mq1XfbG/c0/Qyqf45aqHYNTxRFqvM=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=DExMw2svYcc1omclL56KFQLz8KRjn1apOc2EP5Zoq0dVSZjYEkWrKITnMTeIpwQ3go89B7RBR1OThmz1mm+I1JxOFfvxuf7pwsaI5JAsjYB0+9T/Ig9aRLyBWAeLxmoymytS3bhW/b9EpBw4GLontMYgM90GIr2ZJdGA43G0uyg=
Received: by 10.143.157.10 with SMTP id j10mr30114wfo.1180620912181;
        Thu, 31 May 2007 07:15:12 -0700 (PDT)
Received: by 10.143.2.8 with HTTP; Thu, 31 May 2007 07:15:12 -0700 (PDT)
Message-ID: <8a31202a0705310715w65f052d0kf80bd6412255ba09@mail.gmail.com>
Date: Thu, 31 May 2007 19:45:12 +0530
From: "Sharan Basappa" <sharan.basappa@gmail.com>
To: "Paul Lalli" <mritty@gmail.com>
Subject: Re: did I get greedy quantifiers wrong ?
Cc: beginners@perl.org, perl-beginners@moderators.isc.org
In-Reply-To: <1180617105.122078.145280@p77g2000hsh.googlegroups.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <8a31202a0705310302y1822ca58y9507522e3b9a262d@mail.gmail.com>
	 <1180617105.122078.145280@p77g2000hsh.googlegroups.com>

Thanks a lot Paul ..

For this rule :
$str = mississippi;
$str =~ m/m(.*i)(.*pi)/;

My initial understanding was that .*i would match all the way till last char i.
This would indeed be true if .*i was not followed by .*pi.
Do you agree ?


On 31 May 2007 06:11:45 -0700, Paul Lalli <mritty@gmail.com> wrote:
> On May 31, 6:02 am, sharan.basa...@gmail.com (Sharan Basappa) wrote:
> > I seem to be having some conceptual problem with greedy quantifiers ..
> > My understanding is that it matches as much as follows while still
> > allowing rest of the
> > regex to match.
>
> 90% correct.  The other 10% is that the match starts left-to-right.
> It will start with the first part of the string that can match, and
> match as much of *that* as possible.  It will not search the rest of
> the string to see if a longer match is possible later.  For example:
>
> $string = 'abbabbbbba';
> $string =~ /(b*)/;
> In this case, $1 will be set to 'bb', because that is the *first*
> longest string it could find, even though if it had continued, it
> would have been able to find 'bbbbb' later.
>
>
> > But look at the following example :
> > $str = mississippi;
> > $str =~ m/m(.*i)(.*pi)/;
> > print "one is $1 \n";
> > print "two is $2 \n";
> >
> > $str = mississippi;
> > $str =~ m/m(.*i?)(.*pi)/;
>
> This doesn't mean what you think it means.  This tells Perl that the
> second token - (.*i?) can match as much of anything as it can,
> followed by 0 or 1 i's.  That ? does not apply to the .* unless you
> put it right after the *.  Compare and contrast with:
> (.*?i), which means to match as little of anything as possible,
> followed by exactly one i.
>
> > print "one is $1 \n";
> > print "two is $2 \n";
> >
> > In the first code snippet, I expected first regex (.*i) to match till
> > ississip
>
> Right there is a problem.  Your token is (.*i).  That is, the last
> character of this token must be an i.  It can't end with a p.  That
> doesn't match.  The .* matches as much as it can until the last 'i',
> then saves the 'i' for the i in the token.
>
> > and leave pi for (.*pi) regex.
> >
> > But what I get as the output of this script is :
> >
> > one is ississi
> > two is ppi
> > one is ississip
> > two is pi
> >
> > Why is that perl is leaving ppi to second regex while it can continue
> > till first p
>
> It can't.  The token ends in an i.  'i' must be the last thing that
> (.*i) matches.
>
> Paul Lalli
>
>
> --
> To unsubscribe, e-mail: beginners-unsubscribe@perl.org
> For additional commands, e-mail: beginners-help@perl.org
> http://learn.perl.org/
>
>
>

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


