From perl6-all-return-80595-ktwarwic=speedy.uwaterloo.ca@perl.org  Sat Apr 14 18:46:49 2007
Return-Path: <perl6-all-return-80595-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3EMkm0I006286
	for <ktwarwic@speedy.uwaterloo.ca>; Sat, 14 Apr 2007 18:46:48 -0400
Received: (qmail 25072 invoked by uid 514); 14 Apr 2007 22:46:24 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 25067 invoked from network); 14 Apr 2007 22:46:23 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
Date: Sat, 14 Apr 2007 12:50:54 -1000
From: Joshua Hoblitt <jhoblitt@ifa.hawaii.edu>
To: nahoo82@gmail.com
Cc: perl6-internals@perl.org
Subject: Re: Limiting Exported Symbols on GCC
Message-ID: <20070414225054.GA4560@ifa.hawaii.edu>
References: <461E19F4.1080205@rblasch.org> <20070412141314.GB18457@kirk.peters.homeunix.org> <20070412145615.GB29368@febrero>
Mime-Version: 1.0
Content-Type: multipart/signed; micalg=pgp-sha1;
	protocol="application/pgp-signature"; boundary="jRHKVT23PllUwdXP"
Content-Disposition: inline
In-Reply-To: <20070412145615.GB29368@febrero>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME
Status: O
Content-Length: 2725
Lines: 79

--jRHKVT23PllUwdXP
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
Content-Transfer-Encoding: quoted-printable

On Thu, Apr 12, 2007 at 04:56:15PM +0200, nahoo82@gmail.com wrote:
> On Thu, Apr 12, 2007 at 09:13:14AM -0500, Steve Peters wrote:
> > On Thu, Apr 12, 2007 at 01:37:24PM +0200, Ron Blaschke wrote:
> > > While poking the GCC documentation I found that there's a feature=20
> > > available to limit the exported symbols (with GCC >=3D 3.3).  Maybe w=
orth=20
> > > considering?
> > > It's probably a design decision.  If there's an option to limit the=
=20
> > > exported symbols or make all available, which one should be taken?
> > >=20
> > > http://gcc.gnu.org/wiki/Visibility
> > > http://gcc.gnu.org/onlinedocs/gcc-3.3.6/gcc/Function-Attributes.html#=
Function-Attributes
> > >=20
> > > This can be done by adding C<-fvisibility=3Dhidden> to CFLAGS and set=
ting=20
> > > PARROT_API to C<__attribute__ ((visibility("default")))>.
> > >=20
> > >=20
> >=20
> > I think that we need to tread very carefully with adding additional=20
> > gcc-isms to Parrot, lest we break compatibility with additional compile=
rs
> > even further.  If Parrot will run everywhere, we need to think about=20
> > working more towards ANSI and POSIX compliance.
>=20
> I think that the same effect can be achieved using a linker script (altho=
ugh
> I don't know much about them), in wich case you are not depending on a=20
> compiler feature.

ld scripts have non-portability issues as well.

At my day job, we make heavy use of gcc attributes protected in #ifdef
blocks. E.g.=20

    ...
    #ifdef __GNUC__
    ) __attribute__((format(printf, 6, 7)));
    #else // __GNUC__
    );
    #endif // __GNUC__

While this certainly does clutter up the headers we've decided that the
additional features, optimization, & error checking allowed by the use of
attributes are worth it.  Machine generating the headers would be better
but we don't have to support non-POSIX like platforms so it hasn't been
worth the effort.

My guess is that the majority of Parrot users are building it with gcc
and just the extra error checking possible from using a rich set of
attributes would benefit all platforms (compile time NULL checking,
etc.).  In fact, I'd vote for using the literal gcc attribute syntax
without protective #ifdefs and then mangling and/or removing
unsupported constructs for the target platform.

-J

--

--jRHKVT23PllUwdXP
Content-Type: application/pgp-signature
Content-Disposition: inline

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.1 (GNU/Linux)

iD8DBQFGIVrOWa2BU+b7tU0RAp16AJ9Ben2VeYE+vfCdEwmKWVFBvGDCsQCeJmFj
OnFoZgfkK6B7sq7C0jsskGY=
=F8J1
-----END PGP SIGNATURE-----

--jRHKVT23PllUwdXP--

