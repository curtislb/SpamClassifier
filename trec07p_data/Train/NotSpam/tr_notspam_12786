From perl6-all-return-81552-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed May 23 08:39:20 2007
Return-Path: <perl6-all-return-81552-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4NCdJqD025243
	for <ktwarwic@flax9.uwaterloo.ca>; Wed, 23 May 2007 08:39:19 -0400
Received: (qmail 9984 invoked by uid 514); 23 May 2007 12:39:15 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 9974 invoked from network); 23 May 2007 12:39:14 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,HTML_MESSAGE,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: neutral (x1.develooper.com: 63.251.223.186 is neither permitted nor denied by domain of parrotcode@gmail.com)
Delivered-To: perlmail-parrot-porters@onion.perl.org
Delivered-To: parrot-porters@perl.org
Received-SPF: pass (x1.develooper.com: domain of parrotcode@gmail.com designates 64.233.162.227 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=kcxiqkZYdc3ljYc8UBr+N8YYfhiKdzR5AV9SuCXVHwFdY63VMSE/cbYJWfibiRpg0Gq2lcOtA/PSKV9pIbTxEEFAOVD92yAL025JaP1mXfjAD0ah4LpahjpzQ8YhNSOdXYTTmk2wN55gJ124ihaggTKJ/6f4QUUy0LGmJkqfTsc=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=bUiCrh0V1552g4ucVpCxI6no1It/IT3/2Yvm1ShPpH+41Zx+F1i3wregGq6jMBmTRoUT4DYm9uw87/AibWvzxGaixu/3Q6qlzFsULd1VGRLYtelJwb10aRfl0H7eG38/ZqhB7BWloCS5Yk+zqNvKqPufsA6DBu7jMxKA018ZF1Y=
Message-ID: <7b0e52b40705230537x1c3ba55do97bcc5c8425583b2@mail.gmail.com>
Date: Wed, 23 May 2007 20:37:00 +0800
From: "Klaas-Jan Stol" <parrotcode@gmail.com>
To: chromatic <chromatic@wgz.org>
Subject: Re: FOTW src/debug.c
Cc: parrot-porters@perl.org
In-Reply-To: <7b0e52b40705230506i427d7f75m7434f1ab4dd2bcb@mail.gmail.com>
MIME-Version: 1.0
Content-Type: multipart/mixed; 
	boundary="----=_Part_20738_23014665.1179923820435"
References: <200705221550.07740.chromatic@wgz.org>
	 <7b0e52b40705230506i427d7f75m7434f1ab4dd2bcb@mail.gmail.com>
X-Virus-Checked: Checked
X-Virus-Checked: Checked
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,HTML_MESSAGE,SPF_PASS
X-Virus-Checked: Checked
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-1.9 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,HTML_MESSAGE,SPF_NEUTRAL

------=_Part_20738_23014665.1179923820435
Content-Type: multipart/alternative; 
	boundary="----=_Part_20739_25548463.1179923820435"

------=_Part_20739_25548463.1179923820435
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

On 5/23/07, Klaas-Jan Stol <parrotcode@gmail.com> wrote:
>
>
>
> On 5/23/07, chromatic <chromatic@wgz.org> wrote:
> >
> > This file implements most of the Parrot debugger.  The interpreter
> > struct has
> > a slot called pdb that contains a PDB_t (parrot/debug.h).
> >
> > This file is somewhat messy.  It has some string manipulation functions
> > (nextarg(), skip_ws(), parse_int(), parse_string()) that should probably
> > go
> > elsewhere.
> >
> > There are also some places that seem somewhat careless about memory
> > allocation
> > and freeing.  For example, where in this file does interp->pdb get
> > initialized?  (Answer: in src/embed.c - Parrot_disassemble()).
> >
> > Where does it get freed?  (Answer: nowhere that I can tell.)
> >
> > The freeing *could* go in Parrot_really_destroy() in src/inter_create.c
> > (did
> > you catch the contradiction in names there?), but I'm starting to think
> > that
> > each file that represents the entry point into a system should have two
> > functions, one that initializes the system and its necessary data
> > structures
> > and another that finalizes and frees things.
> >
> > I don't know if we have any good tests for the debugger; this is
> > something we
> > ought to consider if we're going to move code around.  Sadly, I don't
> > know
> > any easy way to test things apart from opening a Parrot process and
> > feeding
> > data in and out.  Making the debugger scriptable from PIR is a bigger
> > project
> > than I'm comfortable suggesting until it gets more tests.
> >
> > Some of the other memory-related functions have a little bit too much
> > magic.
> > For example, PDB_free_file() takes the file to free out of the current
> > debugger.  It does the right thing to free files, but there appear to be
> >
> > cases where it's useful to free a file that's not the debugger's current
> > file, so this function is inappropriately general.
> >
> > Other functions have odd names -- PDB_hasInstructions() (no
> > underscore?),
> > PDB_print() (should be PDB_print_registers()).
> >
> > The code is fairly decent.  Most of the issues here relate to
> > organization.
> >
> > -- c
> >
>
> There are some magic numbers, like 255, and some other very unclear code
> snippets like:
>
>   for (i = 0; *command && isalpha((int) *command); command++, i++)
>         c += (tolower((int) *command) + (i + 1)) * ((i + 1) * 255);
>
>
> This needs some comments. If anybody knows what's going on there, please
> enlighten me and fellow readers :-)
>
> regards,
> kjs
>


Attached a patch that adds some more comments that explain the code as far
as i can see. There are some parts in the file that I don't get a grip on.

hth,

kjs

------=_Part_20739_25548463.1179923820435
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

<br><br><div><span class="gmail_quote">On 5/23/07, <b class="gmail_sendername">Klaas-Jan Stol</b> &lt;<a href="mailto:parrotcode@gmail.com">parrotcode@gmail.com</a>&gt; wrote:</span><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
<div><span class="e" id="q_112b8d4d9da45d25_0"><br><br><div><span class="gmail_quote">On 5/23/07, <b class="gmail_sendername">chromatic</b> &lt;<a href="mailto:chromatic@wgz.org" target="_blank" onclick="return top.js.OpenExtLink(window,event,this)">
chromatic@wgz.org</a>&gt; wrote:</span><blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">
This file implements most of the Parrot debugger.&nbsp;&nbsp;The interpreter struct has<br>a slot called pdb that contains a PDB_t (parrot/debug.h).<br><br>This file is somewhat messy.&nbsp;&nbsp;It has some string manipulation functions<br>

(nextarg(), skip_ws(), parse_int(), parse_string()) that should probably go<br>elsewhere.<br><br>There are also some places that seem somewhat careless about memory allocation<br>and freeing.&nbsp;&nbsp;For example, where in this file does interp-&gt;pdb get
<br>initialized?&nbsp;&nbsp;(Answer: in src/embed.c - Parrot_disassemble()).<br><br>Where does it get freed?&nbsp;&nbsp;(Answer: nowhere that I can tell.)<br><br>The freeing *could* go in Parrot_really_destroy() in src/inter_create.c (did<br>

you catch the contradiction in names there?), but I&#39;m starting to think that<br>each file that represents the entry point into a system should have two<br>functions, one that initializes the system and its necessary data structures
<br>and another that finalizes and frees things.<br><br>I don&#39;t know if we have any good tests for the debugger; this is something we<br>ought to consider if we&#39;re going to move code around.&nbsp;&nbsp;Sadly, I don&#39;t know
<br>any easy way to test things apart from opening a Parrot process and feeding<br>data in and out.&nbsp;&nbsp;Making the debugger scriptable from PIR is a bigger project<br>than I&#39;m comfortable suggesting until it gets more tests.
<br><br>Some of the other memory-related functions have a little bit too much magic.<br>For example, PDB_free_file() takes the file to free out of the current<br>debugger.&nbsp;&nbsp;It does the right thing to free files, but there appear to be
<br>cases where it&#39;s useful to free a file that&#39;s not the debugger&#39;s current<br>file, so this function is inappropriately general.<br><br>Other functions have odd names -- PDB_hasInstructions() (no underscore?),
<br>PDB_print() (should be PDB_print_registers()).<br><br>The code is fairly decent.&nbsp;&nbsp;Most of the issues here relate to organization.<br><br>-- c<br></blockquote></div><br></span></div>There are some magic numbers, like 255, and some other very unclear code snippets like:
<br><br>&nbsp; for (i = 0; *command &amp;&amp; isalpha((int) *command); command++, i++)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c += (tolower((int) *command) + (i + 1)) * ((i + 1) * 255);<br><br><br>This needs some comments. If anybody knows what&#39;s going on there, please enlighten me and fellow readers :-)
<br><br>regards,<br><span class="sg">kjs<br>
</span></blockquote></div><br><br>Attached a patch that adds some more comments that explain the code as far as i can see. There are some parts in the file that I don&#39;t get a grip on.<br><br>hth,<br><br>kjs<br>

------=_Part_20739_25548463.1179923820435--

------=_Part_20738_23014665.1179923820435
Content-Type: application/octet-stream; name=more_debug_comments.patch
Content-Transfer-Encoding: base64
X-Attachment-Id: f_f21s52wx
Content-Disposition: attachment; filename="more_debug_comments.patch"

SW5kZXg6IHNyYy9kZWJ1Zy5jDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQotLS0gc3JjL2RlYnVnLmMJKHJldmlzaW9u
IDE4NjMzKQ0KKysrIHNyYy9kZWJ1Zy5jCSh3b3JraW5nIGNvcHkpDQpAQCAtMjM4LDcgKzIzOCw3
IEBADQogCiAvKgogCi09aXRlbSBDPHN0YXRpYyBjb25zdCBjaGFyKgorPWl0ZW0gQzxzdGF0aWMg
Y29uc3QgY2hhciAqCiBwYXJzZV9jb21tYW5kKGNvbnN0IGNoYXIgKmNvbW1hbmQsIHVuc2lnbmVk
IGxvbmcgKmNtZFApPgogCiBDb252ZXJ0IHRoZSBjb21tYW5kIGF0IHRoZSBiZWdpbm5pbmcgb2Yg
YSBzdHJpbmcgaW50byBhIG51bWVyaWMgdmFsdWUKQEAgLTI0OCwxMCArMjQ4LDEwIEBADQogCiAq
LwogCi1zdGF0aWMgY29uc3QgY2hhcioKK3N0YXRpYyBjb25zdCBjaGFyICoKIHBhcnNlX2NvbW1h
bmQoY29uc3QgY2hhciAqY29tbWFuZCwgdW5zaWduZWQgbG9uZyAqY21kUCkKIHsKLSAgICBpbnQg
ICAgICAgICAgIGk7CisgICAgaW50IGk7CiAgICAgdW5zaWduZWQgbG9uZyBjID0gMDsKIAogICAg
IGlmICgqY29tbWFuZCA9PSAnXDAnKSB7CkBAIC0yNTksNiArMjU5LDkgQEANCiAgICAgICAgIHJl
dHVybiAwOwogICAgIH0KIAorICAgIC8qIHdoaWxlIGNvbW1hbmQgaXMgbm90IE5VTEwgYW5kIHRo
ZSBjb21tYW5kIGlzIGFuIGFscGhhIGNoYXJhY3RlciAuLi4KKyAgICAgKiBkb24ndCBrbm93IHdo
YXQgdGhpcyBjb2RlIGRvZXMuCisgICAgICovCiAgICAgZm9yIChpID0gMDsgKmNvbW1hbmQgJiYg
aXNhbHBoYSgoaW50KSAqY29tbWFuZCk7IGNvbW1hbmQrKywgaSsrKQogICAgICAgICBjICs9ICh0
b2xvd2VyKChpbnQpICpjb21tYW5kKSArIChpICsgMSkpICogKChpICsgMSkgKiAyNTUpOwogCkBA
IC01MDgsOCArNTExLDcgQEANCiA9aXRlbSBDPHZvaWQKIFBEQl90cmFjZShJbnRlcnAgKmludGVy
cCwgY29uc3QgY2hhciAqY29tbWFuZCk+CiAKLUV4ZWN1dGUgdGhlIG5leHQgTiBvcGVyYXRpb25z
OyBpZiBubyBudW1iZXIgaXMgc3BlY2lmaWVkLCBpdCBkZWZhdWx0cyB0bwotMS4KK0V4ZWN1dGUg
dGhlIG5leHQgTiBvcGVyYXRpb25zOyBpZiBubyBudW1iZXIgaXMgc3BlY2lmaWVkLCBpdCBkZWZh
dWx0cyB0byAxLgogCiA9Y3V0CiAKQEAgLTUyMiwxNSArNTI0LDE5IEBADQogICAgIFBEQl90ICAg
ICAgICAgKnBkYiA9IGludGVycC0+cGRiOwogICAgIEludGVycCAgICAgICAgKmRlYnVnZWU7CiAK
KyAgICAvKiBpZiBkZWJ1Z2dlciBpcyBub3QgcnVubmluZyB5ZXQsIGluaXRpYWxpemUgKi8KICAg
ICBpZiAoIShwZGItPnN0YXRlICYgUERCX1JVTk5JTkcpKQogICAgICAgICBQREJfaW5pdChpbnRl
cnAsIGNvbW1hbmQpOwogCisgICAgLyogaWYgdGhlIG51bWJlciBvZiBvcHMgdG8gcnVuIGlzIHNw
ZWNpZmllZCwgY29udmVydCB0byBhIGxvbmcgKi8KICAgICBpZiAoY29tbWFuZCAmJiBpc2RpZ2l0
KChpbnQpICpjb21tYW5kKSkKICAgICAgICAgbiA9IGF0b2woY29tbWFuZCk7CiAKKyAgICAvKiBj
bGVhciB0aGUgUERCX1NUT1BQRUQgZmxhZywgd2UnbGwgYmUgcnVubmluZyBuIG9wcyBub3cgKi8K
ICAgICBwZGItPnN0YXRlICY9IH5QREJfU1RPUFBFRDsKICAgICBkZWJ1Z2VlICAgICA9IHBkYi0+
ZGVidWdlZTsKIAorICAgIC8qIGV4ZWN1dGUgbiBvcHMgKi8KICAgICBmb3IgKDsgbiAmJiBwZGIt
PmN1cl9vcGNvZGU7IG4tLSkgewogICAgICAgICB0cmFjZV9vcChkZWJ1Z2VlLAogICAgICAgICAg
ICAgICAgIGRlYnVnZWUtPmNvZGUtPmJhc2UuZGF0YSwKQEAgLTU0MCw2ICs1NDYsNyBAQA0KICAg
ICAgICAgRE9fT1AocGRiLT5jdXJfb3Bjb2RlLCBkZWJ1Z2VlKTsKICAgICB9CiAKKyAgICAvKiBz
ZXQgUERCX1NUT1BQRUQgZmxhZywgd2UganVzdCBzdG9wcGVkICovCiAgICAgcGRiLT5zdGF0ZSB8
PSBQREJfU1RPUFBFRDsKIAogICAgIC8qIElmIHByb2dyYW0gZW5kZWQgKi8KQEAgLTU0OSw4ICs1
NTYsNyBAQA0KIAogLyoKIAotPWl0ZW0gQzxQREJfY29uZGl0aW9uX3QgKgotUERCX2NvbmQoSW50
ZXJwICppbnRlcnAsIGNvbnN0IGNoYXIgKmNvbW1hbmQpPgorPWl0ZW0gQzxQREJfY29uZGl0aW9u
X3QgKlBEQl9jb25kKEludGVycCAqaW50ZXJwLCBjb25zdCBjaGFyICpjb21tYW5kKT4KIAogQW5h
bHl6ZXMgYSBjb25kaXRpb24gZnJvbSB0aGUgdXNlciBpbnB1dC4KIApAQCAtNjA0LDkgKzYxMCwx
MyBAQA0KICAgICAgKiBjb25kaXRpb24uICovCiAgICAgY29tbWFuZCsrOwogCisgICAgLyogWFhY
IERvZXMgL3RoaXMvIGhhdmUgdG8gZG8gd2l0aCB0aGUgZmFjdCB0aGF0IFBBU00gcmVnaXN0ZXJz
IHVzZWQgdG8gaGF2ZQorICAgICAqIG1heGltdW0gb2YgMiBkaWdpdHM/IElmIHNvLCB0aGVyZSBz
aG91bGQgYmUgYSB3aGlsZSBsb29wLCBJIHRoaW5rLgorICAgICAqLwogICAgIGlmIChjb25kaXRp
b24tPnJlZyA+IDkpCiAgICAgICAgIGNvbW1hbmQrKzsKIAorICAgIC8qIHNraXAgd2hpdGVzcGFj
ZSAqLwogICAgIGlmICgqY29tbWFuZCA9PSAnICcpCiAgICAgICAgIG5hKGNvbW1hbmQpOwogCkBA
IC02NDYsMTEgKzY1NiwxMyBAQA0KICAgICAgICAgICAgIHJldHVybiBOVUxMOwogICAgIH0KIAor
ICAgIC8qIGlmIHRoZXJlJ3MgYW4gJz0nLCBza2lwIGl0ICovCiAgICAgaWYgKCooY29tbWFuZCAr
IDEpID09ICc9JykKICAgICAgICAgY29tbWFuZCArPSAyOwogICAgIGVsc2UKLSAgICAgICAgY29t
bWFuZCArKzsKKyAgICAgICAgY29tbWFuZCsrOwogCisgICAgLyogc2tpcCB3aGl0ZXNwYWNlICov
CiAgICAgaWYgKCpjb21tYW5kID09ICcgJykKICAgICAgICAgbmEoY29tbWFuZCk7CiAKQEAgLTc5
Niw4ICs4MDgsNyBAQA0KIAogICAgICAgICAvKiBBYm9ydCBpZiB0aGUgbGluZSBudW1iZXIgcHJv
dmlkZWQgZG9lc24ndCBleGlzdCAqLwogICAgICAgICBpZiAoIWxpbmUtPm5leHQpIHsKLSAgICAg
ICAgICAgIFBJT19lcHJpbnRmKGludGVycCwKLSAgICAgICAgICAgICAgICAgICAgICAgICJDYW4n
dCBzZXQgYSBicmVha3BvaW50IGF0IGxpbmUgbnVtYmVyICVsaVxuIixsbik7CisgICAgICAgICAg
ICBQSU9fZXByaW50ZihpbnRlcnAsICJDYW4ndCBzZXQgYSBicmVha3BvaW50IGF0IGxpbmUgbnVt
YmVyICVsaVxuIixsbik7CiAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgIH0KICAgICB9CkBA
IC04MDgsOCArODE5LDcgQEANCiAgICAgICAgIHdoaWxlIChsaW5lLT5vcGNvZGUgIT0gcGRiLT5j
dXJfb3Bjb2RlKSB7CiAgICAgICAgICAgICBsaW5lID0gbGluZS0+bmV4dDsKICAgICAgICAgICAg
IGlmICghbGluZSkgewotICAgICAgICAgICAgICAgIFBJT19lcHJpbnRmKGludGVycCwKLSAgICAg
ICAgICAgICAgICAgICAiTm8gY3VycmVudCBsaW5lIGZvdW5kIGFuZCBubyBsaW5lIG51bWJlciBz
cGVjaWZpZWRcbiIpOworICAgICAgICAgICAgICAgIFBJT19lcHJpbnRmKGludGVycCwgIk5vIGN1
cnJlbnQgbGluZSBmb3VuZCBhbmQgbm8gbGluZSBudW1iZXIgc3BlY2lmaWVkXG4iKTsKICAgICAg
ICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICB9CiAgICAgICAgIH0KQEAgLTk0OCwxMCAr
OTU4LDEzIEBADQogICAgIFBEQl9icmVha3BvaW50X3QgKmJyZWFrcG9pbnQ7CiAgICAgbG9uZyAg
ICAgICAgICAgICAgbjsKIAorICAgIC8qIGNoZWNrIHdoZXRoZXIgdGhlIGNvbW1hbmQgd2FzIGEg
ZGlnaXQgKi8KKyAgICAvKiBYWFggT25seSBjaGVjayBmb3IgZmlyc3QgY2hhcmFjdGVyPyAqLwog
ICAgIGlmIChpc2RpZ2l0KChpbnQpICpjb21tYW5kKSkgewogICAgICAgICBuICAgICAgICAgID0g
YXRvbChjb21tYW5kKTsKICAgICAgICAgYnJlYWtwb2ludCA9IGludGVycC0+cGRiLT5icmVha3Bv
aW50OwogCisgICAgICAgIC8qIGl0ZXJhdGUgb3ZlciB0aGUgYnJlYWtwb2ludHMgdG8gZmluZCBi
cmVha3BvaW50IG5vLiBuLiAqLwogICAgICAgICB3aGlsZSAoYnJlYWtwb2ludCAmJiBicmVha3Bv
aW50LT5pZCAhPSBuKQogICAgICAgICAgICAgYnJlYWtwb2ludCA9IGJyZWFrcG9pbnQtPm5leHQ7
CiAKQEAgLTk4OSw2ICsxMDAyLDcgQEANCiB7CiAgICAgUERCX2JyZWFrcG9pbnRfdCAqYnJlYWtw
b2ludCA9IFBEQl9maW5kX2JyZWFrcG9pbnQoaW50ZXJwLCBjb21tYW5kKTsKIAorICAgIC8qIGlm
IHRoZSBicmVha3BvaW50IGV4aXN0cywgZGlzYWJsZSBpdC4gKi8KICAgICBpZiAoYnJlYWtwb2lu
dCkKICAgICAgICAgYnJlYWtwb2ludC0+c2tpcCA9IC0xOwogCkBAIC0xMDEyLDEwICsxMDI2LDEx
IEBADQogewogICAgIFBEQl9icmVha3BvaW50X3QgKmJyZWFrcG9pbnQgPSBQREJfZmluZF9icmVh
a3BvaW50KGludGVycCwgY29tbWFuZCk7CiAKLSAgICBpZiAoYnJlYWtwb2ludCAmJiBicmVha3Bv
aW50LT5za2lwID09IC0xKQorICAgIC8qIGlmIHRoZSBicmVha3BvaW50IGV4aXN0cywgYW5kIGl0
IHdhcyBkaXNhYmxlZCwgZW5hYmxlIGl0LiAqLworICAgIGlmIChicmVha3BvaW50ICYmIGJyZWFr
cG9pbnQtPnNraXAgPT0gLTEpIHsKICAgICAgICAgYnJlYWtwb2ludC0+c2tpcCA9IDA7CisgICAg
fQogCi0gICAgcmV0dXJuOwogfQogCiAvKgpAQCAtMTk0MSwxMSArMTk1NiwxNyBAQA0KIHsKICAg
ICBjaGFyIGggPSAwOwogCisgICAgLyogYXMgbG9uZyBhcyBjIGlzIG5vdCBOVUxMLCB3ZSdyZSBu
b3QgbG9va2luZyBhdCBhIGNvbW1lbnQgKCMuLi4pIG9yIGEgJ1xuJy4uLiAqLwogICAgIHdoaWxl
ICgqYyAmJiAqYyAhPSAnIycgJiYgKmMgIT0gJ1xuJykgewotICAgICAgICBpZiAoaXNhbG51bSgo
aW50KSAqYykgfHwgKmMgPT0gJyInKQorICAgICAgICAvKiAuLi4gYW5kIGMgaXMgYWxwaGFudW1l
cmljIG9yIGEgcXVvdGVkIHN0cmluZyAuLi4gKi8KKyAgICAgICAgaWYgKGlzYWxudW0oKGludCkg
KmMpIHx8ICpjID09ICciJykgeworICAgICAgICAgICAgLyogLi4uIHRoZW4gdGhlIGxpbmUgY29u
dGFpbnMgYW4gaW5zdHJ1Y3Rpb24uICovCiAgICAgICAgICAgICBoID0gMTsKLSAgICAgICAgZWxz
ZSBpZiAoKmMgPT0gJzonKQorICAgICAgICB9CisgICAgICAgIGVsc2UgaWYgKCpjID09ICc6Jykg
eworICAgICAgICAgICAgLyogdGhpcyBpcyBhIGxhYmVsLiBYWFggcmlnaHQ/ICovCiAgICAgICAg
ICAgICBoID0gMDsKKyAgICAgICAgfQogICAgICAgICBjKys7CiAgICAgfQogCg==
------=_Part_20738_23014665.1179923820435--

