From perl6-all-return-81572-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu May 24 05:45:53 2007
Return-Path: <perl6-all-return-81572-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4O9jpqD004048
	for <ktwarwic@flax9.uwaterloo.ca>; Thu, 24 May 2007 05:45:51 -0400
Received: (qmail 1949 invoked by uid 514); 24 May 2007 09:45:44 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 1942 invoked from network); 24 May 2007 09:45:43 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-0.2 required=8.0
	tests=BAYES_40,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: moderator for perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: softfail (x1.develooper.com: transitioning domain of chromatic@wgz.com does not designate 63.251.223.186 as permitted sender)
Delivered-To: perlmail-parrot-porters@onion.perl.org
Delivered-To: parrot-porters@perl.org
Received-SPF: pass (x1.develooper.com: domain of chromatic@wgz.com designates 63.105.17.39 as permitted sender)
Date: Wed, 23 May 2007 20:07:28 -0700
From: chromatic <chromatic@wgz.org>
To: Josh Wilmes <josh@hitchhiker.org>
Cc: p2 <parrot-porters@perl.org>
Subject: Re: new FAQs
Message-ID: <20070523200728.A6668@wgz.org>
References: <2EC75429-C3F1-45FB-8D86-EDD733FA713A@coleda.com> <d0213717bfa005d966e2b029c7332d57@gmail.com> <73C6A7A9-626C-45AA-BF4E-A6433CEEABCD@coleda.com> <200705231905.24096.chromatic@wgz.org> <20070524023707.2453287BDB@galactic>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
User-Agent: Mutt/1.2.5.1i
In-Reply-To: <20070524023707.2453287BDB@galactic>; from josh@hitchhiker.org on Wed, May 23, 2007 at 10:37:06PM -0400
X-Virus-Scanned: by amavisd-new at wgz.org
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-0.1 required=8.0
	tests=BAYES_20,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_SOFTFAIL

On Wed, May 23, 2007 at 10:37:06PM -0400, Josh Wilmes wrote:

> At 19:05 on 05/23/2007 PDT, chromatic <chromatic@wgz.org> wrote:

> >  - better compiler tools than lex and yacc.
 
> Is it necessary (or even fair) to tie compiler components to parrot?

I really don't know how to answer this question.

The compiler tools target Parrot, so that it will be easier for people
(including us) to write languages that run on Parrot.

Parrot is awfully pointless without languages that run on it, so making it
easier to write a language that runs on Parrot is well in line with the goals
of Parrot.

I suppose it would be possible to write compiler tools that target multiple
backends, but some of those backends I have no interest in running (for legal
or technical reasons, such as that I don't own any platform on which they run
or have little desire to be the target of a patent suit).  Besides that, my
goal with Parrot is to produce the best possible platform for running dynamic
languages.

Supporting other platforms (if such a thing is even possible in any sensible
way) would take a lot of work for little benefit.

How would you, for example, write C compiler tools that didn't target a
specific processor architecture?

> > Snarkily, it's better than the JVM because it actually supports features of 
> > dynamic languages natively without forcing all dynamic languages built on it 
> > to invent everything besides "look up named method at runtime".
 
> Apparently this is an improvement over "invent the whole VM"? ;-)

I suppose that depends on whether you're implementing the single VM or the many
each inventing the same types of things on said single VM.

There's a reason we're not writing Parrot in assembly language: sometimes a
little more abstraction helps.  You can certainly implement any kind of control
flow you can imagine with goto and a lot of discipline, but although I know
it's theoretically possible and could certainly do it if I really had to, I
don't have to and I certainly don't want to.

-- c

