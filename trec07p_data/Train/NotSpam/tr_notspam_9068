From perl6-all-return-81239-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu May 10 04:35:21 2007
Return-Path: <perl6-all-return-81239-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4A8ZIqD007177
	for <ktwarwic@flax9.uwaterloo.ca>; Thu, 10 May 2007 04:35:19 -0400
Received: (qmail 2902 invoked by uid 514); 10 May 2007 08:35:15 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 2896 invoked from network); 10 May 2007 08:35:15 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-0.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,KARMA_CONNECT_NEGATIVE,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: domain of jrisom@gmail.com designates 64.233.166.180 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:in-reply-to:references:mime-version:content-type:message-id:content-transfer-encoding:cc:from:subject:date:to:x-mailer;
        b=ecvUlftRkIrPg5p8zM2W/qo+9sMBbKIAFcj+XMHrCqcT/Cb560WbOMLJCuEI/yUtLa7H3sabWa9Rjoh8+Vo2fxi9W0KfgtwXOzMh+eiYy+Pp/JuuTCi54kSXKBGMsALmg4W2NZ+uIyD0OBK7Rj3dZh3VqEnFlfIfXivl7VT+qjk=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:in-reply-to:references:mime-version:content-type:message-id:content-transfer-encoding:cc:from:subject:date:to:x-mailer;
        b=mV5NtskmGQojed316d4cfQhRmH3K1VF0rf4onO7rhg45nrUplMmQ/lzHR3denZFiQv50/RfrpARbEJgCXxEaNFW8cyq5OMJeUiEIu7nC9GIGZjZzdUIGoFEUuI+dpyRbGiIag+KUSoaUaReOUV0m2NSIunlIIHHIq5u03TkD0vc=
In-Reply-To: <20070509210103.GL18077@plum.flirble.org>
References: <20070501234157.8CE9ACB9B8@x12.develooper.com> <20070501234122.9F5F8CB9B8@x12.develooper.com> <20070509195357.GJ52711@colon.colondot.net> <200705091306.49336.chromatic@wgz.org> <20070509210103.GL18077@plum.flirble.org>
Mime-Version: 1.0 (Apple Message framework v624)
Content-Type: text/plain; charset=US-ASCII; format=flowed
Message-Id: <390f5c4771b86959736aea306ae5211f@gmail.com>
Content-Transfer-Encoding: 7bit
Cc: perl6-internals@perl.org, chromatic <chromatic@wgz.org>
From: Joshua Isom <jrisom@gmail.com>
Subject: Re: [svn:parrot] r18381 - trunk/include/parrot
Date: Thu, 10 May 2007 03:33:41 -0500
To: Nicholas Clark <nick@ccl4.org>
X-Mailer: Apple Mail (2.624)
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-0.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,KARMA_CONNECT_NEGATIVE,SPF_PASS


On May 9, 2007, at 4:01 PM, Nicholas Clark wrote:

> On Wed, May 09, 2007 at 01:06:49PM -0700, chromatic wrote:
>> On Wednesday 09 May 2007 12:53:57 Nicholas Clark wrote:
>>
>>> On Tue, May 01, 2007 at 04:41:22PM -0700, particle@cvs.perl.org 
>>> wrote:
>>>> +
>>>> +#define STRING_IS_NULL(s) ((s) == NULL)
>>>> +#define STRING_IS_EMPTY(s) !(int)(s)->strlen
>
>> Does !(int)(s)->strlen really scan as quickly and easily as 
>> STRING_IS_EMPTY?
>
> Mmm, yes, thinking about it more...
> What's that int cast doing there?
>
> Smells like a bug. Either (s)->strlen is going to be zero, in which 
> case
> ! of it is true, or it's going to be in the range INT_MIN to INT_MAX, 
> in
> which case it's not true, or it's going to be outside that range, in 
> which
> case the cast is undefined behaviour. (because it's signed)
>

Casting to an int is definitely a bug.  Since on amd64, int is 32 bits 
and INTVAL is 64 bits(and void* is 64 bits), I've become cautious of 
any int in the code.  But I do find it a tad odd that strlen can be 
negative, and I wonder what affect setting it to a negative number 
would have on other parts of the system(besides unknown behavior).  
Using a macro for anything using casts is probably a decent thing 
because of false assumptions about how a compiler chooses the size of a 
type.  Should maybe add a cage ticket about using things like "int" and 
"short" in source files(or anything other than config.h).  It'd 
hopefully prevent such issues(the sizeof(int) != sizeof(void*) caused a 
crash with pccmethods until a refactoring recently) from occuring, at 
the cost of commonly used(or assumed) methods for treating data.

> I've not checked, and I'm not sure if it's going to be easy to do so, 
> but
> I assume that the cast was moved into the macro as part of refactoring,
> and has been in the code for some time.
>
> So, !s->strlen does scan as quickly and easily.
>

To some, but it isn't as easy to just literally read.  "Not s's strlen" 
is a lot different than "STRING_IS_EMTPY".  Since the code will be read 
often, and often by people not familiar with parrot's internals, it 
makes sense to make it easily readable.  It takes me a second to read 
!s->strlen, but half a second to read STRING_IS_EMTPY.

> s == NULL is also more tersely written as !s, which, I feel, is also 
> clearer
> to regular C programmers.

Eh, if we have one, may as well have the other, although this one seems 
simple enough.

> I've also intentionally left the parentheses off, as once you aren't 
> using
> macros, you can choose not to use them on simple expressions.
>
>>> Arguably one of the mistakes of Perl 5 was to use too many macros, 
>>> which
>>> unintentionally contributes to obfuscating the code.
>>
>> It's not as if *these* are SvPVNL and SvPVZ, or was that SVpvNL or 
>> SvPv
>> or....?
>
> Yes. Those ones. But after about 5 years I started to see the patterns 
> in them.
>
> Clearly 5 years isn't a rapid learning curve.
>

And one of the major reasons I don't want to even look at the perl5 
source to find the code I'm wanting.  Plus the documentation of the 
code isn't great last I saw(like where's the definition of what SvPVNL 
is?).  Parrot does have a couple flaws for finding struct definitions, 
among other things.  It took me a couple minutes(and many greps) to 
find that STRING is defined in pobj.h as parrot_string_t.  Then again, 
the macros in question aren't in any string related file but in 
interpreter.h(although that one was quicker).

> Nicholas Clark
>

