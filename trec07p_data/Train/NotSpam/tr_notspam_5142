From beginners-return-91083-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu Apr 26 01:33:30 2007
Return-Path: <beginners-return-91083-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3Q5XS6w008388
	for <ktwarwic@speedy.uwaterloo.ca>; Thu, 26 Apr 2007 01:33:29 -0400
Received: (qmail 9326 invoked by uid 514); 26 Apr 2007 05:33:21 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 9317 invoked from network); 26 Apr 2007 05:33:21 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 26 Apr 2007 05:33:21 -0000
Received: (qmail 862 invoked by uid 225); 26 Apr 2007 05:33:20 -0000
Delivered-To: beginners@perl.org
Received: (qmail 857 invoked by alias); 26 Apr 2007 05:33:20 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of chas.owens@gmail.com designates 64.233.162.239 as permitted sender)
Received: from nz-out-0506.google.com (HELO nz-out-0506.google.com) (64.233.162.239)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Wed, 25 Apr 2007 22:33:17 -0700
Received: by nz-out-0506.google.com with SMTP id 12so574394nzp
        for <beginners@perl.org>; Wed, 25 Apr 2007 22:33:12 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=WMaaW3+jgzGkk23XzGjTX/JWp3e7WuKSKAIaEkKJAJlpEUJuwoYE3Uw+cSRCvsqr2g5hD1KzJ+e3WbBNz09ad9RfV7/IGxZc0hTz37jmJkfdKP1a5SwN1cmjxfX860Mxa/QcdBuF/o/2HVVopZQc7WBQGjaVNhGKEgQjqT7hY6M=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=VKySra2Ci46GtJIx39IkuBqXqvgjs6aMdF+OcFwP8Ltt+Vv3iQTSkO9Bwz/84/HlasllW0iclQtQNYRn7vGlOzdB1qPrLpF0e91Z0bDe7ZpV89uoeQvbadXi/McAzGaZgahrW6XBxY/UrkqOW4u7vJ5rUCl2sthAKMPzu98VX9U=
Received: by 10.114.88.1 with SMTP id l1mr51074wab.1177565592345;
        Wed, 25 Apr 2007 22:33:12 -0700 (PDT)
Received: by 10.114.92.6 with HTTP; Wed, 25 Apr 2007 22:33:12 -0700 (PDT)
Message-ID: <58ce48dc0704252233u6de88d8fqea1892be6fcfb2ca@mail.gmail.com>
Date: Thu, 26 Apr 2007 01:33:12 -0400
From: "Chas Owens" <chas.owens@gmail.com>
To: Nishi <nishiprafull@gmail.com>
Subject: Re: basename equivalent?
Cc: "Rob Dixon" <rob.dixon@350.com>,
   "Perl Beginners List" <beginners@perl.org>
In-Reply-To: <c540fe260704252159w40489117gb31a34625d319428@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <c540fe260704251734q565bab0bgb8cc7331917f4ea5@mail.gmail.com>
	 <462FF725.60200@350.com>
	 <c540fe260704252159w40489117gb31a34625d319428@mail.gmail.com>
Status: O
Content-Length: 1876
Lines: 72

On 4/26/07, Nishi <nishiprafull@gmail.com> wrote:
> Rob:
>
>
> On 4/25/07, Rob Dixon <rob.dixon@350.com> wrote:
> >
> > Nishi wrote:
> > >
> > > What is the equivalent of basename? Ie if I dont want to use basename
> > > package to get the filename off a path, what reg expr can i use in perl?
> > >
> > > Would this work --
> > > my $fileName=$path =~ /.*\/(.+)$/;
> >
> > Why don't you try it?!
> >
> > It wouldn't work because $fileName would end up with either a true or a
> > false value depending on whether the regex matched. To get the captured
> > string put the regex in list context:
> >
> >   my ($fileName) = $path =~ /.*\/(.+)$/;
> >
> > But it would still fail if there was no slash in the $path string. You
> > may want to use the slightly simpler
> >
> >   my ($name) = $path =~ m|([^/]+)$|;
>
>
> I tried it, but somehow doesnt work for me, printing $name returns me the
> entire string such as C:\temp\abc\abc.txt and not abc.txt.
> Am I missing something?
>
> which just grabs all the characters at the end of the string that aren't
> > slashes, and works whether or not there is a path as well as a file name
> > in the string.
> >
> > Cheers,
> >
> > Rob
> >
> >
> >
>
File::Basename (which is part of core Perl) is the bst solution to
your problem.  If it doesn't work then Perl is not installed correctly
and you may have other problems.

But, if you insist on not using it then use a sexeger*:

#!/usr/bin/perl

use strict;
use warnings;

my @files = (
        '/usr/bin/perl',
        'c:\Program Files\Perl\perl.exe'
);

for my $fullpath (@files) {
        my $filename = scalar reverse(reverse($fullpath) =~ m{^(.*?)[\\/]});
        print "$filename\n";
}


* http://japhy.perlmonk.org/sexeger/sexeger.html

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


