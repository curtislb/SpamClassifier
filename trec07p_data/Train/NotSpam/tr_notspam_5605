From beginners-return-91140-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri Apr 27 12:04:17 2007
Return-Path: <beginners-return-91140-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3RG4F6w027708
	for <ktwarwic@speedy.uwaterloo.ca>; Fri, 27 Apr 2007 12:04:16 -0400
Received: (qmail 5463 invoked by uid 514); 27 Apr 2007 16:04:05 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 5454 invoked from network); 27 Apr 2007 16:04:05 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 27 Apr 2007 16:04:05 -0000
Received: (qmail 2451 invoked by uid 225); 27 Apr 2007 16:04:04 -0000
Delivered-To: beginners@perl.org
Received: (qmail 2444 invoked by alias); 27 Apr 2007 16:04:04 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of chas.owens@gmail.com designates 64.233.184.224 as permitted sender)
Received: from wr-out-0506.google.com (HELO wr-out-0506.google.com) (64.233.184.224)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Fri, 27 Apr 2007 09:04:01 -0700
Received: by wr-out-0506.google.com with SMTP id 57so922922wri
        for <beginners@perl.org>; Fri, 27 Apr 2007 09:03:57 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=qHzrSL2IlNlWMO9PczGrnTPsNHVscfxSwupsPE4Q+qxtYOiRU1XhuyJsaK0HmdwTu6PYhcBnfid3XttkZ7S6SMWj4iQV7ydb+dy4D7JYEuL4WxtMBBtXbOntDktSuGhd0aUQkwLCb243JH2zHxL3cgvgMequmeF0zCdewRcDD2E=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=NE7UWXpFat//dYoC21aj+9FaiV6hM3XD3cetJzXj4m3/+T7TOFS/Kp32Xemalm2VjtDauVGAStCMGT4axMoiNZA62cqRkNMmc9LtCmo/NSKJU//lR0/RNrVbHPz/g+NpJJpb4V6DI4wnC8q2qXBuxdVrGqzDSqNoimp04+GczFM=
Received: by 10.114.192.1 with SMTP id p1mr1056589waf.1177689836427;
        Fri, 27 Apr 2007 09:03:56 -0700 (PDT)
Received: by 10.114.92.6 with HTTP; Fri, 27 Apr 2007 09:03:56 -0700 (PDT)
Message-ID: <58ce48dc0704270903g491e78a1s473fb3e1c79d7e17@mail.gmail.com>
Date: Fri, 27 Apr 2007 12:03:56 -0400
From: "Chas Owens" <chas.owens@gmail.com>
To: "Pierre Mariani" <frenchyp@gmail.com>
Subject: Re: improving my code: array of references
Cc: beginners@perl.org
In-Reply-To: <1177685500.14854.24.camel@mariani.spry.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <6567.33482.qm@web30211.mail.mud.yahoo.com>
	 <1177624580.10826.12.camel@mariani.spry.com>
	 <bb075cdf0704261520k5de953dcmf54ff6151df69a25@mail.gmail.com>
	 <1177626362.10826.19.camel@mariani.spry.com>
	 <46315FFF.9010108@richweb.com>
	 <1177685500.14854.24.camel@mariani.spry.com>
Status: O
Content-Length: 2541
Lines: 84

On 4/27/07, Pierre Mariani <frenchyp@gmail.com> wrote:
snip
> > - modify_variable() doesn't appear to modify anything, otherwise why
> > are you assigning its return value to the scalar passed as a parameter?
> > It seems to be just a function.
>
> Modify_variable modifies its input variable.

I think the issue is what you mean by "modifies".  In order to say
that the modify_variable function modifies its input then something
like the following must be true:

my $foo = 5
modify_variable($foo)
print "$foo\n"; #prints "6\n"


>
> > - Why are you using references? Are you sure you need to?
> >
> Please correct me if I am wrong.
> My understanding is that:
> 1) if I do:
>         my @array = ($a, $b, $c);
>         for (@array) { $_ = modify_variable($_)}
> I am going to modify $array[0], $array[1] and $array[2], and NOT $a, $b,
> $c.

Yes, that is correct, but this is most likely an invalid use of an
array.  Either you should be using a array from the beginning, or you
should be using a list.  Assigning a bunch of scalar variables to an
array just to group them is useless.

$_ = modify_variable($_) for $a, $b, $c;

is a better construct.  However, it would be even better to make
modify_variable take multiple arguments:

($a, $b, $c) = modify_variables($a, $b, $c);





>
> 2) if I do:
>         for ($a, $b, $c) {$_ = modify_variable($_)}
> I am going to modify $a, $b, $c, which is good, but if $a, $b, $c are
> big I am going to be passing around lots of data.

Ah, here is the crux of the problem.  You thing you are passing
copies.  Perl aliases its arguments to functions.  In C++ terms you
are passing by reference (if I got the terminology right).  Passing
"this is a really long string" and "a" both take up the same amount of
time and memory.  Only passing around arrays and hashes take up O(n)
space and time.  That is why it is good form to pass them as
references.

snip
> >   $_ = function($_) foreach ($var1, $var2, $var3);
> >
> > Will this do? Or is there more to the problem than you've explained?
snip

$_ = function($_) foreach ($var1, $var2, $var3);

is the same as

foreach ($var1, $var2, $var3) {
    $_ = function($_)
}

If you only have one statement* in a loop for can write it in the
former method.  It is considered by many to be clearer.


* well, you can chain statements using , but that is poor form outside
of Perl Golf, Obfuscation, and one-liners.

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


