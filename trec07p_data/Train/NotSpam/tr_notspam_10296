From perl6-all-return-81340-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon May 14 17:49:39 2007
Return-Path: <perl6-all-return-81340-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4ELncqD027610
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 14 May 2007 17:49:39 -0400
Received: (qmail 5320 invoked by uid 514); 14 May 2007 21:49:35 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 5315 invoked from network); 14 May 2007 21:49:35 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: domain of dataweaver@gmail.com designates 209.85.132.250 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=L7YAJ/93EBpjoiqUCSPWkia7LO/oHDamgfKlofleRfeHpNCyCcAlRTTt147W/sqajzAcpXRiHSea/o2gJwtqdRSLCt+7xTjVGt/7ShMAGy2slb29t0lgBBfmjwoGp62SmFQNP6Wc2ExNuKT54V6ZAvVWzXhJGXMpNUaum0uT/EE=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=c2dF0d6DagzMTUqno7963EPqNCkVbxDa2KSZ7URkAjKB2HnYO8cAT2YBDigPcIhWPGNU3IR1aZsQCdZQxtHyI118P9dIqCu6QoTrRb3dXYOewyiYRtadma4mf6QVvay6WzsGPh8Lm56fmeWKdQZnHsBWhYg76Er8vL4ie9RgFnY=
Message-ID: <ef30550b0705141429i23d3531lb25ed1f6193214b1@mail.gmail.com>
Date: Mon, 14 May 2007 14:29:11 -0700
From: "Jonathan Lang" <dataweaver@gmail.com>
To: "gabriele renzi" <surrender_it@rc.europe.yahoo-eu1.akadns.net>
Subject: Re: explicit line termination with ";": why?
Cc: perl6-language@perl.org
In-Reply-To: <20070514170459.17631.qmail@lists.develooper.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Disposition: inline
References: <20070514170459.17631.qmail@lists.develooper.com>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from base64 to 8bit by flax9.uwaterloo.ca id l4ELncqD027610

gabriele renzi wrote:> Hi everyone,>> I don't want to argue about the design of perl6, I just wonder: why> the semicolon is still needed in the end of lines in perl6?
It isn't - sometimes.  S03 identifies a number of ways that anexpression can be terminated: the semicolon (';'), a block-final('}'), a control block (' { ... }'), a statement modifier('if'|'unless'|'while'|'until'|'for'|'given'|'when')^, or a feedoperator ('<<==', '<==', '==>', '==>>').
^ FWIW, S03 needs updating, since it doesn't list 'given' or 'when'among the statement modifiers in the block termination section.
A couple of thoughts:
1. There's a subtlety here: termination of an expression is not alwaysthe same as termination of a statement.  In particular, ';' is prettymuch equivalent to the '<==' feed operator when used in a bracketingconstruct [1]^, and feed operators in general don't appear to forcestatement termination the way that control blocks, statementmodifiers, and block-finals do.  Of course, this distinction may be memisunderstanding how expression termination works.
2. This brings up the possibility of custom-designed terminationoperators.  Question: which kinds of operators can have thisprecedence?  That is, prefix, postfix, infix, circumfix, orpostcircumfix?  It appears to me that our current list of terminationoperators includes analogs of most of these: postfix:<;>,infix:{'<=='}, circumfix:<{ }>, and postcircumfix:«\s{ }» [2]^.
   Meanwhile, how much clarity does the parser have between postfixand infix?  That is, if I defined both postfix:<foo> and infix:<foo>,would the parser be able to reliably distinguish between them?  Thismatters to the current topic because ';' could be thought of as'postfix-like' when used to terminate a statement, and 'infix-like'when being used to construct feeds; if clarity between postfix andinfix exists, you might be able to do away with the "bracketedcontext" clause - though it might not be wise to do so, even if youcould.)
   I'm thinking about this in terms of the possibility of adding morepunctuation to the syntax: consider something akin to a postfix:<?>operator that behaves exactly like postfix:<;>, except that itautomatically topicalizes the expression's value.  Or a postfix:<.>that always behaves the way that postfix:<;> does at statement level[3]^.  Borrowing from Spanish, circumfix:<¿ ?> might be tocircumfix:<{ }> as postfix:<?> would be to postfix:<;>.  And so on.
   As long as we maintain clarity between the grammatical categories,such "punctuation operators" shouldn't present any difficulty; e.g.,postfix:<?> will not clobber prefix:<?> or vice versa, even if theformer has terminator precedence and the latter has symbolic unaryprecedence.
   Or is this the sort of thing that you'd rather consign to explicithacks of the parser?
^[1]: see S09.^[2]: Admittedly, this last one cheats a bit by putting whitespaceinto the delimiter.  But the principle is the same.^[3]: If this were included in the core, you might even reverse thingsso that ';' is defined in terms of postfix:<.> or infix:{'<=='},depending on the context; in this case, postfix:<?> would be definedin terms of postfix:<.>, rather than postfix:<;>.  In fact, the onlything keeping postfix:<.> from completely replacing postfix:<;> as astatement terminator and insisting that the latter always be used as ashortcut for feeds is the long tradition that the latter has inprogramming languages - much like perl 6's infix:<.> replaces perl 5's'->' because that's what everyone else uses.
-- Jonathan "Dataweaver" Lang

