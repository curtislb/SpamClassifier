From sugar-bounces@laptop.org  Tue May 22 17:52:14 2007
Return-Path: <sugar-bounces@laptop.org>
Received: from pedal.laptop.org (pedal.laptop.org [18.85.2.148])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l4MLqDqD017475
	for <ktwarwic@speedy.uwaterloo.ca>; Tue, 22 May 2007 17:52:14 -0400
Received: from pedal.laptop.org (localhost [127.0.0.1])
	by pedal.laptop.org (Postfix) with ESMTP id 065254EF33;
	Tue, 22 May 2007 17:51:32 -0400 (EDT)
X-Original-To: sugar@laptop.org
Delivered-To: sugar@laptop.org
Received: from spam.laptop.org (spam.laptop.org [18.85.46.23])
	by pedal.laptop.org (Postfix) with ESMTP id 9A98C4EF33
	for <sugar@laptop.org>; Tue, 22 May 2007 17:51:30 -0400 (EDT)
X-ASG-Debug-ID: 1179870727-523d00050000-3Xmyjt
X-Barracuda-URL: http://18.85.46.23:8000/cgi-bin/mark.cgi
X-Barracuda-Connect: www.WarpOMatic.com[66.98.182.86]
X-Barracuda-Start-Time: 1179870727
X-Barracuda-Encrypted: DHE-RSA-AES256-SHA
Received: from WarpOMatic.com (www.WarpOMatic.com [66.98.182.86])
	(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by spam.laptop.org (Spam Firewall) with ESMTP id 99CB4E121
	for <sugar@laptop.org>; Tue, 22 May 2007 17:52:07 -0400 (EDT)
Received: from [192.168.1.105] (adsl-68-122-69-206.dsl.pltn13.pacbell.net
	[68.122.69.206]) (authenticated bits=0)
	by WarpOMatic.com (8.12.10/8.12.10) with ESMTP id l4MLlUfX012450;
	Tue, 22 May 2007 14:47:30 -0700
Message-ID: <46536603.6010108@DonHopkins.com>
Date: Tue, 22 May 2007 14:52:03 -0700
From: Don Hopkins <dhopkins@DonHopkins.com>
User-Agent: Thunderbird 1.5.0.10 (Windows/20070221)
MIME-Version: 1.0
To: Sugar List <sugar@laptop.org>
X-ASG-Orig-Subj: Launching and debugging activities under gdb
References: <9B1436AA-497F-4E11-9FB1-5815085DD766@freudenbergs.de>
In-Reply-To: <9B1436AA-497F-4E11-9FB1-5815085DD766@freudenbergs.de>
X-Barracuda-Bayes: INNOCENT GLOBAL 0.0000 1.0000 -2.0210
X-Barracuda-Virus-Scanned: by Barracuda Spam Firewall at laptop.org
X-Barracuda-Spam-Score: -2.02
X-Barracuda-Spam-Status: No, SCORE=-2.02 using global scores of TAG_LEVEL=3.5
	QUARANTINE_LEVEL=1000.0 KILL_LEVEL=5.5 tests=
X-Barracuda-Spam-Report: Code version 3.1, rules version 3.1.17724
	Rule breakdown below
	pts rule name              description
	---- ----------------------
	--------------------------------------------------
Cc: John Gilmore <gnu@toad.com>, Don Hopkins <dhopkins@DonHopkins.com>
Subject: [sugar] Launching and debugging activities under gdb
X-BeenThere: sugar@laptop.org
X-Mailman-Version: 2.1.9
Precedence: list
List-Id: "Discussion of OLPC design,
	desktop platform and user experience" <sugar.laptop.org>
List-Unsubscribe: <http://mailman.laptop.org/mailman/listinfo/sugar>,
	<mailto:sugar-request@laptop.org?subject=unsubscribe>
List-Archive: <http://mailman.laptop.org/pipermail/sugar>
List-Post: <mailto:sugar@laptop.org>
List-Help: <mailto:sugar-request@laptop.org?subject=help>
List-Subscribe: <http://mailman.laptop.org/mailman/listinfo/sugar>,
	<mailto:sugar-request@laptop.org?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: sugar-bounces@laptop.org
Errors-To: sugar-bounces@laptop.org

It would be useful to be able to run activities from a command line, so 
you can launch and debug them under gdb.
I looked in /proc/<process_id> to figure out the command line and 
environment that were being executed to launch an activity, and I typed 
the same thing into the shell to launch it by hand.
The activity started and ran without any errors, but no window showed up.
Of course I can attach gdb to an activity that's already running, but 
all the interesting bugs happen while the activity is starting up, and I 
can't type fast enough to catch it.

What else do I need to do, in order to get an activity to launch from 
the command line or gdb?
Is dbus passing in some one-time environment variables, or setting up a 
rendezvous that's not set up when I run an activity from the command line?
Is there some way I can invoke an activity manually from Python?

Also, it would be great to be able to turn off the stdout/stderr 
redirection so I get all the stack dumps, prints and debug messages 
dumped out to the debugger window!
The way some error messages go into shell.log and others into Read.log 
(but no stack traces!) make it very hard to debug and figure out what 
order things happened in.
Doing a tail -f of the log files gets confused when the files get 
truncated/removed, so I have to restart the tail each time I start the 
application. (The inode number of shell.log stays the same, but Read.log 
gets removed each time I restart Sugar, so the inode number changes and 
tail loses track of the log file.)

Another thing that would make debugging easier:
Does anyone know of a handy-dandy off-the-shelf Python command line 
telnet server that I can run, so I can telnet into my application after 
it launches and meddle around with it Python?

Thanks for any advice you can share to make debugging sugar applications 
easier!

    -Don

_______________________________________________
Sugar mailing list
Sugar@laptop.org
http://mailman.laptop.org/mailman/listinfo/sugar

