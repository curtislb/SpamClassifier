From perl6-all-return-81747-ktwarwic=speedy.uwaterloo.ca@perl.org  Sat Jun  2 10:24:50 2007
Return-Path: <perl6-all-return-81747-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l52EOmhB024349
	for <ktwarwic@flax9.uwaterloo.ca>; Sat, 2 Jun 2007 10:24:49 -0400
Received: (qmail 19427 invoked by uid 514); 2 Jun 2007 14:24:42 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 19421 invoked from network); 2 Jun 2007 14:24:42 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-0.7 required=8.0
	tests=BAYES_20,DKIM_POLICY_SIGNSOME,DKIM_SIGNED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: neutral (x1.develooper.com: 63.251.223.186 is neither permitted nor denied by domain of parrotcode@gmail.com)
Delivered-To: perlmail-parrot-porters@onion.perl.org
Delivered-To: parrot-porters@perl.org
Received-SPF: pass (x1.develooper.com: domain of parrotcode@gmail.com designates 64.233.162.236 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=jM3OrYEblc0ND+fgS7u6clkzz7cnM20Rn7qw2TVslyucUgBiA0xxa4ErAEJiYODLZtEieIwytsasY0/tajdzIlj/Y1LOJ5IB68f1ylLcgjK8PBNzJ4W6LUlmhAVbCP9QwRp+ex3o+a8d0qh1LdzY1TCF9+AfLTYftHulRGbuDiA=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=aRvJxhtbTCVY/CzfidGXEROigiiYQ7bT+RYHo73t0bmyQtj/adyLwVWrpl7uv0KgtvsR2n7CHUDcjF0bR3FqIrGetHaulQDWzL+PcWCixdduoyWR6iVcd5HQXhXVwrQzHRCM4BOx7U/yftrnnYwW2LAUn7HpU+bpLyPaRiSbtdo=
Message-ID: <7b0e52b40706020656u47b66251oa6fa315e3c9de85a@mail.gmail.com>
Date: Sat, 2 Jun 2007 21:56:30 +0800
From: "Klaas-Jan Stol" <parrotcode@gmail.com>
To: "Andy Lester" <andy@petdance.com>
Subject: Re: Use const proactively
Cc: parrot-porters@perl.org
In-Reply-To: <830274C1-A70B-41A7-B65A-73CA2F4E2073@petdance.com>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_17808_10522355.1180792590560"
References: <830274C1-A70B-41A7-B65A-73CA2F4E2073@petdance.com>
X-Virus-Checked: Checked
X-Virus-Checked: Checked
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-0.2 required=8.0
	tests=BAYES_40,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,HTML_MESSAGE,SPF_PASS
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-0.1 required=8.0
	tests=BAYES_20,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,HTML_MESSAGE,SPF_NEUTRAL

------=_Part_17808_10522355.1180792590560
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

On 6/2/07, Andy Lester <andy@petdance.com> wrote:
>
> From my wiki at http://xoa.petdance.com/Use_const_proactively
>
>   Const your local variables
>
> The following is adapted from C++ Coding Standards by Herb Sutter and
> Andrei Alexandrescu (with some C++-specific stuff removed):
>
>      const is your friend: Immutable values are easier to understand,
> track, and reason about, so prefer consted variables wherever it is
> sensible and make const your default choice when you define a value.
> It's safe, and it's checked at compile time. Don't cast away const
> except to call a const-incorrect function. Constants simplify code
> because you only have to look at where the constant is defined to
> know its value everywhere. Consider this code:
>
>      void Fun( const char * p ) {
>          const size_t len = strlen(p);
>
>          /* ... 30 more lines ... */
>
>          if (len > 1)
>             ...
>      }
>
>      When seeing len's definition above, you gain instance confidence
> about len's semantics throughout its scope. It's a snapshot of p's
> length at a specific point. Just by looking up one line, you know
> len's semantics over its whole scope. Without the const, len might be
> later modified. Best of all, the compiler will help you ensure that
> this truth remains true.
>
>      Yes, const is viral -- add it in one place, and it wants to
> propagate throughout your code as you call other functions who
> signatures aren't yet const-correct. This is a feature, and this
> quality greatly increases const's power.
>
>      Const-correctness is worthwhile, proven, effective, and highly
> recommended. Understanding how and where a program's state changes is
> vital, and const documents that directly in code where the compiler
> can help to enforce it.
>
> == Const your function parameters
>
> Consting function parameters also lets the compiler know the behavior
> of your function. Consider this snippet of code:
>
> char buffer[20];
> c = buffer[0];
>
> The compiler or lint can now warn you that you're using buffer even
> though it hasn't been initialized. But what about this:
>
> void foo(char *p);
>
> char buffer[20];
> foo(buffer);
> c = buffer[0];
>
> Is foo() initializing what is sent into it? The compiler can't tell.
> But if you define it like so:
>
> void foo(const char *p);
>
> now the compiler knows that buffer can't be getting initialized.
>
> Think of consting your function parameters as a very basic contract
> with the caller.
>
>
> == What am I consting?
>
> In an declaration such as
>
>     char *p;
>
> there are two places const can be placed - with different effects.
>
> const char* p;
>      The bytes p points at are considered const when accessed via p,
> but the pointer p itself is not const
>
> char* const p;
>      The pointer "p" is considered const, but the bytes it points at
> are not
>
> They can be combined:
>
> const char* const p;
>      Both constant pointer and constant data
>
> The rule is that const affects the thing immediately following it.



FWIW, a short note about the place where to put "const":
a simple and easy rule is to read right to left:

char const *p; // means p is a pointer to constant characters
char * const p; // means that p is a constant pointer (*) to characters
char const * const p; // means that p is a constant pointer to constant
characters.

regards,
kjs

xoxo,
> Andy
>
> --
> Andy Lester => andy@petdance.com => www.petdance.com => AIM:petdance
>
>
>
>
>

------=_Part_17808_10522355.1180792590560--

