From perl6-all-return-81727-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri Jun  1 18:17:23 2007
Return-Path: <perl6-all-return-81727-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l51MHMhB015485
	for <ktwarwic@flax9.uwaterloo.ca>; Fri, 1 Jun 2007 18:17:22 -0400
Received: (qmail 17399 invoked by uid 514); 1 Jun 2007 22:17:16 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 17394 invoked from network); 1 Jun 2007 22:17:16 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-0.2 required=8.0
	tests=BAYES_40,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: moderator for perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: unknown (x1.develooper.com: error in processing during lookup of andy@petdance.com)
Mime-Version: 1.0 (Apple Message framework v752.3)
Content-Transfer-Encoding: 7bit
Message-Id: <44643873-3B7E-4ABB-B627-18B3584E88F0@petdance.com>
Content-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed
To: perl6-internals List <perl6-internals@perl.org>
From: Andy Lester <andy@petdance.com>
Subject: Use const proactively
Date: Fri, 1 Jun 2007 14:32:12 -0500
X-Mailer: Apple Mail (2.752.3)
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=2.0 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,KARMA_CONNECT_NEGATIVE

Here's a bit of an explanation of why I const like I do:

http://xoa.petdance.com/Use_const_proactively

One of my jobs in Perl 5 and Parrot has been to apply const as much  
as humanly possible.

== Const your local variables

The following is adapted from C++ Coding Standards by Herb Sutter and  
Andrei Alexandrescu (with some C++-specific stuff removed):

     const is your friend: Immutable values are easier to understand,  
track, and reason about, so prefer consted variables wherever it is  
sensible and make const your default choice when you define a value.  
It's safe, and it's checked at compile time. Don't cast away const  
except to call a const-incorrect function. Constants simplify code  
because you only have to look at where the constant is defined to  
know its value everywhere. Consider this code:

     void Fun( const char * p ) {
         const size_t len = p;
         /* ... 30 more lines ... */
     }

     When seeing len's definition above, you gain instance confidence  
about len's semantics throughout its scope. It's a snapshot of p's  
length at a specific point. Just by looking up one line, you know  
len's semantics over its whole scope. Without the const, len might be  
later modified. Best of all, the compiler will help you ensure that  
this truth remains true.

     Yes, const is viral -- add it in one place, and it wants to  
propagate throughout your code as you call other functions who  
signatures aren't yet const-correct. This is a feature, and this  
quality greatly increases const's power.

     Const-correctness is worthwhile, proven, effective, and highly  
recommended. Understanding how and where a program's state changes is  
vital, and const documents that directly in code where the compiler  
can help to enforce it.


== Const your function parameters

Consting function parameters also lets the compiler know the behavior  
of your function. Consider this snippet of code:

char buffer[20];
c = buffer[0];

The compiler or lint can now warn you that you're using buffer even  
though it hasn't been initialized. But what about this:

void foo(char *p);

char buffer[20];
foo(buffer);
c = buffer[0];

Is foo() initializing what is sent into it? The compiler can't tell.  
But if you define it like so:

void foo(const char *p);

now the compiler knows that buffer can't be getting initialized.

Think of consting your function parameters as a very basic contract  
with the caller.


--
Andy Lester => andy@petdance.com => www.petdance.com => AIM:petdance




