From beginners-return-91218-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon Apr 30 10:02:14 2007
Return-Path: <beginners-return-91218-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3UE2D6w013456
	for <ktwarwic@speedy.uwaterloo.ca>; Mon, 30 Apr 2007 10:02:13 -0400
Received: (qmail 24092 invoked by uid 514); 30 Apr 2007 14:02:08 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 24083 invoked from network); 30 Apr 2007 14:02:07 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 30 Apr 2007 14:02:07 -0000
Received: (qmail 25178 invoked by uid 225); 30 Apr 2007 14:02:07 -0000
Delivered-To: beginners@perl.org
Received: (qmail 25159 invoked by alias); 30 Apr 2007 14:02:05 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME,SPF_HELO_PASS,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of mja@richweb.com designates 63.90.9.3 as permitted sender)
Received: from mail.richweb.com (HELO mail.richweb.com) (63.90.9.3)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Mon, 30 Apr 2007 07:02:00 -0700
Received: from [192.168.5.89] (smith [208.73.136.26])
	by mail.richweb.com (Postfix) with ESMTP id BD373FA90;
	Mon, 30 Apr 2007 10:01:55 -0400 (EDT)
Message-ID: <4635F83C.5000808@richweb.com>
Date: Mon, 30 Apr 2007 10:07:56 -0400
From: "Matthew J. Avitable" <mja@richweb.com>
Organization: Richweb, Inc.
User-Agent: Thunderbird 1.5.0.10 (X11/20070403)
MIME-Version: 1.0
To: Rob Dixon <rob.dixon@350.com>
Cc: Perl Beginners <beginners@perl.org>
Subject: Re: creating hash from scalar variable
References: <46349351.3090501@gmail.com> <bb075cdf0704291703o51bc1bbawa0e484d074154268@mail.gmail.com> <46353E93.60206@richweb.com> <4635E068.5070208@350.com>
In-Reply-To: <4635E068.5070208@350.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Status: O
Content-Length: 2265
Lines: 102

Unf.  Got the picture!  I'll spend my night in the stockades :)

-m

Rob Dixon wrote:
> Matthew J. Avitable wrote:
>>
>> Given the original string ...
>>> my $test =
>>>   'NAS-IP-Address = 192.168.42.1
>>>   .......
>>>   Acct-Unique-Session-Id = "87d380e1881d226c"
>>>   Timestamp = 1177282824';
>>>
>>
>> You could also invoke perl 5.8's ability to treat an in-memory string 
>> as a file:
>>
>> ## get a filehandle on $test
>> open(my $fh, '<', \$test) or die "Unable to open scalar ref for 
>> reading: $!";
>>
>> while (my $line = <$fh>) {
>
> Hmm. I don't feel this is an improvement over just
>
>  foreach (split /\n/, $line) {
>    :
>  }
>
> or even
>
>  while ($test =~ /(.*\n?)/g) {
>    my $line = $1;
>    :
>  }
>
> to avoid duplicating the whole string at once.
>
>>    ## split on '=' with a max of two resulting fields, clear spaces 
>> adjacent to '='.
>>    ## clear newlines as well.
>>    chomp ( my ($k, $v) = split(/\s*=\s*/, $line, 2) );
>
> Why chomp here? You're chomping $k, which /can't/ end in a record, as 
> well as $v.
> Just
>
>  chomp $line;
>  my ($k, $v) = split /\s*=\s*/, $line, 2;
>
> is more appropriate.
>
>>
>>    ## clear out the quotes in the value
>>    $v =~ s/"//og;
>
> Why use the /o modifier when there are no variables being interpolated 
> into
> the regex?
>
> Even better (in terms of speed) would be
>
>  $v =~ tr/"//d;
>
> although I admit I tend to use s/// exclusively myself.
>
> Also why remove the quotes when the OP didn't say he wanted to, and 
> may actually
> need them?
>
>>    ## do something with your key and value:
>>    print "Key is $k,  Value is: $v\n";
>>
>> }
>>
>> close $fh;
>>
>>
>> Reading a file line by line is a fairly recognizable pattern to perl 
>> programmers of all levels, so it may assist future maintainers.
>
> ...unless it stops working, when opening a string on a filehandle is a
> fairly /unrecognisable/ pattern, and the maintainer may be stumped!
>
> Cheers,
>
> Rob
>


-- 
+ Matt J. Avitable: Senior Systems Analyst, Richweb, Inc.
+ Richweb.com: Providing Internet-Based Business Solutions since 1995
+ (804) 747.8592 x 109


-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


