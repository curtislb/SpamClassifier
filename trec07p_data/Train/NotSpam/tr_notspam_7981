From perl6-all-return-81129-ktwarwic=speedy.uwaterloo.ca@perl.org  Sun May  6 06:42:09 2007
Return-Path: <perl6-all-return-81129-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l46Ag8qD018140
	for <ktwarwic@flax9.uwaterloo.ca>; Sun, 6 May 2007 06:42:09 -0400
Received: (qmail 11390 invoked by uid 514); 6 May 2007 10:42:06 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 11385 invoked from network); 6 May 2007 10:42:06 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-0.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,KARMA_CONNECT_NEGATIVE,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: neutral (x1.develooper.com: local policy)
X-Spam-Checker-Version: SpamAssassin 3.1.8 (2007-02-13) on pluna
X-Spam-Level: 
Date: Sun, 6 May 2007 12:32:12 +0200
From: pancake <pancake@youterm.com>
To: perl6-internals@perl.org
Subject: Re: mmx/sse copy functions (was: Puzzling structure in
 <parrot/stacks.h>)
Message-Id: <20070506123212.62c6758e.pancake@youterm.com>
In-Reply-To: <200704262244.05667.lt@toetsch.at>
References: <Pine.LNX.4.62.0704261514050.20693@fractal.phys.lafayette.edu>
	<200704262244.05667.lt@toetsch.at>
Organization: nopcode
X-Mailer: Sylpheed 2.3.1 (GTK+ 2.10.7; i386-pc-linux-gnu)
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
X-Old-Spam-Status: No, score=0.0 required=3.0 tests=AWL autolearn=disabled
	version=3.1.8
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-1.9 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL

I think that the right way to handle paddings for memory alignment
is using the pack(1) pragma directive to make everything fit on 1
byte and ensure by code that what we do is correct (instead of
relaying this task to the compiler).

Of course..if any compiler does not supports this directive we
should not use it.

Here's a example:

$ cat foo.c
#pragma pack(1)
struct { char foo; int bar; } str;
main() { printf("%d\n", sizeof(str)); }

$ gcc foo.c
$ ./a.out
5

We can pack to 4 or so...some compilers (aka gcc) returns some
nasty sizes when measuring..(not necessary aligned to 4).

--pancake

On Thu, 26 Apr 2007 22:44:05 +0200
Leopold Toetsch <lt@toetsch.at> wrote:

> Am Donnerstag, 26. April 2007 21:44 schrieb Andy Spieherty:
> > Does anyone understand the 'dummy' element in
> > include/parrot/stacks.h?  Here is the relevant snippet:
> >
> >     typedef struct Stack_Chunk {
> >         pobj_t obj;
> >         int size;
> >         const char * name;
> >         struct Stack_Chunk *prev;
> >     #if ! DISABLE_GC_DEBUG && defined(I386)
> >         void * dummy;   /* force 8 byte align for mmx and sse moves */
> >     #endif
> >         union { /* force appropriate alignment of 'data' */
> >             void *data;
> >     #ifndef I386
> >             double d_dummy;         /* align double values on stack */
> >     #endif
> >         } u;
> >     } Stack_Chunk_t;
> >
> > (I assume that mmx and sse are some sort of i386-specific instructions.)
> 
> Indeed.
> 
> > Specifically, I'm wondering about two things:
> >
> > 1.  Is the comment backwards?  If I count correctly, including the
> >     void *dummy means that u.data will *NOT* be aligned on an 8-byte
> >     boundary.  Is that the actual intent?  (Of course, compilers are
> >     free to add in extra padding inside structures, and it may end up
> >     aligned with some compilers but not aligned with others.)
> 
> At some earlier time in parrot history, there was a (32 bit, pointer-sized) 
> 'version' [1] structure item in pobj_t, which was active 
> with !DISABLE_GC_DEBUG. The dummy was needed for i386 (when x86_64 didn't 
> even exist) to align the data pointer at an 8-byte boundary.
> 
> The assembly coded mmx/sse copy subroutines were active at that time and did 
> introduce a nice speedup.
> These copy functions were used to copy register frames at - hmmm ancient - 
> times before parrot got more than 32 registers.
> 
> As the past tense is indicating, above dummy is totally obsolete and the copy 
> functions[2] are unused. The latter could be removed too, but might be a 
> nice-to-have, when something faster than memcpy(3) is wanted or needed, 
> albeit only on restricted (but common) platforms and for aligned memory only. 
> Some recent CPUs do have special instructions for copying unaligned memory 
> reegions too.
> 
> leo
> 
> [1] it was renamed later to a similar name and was removed thereafter:
>     $ svn log include/parrot/pobj.h | grep version
> 
> [2] see also these (and related) in the parrot tree
>     $ find . -type f | egrep '_mmx|_sse' | grep -v svn
>     $ find . -type f | xargs grep mmx # ...
> 


  --pancake

