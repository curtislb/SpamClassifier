From perl6-all-return-81596-ktwarwic=speedy.uwaterloo.ca@perl.org  Sat May 26 04:20:20 2007
Return-Path: <perl6-all-return-81596-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4Q8KFqD005755
	for <ktwarwic@flax9.uwaterloo.ca>; Sat, 26 May 2007 04:20:16 -0400
Received: (qmail 17704 invoked by uid 514); 26 May 2007 08:20:10 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 17698 invoked from network); 26 May 2007 08:20:09 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: neutral (x1.develooper.com: 63.251.223.186 is neither permitted nor denied by domain of nick@flirble.org)
Delivered-To: perlmail-parrot-porters@onion.perl.org
Delivered-To: parrot-porters@perl.org
Received-SPF: pass (x1.develooper.com: domain of nick@flirble.org designates 194.70.3.20 as permitted sender)
Date: Sat, 26 May 2007 09:18:44 +0100
From: Nicholas Clark <nick@ccl4.org>
To: chromatic <chromatic@wgz.org>
Cc: andy@petdance.com, parrot-porters@perl.org
Subject: Re: [svn:parrot] r18643 - in trunk: include/parrot src
Message-ID: <20070526081844.GI20876@plum.flirble.org>
Mail-Followup-To: chromatic <chromatic@wgz.org>, andy@petdance.com,
	parrot-porters@perl.org
References: <20070526015308.39A1ECB9B8@x12.develooper.com> <200705251920.07473.chromatic@wgz.org>
Mime-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Disposition: inline
Content-Transfer-Encoding: 8bit
In-Reply-To: <200705251920.07473.chromatic@wgz.org>
User-Agent: Mutt/1.4.2.1i
X-Organisation: Tetrachloromethane
Sender: Nicholas Clark <nick@flirble.org>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-0.7 required=8.0
	tests=BAYES_20,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_HELO_PASS,SPF_PASS
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-1.9 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL

On Fri, May 25, 2007 at 07:20:07PM -0700, chromatic wrote:
> On Friday 25 May 2007 18:53:08 petdance@cvs.perl.org wrote:
> 
> > Modified: trunk/src/objects.c
> > ===========================================================================
> >=== --- trunk/src/objects.c (original)
> > +++ trunk/src/objects.c Fri May 25 18:53:05 2007
> > @@ -40,10 +40,9 @@
> >  INTVAL
> >  Parrot_get_vtable_index(Interp *interp, STRING *name)
> >  {
> > -    char  *name_c = string_to_cstring(interp, name);
> > +    const char * const name_c = string_to_cstring(interp, name);
> >      INTVAL low    = 0;
> >      INTVAL high   = NUM_VTABLE_FUNCTIONS - 1;
> > -    INTVAL i;
> >  
> >      /* some of the first "slots" don't have names. skip 'em. */
> >      while (!Parrot_vtable_slot_names[low]) {
> > @@ -52,16 +51,13 @@
> >      }
> >  
> >      while (low <= high) {
> > -        char *meth_c;
> > -        int   cmp;
> > -
> > -        i      = (low + high) / 2;
> > -        meth_c = Parrot_vtable_slot_names[i];
> > +        const INTVAL i = (low + high) / 2;
> > +        const char * const meth_c = Parrot_vtable_slot_names[i];
> 
> Whoops, that just broke a couple of platforms.  As I understand it, some picky 
> compilers only allow simultaneous declarations and assignments at the start 
> of a function, not within any block.

They wouldn't be C89 conformant if they forbid *that*.

It may be something to do with the const *char const, what type "" string
constants have (according to the particular compiler) and how fussy it is.

And we found bugs in (at least) Borland's compiler to do with this sort of
thing.

Nicholas Clark

