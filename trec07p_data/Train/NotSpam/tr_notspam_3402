From beginners-return-90948-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri Apr 20 00:54:49 2007
Return-Path: <beginners-return-90948-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3K4sl0I001517
	for <ktwarwic@speedy.uwaterloo.ca>; Fri, 20 Apr 2007 00:54:48 -0400
Received: (qmail 9521 invoked by uid 514); 20 Apr 2007 04:54:19 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 9511 invoked from network); 20 Apr 2007 04:54:18 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 20 Apr 2007 04:54:18 -0000
Received: (qmail 8182 invoked by uid 225); 20 Apr 2007 04:54:18 -0000
Delivered-To: beginners@perl.org
Received: (qmail 8178 invoked by alias); 20 Apr 2007 04:54:18 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of chas.owens@gmail.com designates 209.85.132.247 as permitted sender)
Received: from an-out-0708.google.com (HELO an-out-0708.google.com) (209.85.132.247)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 19 Apr 2007 21:54:16 -0700
Received: by an-out-0708.google.com with SMTP id b8so741175ana
        for <beginners@perl.org>; Thu, 19 Apr 2007 21:54:11 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=g7gGMy1bcoz0pCkZEr2oqYg7OsC7PJ2mEmieD7mW1F89MAsDVjupjNZwpioZwCWEGpNUiuE/QptKj0AkLOllFPkMcgl1Um1cgbMWCwGShNQTRxbJ9CgozVj2TI2y2Rg/UaKUGTS8mZXKUBg5etyVY6kz4AxeQk1EsNIQI+wgSfo=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=b9AzCaKXNAA3Sptg2kM+yjWxMTyDbNvIXmkhTXTJIxt1gjhPr4UoAvh+N9oQ2oP7oFHm29ouGjaC4hkepkUZoJBHPkjkBfOJgjXqG+IgJnO1DBYr2ej/TBM+2AszI6SydC8EBvqjnpneaddg3Eb0OcWluDpKVPCUvDfePTdMEks=
Received: by 10.115.58.1 with SMTP id l1mr1049041wak.1177044851369;
        Thu, 19 Apr 2007 21:54:11 -0700 (PDT)
Received: by 10.114.79.3 with HTTP; Thu, 19 Apr 2007 21:54:11 -0700 (PDT)
Message-ID: <58ce48dc0704192154l4e2acd35w40cd45aa1897527c@mail.gmail.com>
Date: Fri, 20 Apr 2007 00:54:11 -0400
From: "Chas Owens" <chas.owens@gmail.com>
To: "Rob Dixon" <rob.dixon@350.com>
Subject: Re: Nested loop
Cc: "John W. Krahn" <krahnj@telus.net>, "Perl Beginners" <beginners@perl.org>
In-Reply-To: <46279AF2.1020502@350.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <ca5781c80704180957w72c92fbbq2e083368ed9339e9@mail.gmail.com>
	 <58ce48dc0704181057q79262a61q6d5e1370d8c99245@mail.gmail.com>
	 <46276441.7213.2471F368@Jenda.Krynicky.cz>
	 <58ce48dc0704190807i14627a5bh53a356b664ffdd9a@mail.gmail.com>
	 <46279515.9080603@telus.net> <46279AF2.1020502@350.com>
Status: O
Content-Length: 1008
Lines: 36

On 4/19/07, Rob Dixon <rob.dixon@350.com> wrote:
snip
> for (my $elem = $doc->firstChild; $elem; $elem = $elem->nextSibling) {
>   :
> }
snip

I covered that in my earlier email:
    Weirder stuff that you only tend to see people coming from a C background do
    for (my $node = $head; $node;$node = $node->next) {}
    ...
    But in Perl it is rarely necessary to do this sort of loop since most
    functions return a list that can be iterated over using for:

    for my $node ($head->nodes) {}

In this case your module should include a children method

for my $elem ($doc->children) {}

or a true iterator

my $iter = $doc->child_iter;
while (my $elem = $iter->next) {}

If it doesn't then bug the maintainer to add one or both.  Having a
true iterator will put him or her ahead of the curve for Perl 6's
iterated-the-iterator operator

for =$iter -> $elem {}

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


