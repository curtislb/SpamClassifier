From perl6-all-return-81249-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu May 10 20:04:29 2007
Return-Path: <perl6-all-return-81249-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4B04JqD016172
	for <ktwarwic@flax9.uwaterloo.ca>; Thu, 10 May 2007 20:04:19 -0400
Received: (qmail 29073 invoked by uid 514); 11 May 2007 00:04:16 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 29068 invoked from network); 11 May 2007 00:04:16 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-1.1 required=8.0
	tests=BAYES_05,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,HTML_MESSAGE,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: domain of alek.storm@gmail.com designates 209.85.134.185 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=tEhkcDHRsJQXm+PUQrt6+twcx6nscNMTGTR1eF69AmrUm4QQgJgWajDYyVAAV2dIJd+00/bWFgrorI/Ieu8F3DtH7YLUNsmatolcq6Ee7Ciwu/6cw1O3A78fjRfaU34yhIZ6dEULxV4cctvNeR+fBp4HC8UCwPJfnbmFmgEpuJE=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=Y2MgpdXwYYzmjRngDlmLMVA2d9Aq8u9mXWUBDJXgK6kgiox7MY384229nX0vYke01GBRofsYPSAaE2Hz1t9a+sBcLShRuCKGwTB9NV/QCCmTmjab5JYgnLh9m5NPm8eJjVMUETtMi1pnpx6+m0FtaYccKnl0Zn+xr4OD8AbLF1E=
Message-ID: <189adbd0705101700k684bc587he3ceadc28b3afb1@mail.gmail.com>
Date: Fri, 11 May 2007 00:00:39 +0000
From: "Alek Storm" <alek.storm@gmail.com>
To: "Allison Randal" <allison@perl.org>
Subject: Re: [perl #42905] [PATCH] implement vtable overriding for PDD15, bugfix
Cc: perl6-internals@perl.org
In-Reply-To: <464124ED.2090102@perl.org>
MIME-Version: 1.0
Content-Type: multipart/mixed; 
	boundary="----=_Part_84546_17827581.1178841639897"
References: <RT-Ticket-42905@perl.org>
	 <189adbd0705071821l427409d9v94895cc11b9a374@mail.gmail.com>
	 <rt-3.6.HEAD-12281-1178587398-1986.42905-72-0@perl.org>
	 <464124ED.2090102@perl.org>
X-Virus-Checked: Checked
X-Virus-Checked: Checked
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-1.1 required=8.0
	tests=BAYES_05,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,HTML_MESSAGE,SPF_PASS

------=_Part_84546_17827581.1178841639897
Content-Type: multipart/alternative; 
	boundary="----=_Part_84547_20639607.1178841639898"

------=_Part_84547_20639607.1178841639898
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

On 5/9/07, Allison Randal <allison@perl.org> wrote:
>
> On general development styles, you've altered the spec, the tests, and
> the code all in one massive patch. It's better to make changes in
> smaller steps. That gives the whole list an opportunity to discuss the
> changes, and accept or reject individual components.
>
> If you have spec changes, it's best to talk about those on the list
> before you start implementing the code for the spec changes. (At the
> very least, it's less work for you, since it saves you the trouble of
> implementing and reimplementing code depending on which of your proposed
> spec changes are accepted.)
>
> When you change existing tests, that means you could be breaking
> existing code, so it's likely that the code changes that go with the
> test changes will need at least a full deprecation cycle. If you split
> the code and test changes for that feature out into a separate patch,
> then you won't have to delay all your changes waiting for the
> deprecation cycle.


Thanks, that's great advice.  Do you mean that the changes to the tests
would be accepted before the changes to the code?


> The existing code does need a refactor, and given how it's written now I
> can understand why you went in this direction. But, the direction I want
> the refactor to go is increased encapsulation. src/objects.c should be
> stripped down to as little code as possible, and should have no
> knowledge of the specific object model it's operating on, or the
> internals of the class or object. The details of the implementation
> should live in the Class PMC (or ParrotClass PMC, or MyHLLsCustomClass
> PMC).


Absolutely.


> ParrotObject has the right idea here. The C-level definitions of the
> vtable entries are responsible for checking whether they've been
> overridden. (A lot of that code is boiler-plate and could be refactored
> down to a few internal utility functions, but the basic implementation
> strategy is sound.)


I would have gone with that, but there's no way to deal with inheritance: if
a vtable method is added to a superclass, there's no way to notify
subclasses of the change.   Also, if Object implements any vtable functions,
each one has to check for its override manually.  Anyway, the
patch's implementation uses a faster lookup scheme than the old object
system: since it uses a hashtable, lookup is O(1), and increases linearly
with the number of parents.  Multiple parents change that, of course, but
that's rare.


> > The PCCMETHOD 'add_vtable_method' is added to Class.  Using two separate
>
> > methods for adding normal methods and vtable methods is much cleaner and
>
> > more logical, since they are two completely separate functionalities.
>
> The methods aren't a core part of the Class implementation, they'll just
> be added as a role. So, technically it doesn't matter much whether we do
> or don't have an 'add_vtable_method'. But from an interface perspective,
> it doesn't seem like much of an advantage over passing a flag to
> 'add_method', especially since it would mean you have to call both
> 'add_method' and 'add_vtable_method' separately when you want a
> particular chunk of code to be both a method and a vtable function.


I agree that it should be part of a role, and that using 'add_vtable_method'
over 'add_method' isn't doesn't make a lot of difference, but it does make
the interface a little easier.  Generally, and I believe you've said this
before, vtable methods are usually not also going to be added as normal
methods to a class, so calling 'add_vtable_method' and 'add_method'
separately isn't going to be very common.  What I don't like about using
'add_method' for both cases is that passing the anon flag with the vtable
flag changes the meaning of the name parameter.  We also run into trouble if
we want to add the sub with one name as a method and a different one as a
vtable method, which isn't a problem if we use both 'add_method' and
'add_vtable_method'.  There aren't really absolutes here; it's just a matter
of ease of use.


> > In fact, using this interface, the :vtable pragma is completely
> unnecessary, so
> > we could remove it if we wanted to.  Because I was unsure exactly how
> the
> > interface is going to end up, 'add_method' also adds vtable methods
> also, if
> > :vtable is set on the method. If we decide to go with this interface,
> I'd
> > like to take it out, along with the :vtable pragma.
>
> The fact that there's a verbose way to overload a vtable function at
> runtime is not enough justification to remove the :vtable syntax. It
> stays.


Why do we need two ways to do the same thing?  Using *either* interface
('add_method' alone or 'add_method' and 'add_vtable_method'), the :vtable
flag is redundant.  It adds no functionality.


> > Trying to override 'mark', 'destroy', or 'morph' throws an exception,
> > because overriding them might be dangerous.  An exception is also thrown
> for
> > 'init_pmc', see below.
>
> Why do these throw an exception? You should be able to override them.


I can see 'morph' maybe being overridden, but 'destroy' and 'mark'?  PIR has
no way to access GC internals, and it should stay that way.  Even if we
allowed them to be overridden, objects wouldn't be able to use them for
anything.

P.S. Actually, I can see them possiblyy being used if Parrot interfaces with
C code.  Is this a valid use case?


> > The 'init' vtable method in Object is not wrapped by pmc2c, since its
> > override is called from Class.new().  Class.new() is changed from
> accepting
> > a named slurpy of attributes to an unnamed slurpy of initializer
> > parameters.  This slurpy is :flattened and passed to 'init'.  This is
> really
> > cool, because now 'init' acts like a normal method, and can accept a
> > variable-sized parameter list.  This makes 'init_pmc' obsolete, so
> trying to
> > override it throws an exception.  Named parameters don't work, but
> c'mon,
> > you can't have it all, right?
>
> 'init' isn't a normal method, it's a vtable function. And it's never
> called directly, so how is it useful to make it take a variable sized
> parameter list? Named parameters stay. Just slurp them up and pass them
> on to init_pmc as a hash.


It's called pseudo-directly through Class.new(), which passes its parameters
right on to 'init'.  Only being able to pass one PMC parameter to object
constructors is a limitation of C that we can overcome in PIR.  Doing it
this way, we get type checking, checking on the number of parameters, and
all the good things that come with normal calling conventions.  Objects can
still choose to pass a Hash PMC as a normal parameter.  Losing named
parameters is well worth the tradeoff.


> > Currently, passing arguments to Class.new() when 'init' is not
> overridden
> > doesn't throw an exception.  Should it?
>
> No. There's no reason to require every class to override 'init'.


That's not what I meant.  I meant that passing arguments to Class.new()
implies that the caller thinks 'init' is overridden, and we can't let them
have a false expectation that something will happen to the arguments they
pass.  This is with the Class.new() that forwards its arguments to 'init',
not the current one that accepts an attribute initialization list.  That
being said, I can see that throwing an exception when this happens is not
strictly necessary.


> > This patch also fixes a bug with 'invoke' in both ParrotObject and
> Object:
> > 'self' had to be explicitly passed to the override.  This is fixed by
> adding
> > the signature flag PARROT_ARG_OBJECT, and unshifting that OR-ed with
> > PARROT_ARG_PMC onto the args signature.  This has a counterpart already
> used
> > in fetch_arg_sig() in src/inter_call.c.
>
> What bug? Submit a separate ticket with example code.


Done.


> > The old double-underscore method of vtable overriding can die along with
> the
> > old object system, but I would prefer to submit a patch to get rid of it
>
> > sooner, since I don't know how long the old object system will stick
> around.
>
> Pending complete resolution of RT#40626. This can go in the next
> deprecation cycle if we add a test for that last (resolved?) bug, and
> verify that no code in the repository is using the old double-underscore
> override.


I wrote a perl near-one-liner a while ago to convert all code in the
repository from the double-underscore system to using :vtable, but I haven't
submitted the changes yet.


> > Tests are included for 'init', 'invoke', and vtable method lookup
> through
> > the parent stack.  Also, I fixed some tests in t/pmc/parrotobject.t that
> > overrode 'invoke' without using the :method pragma, and removed the test
> for
> > #41372, which is now obsolete.
>
> Obsolete how? Does it test for a feature that no longer exists? (In
> which case why isn't it failing?) Or does it test for a bug that's been
> fixed? (In which case, it's a useful regression test.)


It wasn't failing because of a hackish workaround - :vtable was used without
:method on the 'invoke' sub.  Normally, I would keep it, but the test didn't
make sense after the patch was applied.


> > Also, a question: what exactly is the '_namespace' member of
> Parrot_Class
> > used for?  I don't see it used anywhere; it can be gotten and set, but
> is
> > otherwise useless, since methods are added using a separate mechanism.
>
> It's used to store a pointer to the namespace object associated with the
> class.


And what is the pointer used for?  Methods added to Classes can come from
anywhere, not just a particular namespace.  Why should Classes be associated
with namespaces?


> >  lib/Parrot/Pmc2c/Object.pm    |  158
>
> Why do we need this file? Objects don't need that much custom code
> generation, and it's highly unlikely that the code here will be useful
> for any object implementation other than PDD 15.


This file wraps all Object vtable methods with code that checks if the
vtable methods are overridden.  It's specific to the Parrot default
Class-Object implementation, though we could possibly have vtable methods
looked up through a PCCMETHOD in a role implemented by Class.

 I'm working on implementing a different way of doing this that completely
separates the Object PMC from vtable overriding, letting PMCs choose whether
or not to use vtable overriding, whether or not they inherit from Object.
I'll submit it as soon as I finish.


> >  src/pmc/class.pmc             |  150
>
> Adding a (global) interpreter entry for "current_object", "current_args"
> and "args_signature" is not a good solution to anything.


I didn't add them.  They were already there.  In fact, I submitted a patch
to move them from Parrot_Interp to Parrot_Context (#42155), because I don't
think they should be global either.  Still, it doesn't matter where they are
- the patch works the same way.

Whew.  Thanks for looking over my giant patch :).  I've split the original
patch into three parts - testing, specs, and code, and rebased it on
r18494.  I've also cut out the code that modified the implementation of
invoke() in the old object system, but kept the modification in the new one,
and cut out the changes to the tests related to that.

-- 
Alek Storm

------=_Part_84547_20639607.1178841639898
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

On 5/9/07, <b class="gmail_sendername">Allison Randal</b> &lt;<a href="mailto:allison@perl.org" target="_blank" onclick="return top.js.OpenExtLink(window,event,this)">allison@perl.org</a>&gt; wrote: <span class="gmail_quote">

</span>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">On general development styles, you&#39;ve altered the spec, the tests, and<br>the code all in one massive patch. It&#39;s better to make changes in 
<br>smaller steps. That gives the whole list an opportunity to discuss the <br>changes, and accept or reject individual components.<br><br>If you have spec changes, it&#39;s best to talk about those on the list<br>before you start implementing the code for the spec changes. (At the 
<br>very least, it&#39;s less work for you, since it saves you the trouble of <br>implementing and reimplementing code depending on which of your proposed<br>spec changes are accepted.)<br><br>When you change existing tests, that means you could be breaking 
<br>existing code, so it&#39;s likely that the code changes that go with the <br>test changes will need at least a full deprecation cycle. If you split<br>the code and test changes for that feature out into a separate patch, 
<br>then you won&#39;t have to delay all your changes waiting for the<br>deprecation cycle. </blockquote>
<div><br>Thanks, that&#39;s great advice.&nbsp; Do you mean that the changes to the tests would be accepted before the changes to the code?<br>&nbsp;</div>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">The existing code does need a refactor, and given how it&#39;s written now I<br>can understand why you went in this direction. But, the direction I want 
<br>the refactor to go is increased encapsulation. src/objects.c should be <br>stripped down to as little code as possible, and should have no<br>knowledge of the specific object model it&#39;s operating on, or the<br>internals of the class or object. The details of the implementation 
<br>should live in the Class PMC (or ParrotClass PMC, or MyHLLsCustomClass PMC). </blockquote>
<div><br>Absolutely.&nbsp;<br>&nbsp;</div>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">ParrotObject has the right idea here. The C-level definitions of the <br>vtable entries are responsible for checking whether they&#39;ve been 
<br>overridden. (A lot of that code is boiler-plate and could be refactored<br>down to a few internal utility functions, but the basic implementation <br>strategy is sound.)</blockquote>
<div><br>I would have gone with that, but there&#39;s no way to deal with inheritance: if a vtable method is added to a superclass, there&#39;s no way to notify subclasses of the change.&nbsp;&nbsp; Also, if Object implements any vtable functions, each one has&nbsp;to check for its override manually.&nbsp;&nbsp;Anyway, the patch&#39;s&nbsp;implementation uses a faster lookup scheme than the old object system: since it uses a hashtable, lookup is O(1), and increases linearly with the number of parents.&nbsp; Multiple parents change that, of course, but that&#39;s rare. 
</div>
<div>&nbsp;</div>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">&gt; The PCCMETHOD &#39;add_vtable_method&#39; is added to Class.&nbsp;&nbsp;Using two separate <br>&gt; methods for adding normal methods and vtable methods is much cleaner and 
<br>&gt; more logical, since they are two completely separate functionalities.<br><br>The methods aren&#39;t a core part of the Class implementation, they&#39;ll just <br>be added as a role. So, technically it doesn&#39;t matter much whether we do 
<br>or don&#39;t have an &#39;add_vtable_method&#39;. But from an interface perspective,<br>it doesn&#39;t seem like much of an advantage over passing a flag to <br>&#39;add_method&#39;, especially since it would mean you have to call both 
<br>&#39;add_method&#39; and &#39;add_vtable_method&#39; separately when you want a<br>particular chunk of code to be both a method and a vtable function. </blockquote>
<div><br>I agree that it should be part of a role, and that using &#39;add_vtable_method&#39; over &#39;add_method&#39; isn&#39;t doesn&#39;t make a lot of difference, but it does make the interface a little easier.&nbsp; Generally, and I believe you&#39;ve said this before, vtable methods are usually not also going to be added as normal methods to a class, so calling &#39;add_vtable_method&#39; and &#39;add_method&#39; separately isn&#39;t going to be very common.&nbsp; What I don&#39;t like about using &#39;add_method&#39; for both cases is that passing the anon flag with the vtable flag changes the meaning of the name parameter.&nbsp; We also run into trouble if we want to add the sub with one name as a method and a different one as a vtable method, which isn&#39;t a problem if we use both &#39;add_method&#39; and &#39;add_vtable_method&#39;.&nbsp; There aren&#39;t really absolutes here; it&#39;s just a matter of ease of use.&nbsp; 
<br>&nbsp;</div>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">&gt; In fact, using this interface, the :vtable pragma is completely unnecessary, so <br>&gt; we could remove it if we wanted to.&nbsp;&nbsp;Because I was unsure exactly how the 
<br>&gt; interface is going to end up, &#39;add_method&#39; also adds vtable methods also, if<br>&gt; :vtable is set on the method. If we decide to go with this interface, I&#39;d <br>&gt; like to take it out, along with the :vtable pragma. 
<br><br>The fact that there&#39;s a verbose way to overload a vtable function at<br>runtime is not enough justification to remove the :vtable syntax. It stays.</blockquote>
<div><br>Why do we need two ways to do the same thing?&nbsp; Using *either* interface (&#39;add_method&#39; alone or &#39;add_method&#39; and &#39;add_vtable_method&#39;), the :vtable flag is redundant.&nbsp; It adds no functionality. 
</div>
<div>&nbsp;</div>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">&gt; Trying to override &#39;mark&#39;, &#39;destroy&#39;, or &#39;morph&#39; throws an exception, 
<br>&gt; because overriding them might be dangerous.&nbsp;&nbsp;An exception is also thrown for<br>&gt; &#39;init_pmc&#39;, see below.<br><br>Why do these throw an exception? You should be able to override them.</blockquote>
<div><br>I can see &#39;morph&#39; maybe being overridden, but &#39;destroy&#39; and &#39;mark&#39;?&nbsp; PIR has no way to access GC internals, and it should stay that way.&nbsp; Even if we allowed them to be overridden, objects wouldn&#39;t be able to use them for anything.&nbsp;
</div>
<div>&nbsp;</div>
<div>P.S. Actually, I can see them possiblyy being used if Parrot interfaces with C code.&nbsp; Is this a valid use case?<br>&nbsp;</div>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">&gt; The &#39;init&#39; vtable method in Object is not wrapped by pmc2c, since its <br>&gt; override is called from 
Class.new().&nbsp;&nbsp;Class.new() is changed from accepting<br>&gt; a named slurpy of attributes to an unnamed slurpy of initializer<br>&gt; parameters.&nbsp;&nbsp;This slurpy is :flattened and passed to &#39;init&#39;.&nbsp;&nbsp;This is really <br>

&gt; cool, because now &#39;init&#39; acts like a normal method, and can accept a<br>&gt; variable-sized parameter list.&nbsp;&nbsp;This makes &#39;init_pmc&#39; obsolete, so trying to<br>&gt; override it throws an exception.&nbsp;&nbsp;Named parameters don&#39;t work, but c&#39;mon, 
<br>&gt; you can&#39;t have it all, right?<br><br>&#39;init&#39; isn&#39;t a normal method, it&#39;s a vtable function. And it&#39;s never<br>called directly, so how is it useful to make it take a variable sized<br>parameter list? Named parameters stay. Just slurp them up and pass them 
<br>on to init_pmc as a hash.</blockquote>
<div><br>It&#39;s called pseudo-directly through Class.new(), which passes its parameters right on to &#39;init&#39;.&nbsp;&nbsp;Only being able to pass one&nbsp;PMC parameter&nbsp;to object constructors is a limitation of C that we can overcome in PIR.&nbsp; Doing it this way, we get type checking, checking on the number of parameters, and all the good things that come with normal calling conventions.&nbsp; Objects can still choose to pass a Hash PMC as a normal parameter.&nbsp; Losing named parameters is well worth the tradeoff.&nbsp; 
<br>&nbsp;</div>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">&gt; Currently, passing arguments to Class.new() when &#39;init&#39; is not overridden <br>
&gt; doesn&#39;t throw an exception.&nbsp;&nbsp;Should it? 
<br><br>No. There&#39;s no reason to require every class to override &#39;init&#39;.</blockquote>
<div><br>That&#39;s not what I meant.&nbsp; I meant that passing arguments to Class.new() implies that the caller thinks &#39;init&#39; is overridden, and we can&#39;t let them have a false expectation that something will happen to the arguments they pass.&nbsp; This is with the 
Class.new() that forwards its arguments to &#39;init&#39;, not the current one that accepts an attribute initialization list.&nbsp; That being said, I can see that throwing an exception when this happens is not strictly necessary.&nbsp; 
<br>&nbsp;</div>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">&gt; This patch also fixes a bug with &#39;invoke&#39; in both ParrotObject and Object: <br>
&gt; &#39;self&#39; had to be explicitly passed to the override.&nbsp;&nbsp;This is fixed by adding 
<br>&gt; the signature flag PARROT_ARG_OBJECT, and unshifting that OR-ed with<br>&gt; PARROT_ARG_PMC onto the args signature.&nbsp;&nbsp;This has a counterpart already used <br>&gt; in fetch_arg_sig() in src/inter_call.c.<br><br>What bug? Submit a separate ticket with example code. 
</blockquote>
<div><br>Done.<br>&nbsp;</div>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">&gt; The old double-underscore method of vtable overriding can die along with the<br>&gt; old object system, but I would prefer to submit a patch to get rid of it 
<br>&gt; sooner, since I don&#39;t know how long the old object system will stick around. <br><br>Pending complete resolution of RT#40626. This can go in the next<br>deprecation cycle if we add a test for that last (resolved?) bug, and 
<br>verify that no code in the repository is using the old double-underscore <br>override.</blockquote>
<div><br>I wrote a perl near-one-liner a while ago to convert all code in the repository from the double-underscore system to using :vtable, but I haven&#39;t submitted the changes yet.&nbsp;<br>&nbsp; </div>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">&gt; Tests are included for &#39;init&#39;, &#39;invoke&#39;, and vtable method lookup through 
<br>&gt; the parent stack.&nbsp;&nbsp;Also, I fixed some tests in t/pmc/parrotobject.t that<br>&gt; overrode &#39;invoke&#39; without using the :method pragma, and removed the test for<br>&gt; #41372, which is now obsolete.<br><br>

Obsolete how? Does it test for a feature that no longer exists? (In<br>which case why isn&#39;t it failing?) Or does it test for a bug that&#39;s been<br>fixed? (In which case, it&#39;s a useful regression test.)</blockquote>


<div><br>It wasn&#39;t failing because of a hackish workaround - :vtable was used without :method on the &#39;invoke&#39; sub.&nbsp; Normally, I would keep it, but the test didn&#39;t make sense after the patch was applied.&nbsp;&nbsp; 
<br>&nbsp;</div>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">&gt; Also, a question: what exactly is the &#39;_namespace&#39; member of Parrot_Class <br>
&gt; used for?&nbsp;&nbsp;I don&#39;t see it used anywhere; it can be gotten and set, but is 
<br>&gt; otherwise useless, since methods are added using a separate mechanism.<br><br>It&#39;s used to store a pointer to the namespace object associated with the <br>class.</blockquote>
<div><br>And what is the pointer used for?&nbsp; Methods added to Classes can come from anywhere, not just a particular namespace.&nbsp; Why should Classes be associated with namespaces?&nbsp;<br>&nbsp;</div>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">&gt;&nbsp;&nbsp;lib/Parrot/Pmc2c/Object.pm&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;158<br><br>Why do we need this file? Objects don&#39;t need that much custom code 
<br>generation, and it&#39;s highly unlikely that the code here will be useful<br>for any object implementation other than PDD 15. </blockquote>
<div><br>This file wraps all Object vtable methods with code that checks if the vtable methods are overridden.&nbsp; It&#39;s specific to the Parrot default Class-Object implementation, though we could possibly have vtable methods looked up through a PCCMETHOD in a role implemented by Class. 
</div>
<div>&nbsp;</div>
<div>
<div>I&#39;m working on implementing a different way of doing this that completely separates the Object PMC from vtable overriding, letting PMCs choose whether or not to use vtable overriding, whether or not they inherit from Object.&nbsp; I&#39;ll submit it as soon as I finish.
<br></div></div>
<div>&nbsp;</div>
<blockquote class="gmail_quote" style="border-left: 1px solid rgb(204, 204, 204); margin: 0pt 0pt 0pt 0.8ex; padding-left: 1ex;">&gt;&nbsp;&nbsp;src/pmc/class.pmc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;150<br><br>Adding a (global) interpreter entry for &quot;current_object&quot;, &quot;current_args&quot; 
<br>and &quot;args_signature&quot; is not a good solution to anything.</blockquote><br>I didn&#39;t add them.&nbsp; They were already there.&nbsp; In fact, I submitted a patch to move them from Parrot_Interp to Parrot_Context (#42155), because I don&#39;t think they should be global either.&nbsp; Still, it doesn&#39;t matter where they are - the patch works the same way.
<br><br>Whew.&nbsp; Thanks for looking over my giant patch :).&nbsp; I&#39;ve split the original patch into three parts - testing, specs, and code, and rebased it on r18494.&nbsp; I&#39;ve also cut out the code that modified the implementation of invoke() in the old object system, but kept the modification in the new one, and cut out the changes to the tests related to that.
<br clear="all"><br>-- <br>Alek Storm 

------=_Part_84547_20639607.1178841639898--

------=_Part_84546_17827581.1178841639897
Content-Type: application/octet-stream; name=pdd15_code.patch
Content-Transfer-Encoding: base64
X-Attachment-Id: f_f1jhc0kj
Content-Disposition: attachment; filename="pdd15_code.patch"

SW5kZXg6IHNyYy9vcHMvb2JqZWN0Lm9wcwo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ci0tLSBzcmMvb3BzL29iamVjdC5v
cHMJKHJldmlzaW9uIDE4NDU1KQorKysgc3JjL29wcy9vYmplY3Qub3BzCSh3b3JraW5nIGNvcHkp
CkBAIC01NSw3ICs1NSw3IEBACiAgIG1ldGggPSAkMjsKICAgbmV4dCA9IGV4cHIgTkVYVCgpOwog
ICBtZXRob2RfcG1jID0gVlRBQkxFX2ZpbmRfbWV0aG9kKGludGVycCwgb2JqZWN0LCBtZXRoKTsK
LSAgaWYgKCFtZXRob2RfcG1jKSB7CisgIGlmIChQTUNfSVNfTlVMTChtZXRob2RfcG1jKSkgewog
ICAgIHJlYWxfZXhjZXB0aW9uKGludGVycCwgbmV4dCwgTUVUSF9OT1RfRk9VTkQsCiAgICAgICAg
ICJNZXRob2QgJyVTcycgbm90IGZvdW5kIiwgbWV0aCk7CiAgIH0KQEAgLTkxLDcgKzkxLDcgQEAK
ICAgbWV0aCA9ICQyOwogICBuZXh0ID0gZXhwciBORVhUKCk7CiAgIG1ldGhvZF9wbWMgPSBWVEFC
TEVfZmluZF9tZXRob2QoaW50ZXJwLCBvYmplY3QsIG1ldGgpOwotICBpZiAoIW1ldGhvZF9wbWMp
IHsKKyAgaWYgKFBNQ19JU19OVUxMKG1ldGhvZF9wbWMpKSB7CiAgICAgcmVhbF9leGNlcHRpb24o
aW50ZXJwLCBuZXh0LCBNRVRIX05PVF9GT1VORCwKICAgICAgICAgIk1ldGhvZCAnJVNzJyBub3Qg
Zm91bmQiLCBtZXRoKTsKICAgfQpJbmRleDogc3JjL2ludGVyX2NhbGwuYwo9PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ci0t
LSBzcmMvaW50ZXJfY2FsbC5jCShyZXZpc2lvbiAxODQ1NSkKKysrIHNyYy9pbnRlcl9jYWxsLmMJ
KHdvcmtpbmcgY29weSkKQEAgLTMxMiw3ICszMTIsMTAgQEAKICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgOiBDVFhfUkVHX05VTShzdC0+c3JjLmN0eCwgaWR4KTsKICAgICAg
ICAgICAgIGJyZWFrOwogICAgICAgICBjYXNlIFBBUlJPVF9BUkdfUE1DOgotICAgICAgICAgICAg
VVZhbF9wbWMoc3QtPnZhbCkgPSBjb25zdGFudCA/IHN0LT5zcmMuY3R4LT5jb25zdGFudHNbaWR4
XS0+dS5rZXkKKyAgICAgICAgICAgIGlmIChzdC0+c3JjLnNpZyAmIFBBUlJPVF9BUkdfT0JKRUNU
KQorICAgICAgICAgICAgICAgIFVWYWxfcG1jKHN0LT52YWwpID0gQ09OVEVYVChpbnRlcnAtPmN0
eCktPmN1cnJlbnRfb2JqZWN0OworICAgICAgICAgICAgZWxzZQorICAgICAgICAgICAgICAgIFVW
YWxfcG1jKHN0LT52YWwpID0gY29uc3RhbnQgPyBzdC0+c3JjLmN0eC0+Y29uc3RhbnRzW2lkeF0t
PnUua2V5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogQ1RYX1JFR19Q
TUMoc3QtPnNyYy5jdHgsIGlkeCk7CiAKICAgICAgICAgICAgIGlmIChzdC0+c3JjLnNpZyAmIFBB
UlJPVF9BUkdfRkxBVFRFTikgewpAQCAtMTQ5OSw3ICsxNTAyLDcgQEAKICAgICBjdHgtPmN1cnJl
bnRfY29udCA9IHJldF9jb250OwogICAgIFBNQ19jb250KHJldF9jb250KS0+ZnJvbV9jdHggPSBj
dHg7CiAgICAgcGNjaW52b2tlX21ldGggPSBWVEFCTEVfZmluZF9tZXRob2QoaW50ZXJwLCBwbWMs
IG1ldGhvZF9uYW1lKTsKLSAgICBpZiAoIXBjY2ludm9rZV9tZXRoKSB7CisgICAgaWYgKFBNQ19J
U19OVUxMKHBjY2ludm9rZV9tZXRoKSkgewogICAgICAgICByZWFsX2V4Y2VwdGlvbihpbnRlcnAs
IE5VTEwsIE1FVEhfTk9UX0ZPVU5ELCAiTWV0aG9kICclU3MnIG5vdCBmb3VuZCIsIG1ldGhvZF9u
YW1lKTsKICAgICB9CiAgICAgZWxzZSB7CkluZGV4OiBzcmMvb2JqZWN0cy5jCj09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0K
LS0tIHNyYy9vYmplY3RzLmMJKHJldmlzaW9uIDE4NDU1KQorKysgc3JjL29iamVjdHMuYwkod29y
a2luZyBjb3B5KQpAQCAtNzIsNiArNzIsMTMgQEAKICAgICByZXR1cm4gLTE7CiB9CiAKK1NUUklO
RyoKK1BhcnJvdF9nZXRfdnRhYmxlX25hbWUoSW50ZXJwICppbnRlcnAsIElOVFZBTCBpbmRleCkK
K3sKKyAgICBjb25zdCBjaGFyICp2dGFibGVfbmFtZSA9IFBhcnJvdF92dGFibGVfc2xvdF9uYW1l
c1tpbmRleF07CisgICAgcmV0dXJuIHN0cmluZ19mcm9tX2NzdHJpbmcoaW50ZXJwLCB2dGFibGVf
bmFtZSwgc3RybGVuKHZ0YWJsZV9uYW1lKSk7Cit9CisKIC8qCiAKID1pdGVtIEM8c3RhdGljIFBN
QyogZmluZF92dGFibGVfbWV0aF9ucyhJbnRlcnAgKmludGVycCwgUE1DICpucywgSU5UVkFMIHZ0
YWJsZV9pbmRleCk+CkluZGV4OiBzcmMvcG1jL2NsYXNzb2JqZWN0LmgKPT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQotLS0g
c3JjL3BtYy9jbGFzc29iamVjdC5oCTIwMDctMDUtMTAgMTc6NTA6NTUuMDAwMDAwMDAwICswMDAw
CisrKyBzcmMvcG1jL2NsYXNzb2JqZWN0LmgJMjAwNy0wNS0xMCAxNzo1MjozNC4wMDAwMDAwMDAg
KzAwMDAKQEAgLTQxLDYgKzQxLDEwIEBACiAKIC8qIEZ1bGx5IHF1YWxpZmllZCBjbGFzcyBuYW1l
IGdlbmVyYXRpb247IGRlZmluZWQgaW4gQ2xhc3MsIHVzZWQgYnkgT2JqZWN0LiAqLwogU1RSSU5H
KiBQYXJyb3RfQ2xhc3NfZ2V0X2ZxX2NsYXNzbmFtZShQYXJyb3RfSW50ZXJwIGludGVycCwgUGFy
cm90X0NsYXNzICpjbGFzc19pbmZvKTsKK1BNQyogUGFycm90X0NsYXNzX2ZpbmRfdnRhYmxlX21l
dGhvZChQYXJyb3RfSW50ZXJwIGludGVycCwgUE1DICpzZWxmLCBTVFJJTkcgKm1ldGgpOworCisv
KiBUaHJvdyBhbiBleGNlcHRpb24gaWYgd2UgdHJ5IHRvIG92ZXJyaWRlIHRoZXNlLiAqLworc3Rh
dGljIGNvbnN0IGNoYXIgKmNvbnN0IGNhbnRfb3ZlcnJpZGVbXSA9IHsgImluaXRfcG1jIiwgImRl
c3Ryb3kiLCAibWFyayIsICJtb3JwaCIsIE5VTEwgfTsKIAogI2VuZGlmIC8qIFBBUlJPVF9DTEFT
U09CSkVDVF9IX0dVQVJEICovCiAKCkluZGV4OiBzcmMvcG1jL2NsYXNzLnBtYwo9PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
Ci0tLSBzcmMvcG1jL2NsYXNzLnBtYwkocmV2aXNpb24gMTg0NTUpCisrKyBzcmMvcG1jL2NsYXNz
LnBtYwkod29ya2luZyBjb3B5KQpAQCAtMTEyLDcgKzExMiwyNSBAQAogICAgIHJldHVybiBmcV9j
bGFzczsKIH0KIAorLyogRmluZCBhIHZ0YWJsZSBtZXRob2QgaW4gdGhlIHZ0YWJsZV9tZXRob2Rz
IGhhc2ggKi8KK1BNQyogUGFycm90X0NsYXNzX2ZpbmRfdnRhYmxlX21ldGhvZChQYXJyb3RfSW50
ZXJwIGludGVycCwgUE1DICpzZWxmLCBTVFJJTkcgKm1ldGgpIHsKKyAgICBQYXJyb3RfQ2xhc3Mg
Kl9jbGFzcyA9IFBBUlJPVF9DTEFTUyhzZWxmKTsKKyAgICBpbnQgaTsKKyAgICBJTlRWQUwgbiA9
IFZUQUJMRV9lbGVtZW50cyhpbnRlcnAsIF9jbGFzcy0+YWxsX3BhcmVudHMpOwogCisgICAgLyog
V2FsayB1cCBNUk8sIGxvb2tpbmcgZm9yIHRoZSB2dGFibGUgbWV0aG9kICovCisgICAgZm9yICgg
aSA9IDA7IGkgPCBuOyBpKysgKSB7CisgICAgICAgIFBNQyAqcGFyZW50ID0gVlRBQkxFX2dldF9w
bWNfa2V5ZWRfaW50KGludGVycCwgX2NsYXNzLT5hbGxfcGFyZW50cywgaSk7CisgICAgICAgIFBh
cnJvdF9DbGFzcyAqcGFyZW50X2NsYXNzID0gUEFSUk9UX0NMQVNTKHBhcmVudCk7CisKKyAgICAg
ICAgUE1DICpzdWIgPSBWVEFCTEVfZ2V0X3BtY19rZXllZF9zdHIoaW50ZXJwLCBwYXJlbnRfY2xh
c3MtPnZ0YWJsZV9tZXRob2RzLCBtZXRoKTsKKyAgICAgICAgaWYgKCFQTUNfSVNfTlVMTChzdWIp
KQorICAgICAgICAgICAgcmV0dXJuIHN1YjsKKyAgICB9CisKKyAgICByZXR1cm4gUE1DTlVMTDsK
K30KKwogLyogVGhpcyBmdW5jdGlvbiBidWlsZHMgdGhlIGF0dHJpYnV0ZSBpbmRleCAodGFibGUg
dG8gbWFwIGNsYXNzIG5hbWUgYW5kCiAgKiBhdHRyaWJ1dGUgbmFtZSB0byBhbiBpbmRleCkgZm9y
IHRoZSBjdXJyZW50IGNsYXNzLiAqLwogc3RhdGljIHZvaWQgYnVpbGRfYXR0cmliX2luZGV4KFBh
cnJvdF9JbnRlcnAgaW50ZXJwLCBQTUMgKnNlbGYpIHsKQEAgLTMwOSw3ICszMjcsMjYgQEAKICAg
ICB9CiB9CiAKK3N0YXRpYyB2b2lkIGFkZF92dGFibGVfbWV0aG9kKFBhcnJvdF9JbnRlcnAgaW50
ZXJwLCBQTUMgKnNlbGYsIFNUUklORyAqbmFtZSwgUE1DICpzdWIpCit7CisgICAgaW50IGk7Cisg
ICAgUGFycm90X0NsYXNzICpfY2xhc3MgPSBQQVJST1RfQ0xBU1Moc2VsZik7CisgICAgY2hhciog
bmFtZV9jID0gc3RyaW5nX3RvX2NzdHJpbmcoaW50ZXJwLCBuYW1lKTsKIAorICAgIC8qIENoZWNr
IGlmIGl0J3MgYW4gdW4tb3ZlcnJpZGFibGUgdnRhYmxlIG1ldGhvZCAqLworICAgIGZvciAoIGkg
PSAwOyBjYW50X292ZXJyaWRlW2ldOyBpKysgKSB7CisgICAgICAgIGlmICggc3RyY21wKG5hbWVf
YywgY2FudF9vdmVycmlkZVtpXSkgPT0gMCApIHsKKyAgICAgICAgICAgIHN0cmluZ19jc3RyaW5n
X2ZyZWUobmFtZV9jKTsKKyAgICAgICAgICAgIHJlYWxfZXhjZXB0aW9uKGludGVycCwgTlVMTCwg
RV9OYW1lRXJyb3IsCisgICAgICAgICAgICAgICAgIkNhbm5vdCBvdmVycmlkZSAnJXMnIHZ0YWJs
ZSBtZXRob2QiLCBjYW50X292ZXJyaWRlW2ldKTsKKyAgICAgICAgfQorICAgIH0KKworICAgIGlm
ICghUE1DX0lTX05VTEwoc3ViKSkKKyAgICAgICAgVlRBQkxFX3NldF9wbWNfa2V5ZWRfc3RyKGlu
dGVycCwgX2NsYXNzLT52dGFibGVfbWV0aG9kcywgbmFtZSwgc3ViKTsKKyAgICBzdHJpbmdfY3N0
cmluZ19mcmVlKG5hbWVfYyk7Cit9CisKIC8qCiAKID1iYWNrCkBAIC0zMjUsNyArMzYyLDYgQEAK
IHBtY2xhc3MgQ2xhc3MKICAgICBuZWVkX2V4dCB7CiAKLQogLyoKIAogPWl0ZW0gQzx2b2lkIGlu
aXQoKT4KQEAgLTQ5Niw5ICs1MzIsMjQgQEAKICAgICAgICAgICAgIHJlYWxfZXhjZXB0aW9uKGlu
dGVycCwgTlVMTCwgRV9Ob3RJbXBsZW1lbnRlZEVycm9yLAogICAgICAgICAgICAgICAgICJBIG1l
dGhvZCBvZiB0aGlzIG5hbWUgYWxyZWFkeSBleGlzdHMuIEl0IG1heSBoYXZlIGJlZW4gc3VwcGxp
ZWQgYnkgYSByb2xlLiIpOwogICAgICAgICB9Ci0gICAgICAgIGVsc2UgeworICAgICAgICBlbHNl
IGlmICghUE1DX0lTX05VTEwoc3ViKSkgewogICAgICAgICAgICAgLyogRW50ZXIgaXQgaW50byB0
aGUgdGFibGUuICovCiAgICAgICAgICAgICBWVEFCTEVfc2V0X3BtY19rZXllZF9zdHIoaW50ZXJw
LCBfY2xhc3MtPm1ldGhvZHMsIG5hbWUsIHN1Yik7CisKKyAgICAgICAgICAgIC8qIElmIG1ldGhv
ZCBvdmVycmlkZXMgYSB2dGFibGUgbWV0aG9kLCBzdGljayBpdCBpbiB0aGUKKyAgICAgICAgICAg
ICAgIHZ0YWJsZSBtZXRob2QgaGFzaCAqLworICAgICAgICAgICAgLyogWFhYIHRoaXMgc2hvdWxk
IHJlYWxseSBvbmx5IGJlIGRvbmUgZnJvbSB0aGUKKyAgICAgICAgICAgICAgIGFkZF92dGFibGVf
bWV0aG9kIFBDQ01FVEhPRCAqLworICAgICAgICAgICAgaWYgKCBQTUNfc3ViKHN1YiktPnZ0YWJs
ZV9pbmRleCA+IC0xICkgeworICAgICAgICAgICAgICAgIElOVFZBTCB2dGFibGVfaW5kZXggPSBQ
TUNfc3ViKHN1YiktPnZ0YWJsZV9pbmRleDsKKyAgICAgICAgICAgICAgICBTVFJJTkcgKnZ0YWJs
ZV9uYW1lID0gUGFycm90X2dldF92dGFibGVfbmFtZShpbnRlcnAsIHZ0YWJsZV9pbmRleCk7CisK
KyAgICAgICAgICAgICAgICAvKiBDaG9wIG9mZiB1bmRlcnNjb3JlcyAqLworICAgICAgICAgICAg
ICAgIHZ0YWJsZV9uYW1lLT5zdHJzdGFydCArPSAyOworICAgICAgICAgICAgICAgIHZ0YWJsZV9u
YW1lLT5zdHJsZW4gLT0gMjsKKworICAgICAgICAgICAgICAgIGFkZF92dGFibGVfbWV0aG9kKGlu
dGVycCwgU0VMRiwgdnRhYmxlX25hbWUsIHN1Yik7CisgICAgICAgICAgICB9CiAgICAgICAgIH0K
ICAgICB9CiAKQEAgLTc5OSwxMSArODUwLDExIEBACiA9Y3V0CiAKICovCi0gICAgUENDTUVUSE9E
IHZvaWQgbmV3KFBNQyAqYXJncyA6c2x1cnB5IDpuYW1lZCkgeworICAgIFBDQ01FVEhPRCB2b2lk
IG5ldyhQTUMgKnBhcmFtcyA6c2x1cnB5KSB7CiAgICAgICAgIFBhcnJvdF9DbGFzcyAqX2NsYXNz
ID0gUEFSUk9UX0NMQVNTKFNFTEYpOwotICAgICAgICBQTUMgKm9iajsKLSAgICAgICAgUE1DICpp
dGVyOworICAgICAgICBQTUMgKm9iaiwgKml0ZXI7CiAgICAgICAgIFBhcnJvdF9PYmplY3QgKm9i
al9ndXRzID0gTlVMTDsKKyAgICAgICAgSU5UVkFMIG47CiAKICAgICAgICAgLyogSWYgd2UndmUg
bm90IGJlZW4gaW5zdGFudGlhdGVkIGJlZm9yZS4uLiAqLwogICAgICAgICBpZiAoIV9jbGFzcy0+
aW5zdGFudGlhdGVkKSB7CkBAIC04NDcsMTkgKzg5OCw3NSBAQAogICAgICAgICBvYmpfZ3V0cy0+
YXR0cmliX3N0b3JlID0gcG1jX25ldyhpbnRlcnAsIGVudW1fY2xhc3NfUmVzaXphYmxlUE1DQXJy
YXkpOwogICAgICAgICBQTUNfZGF0YShvYmopID0gb2JqX2d1dHM7CiAKLSAgICAgICAgLyogSW5p
dGlhbGl6ZSBhdHRyaWJ1dGVzIHdpdGggdGhlIHN1cHBsaWVkIHZhbHVlcy4gKi8KLSAgICAgICAg
aXRlciA9IFZUQUJMRV9nZXRfaXRlcihpbnRlcnAsIGFyZ3MpOwotICAgICAgICB3aGlsZSAoVlRB
QkxFX2dldF9ib29sKGludGVycCwgaXRlcikpIHsKLSAgICAgICAgICAgIC8qIEdldCBuYW1lIGFu
ZCB2YWx1ZS4gKi8KLSAgICAgICAgICAgIFNUUklORyAqYXR0cl9uYW1lID0gVlRBQkxFX3NoaWZ0
X3N0cmluZyhpbnRlcnAsIGl0ZXIpOwotICAgICAgICAgICAgUE1DICphdHRyX3ZhbHVlID0gVlRB
QkxFX2dldF9wbWNfa2V5ZWRfc3RyKGludGVycCwgYXJncywgYXR0cl9uYW1lKTsKKyAgICAgICAg
LyogQ2FsbCBpbml0LCBpZiBpdCdzIG92ZXJyaWRkZW4uIFRoaXMgY2h1bmsgZG9lcyBhIDpmbGF0
IG9uIHRoZSBwYXJhbXMKKyAgICAgICAgICogc2x1cnB5IG1hbnVhbGx5LCB0aGVuIHBhc3NlcyBp
dCB0byB0aGUgaW5pdCgpIG92ZXJyaWRlLiBBZGFwdGVkIGZyb20KKyAgICAgICAgICogUENDSU5W
T0tFLiAqLworICAgICAgICBJTlRWQUwgc2lnX2xlbiAgICAgICA9IFZUQUJMRV9lbGVtZW50cyhp
bnRlcnAsIHBhcmFtcykgKyAxOworICAgICAgICBJTlRWQUwgbl9yZWdzX3VzZWRbXSA9IHsgMCwg
MCwgMCwgc2lnX2xlbiB9OwogCi0gICAgICAgICAgICAvKiBTZXQgdGhlIGF0dHJpYnV0ZS4gKi8K
LSAgICAgICAgICAgIFZUQUJMRV9zZXRfYXR0cl9zdHIoaW50ZXJwLCBvYmosIGF0dHJfbmFtZSwg
YXR0cl92YWx1ZSk7CisgICAgICAgIG9wY29kZV90IGFyZ19pbmRleGVzW3NpZ19sZW5dOworICAg
ICAgICBpbnQgaTsKKyAgICAgICAgZm9yICggaSA9IDA7IGkgPCBzaWdfbGVuOyBpKysgKQorICAg
ICAgICAgICAgYXJnX2luZGV4ZXNbaV0gPSBpOworICAgICAgICBvcGNvZGVfdCByZXN1bHRfaW5k
ZXhlc1tdID0geyAwIH07CisKKyAgICAgICAgLyogRmlsbCB0aGUgYXJncyBzaWduYXR1cmUgd2l0
aCBQTUNzLCBzaW5jZSB0aGF0J3MgYWxsIHdlIGtub3cKKyAgICAgICAgICogYWJvdXQgdGhlIHNs
dXJweSdzIGNvbnRlbnRzIC0gdGhleSBnZXQgY29udmVydGVkIHRvIGludCwgZXRjCisgICAgICAg
ICAqIGFmdGVyIHRoZSBjYWxsLiAqLworICAgICAgICBQTUMqIGFyZ3Nfc2lnID0gcG1jX25ldyhp
bnRlcnAsIGVudW1fY2xhc3NfRml4ZWRJbnRlZ2VyQXJyYXkpOworICAgICAgICBWVEFCTEVfc2V0
X2ludGVnZXJfbmF0aXZlKGludGVycCwgYXJnc19zaWcsIHNpZ19sZW4pOworICAgICAgICBmb3Ig
KCBpID0gMDsgaSA8IHNpZ19sZW47IGkrKyApCisgICAgICAgICAgICBWVEFCTEVfc2V0X2ludGVn
ZXJfa2V5ZWRfaW50KGludGVycCwgYXJnc19zaWcsIGksIFBBUlJPVF9BUkdfUE1DKTsKKworICAg
ICAgICBQTUMqIHJlc3VsdHNfc2lnID0gcG1jX25ldyhpbnRlcnAsIGVudW1fY2xhc3NfRml4ZWRJ
bnRlZ2VyQXJyYXkpOworCisgICAgICAgIFBNQyogcmV0X2NvbnQgICAgICAgICA9IG5ld19yZXRf
Y29udGludWF0aW9uX3BtYyhpbnRlcnAsIE5VTEwpOworICAgICAgICBwYXJyb3RfY29udGV4dF90
ICpjdHggPSBQYXJyb3RfcHVzaF9jb250ZXh0KGludGVycCwgbl9yZWdzX3VzZWQpOworCisgICAg
ICAgIG9wY29kZV90KiBzYXZlX2N1cnJlbnRfYXJncyA9IGludGVycC0+Y3VycmVudF9hcmdzOwor
ICAgICAgICBQTUMqIHNhdmVfYXJnc19zaWduYXR1cmUgICAgPSBpbnRlcnAtPmFyZ3Nfc2lnbmF0
dXJlOworICAgICAgICBQTUMqIHNhdmVfY3VycmVudF9vYmplY3QgICAgPSBpbnRlcnAtPmN1cnJl
bnRfb2JqZWN0OworCisgICAgICAgIC8qIEZsYXR0ZW4gdGhlIHNsdXJweSBpbnRvIHJlZ2lzdGVy
IHNsb3RzLiAqLworICAgICAgICBDVFhfUkVHX1BNQyhjdHgsIDApID0gb2JqOworICAgICAgICBm
b3IgKCBpID0gMTsgaSA8IHNpZ19sZW47IGkrKyApCisgICAgICAgICAgICBDVFhfUkVHX1BNQyhj
dHgsIGkpID0gVlRBQkxFX2dldF9wbWNfa2V5ZWRfaW50KGludGVycCwgcGFyYW1zLCBpLTEpOwor
CisgICAgICAgIC8qIFdhbGsgdXAgTVJPLCBsb29raW5nIGZvciB0aGUgdnRhYmxlIG1ldGhvZCAq
LworICAgICAgICBuID0gVlRBQkxFX2VsZW1lbnRzKGludGVycCwgX2NsYXNzLT5hbGxfcGFyZW50
cyk7CisgICAgICAgIGZvciAoIGkgPSAwOyBpIDwgbjsgaSsrICkgeworICAgICAgICAgICAgUE1D
ICpwYXJlbnQgPSBWVEFCTEVfZ2V0X3BtY19rZXllZF9pbnQoaW50ZXJwLAorICAgICAgICAgICAg
ICAgIF9jbGFzcy0+YWxsX3BhcmVudHMsIGkpOworICAgICAgICAgICAgUGFycm90X0NsYXNzICpw
YXJlbnRfY2xhc3MgPSBQQVJST1RfQ0xBU1MocGFyZW50KTsKKworICAgICAgICAgICAgUE1DICpz
dWIgPSBWVEFCTEVfZ2V0X3BtY19rZXllZF9zdHIoaW50ZXJwLAorICAgICAgICAgICAgICAgIHBh
cmVudF9jbGFzcy0+dnRhYmxlX21ldGhvZHMsIENPTlNUX1NUUklORyhpbnRlcnAsICJpbml0Iikp
OworICAgICAgICAgICAgaWYgKCFQTUNfSVNfTlVMTChzdWIpKSB7CisgICAgICAgICAgICAgICAg
aW50ZXJwLT5jdXJyZW50X2FyZ3MgICA9IGFyZ19pbmRleGVzOworICAgICAgICAgICAgICAgIGlu
dGVycC0+YXJnc19zaWduYXR1cmUgPSBhcmdzX3NpZzsKKyAgICAgICAgICAgICAgICBjdHgtPmN1
cnJlbnRfcmVzdWx0cyAgID0gcmVzdWx0X2luZGV4ZXM7CisgICAgICAgICAgICAgICAgY3R4LT5y
ZXN1bHRzX3NpZ25hdHVyZSA9IHJlc3VsdHNfc2lnOworCisgICAgICAgICAgICAgICAgaW50ZXJw
LT5jdXJyZW50X29iamVjdCAgICAgICA9IG9iajsKKyAgICAgICAgICAgICAgICBpbnRlcnAtPmN1
cnJlbnRfY29udCAgICAgICAgID0gTkVFRF9DT05USU5VQVRJT047CisgICAgICAgICAgICAgICAg
Y3R4LT5jdXJyZW50X2NvbnQgICAgICAgICAgICA9IHJldF9jb250OworICAgICAgICAgICAgICAg
IFBNQ19jb250KHJldF9jb250KS0+ZnJvbV9jdHggPSBjdHg7CisKKyAgICAgICAgICAgICAgICAv
KiBGaW5hbGx5LCBjYWxsIHRoZSBzdWIgKi8KKyAgICAgICAgICAgICAgICBQYXJyb3RfcnVub3Bz
X2Zyb21jKElOVEVSUCwgc3ViKTsKKyAgICAgICAgICAgIH0KICAgICAgICAgfQogCisgICAgICAg
IFBPYmpfbGl2ZV9DTEVBUihhcmdzX3NpZyk7CisgICAgICAgIFBPYmpfbGl2ZV9DTEVBUihyZXN1
bHRzX3NpZyk7CisgICAgICAgIFBhcnJvdF9wb3BfY29udGV4dChpbnRlcnApOworCisgICAgICAg
IGludGVycC0+Y3VycmVudF9hcmdzICAgPSBzYXZlX2N1cnJlbnRfYXJnczsKKyAgICAgICAgaW50
ZXJwLT5hcmdzX3NpZ25hdHVyZSA9IHNhdmVfYXJnc19zaWduYXR1cmU7CisgICAgICAgIGludGVy
cC0+Y3VycmVudF9vYmplY3QgPSBzYXZlX2N1cnJlbnRfb2JqZWN0OworCiAgICAgICAgIFBDQ1JF
VFVSTihQTUMgKm9iaikKLSAgICAgfQorICAgIH0KIAogLyoKIApAQCAtODcxLDYgKzk3OCw3IEBA
CiA9Y3V0CiAKICovCisKICAgICBQQ0NNRVRIT0Qgdm9pZCBhdHRyaWJ1dGVzKCkgewogICAgICAg
ICBQTUMgKnJldF9hdHRyaWJfbWV0YWRhdGEgPSBWVEFCTEVfaW5zcGVjdF9zdHIoaW50ZXJwLCBT
RUxGLCBDT05TVF9TVFJJTkcoaW50ZXJwLCAiYXR0cmlidXRlcyIpKTsKICAgICAgICAgUENDUkVU
VVJOKFBNQyAqcmV0X2F0dHJpYl9tZXRhZGF0YSk7CkBAIC05MjIsNiArMTAzMCwyMCBAQAogCiAv
KgogCis9aXRlbSBDPHZvaWQgYWRkX3Z0YWJsZV9tZXRob2QoU1RSSU5HICpuYW1lLCBQTUMgKnN1
Yik+CisKK0FkZHMgdGhlIGdpdmVuIHN1YiBQTUMgYXMgYSB2dGFibGUgbWV0aG9kIHdpdGggdGhl
IGdpdmVuIG5hbWUuCisKKz1jdXQKKworKi8KKyAgICBQQ0NNRVRIT0Qgdm9pZCBhZGRfdnRhYmxl
X21ldGhvZChTVFJJTkcgKm5hbWUsIFBNQyAqc3ViKQorICAgIHsKKyAgICAgICAgYWRkX3Z0YWJs
ZV9tZXRob2QoaW50ZXJwLCBTRUxGLCBuYW1lLCBzdWIpOworICAgIH0KKworLyoKKwogPWl0ZW0g
Qzx2b2lkIHBhcmVudHMoKT4KIAogUmV0dXJuIHRoZSBwYXJlbnRzIGFycmF5IFBNQy4KSW5kZXg6
IHNyYy9wbWMvb2JqZWN0LnBtYwo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ci0tLSBzcmMvcG1jL29iamVjdC5wbWMJKHJl
dmlzaW9uIDE4NDU1KQorKysgc3JjL3BtYy9vYmplY3QucG1jCSh3b3JraW5nIGNvcHkpCkBAIC02
MSw3ICs2MSwxNyBAQAogICAgIHJldHVybiBpbmRleDsKIH0KIAorc3RhdGljIHZvaWQKK3Z0YWJs
ZV9tZXRoX25vdF9mb3VuZChJbnRlcnAgKmludGVycCwgUE1DICpwbWMsIGNvbnN0IGNoYXIgKm1l
dGgpCit7CisgICAgUGFycm90X09iamVjdCAqb2JqID0gUEFSUk9UX09CSkVDVChwbWMpOworICAg
IFNUUklORyAqbmFtZSA9IFBBUlJPVF9DTEFTUyhvYmotPl9jbGFzcyktPm5hbWU7CisgICAgY29u
c3QgY2hhciAqbmFtZV9jID0gc3RyaW5nX3RvX2NzdHJpbmcoaW50ZXJwLCBuYW1lKTsKIAorICAg
IHJlYWxfZXhjZXB0aW9uKGludGVycCwgTlVMTCwgRV9Mb29rdXBFcnJvciwKKyAgICAgICAgIkNh
bid0IGZpbmQgdnRhYmxlIG1ldGhvZCAnJXMnIGluIGNsYXNzICclcyciLCBtZXRoLCBuYW1lX2Mp
OworfQorCiBwbWNsYXNzIE9iamVjdCBuZWVkX2V4dCB7CiAKIC8qCkBAIC0yMTEsNiArMjIxLDQ3
IEBACiAKIC8qCiAKKz1pdGVtIEM8UE1DKiBpbnZva2UoKT4KKworSW52b2tlIHRoZSBvYmplY3Qg
YXMgYSBtZXRob2QuCisKKz1jdXQKKworKi8KKyAgICBvcGNvZGVfdCogaW52b2tlKHZvaWQgKm5l
eHQpIHsKKyAgICAgICAgU1RSSU5HICptZXRoID0gQ09OU1RfU1RSSU5HKGludGVycCwgImludm9r
ZSIpOworICAgICAgICBQTUMgKnN1YiA9IFBhcnJvdF9DbGFzc19maW5kX3Z0YWJsZV9tZXRob2Qo
aW50ZXJwLCBQQVJST1RfT0JKRUNUKHBtYyktPl9jbGFzcywgbWV0aCk7CisgICAgICAgIGlmIChQ
TUNfSVNfTlVMTChzdWIpKSB7CisgICAgICAgICAgICB2dGFibGVfbWV0aF9ub3RfZm91bmQoaW50
ZXJwLCBwbWMsICJpbnZva2UiKTsKKyAgICAgICAgICAgIHJldHVybiBOVUxMOworICAgICAgICB9
CisgICAgICAgIGVsc2UgeworICAgICAgICAgICAgLyogU2luY2UgaW52b2tlKCkgaXMgYSBub3Jt
YWwgbWV0aG9kLCAnc2VsZicgbXVzdCBiZSBwYXNzZWQgYXMgdGhlCisgICAgICAgICAgICAgKiBm
aXJzdCBhcmd1bWVudCwgYnV0IGJlY2F1c2UgdGhpcyBsb29rcyBsaWtlIGEgbm9uLW1ldGhvZCBj
YWxsIGluCisgICAgICAgICAgICAgKiBQSVIsIHRoZSBhcmdzIHNpZ25hdHVyZSBkb2Vzbid0IGhh
dmUgaXQsIHNvIHdlIGhhdmUgdG8gZ2V0IHRoZQorICAgICAgICAgICAgICogYXJncyBzaWduYXR1
cmUgYW5kIHVuc2hpZnQgJ3NlbGYnIG9udG8gaXQuICovCisKKyAgICAgICAgICAgIFBNQyAqb2xk
X3NpZyA9IENPTlRFWFQoaW50ZXJwLT5jdHgpLT5jb25zdGFudHNbKihpbnRlcnAtPmN1cnJlbnRf
YXJncysxKV0tPnUua2V5OworICAgICAgICAgICAgSU5UVkFMIHNpZ19sZW4gPSBWVEFCTEVfZWxl
bWVudHMoaW50ZXJwLCBvbGRfc2lnKSArIDE7CisgICAgICAgICAgICBpbnQgaTsKKworICAgICAg
ICAgICAgUE1DICptZXRoX3NpZyA9IHBtY19uZXcoaW50ZXJwLCBlbnVtX2NsYXNzX0ZpeGVkSW50
ZWdlckFycmF5KTsKKyAgICAgICAgICAgIFZUQUJMRV9zZXRfaW50ZWdlcl9uYXRpdmUoaW50ZXJw
LCBtZXRoX3NpZywgc2lnX2xlbik7CisKKyAgICAgICAgICAgIFZUQUJMRV9zZXRfaW50ZWdlcl9r
ZXllZF9pbnQoaW50ZXJwLCBtZXRoX3NpZywgMCwgUEFSUk9UX0FSR19QTUMgfCBQQVJST1RfQVJH
X09CSkVDVCk7CisgICAgICAgICAgICBmb3IgKCBpID0gMTsgaSA8IHNpZ19sZW47IGkrKyApCisg
ICAgICAgICAgICAgICAgVlRBQkxFX3NldF9pbnRlZ2VyX2tleWVkX2ludChpbnRlcnAsIG1ldGhf
c2lnLCBpLCBWVEFCTEVfZ2V0X2ludGVnZXJfa2V5ZWRfaW50KGludGVycCwgb2xkX3NpZywgaS0x
KSk7CisKKyAgICAgICAgICAgIGludGVycC0+YXJnc19zaWduYXR1cmUgPSBtZXRoX3NpZzsKKyAg
ICAgICAgICAgIGludGVycC0+Y3VycmVudF9hcmdzKys7CisKKyAgICAgICAgICAgIElOVEVSUC0+
Y3VycmVudF9vYmplY3QgPSBTRUxGOworICAgICAgICAgICAgcmV0dXJuIFZUQUJMRV9pbnZva2Uo
aW50ZXJwLCBzdWIsIG5leHQpOworICAgICAgICB9CisgICAgfQorCisvKgorCiA9aXRlbSBDPFBN
QyogZ2V0X2NsYXNzKCk+CiAKIEdldCB0aGUgY2xhc3MgUE1DIHJlcHJlc2VudGluZyB0aGUgY2xh
c3MgdGhhdCB0aGlzIG9iamVjdCBpcyBhbiBpbnN0YW5jZSBvZi4KSW5kZXg6IGxpYi9QYXJyb3Qv
UG1jMmMucG0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PQotLS0gbGliL1BhcnJvdC9QbWMyYy5wbQkocmV2aXNpb24gMTg0
NTUpCisrKyBsaWIvUGFycm90L1BtYzJjLnBtCSh3b3JraW5nIGNvcHkpCkBAIC00MCwxNSArNDAs
MTQgQEAKIAogQzwkc2VsZj4gaXMgYSBoYXNoIHJlZmVyZW5jZSBDPGV2YWw+LWVkIGZyb20gYSBG
PCouZHVtcD4gZmlsZSBnZW5lcmF0ZWQKIGJ5IEY8dG9vbHMvYnVpbGQvcG1jMmMucGw+IGZyb20g
YSBGPCoucG1jPiBmaWxlLiBJdCBpcyBDPGJsZXNzPi1lZCBlaXRoZXIgaW50bwotQzxQYXJyb3Q6
OlBtYzJjOjpTdGFuZGFyZD4sIG9yIGludG8gb25lIG9mIHRoZSBvdGhlciBJPHNwZWNpYWw+IFBN
Q3M6Ci1GPGRlZmF1bHQ+LCBDPGRlbGVnYXRlPiwgQzxOdWxsPiwgQzxSZWY+IG9yIEM8U2hhcmVk
UmVmPi4KK0M8UGFycm90OjpQbWMyYzo6U3RhbmRhcmQ+LCBvciBpbnRvIG9uZSBvZiB0aGUgb3Ro
ZXIgSTxzcGVjaWFsPiBQTUNzLgogCiBDPCRvcHQ+IGlzIGEgaGFzaCByZWZlcmVuY2UuCiAKID1j
dXQKIAogbXkgJXNwZWNpYWxfY2xhc3NfbmFtZSA9Ci0gICAgbWFwIHsgKCAkXywgMSApIH0gcXco
IFNUTVJlZiBSZWYgZGVmYXVsdCBOdWxsIGRlbGVnYXRlIFNoYXJlZFJlZiBkZWxlZ19wbWMgKTsK
KyAgICBtYXAgeyAoICRfLCAxICkgfSBxdyggU1RNUmVmIFJlZiBkZWZhdWx0IE51bGwgT2JqZWN0
IFNoYXJlZFJlZiBkZWxlZ2F0ZSBkZWxlZ19wbWMgKTsKIAogc3ViIG5ldyB7CiAgICAgbXkgKCAk
dGhpcywgJHNlbGYsICRvcHRpb25zICkgPSBAXzsKQEAgLTEyMTksNiArMTIxOCw3IEBACiByZXF1
aXJlIFBhcnJvdDo6UG1jMmM6OmRlZmF1bHQ7CiByZXF1aXJlIFBhcnJvdDo6UG1jMmM6OmRlbGVn
YXRlOwogcmVxdWlyZSBQYXJyb3Q6OlBtYzJjOjpkZWxlZ19wbWM7CityZXF1aXJlIFBhcnJvdDo6
UG1jMmM6Ok9iamVjdDsKIHJlcXVpcmUgUGFycm90OjpQbWMyYzo6TnVsbDsKIHJlcXVpcmUgUGFy
cm90OjpQbWMyYzo6UmVmOwogcmVxdWlyZSBQYXJyb3Q6OlBtYzJjOjpTaGFyZWRSZWY7CkluZGV4
OiBsaWIvUGFycm90L1BtYzJjL1BDQ01FVEhPRC5wbQo9PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ci0tLSBsaWIvUGFycm90
L1BtYzJjL1BDQ01FVEhPRC5wbQkocmV2aXNpb24gMTg0NTUpCisrKyBsaWIvUGFycm90L1BtYzJj
L1BDQ01FVEhPRC5wbQkod29ya2luZyBjb3B5KQpAQCAtNTI0LDcgKzUyNCw3IEBACiAgICAgICBQ
TUNfY29udChyZXRfY29udCktPmZyb21fY3R4ID0gY3R4OwogCiAgICAgICBwY2NpbnZva2VfbWV0
aCA9IFZUQUJMRV9maW5kX21ldGhvZChpbnRlcnAsICRpbnZvY2FudCwgJG1ldGhvZF9uYW1lKTsK
LSAgICAgIGlmICghcGNjaW52b2tlX21ldGgpCisgICAgICBpZiAoUE1DX0lTX05VTEwocGNjaW52
b2tlX21ldGgpKQogICAgICAgICAgIHJlYWxfZXhjZXB0aW9uKGludGVycCwgTlVMTCwgTUVUSF9O
T1RfRk9VTkQsCiAgICAgICAgICAgICAiTWV0aG9kICclU3MnIG5vdCBmb3VuZCIsICRtZXRob2Rf
bmFtZSk7CiAgICAgICBlbHNlCkluZGV4OiBsaWIvUGFycm90L1BtYzJjL09iamVjdC5wbQo9PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09Ci0tLSBsaWIvUGFycm90L1BtYzJjL09iamVjdC5wbQkocmV2aXNpb24gMCkKKysrIGxp
Yi9QYXJyb3QvUG1jMmMvT2JqZWN0LnBtCShyZXZpc2lvbiAwKQpAQCAtMCwwICsxLDE1OCBAQAor
Cis9aGVhZDEgUGFycm90OjpQbWMyYzo6ZGVsZWdhdGUgSW5zdGFuY2UgTWV0aG9kcworCis9b3Zl
ciA0CisKKz1jdXQKKworcGFja2FnZSBQYXJyb3Q6OlBtYzJjOjpPYmplY3Q7Cit1c2UgYmFzZSAn
UGFycm90OjpQbWMyYyc7Cit1c2Ugc3RyaWN0OwordXNlIHdhcm5pbmdzOworCis9aXRlbSBDPGlt
cGxlbWVudHMoJG1ldGhvZCk+CisKK1RydWUgZm9yIHZ0YWJsZXMuCisKKz1jdXQKKworc3ViIGlt
cGxlbWVudHMgeworICAgIG15ICggJHNlbGYsICRtZXRoICkgPSBAXzsKKyAgICAkc2VsZi0+aW1w
bGVtZW50c192dGFibGUoJG1ldGgpOworfQorCis9aXRlbSBDPHRyYW5zKCR0eXBlKT4KKworVXNl
ZCBpbiBDPHNpZ25hdHVyZSgpPiB0byBub3JtYWxpemUgYXJndW1lbnQgdHlwZXMuCisKKz1jdXQK
Kworc3ViIHRyYW5zIHsKKyAgICBteSAoICRzZWxmLCAkdHlwZSApID0gQF87CisKKyAgICBteSAk
Y2hhciA9IHN1YnN0ciAkdHlwZSwgMCwgMTsKKyAgICByZXR1cm4gJDEgaWYgKCAkY2hhciA9fiAv
KFtJU1BdKS8gKTsKKyAgICByZXR1cm4gJ04nIGlmICggJGNoYXIgZXEgJ0YnICk7CisgICAgcmV0
dXJuICd2JyBpZiAoICR0eXBlIGVxICd2b2lkJyApOworICAgIHJldHVybiAnPyc7Cit9CisKKz1p
dGVtIEM8c2lnbmF0dXJlKCRwYXJhbXMpPgorCitSZXR1cm5zIHRoZSBtZXRob2Qgc2lnbmF0dXJl
IGZvciBDPCRwYXJhbXM+LgorCis9Y3V0CisKK3N1YiBzaWduYXR1cmUgeworICAgIG15ICggJHNl
bGYsICRwYXJhbXMgKSA9IEBfOworCisgICAgbXkgJG4gPSAxOworICAgIG15IEB0eXBlcyA9IGdy
ZXAgeyAkbisrICYgMSA/ICRfIDogMCB9IHNwbGl0IC8gLywgJHBhcmFtczsKKyAgICBAdHlwZXMg
PSBtYXAgeyAkc2VsZi0+dHJhbnMoJF8pIH0gQHR5cGVzOworICAgIHJldHVybiBqb2luICcnLCBA
dHlwZXM7Cit9CisKKz1pdGVtIEM8Ym9keSgkbWV0aG9kLCAkbGluZSwgJG91dF9uYW1lKT4KKwor
UmV0dXJucyB0aGUgQyBjb2RlIGZvciB0aGUgbWV0aG9kIGJvZHkuIEM8JGxpbmU+IGlzIHVzZWQg
dG8gYWNjdW11bGF0ZQordGhlIG51bWJlciBvZiBsaW5lcywgQzwkb3V0X25hbWU+IGlzIHRoZSBu
YW1lIG9mIHRoZSBvdXRwdXQgZmlsZSB3ZSBhcmUKK2dlbmVyYXRpbmcuCisKK1RoZSBDPGRlbGVn
YXRlPiBQTUMgcmVkaXJlY3RzIGFsbCBtZXRob2RzIHRvIGJ5dGVjb2RlLgorCis9YmFjaworCis9
Y3V0CisKK3N1YiBib2R5IHsKKyAgICBteSAoICRzZWxmLCAkbWV0aG9kLCAkbGluZSwgJG91dF9u
YW1lICkgPSBAXzsKKworICAgIG15ICRtZXRoID0gJG1ldGhvZC0+e21ldGh9OworCisgICAgbXkg
JGZ1bmNfcmV0ID0gJyc7CisgICAgbXkgJHJldF90eXBlID0gJyc7CisgICAgbXkgJHR5cGUgPSAk
bWV0aG9kLT57dHlwZX07CisgICAgaWYgKCAkdHlwZSBuZSAndm9pZCcgKSB7CisgICAgICAgICRm
dW5jX3JldCA9ICJyZXR1cm4gKCR0eXBlKSI7CisgICAgICAgIGlmICggJHR5cGUgIX4gL1wqLyAp
IHsKKyAgICAgICAgICAgICRmdW5jX3JldCA9ICJyZXR1cm4gIjsKKyAgICAgICAgICAgICRyZXRf
dHlwZSA9ICJfcmV0IiAuIGxjIHN1YnN0ciAkdHlwZSwgMCwgMTsKKyAgICAgICAgICAgICRyZXRf
dHlwZSA9ICJfcmV0aSIgaWYgJHJldF90eXBlIGVxICdfcmV0dSc7CisgICAgICAgIH0KKyAgICB9
CisKKyAgICBteSAkYm9keTsKKyAgICBpZiAoIGV4aXN0cyAkbWV0aG9kLT57bG9jfSBhbmQgJG1l
dGhvZC0+e2xvY30gbmUgJ3Z0YWJsZScgKSB7CisgICAgICAgICMgbWV0aG9kIGlzIFBDQ01FVEhP
RCwgZXRjIC0gbGV0IGRlZmF1bHQgaGFuZGxlciBkbyBpdAorICAgICAgICByZXR1cm4gJHNlbGYt
PlNVUEVSOjpib2R5KCAkbWV0aG9kLCAkbGluZSwgJG91dF9uYW1lICk7CisgICAgfQorICAgIGVs
c2lmICggJHNlbGYtPlNVUEVSOjppbXBsZW1lbnRzKCRtZXRoKSApIHsKKyAgICAgICAgIyBtZXRo
b2QgaXMgaW1wbGVtZW50ZWQgLSBnZXQgYm9keSBhbmQgZm9ybWF0IGl0CisgICAgICAgIG15ICRu
ICAgPSAkc2VsZi0+e2hhc19tZXRob2R9eyRtZXRofTsKKyAgICAgICAgJG1ldGhvZCA9ICRzZWxm
LT57bWV0aG9kc31bJG5dOworCisgICAgICAgICRib2R5ID0gJG1ldGhvZC0+e2JvZHl9OworICAg
ICAgICAkYm9keSA9fiBzL15cdC8gICAgICAgIC9tZzsKKyAgICAgICAgJGJvZHkgPX4gcy9eWyBd
ezR9Ly9tZzsKKworICAgICAgICBteSAkc3RhcnRfaWR4ID0gaW5kZXgoJGJvZHksICJcbiIpOwor
ICAgICAgICAkYm9keSAgICAgICAgID0gc3Vic3RyICRib2R5LCAkc3RhcnRfaWR4KzEsIGxlbmd0
aCgkYm9keSktJHN0YXJ0X2lkeC1yaW5kZXgoJGJvZHksICd9JyktMTsKKyAgICB9CisgICAgZWxz
ZSB7CisgICAgICAgICMgdGhyb3cgZXhjZXB0aW9uCisgICAgICAgIG15ICRudWxsX3JldCA9ICJy
ZXR1cm4iOworICAgICAgICAkbnVsbF9yZXQgLj0gIiAoJHR5cGUpMCIgaWYgJHR5cGUgbmUgJ3Zv
aWQnOworICAgICAgICAkYm9keSA9IDw8RU9DOwordnRhYmxlX21ldGhfbm90X2ZvdW5kKElOVEVS
UCwgU0VMRiwgIiRtZXRoIik7CisgICAgICAgICRudWxsX3JldDsKK0VPQworICAgIH0KKworICAg
IG15ICRkZWNsICAgICAgID0gJHNlbGYtPmRlY2woICRzZWxmLT57Y2xhc3N9LCAkbWV0aG9kLCAw
ICk7CisgICAgbXkgJHBhcmFtZXRlcnMgPSAkbWV0aG9kLT57cGFyYW1ldGVyc307CisgICAgbXkg
JG4gICAgICAgICAgPSAwOworICAgIG15IEBhcmdzICAgICAgID0gZ3JlcCB7ICRuKysgJiAxID8g
JF8gOiAwIH0gc3BsaXQgLyAvLCAkcGFyYW1ldGVyczsKKyAgICBteSAkYXJnICAgICAgICA9ICcn
OworICAgICRhcmcgICAgICAgICAgID0gIiwgIiAuIGpvaW4oICcgJywgQGFyZ3MgKSBpZiBAYXJn
czsKKyAgICBteSAkc2lnICAgICAgICA9ICRzZWxmLT5zaWduYXR1cmUoJHBhcmFtZXRlcnMpOwor
ICAgICRzaWcgICAgICAgICAgID0gJHNlbGYtPnRyYW5zKCAkbWV0aG9kLT57dHlwZX0gKSAuICRz
aWc7CisKKyAgICAkYm9keSA9ICRzZWxmLT5yZXdyaXRlX3Z0YWJsZV9tZXRob2QoICRzZWxmLT57
Y2xhc3N9LCAkbWV0aCwKKyAgICAgICAgJHNlbGYtPntzdXBlcn17JG1ldGh9LCAkc2VsZi0+e3N1
cGVyfSwgJGJvZHkgKTsKKyAgICBQYXJyb3Q6OlBtYzJjOjpQQ0NNRVRIT0Q6OnJld3JpdGVfcGNj
aW52b2tlKCAkbWV0aG9kLCBcJGJvZHkgKTsKKworICAgICMgSSB0aGluayB0aGF0IHRoZXNlIHdp
bGwgYmUgb3V0IGJ5IG9uZSAtIE5XQworICAgIG15ICRsID0gJHNlbGYtPmxpbmVfZGlyZWN0aXZl
KCAkbGluZSwgIm9iamVjdC5jIiApOworCisgICAgIyBtZXRob2RzIHdlIGRvbid0IHdhbnQgb3Zl
cnJpZGRlbgorICAgIG15IEBvbWl0X21ldGhzID0gcXcoaW5pdCBpbml0X3BtYyBpbnZva2UgZGVz
dHJveSBtYXJrIG1vcnBoKTsKKworICAgIGlmICggc2NhbGFyIGdyZXAoLyRtZXRoLywgQG9taXRf
bWV0aHMpID09IDAgKSB7CisgICAgICAgICRib2R5ID0gPDxFT0M7CisgICAgU1RSSU5HICpfX21l
dGggPSBDT05TVF9TVFJJTkcoaW50ZXJwLCAiJG1ldGgiKTsKKyAgICBQTUMgKl9fc3ViID0gUGFy
cm90X0NsYXNzX2ZpbmRfdnRhYmxlX21ldGhvZChpbnRlcnAsIFBBUlJPVF9PQkpFQ1QocG1jKS0+
X2NsYXNzLCBfX21ldGgpOworICAgIGlmIChQTUNfSVNfTlVMTChfX3N1YikpIHsKKyAgICAgICAg
JGJvZHkgICAgfQorICAgIGVsc2UKKyAgICAgICAgJHtmdW5jX3JldH1QYXJyb3RfcnVuX21ldGhf
ZnJvbWNfYXJncyRyZXRfdHlwZShpbnRlcnAsIF9fc3ViLAorICAgICAgICAgICAgcG1jLCBfX21l
dGgsICIkc2lnIiRhcmcpOworRU9DCisgICAgfQorCisgICAgcmV0dXJuIDw8RU9DOworJGwKKyR7
ZGVjbH17CiskYm9keQorfQorCitFT0MKK30KKworMTsKKworIyBMb2NhbCBWYXJpYWJsZXM6Cisj
ICAgbW9kZTogY3BlcmwKKyMgICBjcGVybC1pbmRlbnQtbGV2ZWw6IDQKKyMgICBmaWxsLWNvbHVt
bjogMTAwCisjIEVuZDoKKyMgdmltOiBleHBhbmR0YWIgc2hpZnR3aWR0aD00OgpJbmRleDogaW5j
bHVkZS9wYXJyb3Qvb2JqZWN0cy5oCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KLS0tIGluY2x1ZGUvcGFycm90L29iamVj
dHMuaAkocmV2aXNpb24gMTg0NTUpCisrKyBpbmNsdWRlL3BhcnJvdC9vYmplY3RzLmgJKHdvcmtp
bmcgY29weSkKQEAgLTU4LDYgKzU4LDcgQEAKIFBBUlJPVF9BUEkgdm9pZCBQYXJyb3RfaW52YWxp
ZGF0ZV9tZXRob2RfY2FjaGUoSW50ZXJwKiwgU1RSSU5HICpfY2xhc3MsIFNUUklORyAqbWV0aCk7
CiBQQVJST1RfQVBJIFNUUklORyAqcmVhZGFibGVfbmFtZShQYXJyb3RfSW50ZXJwLCBQTUMgKik7
CiBQQVJST1RfQVBJIElOVFZBTCBQYXJyb3RfZ2V0X3Z0YWJsZV9pbmRleChJbnRlcnAgKiwgU1RS
SU5HICpuYW1lKTsKK1BBUlJPVF9BUEkgU1RSSU5HICpQYXJyb3RfZ2V0X3Z0YWJsZV9uYW1lKElu
dGVycCAqaW50ZXJwLCBJTlRWQUwgaW5kZXgpOwogUEFSUk9UX0FQSSBQTUMgKlBhcnJvdF9maW5k
X3Z0YWJsZV9tZXRoKEludGVycCogaW50ZXJwLCBQTUMgKnBtYywgU1RSSU5HICptZXRoKTsKIAog
LyogT2JqZWN0cywgY2xhc3NlcyBhbmQgUE1DYXJyYXlzIGFsbCB1c2UgdGhlIHNhbWUgZGF0YSBz
Y2hlbWU6CkluZGV4OiBpbmNsdWRlL3BhcnJvdC9lbnVtcy5oCj09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KLS0tIGluY2x1
ZGUvcGFycm90L2VudW1zLmgJMjAwNy0wNS0xMCAxNzo0OToxMC4wMDAwMDAwMDAgKzAwMDAKKysr
IGluY2x1ZGUvcGFycm90L2VudW1zLmgJMjAwNy0wNS0xMCAxODo0MjoxMi4wMDAwMDAwMDAgKzAw
MDAKQEAgLTYxLDcgKzYxLDggQEAKICAgICAvKiB1bnVzZWQgLSAweDA0MCAqLwogICAgIFBBUlJP
VF9BUkdfT1BUSU9OQUwgICAgICAgICA9IDB4MDgwLCAvKiAxMjggKi8KICAgICBQQVJST1RfQVJH
X09QVF9GTEFHICAgICAgICAgPSAweDEwMCwgLyogMjU2IHByZXYgb3B0aW9uYWwgd2FzIHNldCAq
LwotICAgIFBBUlJPVF9BUkdfTkFNRSAgICAgICAgICAgICA9IDB4MjAwICAvKiA1MTIgdGhpcyBT
dHJpbmcgaXMgYW4gYXJnIG5hbWUgKi8KKyAgICBQQVJST1RfQVJHX05BTUUgICAgICAgICAgICAg
PSAweDIwMCwgLyogNTEyIHRoaXMgU3RyaW5nIGlzIGFuIGFyZyBuYW1lICovCisgICAgUEFSUk9U
X0FSR19PQkpFQ1QgICAgICAgICAgID0gMHg0MDAgIC8qIDEwMjQgUE1DIGlzIGN1cnJlbnQgb2Jq
ZWN0ICovCiAgICAgLyogbW9yZSB0byBjb21lIHNvb24gKi8KIAogfSBDYWxsX2JpdHNfZW51bV90
Owo=
------=_Part_84546_17827581.1178841639897
Content-Type: application/octet-stream; name=pdd15_spec.patch
Content-Transfer-Encoding: base64
X-Attachment-Id: f_f1jhc2bt
Content-Disposition: attachment; filename="pdd15_spec.patch"

LS0tIC9ob21lL2FsZWsvcGFycm90LnBkZDE1L2RvY3MvcGRkcy9wZGQxNV9vYmplY3RzLnBvZAky
MDA3LTA1LTEwIDE3OjU4OjQ1LjAwMDAwMDAwMCArMDAwMAorKysgZG9jcy9wZGRzL3BkZDE1X29i
amVjdHMucG9kCTIwMDctMDUtMTAgMTg6MDE6MjkuMDAwMDAwMDAwICswMDAwCkBAIC0yOTcsNyAr
Mjk3LDcgQEAKIAogPW92ZXIgNAogCi09aXRlbSBuZXcoKQorPWl0ZW0gbmV3KFBNQyAqIDpvcHRp
b25hbCkKIAogSW5zdGFudGlhdGUgYSBuZXcgb2JqZWN0IGZyb20gdGhlIGNsYXNzLiBTZXQgdGhl
IGluc3RhbnRpYXRlZCBmbGFnIG9uIHRoZQogY2xhc3MuCkBAIC00MTUsMTEgKzQxNSwxMyBAQAog
CiA9aXRlbSBuZXcKIAotICAgICRQMSA9ICRQMi5uZXcoICdteWF0dHJpYicgPT4gIkZvbyIgKQor
ICAkUDEgPSAkUDIubmV3KCkKKyAgJFAxID0gJFAyLm5ldygkUDMsIC4uLikKIAotQ3JlYXRlIGEg
bmV3IGluc3RhbmNlIG9iamVjdCBmcm9tIHRoZSBjbGFzcyBvYmplY3QuIEl0IHRha2VzIGFuIG9w
dGlvbmFsLAotc2x1cnB5LCBuYW1lZCBsaXN0IG9mIGF0dHJpYnV0ZXMgYW5kIHZhbHVlcyB0byBp
bml0aWFsaXplIHRoZSBvYmplY3QuCi1QYXNzaW5nIGF0dHJpYnV0ZSBuYW1lcyB0aGF0IHdlcmVu
J3QgZGVjbGFyZWQgaW4gdGhlIGNsYXNzIGlzIGFuIGVycm9yLgorQ3JlYXRlIGEgbmV3IGluc3Rh
bmNlIG9iamVjdCBmcm9tIHRoZSBjbGFzcyBvYmplY3QsIGFuZCB3YWxrcyB1cCB0aGUgTVJPIG9m
Cit0aGUgY2xhc3MsIGNhbGxpbmcgQzxpbml0PiBvbiBlYWNoIHBhcmVudCwgaWYgdGhleSBvdmVy
cmlkZGUgaXQuIFRha2VzIGEKK3NsdXJweSBsaXN0IG9mIGluaXRpYWxpemVyIHBhcmFtZXRlcnMg
dG8gcGFzcyB0byBDPGluaXQ+LiAgVGhlIHNsdXJweSBtdXN0CittYXRjaCB0aGUgYXJndW1lbnQg
c2lnbmF0dXJlIG9mIEM8aW5pdD4uCiAKID1pdGVtIGFkZF9hdHRyaWJ1dGUKIApAQCAtNDUyLDkg
KzQ1NCwyMyBAQAogUE1DLiAgSWYgdGhlIG1ldGhvZCBhbHJlYWR5IGV4aXN0cyAoYW5kIGlzbid0
IGEgTXVsdGkpIGl0IHdpbGwgcmVwbGFjZQogdGhlIG1ldGhvZCB3aXRoIHRoZSBuZXcgbWV0aG9k
IGFuZCB0aHJvdyBhIHdhcm5pbmcuCiAKLUl0IGFsc28gdGFrZXMgbmFtZWQgcGFyYW1ldGVycyB0
byBmbGFnIHdoZXRoZXIgdGhlIG1ldGhvZCBpcyBhIHZ0YWJsZQotb3ZlcnJpZGUsIGFuZCB3aGV0
aGVyIGl0IGlzIGFub255bW91cyAobm8gbmFtZWQgZW50cnkgYXMgYSBtZXRob2QsIG9ubHkKLWFz
IGEgdnRhYmxlKS4KKz1pdGVtIGFkZF92dGFibGVfbWV0aG9kCisKKyAgJFAxLmFkZF92dGFibGVf
bWV0aG9kKCRTMiwgJFAzKQorCitBZGRzIGEgdnRhYmxlIG1ldGhvZCB0byB0aGUgY2xhc3MsIHdo
aWNoIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHQKK2JlaGF2aW9yLiAgSXQgdGFrZXMgdGhlIG5h
bWUgb2YgYSB2dGFibGUgbWV0aG9kIChzZWUgTDxwZGQwMl92dGFibGVzLnBvZD4KK2ZvciBhIGxp
c3RpbmcpIGFuZCBhIG1ldGhvZCBQTUMuICBJZiB0aGUgbWV0aG9kIGFscmVhZHkgZXhpc3RzIChh
bmQgaXNuJ3QKK2EgTXVsdGkpIGl0IHdpbGwgcmVwbGFjZSB0aGUgbWV0aG9kIHdpdGggdGhlIG5l
dyBtZXRob2QgYW5kIHRocm93IGEKK3dhcm5pbmcuCisKK1RyeWluZyB0byBvdmVycmlkZSBDPGlu
aXRfcG1jPiwgQzxkZXN0cm95PiwgQzxtYXJrPiwgb3IgQzxtb3JwaD4gd2lsbCB0aHJvdworYW4g
ZXhjZXB0aW9uLgorCitXaGVuIG92ZXJyaWRkZW4sIEM8aW5pdD4gYW5kIEM8aW52b2tlPiB3b3Jr
IGRpZmZlcmVudGx5IHRoYW4gdGhleSBkbyBpbiBDLgorVGhvdWdoIHRoZWlyIEMgY291bnRlcnBh
cnRzIGFyZSBsaW1pdGVkIHRvIGEgZml4ZWQgbnVtYmVyIG9mIHBhcmFtZXRlcnMsCit0aGV5IGNh
biBhY2NlcHQgYW5kIHJldHVybiBwYXJhbWV0ZXJzIGFjY29yZGluZyB0byB0aGUgZnVsbCBQYXJy
b3QgY2FsbGluZworY29udmVudGlvbnMuCiAKID1pdGVtIG1ldGhvZHMKIApAQCAtMTA1OSwxMSAr
MTA3NSw4IEBACiByZXF1aXJlcyBhIGdvb2Qgd29ya2luZyBrbm93bGVkZ2Ugb2YgdGhlIHdheSBQ
YXJyb3Qgd29ya3MtLWdlbmVyYWxseSBmb3IKIGhpZ2hlci1sZXZlbCBsYW5ndWFnZXMgdGhlIGxh
bmd1YWdlIGNvbXBpbGVyIG9yIHJ1bnRpbWUgd2lsbCBwcm92aWRlCiBlYXNpZXItdG8tdXNlIHdy
YXBwZXJzLiBUaGVzZSBtZXRob2RzIGFyZSBhbGwgcHJvdG90eXBlZCwgYW5kIHRha2UgYQotc2lu
Z2xlIGZpeGVkIGFyZ3VtZW50IGxpc3QsIGFuZCByZXR1cm4gYXQgbW9zdCBhIHNpbmdsZSB2YWx1
ZS4KLQotVG8gb3ZlcnJpZGUgYSB2dGFibGUgZnVuY3Rpb24sIGVpdGhlciBhZGQgdGhlIDp2dGFi
bGUgcHJhZ21hIHRvIHRoZQotZGVjbGFyYXRpb24gb2YgdGhlIG1ldGhvZCwgb3IgcGFzcyBhIG5h
bWVkIHBhcmFtZXRlciAidnRhYmxlIiBpbnRvIHRoZQotQzxhZGRfbWV0aG9kPiBtZXRob2Qgb24g
YSBjbGFzcyBvciByb2xlLgorc2luZ2xlIGZpeGVkIGFyZ3VtZW50IGxpc3QsIGFuZCByZXR1cm4g
YXQgbW9zdCBhIHNpbmdsZSB2YWx1ZSwgZXhjZXB0IGZvcgorQzxpbml0PiBhbmQgQzxpbnZva2U+
IChzZWUgTDxDbGFzcyBQTUMgQVBJL0NsYXNzIE1ldGhvZHMvPWl0ZW0gYWRkX3Z0YWJsZV9tZXRo
b2Q+LgogCiA9aGVhZDIgV2hhdCBUaGUgQnl0ZWNvZGUgU2VlcwogCg==
------=_Part_84546_17827581.1178841639897
Content-Type: application/octet-stream; name=pdd15_tests.patch
Content-Transfer-Encoding: base64
X-Attachment-Id: f_f1jhc3bk
Content-Disposition: attachment; filename="pdd15_tests.patch"

SW5kZXg6IHQvcG1jL2NsYXNzLnQKPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQotLS0gdC9wbWMvY2xhc3MudAkocmV2aXNp
b24gMTg0NTUpCisrKyB0L3BtYy9jbGFzcy50CSh3b3JraW5nIGNvcHkpCkBAIC02LDcgKzYsNyBA
QAogdXNlIHdhcm5pbmdzOwogdXNlIGxpYiBxdyggLiBsaWIgLi4vbGliIC4uLy4uL2xpYiApOwog
dXNlIFRlc3Q6Ok1vcmU7Ci11c2UgUGFycm90OjpUZXN0IHRlc3RzID0+IDE1OwordXNlIFBhcnJv
dDo6VGVzdCB0ZXN0cyA9PiAxNzsKIAogPWhlYWQxIE5BTUUKIApAQCAtOTcsNDEgKzk3LDk3IEBA
CiBPVVQKIAogIyBMPFBERDE1L0NsYXNzIFBNQyBBUEkvPWl0ZW0gbmV3PgotcGlyX291dHB1dF9p
cyggPDwnQ09ERScsIDw8J09VVCcsICduZXcnICk7CitwaXJfb3V0cHV0X2lzKCA8PCdDT0RFJywg
PDwnT1VUJywgJ25ldyBjYWxscyBpbml0KCknICk7CiAuc3ViICd0ZXN0JyA6bWFpbgotICAgIG5l
dyAkUDAsIC5DbGFzcwotICAgICRQMSA9ICRQMC4nbmV3JygpCi0gICAgJEkwID0gaXNhICRQMSwg
J09iamVjdCcKLSAgICBpZiAkSTAgZ290byBva18xCi0gICAgcHJpbnQgJ25vdCAnCi0gIG9rXzE6
Ci0gICAgc2F5ICdvayAxIC0gbmV3KCkgd2l0aCBubyBhcmdzIHJldHVybnMgYW4gb2JqZWN0Jwor
ICAgIC5sb2NhbCBwbWMgY2xhc3MsIHN1YmNsYXNzLCBvYmosIG1ldGgKKyAgICBjbGFzcyA9IG5l
dyAiQ2xhc3MiCisgICAgbWV0aCA9IGZpbmRfZ2xvYmFsICJpbml0X3N1cGVyIgorICAgIGNsYXNz
LidhZGRfdnRhYmxlX21ldGhvZCcoImluaXQiLCBtZXRoKQogCi0gICAgcHVzaF9laCBva18yCi0g
ICAgJFAxID0gJFAwLiduZXcnKCdhYmMnID0+ICcxMjMnICkKLSAgICBjbGVhcl9laAotICAgIHBy
aW50ICdub3QgJwotICBva18yOgotICAgIHNheSAnb2sgMiAtIG5ldygpIHdpdGggbm9uLWF0dHJp
YnV0ZSBrZXkgZmFpbHMnCisgICAgc3ViY2xhc3MgPSBuZXcgIkNsYXNzIgorICAgIHN1YmNsYXNz
LidhZGRfcGFyZW50JyhjbGFzcykKKyAgICBtZXRoID0gZmluZF9nbG9iYWwgImluaXQiCisgICAg
c3ViY2xhc3MuJ2FkZF92dGFibGVfbWV0aG9kJygiaW5pdCIsIG1ldGgpCisgICAgb2JqID0gc3Vi
Y2xhc3MuJ25ldycoInBhcmFtIikKKy5lbmQKIAotICAgICRQMCA9IG5ldyAuQ2xhc3MKLSAgICAk
UDAuJ2FkZF9hdHRyaWJ1dGUnKCdmb28nKQotICAgICRQMC4nYWRkX2F0dHJpYnV0ZScoJ2Jhcicp
Ci0gICAgJFAxID0gJFAwLiduZXcnKCdmb28nID0+IDEsICdiYXInID0+IDIpCi0gICAgJFAyID0g
Z2V0YXR0cmlidXRlICRQMSwgJ2ZvbycKLSAgICBzYXkgJFAyCi0gICAgJFAyID0gZ2V0YXR0cmli
dXRlICRQMSwgJ2JhcicKLSAgICBzYXkgJFAyCi0gICAgc2F5ICdvayAzIC0gbmV3KCkgd2l0aCBr
ZXkvdmFsdWUgcGFpcnMgc2V0cyBhdHRyaWJ1dGVzJworLnN1YiAnaW5pdF9zdXBlcicgOnZ0YWJs
ZSgnaW5pdCcpIDptZXRob2QKKyAgLnBhcmFtIHN0cmluZyBwYXIKKyAgc2F5ICJzdXBlciBpbml0
IgorICBzYXkgcGFyCiAuZW5kCisKKy5zdWIgJ2luaXQnIDp2dGFibGUgOm1ldGhvZAorICAucGFy
YW0gc3RyaW5nIHBhcgorICBzYXkgInN1YiBpbml0IgorICBzYXkgcGFyCisuZW5kCiBDT0RFCi1v
ayAxIC0gbmV3KCkgd2l0aCBubyBhcmdzIHJldHVybnMgYW4gb2JqZWN0Ci1vayAyIC0gbmV3KCkg
d2l0aCBub24tYXR0cmlidXRlIGtleSBmYWlscwotMQotMgotb2sgMyAtIG5ldygpIHdpdGgga2V5
L3ZhbHVlIHBhaXJzIHNldHMgYXR0cmlidXRlcworc3ViIGluaXQKK3BhcmFtCitzdXBlciBpbml0
CitwYXJhbQogT1VUCiAKKyMgTDxQREQxNS9WdGFibGUgT3ZlcmxvYWRpbmc+CitwaXJfb3V0cHV0
X2lzKCA8PCdDT0RFJywgPDwnT1VUJywgJ3Z0YWJsZSBtZXRob2QgbG9va3VwJyApOworLnN1YiAn
dGVzdCcgOm1haW4KKyAgICAubG9jYWwgcG1jIGNsYXNzLCBzdWJjbGFzcywgb2JqLCBtZXRoCisg
ICAgY2xhc3MgPSBuZXcgIkNsYXNzIgorICAgIG1ldGggPSBmaW5kX2dsb2JhbCAiZ2V0X3N0cmlu
Z19zdXBlciIKKyAgICBjbGFzcy4nYWRkX3Z0YWJsZV9tZXRob2QnKCJnZXRfc3RyaW5nIiwgbWV0
aCkKKyAgICBvYmogPSBjbGFzcy4nbmV3JygpCisgICAgc2F5IG9iagorCisgICAgc3ViY2xhc3Mg
PSBuZXcgIkNsYXNzIgorICAgIHN1YmNsYXNzLidhZGRfcGFyZW50JyhjbGFzcykKKyAgICBvYmog
PSBzdWJjbGFzcy4nbmV3JygpCisgICAgc2F5IG9iagorCisgICAgc3ViY2xhc3MgPSBuZXcgIkNs
YXNzIgorICAgIHN1YmNsYXNzLidhZGRfcGFyZW50JyhjbGFzcykKKyAgICBtZXRoID0gZmluZF9n
bG9iYWwgImdldF9zdHJpbmciCisgICAgc3ViY2xhc3MuJ2FkZF92dGFibGVfbWV0aG9kJygiZ2V0
X3N0cmluZyIsIG1ldGgpCisgICAgb2JqID0gc3ViY2xhc3MuJ25ldycoKQorICAgIHNheSBvYmoK
Ky5lbmQKKworLnN1YiAnZ2V0X3N0cmluZ19zdXBlcicgOnZ0YWJsZSgnZ2V0X3N0cmluZycpIDpt
ZXRob2QKKyAgLnJldHVybigic3VwZXJjbGFzcyBnZXRfc3RyaW5nKCkiKQorLmVuZAorCisuc3Vi
ICdnZXRfc3RyaW5nJyA6dnRhYmxlIDptZXRob2QKKyAgLnJldHVybigic3ViY2xhc3MgZ2V0X3N0
cmluZygpIikKKy5lbmQKK0NPREUKK3N1cGVyY2xhc3MgZ2V0X3N0cmluZygpCitzdXBlcmNsYXNz
IGdldF9zdHJpbmcoKQorc3ViY2xhc3MgZ2V0X3N0cmluZygpCitPVVQKKworIyBMPFBERDE1L1Z0
YWJsZSBPdmVybG9hZGluZz4KK3Bpcl9vdXRwdXRfaXMoIDw8J0NPREUnLCA8PCdPVVQnLCAnb3Zl
cnJpZGluZyBpbnZva2UoKSB2dGFibGUgbWV0aG9kJyApOworLnN1YiAndGVzdCcgOm1haW4KKyAg
ICAubG9jYWwgcG1jIGNsYXNzLCBvYmosIG1ldGgsIHJldAorICAgIGNsYXNzID0gbmV3ICJDbGFz
cyIKKyAgICBtZXRoID0gZmluZF9nbG9iYWwgImludm9rZSIKKyAgICBjbGFzcy4nYWRkX3Z0YWJs
ZV9tZXRob2QnKCJpbnZva2UiLCBtZXRoKQorICAgIG9iaiA9IGNsYXNzLiduZXcnKCkKKworICAg
IHJldCA9IG9iaigicGFyYW0iKQorICAgIHNheSByZXQKKy5lbmQKKworLnN1YiAnaW52b2tlJyA6
dnRhYmxlIDptZXRob2QKKyAgLnBhcmFtIHN0cmluZyBwYXIKKyAgIHNheSBwYXIKKyAgLnJldHVy
bigicmV0dXJuIHZhbCIpCisuZW5kCitDT0RFCitwYXJhbQorcmV0dXJuIHZhbAorT1VUCisKICMg
TDxQREQxNS9DbGFzcyBQTUMgQVBJLz1pdGVtIGF0dHJpYnV0ZXM+CiBwaXJfb3V0cHV0X2lzKCA8
PCdDT0RFJywgPDwnT1VUJywgJ2F0dHJpYnV0ZXMnICk7CiAuc3ViICd0ZXN0JyA6bWFpbgpJbmRl
eDogdC9wbWMvb2JqZWN0LW1ldGhzLnQKPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQotLS0gdC9wbWMvb2JqZWN0LW1ldGhz
LnQJKHJldmlzaW9uIDE4NDU1KQorKysgdC9wbWMvb2JqZWN0LW1ldGhzLnQJKHdvcmtpbmcgY29w
eSkKQEAgLTYsNyArNiw3IEBACiB1c2Ugd2FybmluZ3M7CiB1c2UgbGliIHF3KCAuIGxpYiAuLi9s
aWIgLi4vLi4vbGliICk7CiB1c2UgVGVzdDo6TW9yZTsKLXVzZSBQYXJyb3Q6OlRlc3QgdGVzdHMg
PT4gNDM7Cit1c2UgUGFycm90OjpUZXN0IHRlc3RzID0+IDQ0OwogCiA9aGVhZDEgTkFNRQogCkBA
IC03MjksNiArNzI5LDI4IEBACiBiYXIgaW5pdAogT1VUUFVUCiAKK3Bpcl9vdXRwdXRfaXMoIDw8
J0NPREUnLCA8PCdPVVRQVVQnLCAiY29uc3RydWN0b3IgLSB2dGFibGUgb3ZlcnJpZGUiICk7Cisu
c3ViIG1haW4gOm1haW4KKyAgJFAwID0gbmV3Y2xhc3MgJ0ZvbycKKyAgJFAxID0gc3ViY2xhc3Mg
J0ZvbycsICdCYXInCisgICRQMiA9IG5ldyAnQmFyJworLmVuZAorCisubmFtZXNwYWNlIFsnRm9v
J10KKy5zdWIgaW5pdCA6dnRhYmxlIDptZXRob2QKKyAgcHJpbnQgImZvbyBpbml0XG4iCisuZW5k
CisKKy5uYW1lc3BhY2UgWydCYXInXQorLnN1YiBpbml0IDp2dGFibGUgOm1ldGhvZAorICBwcmlu
dCAiYmFyIGluaXRcbiIKKy5lbmQKKworQ09ERQorZm9vIGluaXQKK2JhciBpbml0CitPVVRQVVQK
KwogcGlyX291dHB1dF9pcyggPDwnQ09ERScsIDw8J09VVFBVVCcsICJzYW1lIG1ldGhvZCBuYW1l
IGluIHR3byBuYW1lc3BhY2VzIiApOwogCiAubmFtZXNwYWNlIFsiQSJdCg==
------=_Part_84546_17827581.1178841639897--

