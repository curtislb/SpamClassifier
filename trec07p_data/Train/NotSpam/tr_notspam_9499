From sugar-bounces@laptop.org  Fri May 11 13:03:08 2007
Return-Path: <sugar-bounces@laptop.org>
Received: from pedal.laptop.org (pedal.laptop.org [18.85.2.148])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l4BH37qD025672
	for <ktwarwic@speedy.uwaterloo.ca>; Fri, 11 May 2007 13:03:07 -0400
Received: from pedal.laptop.org (localhost [127.0.0.1])
	by pedal.laptop.org (Postfix) with ESMTP id 990144EF63;
	Fri, 11 May 2007 13:02:48 -0400 (EDT)
X-Original-To: sugar@laptop.org
Delivered-To: sugar@laptop.org
Received: from spam.laptop.org (spam.laptop.org [18.85.46.23])
	by pedal.laptop.org (Postfix) with ESMTP id 89FD44F687
	for <sugar@laptop.org>; Fri, 11 May 2007 10:58:51 -0400 (EDT)
X-ASG-Debug-ID: 1178895542-76c900010000-3Xmyjt
X-Barracuda-URL: http://18.85.46.23:8000/cgi-bin/mark.cgi
X-Barracuda-Connect: cube.ipv4.spacelabs.nl[192.87.65.66]
X-Barracuda-Start-Time: 1178895542
X-Barracuda-Encrypted: DHE-RSA-AES256-SHA
Received: from cube.luon.net (cube.ipv4.spacelabs.nl [192.87.65.66])
	(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by spam.laptop.org (Spam Firewall) with ESMTP id D55899E97
	for <sugar@laptop.org>; Fri, 11 May 2007 10:59:06 -0400 (EDT)
Received: from localhost (cube.luon.net [127.0.0.1])
	by cube.luon.net (Postfix) with ESMTP id 381A33BAA5
	for <sugar@laptop.org>; Fri, 11 May 2007 16:59:01 +0200 (CEST)
Received: from cube.luon.net ([127.0.0.1])
	by localhost (cube.luon.net [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id SGXsx7dECG3Q for <sugar@laptop.org>;
	Fri, 11 May 2007 16:59:00 +0200 (CEST)
Received: from spring.luon.net (unknown [83.68.28.34])
	by cube.luon.net (Postfix) with ESMTP id 8E84F3BA74
	for <sugar@laptop.org>; Fri, 11 May 2007 16:59:00 +0200 (CEST)
Received: by spring.luon.net (Postfix, from userid 1000)
	id 0267A3143E; Fri, 11 May 2007 16:19:29 +0200 (CEST)
Date: Fri, 11 May 2007 16:19:29 +0200
From: Sjoerd Simons <sjoerd.simons@collabora.co.uk>
To: sugar@laptop.org
X-ASG-Orig-Subj: Re: [sugar] Obtaining Buddy objects as contacts are
	encountered
Message-ID: <20070511141929.GA11923@spring.luon.net>
References: <20070510153235.GA30162@celebrin.pseudorandom.co.uk>
MIME-Version: 1.0
Content-Disposition: inline
In-Reply-To: <20070510153235.GA30162@celebrin.pseudorandom.co.uk>
X-Operating-System: Linux spring 2.6.20-1-powerpc #1 Tue Apr 24 10:10:01 CEST
	2007 ppc GNU/Linux
User-Agent: Mutt/1.5.13 (2006-08-11)
X-Barracuda-Bayes: INNOCENT GLOBAL 0.2913 1.0000 -0.3858
X-Barracuda-Virus-Scanned: by Barracuda Spam Firewall at laptop.org
X-Barracuda-Spam-Score: -0.39
X-Barracuda-Spam-Status: No, SCORE=-0.39 using global scores of TAG_LEVEL=3.5
	QUARANTINE_LEVEL=1000.0 KILL_LEVEL=5.5 tests=
X-Barracuda-Spam-Report: Code version 3.1, rules version 3.1.16646
	Rule breakdown below
	pts rule name              description
	---- ----------------------
	--------------------------------------------------
X-Mailman-Approved-At: Fri, 11 May 2007 13:02:47 -0400
Subject: Re: [sugar] Obtaining Buddy objects as contacts are encountered
X-BeenThere: sugar@laptop.org
X-Mailman-Version: 2.1.9
Precedence: list
List-Id: "Discussion of OLPC design,
	desktop platform and user experience" <sugar.laptop.org>
List-Unsubscribe: <http://mailman.laptop.org/mailman/listinfo/sugar>,
	<mailto:sugar-request@laptop.org?subject=unsubscribe>
List-Archive: <http://mailman.laptop.org/pipermail/sugar>
List-Post: <mailto:sugar@laptop.org>
List-Help: <mailto:sugar-request@laptop.org?subject=help>
List-Subscribe: <http://mailman.laptop.org/mailman/listinfo/sugar>,
	<mailto:sugar-request@laptop.org?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: sugar-bounces@laptop.org
Errors-To: sugar-bounces@laptop.org

On Thu, May 10, 2007 at 04:32:35PM +0100, Simon McVittie wrote:
> -----BEGIN PGP SIGNED MESSAGE-----
> Hash: SHA1
> 
> At the moment the Presence Service API assumes we're subscribed to the
> presence of every contact we'll ever encounter, which obviously can't scale to
> a school.
> 
> When child joins an activity we're in, the presence service needs to be able
> to give us a Buddy object for them without making network round-trips -
> otherwise the activity will have no way to identify them. We can't just ignore
> them (omit them from the GUI) until we've made network round-trips to ask
> the server about them, because they might start participating in the activity
> before we get the server's reply, and it would be confusing to get messages
> from an apparently nonexistent buddy (also, activity authors are
> unlikely to handle this correctly).
> 
> At the same time, we don't want to have two Buddy objects in the PS process
> representing the same child, and have to do some sort of coalescing process
> when we work out that they actually represent the same person; so from just
> the information we immediately have when we first encounter someone,
> we should be able to make the decision whether two contacts are in fact the
> same.
> 
> For the server case, the JID is constructed as follows:
> 
> 	hex(sha1(public key)) + '@' + configured server
> 
> To avoid spoofing we need to require that the server will only create new
> accounts (or almost equivalently, allow login to an account) if the client can
> demonstrate knowledge of a private key for which the public key's hex SHA-1
> is the username part of the desired JID.
> 
> For the link-local (mesh) case, I believe the idea is that the public key
> and other OLPC info is in the mDNS record, so by the time we can interact with
> someone, we already have all relevant information about them? If so, and we
> put the corresponding server-JID in the mDNS record, then we can again always
> know which child we're talking to.

Correct. Well it could potentially happen that someone connects to you before
you resolved his/her mDNS record. But that window is neglibally small (Salut
currently even refuses your connection if it can't link you to a known mDNS
record)

> Again, to avoid spoofing we need to require that the mDNS record demonstrates
> knowledge of the private key; perhaps it could include a signature of the IP
> address or IP:port or whatever, and a timestamp, made using the private key.

Yes. Although signing doesn't win you much as others can easily spoof your mDNS
record as soon as they've seen it. If we make it mandatory to refresh your
signature every once in a while, the damage can be limited though (You can be
only spoofed for a limited timespan).

If we case we to make it even better, we will need signed records in avahi
itself.  So avahi can sign each record it sends out.

The most important thing is that we need to prevent spoofing when we start 
interacting with someone though. Spoofing that someone is on the network/in
some activities is bad, but a lot less harmless then interacting with someone
that isn't who he says he is.

This brings up a major issue though. What should happen if we see a presence
we've never seen before and thus don't know what the public key should be.
Should we take a leap-of-faith and trust that person or we do some magic 
handshake to determine his/her identity ?

In the same line of thinking. If we established someone is actualy
<random hash>@school.example.com. Who is actually authorative to say what human
readable presence information belongs to him (name, colors). Especially in
link-local you can just put any information you want in there.

  Sjoerd
-- 
The truth of a thing is the feel of it, not the think of it.
		-- Stanley Kubrick
_______________________________________________
Sugar mailing list
Sugar@laptop.org
http://mailman.laptop.org/mailman/listinfo/sugar

