From perl6-all-return-82367-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon Jun 25 15:52:41 2007
Return-Path: <perl6-all-return-82367-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5PJqdL9000789
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 25 Jun 2007 15:52:40 -0400
Received: (qmail 17119 invoked by uid 514); 25 Jun 2007 19:52:35 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 17114 invoked from network); 25 Jun 2007 19:52:34 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: domain of dataweaver@gmail.com designates 64.233.162.231 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=QrdmUoKsRyzJh4v2t8PQgBmHmt6VFgtUGIBFpDuhZdzMs+wJA9EjjiCOyDGUKG+R9h3i5lY4fvZHZT8j1+yVgGGZAZPzqqJw2+ResX1y2oNylkroeOTycRxolP+CvIPciPNvhU7d8MzjZqyba6H4A6M55eH3sjvpiHbgpV1LHlA=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=iXGX5aFL7aJh4X6AvgHp0Nq9krwyGmXttB42LdQBXAONX7wLlAGL8vc54T+YK4I5ujQw3gIi8AcGKWjwphGCYBUuh7mSDy6cIaqRrMOWs0iyrpcWYlLytNI2lT2MegU2P3lgurz8VVHQ1cHFvaV1jz86QbGdvzmaGwOaNeygfD4=
Message-ID: <ef30550b0706251252s42bc63c3l748a9ef536a004ff@mail.gmail.com>
Date: Mon, 25 Jun 2007 12:52:12 -0700
From: "Jonathan Lang" <dataweaver@gmail.com>
To: "David Green" <david.green@telus.net>
Subject: Re: Referring to source code within Perldoc
Cc: perl6-language@perl.org
In-Reply-To: <a0623090cc2a06354a1ba@172.27.1.7>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <4678B887.8090303@conway.org>
	 <20070620083220.GX16156@earth.overmeer.net>
	 <4679D850.7000906@conway.org>
	 <20070621074400.GA32129@earth.overmeer.net>
	 <832f158a0706210107j18194932r1713aeb43604fce9@mail.gmail.com>
	 <210620071114079448%brian.d.foy@gmail.com>
	 <a0623090cc2a06354a1ba@172.27.1.7>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS

David Green wrote:
> (Unless I'm missing something, which is always possible; you can put
> a piece of POD geographically next to a Perl declaration, but I'm not
> sure that's unambiguous enough.  Hm, why not?  POD doesn't know
> what's going on around it, but Perl does, and could say, "I've just
> declared $size, and the next line starts a chunk of POD, so I'll
> simply copy it into $size's 'documented' trait... would that work??)

It is doable: say that any Pod section that appears within or after a
class definition is considered by perldoc to refer to that class.

The problem with this is that you're forcing the Pod author to
organize his documentation in a manner that precisely mirrors the
organization used by the Perl programmer, and to scatter it throughout
the module.  This isn't necessarily a deal-breaker because the Pod
author is usually(?) going to _be_ the Perl programmer (thus letting
him reorganize the classes to match the preferred documentation
sequence or vice versa), and because the Pod author may _prefer_ to
place the documentation in close proximity to the source code being
documented.  But it would be nice to have more freedom of placement of
documentation for those with other preferences.

There's the new 'A<>' tag, which specifically refers to a word or
phrase in the source code.  But that's a single inline tag; so it's
questionable as to how useful it would be for the purpose of
associating an entire Pod section to a piece of source code.  In
addition, the 'A<>' tag, as written, makes explicit use of exactly the
geographic positioning that we're trying to get around.

--

Then there's the suggestion that I made about providing a Pod rule (or
Pod rules) for the purpose of identifying points in or sections of the
source code for more robust referencing.  In my proposal, I suggested
being able to say something like '=code Foo' to identify the start of
a section of source code that abstractly relates to the label 'Foo',
coupled with the ability to tell a Pod section elsewhere that it is
associated with the source code identified by 'Foo' (using something
like '=begin pod :A<Foo>' to do so).

At the time, I was thinking in terms of allowing more freedom of
placement of 'A<>' tags; but it also works for giving entire pod
sections freedom of placement while still maintaining ties to specific
source code: for example, perldoc could look for the '=code' rule that
precedes or encompasses a given class definition and then associate
any Pod sections that attach themselves to that rule with that class.
So while the '=code' rule would have to maintain a close geographic
relationship to the source code in question, the documentation itself
would not.

Ideally, this wouldn't replace the proximity-based bindings, but would
supplement it, with the idea that Pod sections with :A<...> traits
would be bound to whatever follows the associated '=code' rule, while
those without :A<...> traits would be bound to whatever they follow.

Best of all, none of these bindings would be Pod's responsibility.  As
far as Pod is concerned, the only use that '=code' rules would have
would be in service to 'A<>' tags, and could maintain ignorance about
what the source code speaks of.  Perldoc would have the final
responsibility of binding documentation to definitions.

--

The other way to go about it would be to have the source code refer to
Pod sections:

  class Foo is documented(Bar) {
    has $.x is documented(Baz);
  }

  ...

  =begin Bar
  ...

  =begin Baz
  ...

This places the responsibility of bindings on the language (in this
case, Perl) - each of which would have to come up with its own syntax
for referencing documentation.  This is fine as far as Perldoc is
concerned, but does raise issues if you decide that you want to do
something similar with, say, C++ or HTML.

-- 
Jonathan "Dataweaver" Lang

