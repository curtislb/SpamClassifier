From samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org  Wed May  9 19:36:16 2007
Return-Path: <samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org>
Received: from lists.samba.org (mail.samba.org [66.70.73.150])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l49NaGqD002671
	for <ktwarwic@speedy.uwaterloo.ca>; Wed, 9 May 2007 19:36:16 -0400
Received: from dp.samba.org (localhost [127.0.0.1])
	by lists.samba.org (Postfix) with ESMTP id 6F2DE162ACA
	for <ktwarwic@speedy.uwaterloo.ca>; Wed,  9 May 2007 23:36:14 +0000 (GMT)
X-Spam-Checker-Version: SpamAssassin 3.1.7 (2006-10-05) on dp.samba.org
X-Spam-Level: 
X-Spam-Status: No, score=-0.1 required=3.8 tests=AWL,BAYES_00,NO_REAL_NAME,
	NO_RELAYS,RCVD_IN_DSBL autolearn=no version=3.1.7
X-Original-To: samba-cvs@samba.org
Delivered-To: samba-cvs@samba.org
Received: by lists.samba.org (Postfix, from userid 603)
	id C3A9B162AD1; Wed,  9 May 2007 23:35:55 +0000 (GMT)
Date: Thu, 10 May 2007 07:43:19 +1000
To: samba-cvs@samba.org
From: tridge@samba.org
Message-Id: <20070509233555.C3A9B162AD1@lists.samba.org>
Subject: Rev 266: merged ronnies code to delay client requests when in
	recovery mode in http://samba.org/~tridge/ctdb
X-BeenThere: samba-cvs@lists.samba.org
X-Mailman-Version: 2.1.5
Precedence: list
Reply-To: samba-technical@lists.samba.org
List-Id: Samba CVS and subversion commit messages <samba-cvs.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/archive/samba-cvs>
List-Post: <mailto:samba-cvs@lists.samba.org>
List-Help: <mailto:samba-cvs-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=subscribe>
Sender: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Errors-To: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org

------------------------------------------------------------
revno: 266
revision-id: tridge@samba.org-20070509214318-io4xhj2e6k91eosm
parent: tridge@samba.org-20070509015437-c9u6pubosc3jz0um
parent: sahlberg@ronnie-20070509040811-460ac8e7d6691f7f
committer: Andrew Tridgell <tridge@samba.org>
branch nick: tridge
timestamp: Thu 2007-05-10 07:43:18 +1000
message:
  merged ronnies code to delay client requests when in recovery mode
modified:
  common/ctdb_daemon.c           ctdb_daemon.c-20070409200331-3el1kqgdb9m4ib0g-1
    ------------------------------------------------------------
    revno: 197.1.90
    merged: sahlberg@ronnie-20070509040811-460ac8e7d6691f7f
    parent: sahlberg@ronnie-20070509040647-f8724a40b8a205e5
    committer: Ronnie Sahlberg <sahlberg@ronnie>
    branch nick: ctdb
    timestamp: Wed 2007-05-09 14:08:11 +1000
    message:
      hang the event from the retry structure instead of the hdr structure
    ------------------------------------------------------------
    revno: 197.1.89
    merged: sahlberg@ronnie-20070509040647-f8724a40b8a205e5
    parent: sahlberg@ronnie-20070508235923-78a4589b69fa8935
    committer: Ronnie Sahlberg <sahlberg@ronnie>
    branch nick: ctdb
    timestamp: Wed 2007-05-09 14:06:47 +1000
    message:
      when we are in recovery mode and we get a REQ_CALL from a client,
      defer it for one second and try again   
=== modified file 'common/ctdb_daemon.c'
--- a/common/ctdb_daemon.c	2007-05-08 23:59:23 +0000
+++ b/common/ctdb_daemon.c	2007-05-09 21:43:18 +0000
@@ -334,6 +334,30 @@
 }
 
 
+struct ctdb_client_retry {
+	struct ctdb_client *client;
+	struct ctdb_req_call *call;
+};
+
+static void daemon_request_call_from_client(struct ctdb_client *client, 
+					    struct ctdb_req_call *c);
+
+/*
+  triggered after a one second delay, retrying a client packet
+  that was deferred because of the daemon being in recovery mode
+ */
+static void retry_client_packet(struct event_context *ev, struct timed_event *te, 
+				struct timeval t, void *private_data)
+{
+	struct ctdb_client_retry *retry = talloc_get_type(private_data, struct ctdb_client_retry);
+
+	daemon_request_call_from_client(retry->client, retry->call);
+
+	talloc_free(retry);
+}
+
+
+
 /*
   this is called when the ctdb daemon received a ctdb request call
   from a local client over the unix domain socket
@@ -350,6 +374,29 @@
 	int ret;
 	struct ctdb_context *ctdb = client->ctdb;
 
+	if (ctdb->recovery_mode != CTDB_RECOVERY_NORMAL) {
+		struct ctdb_client_retry *retry;
+		
+		DEBUG(0,(__location__ " ctdb call %u from client"
+			 " while we are in recovery mode. Deferring it\n", 
+			 c->hdr.reqid)); 
+
+		/* hang the event and the structure off client */
+		retry = talloc(client, struct ctdb_client_retry);
+		CTDB_NO_MEMORY_VOID(ctdb, retry);
+		retry->client = client;
+		retry->call   = c;
+		
+		/* this ensures that after the retry happens we
+		   eventually free this request */
+		talloc_steal(retry, c);
+		
+		event_add_timed(ctdb->ev, retry, timeval_current_ofs(1,0), retry_client_packet, retry);
+		return;
+	}
+
+
+
 	ctdb->status.total_calls++;
 	ctdb->status.pending_calls++;
 

