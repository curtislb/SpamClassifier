From beginners-return-90968-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri Apr 20 13:47:59 2007
Return-Path: <beginners-return-90968-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3KHlw0I009234
	for <ktwarwic@speedy.uwaterloo.ca>; Fri, 20 Apr 2007 13:47:59 -0400
Received: (qmail 8439 invoked by uid 514); 20 Apr 2007 17:47:26 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 8425 invoked from network); 20 Apr 2007 17:47:26 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 20 Apr 2007 17:47:26 -0000
Received: (qmail 8633 invoked by uid 225); 20 Apr 2007 17:47:25 -0000
Delivered-To: beginners@perl.org
Received: (qmail 8609 invoked by alias); 20 Apr 2007 17:47:25 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of chas.owens@gmail.com designates 64.233.162.224 as permitted sender)
Received: from nz-out-0506.google.com (HELO nz-out-0506.google.com) (64.233.162.224)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Fri, 20 Apr 2007 10:47:23 -0700
Received: by nz-out-0506.google.com with SMTP id s1so766038nze
        for <beginners@perl.org>; Fri, 20 Apr 2007 10:47:19 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=QpU3RQEMnhX/k7jkSPa0j4oFeBj/uHFKObXgUSigUTqscD9nHu/u9w4cPkgIzojf72pk6qUtRd+e4HG+FwRXRhh6gTJDuo3a2RMDMb8vej+ZTZXGQ6OzSJ4j8XL7g4F92UvT8lJphM2qh7AphuwhpUOjftTWp6qmb1a2UzE/7sg=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=sdt2UIsH9Z/eN5GmRoOpW8BxMBFROfbFUWH4gHs8R31UISD1Uf/ATCR9CvTA31DyLQLsz5wlw7pBOdkXik7H4ErjMZPtpB/lKpUbYJFtDzhKrf5hRBkw5ZlkhRj4d64A0s1YvIKxbOTagJ61H+gQdcgp2n+Ey57GjDKNoczomG8=
Received: by 10.114.14.1 with SMTP id 1mr1349826wan.1177091238824;
        Fri, 20 Apr 2007 10:47:18 -0700 (PDT)
Received: by 10.114.79.3 with HTTP; Fri, 20 Apr 2007 10:47:18 -0700 (PDT)
Message-ID: <58ce48dc0704201047k4116ce36pb56ed6383ad42613@mail.gmail.com>
Date: Fri, 20 Apr 2007 13:47:18 -0400
From: "Chas Owens" <chas.owens@gmail.com>
To: yitzle <yitzle@users.sourceforge.net>
Subject: Re: Nested loop
Cc: oryann9 <oryann9@yahoo.com>, "Perl List" <beginners@perl.org>
In-Reply-To: <ca5781c80704200719q31471a07l93253e96aa7150b3@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <58ce48dc0704192129r3112ddb8m62d05075b5dd966b@mail.gmail.com>
	 <999878.79133.qm@web63403.mail.re1.yahoo.com>
	 <ca5781c80704200719q31471a07l93253e96aa7150b3@mail.gmail.com>
Status: O
Content-Length: 1267
Lines: 40

On 4/20/07, yitzle <yitzle@users.sourceforge.net> wrote:
> There's been mentions of efficiency.
> I'm under the impression that for the uses Perl is put to, the
> efficiency of a loop is sorta irrelevent. If you are doing
> harddrive/network access, the performance gain of one loop over the
> other is more of less invisible.
> Come to think of it, the time for interpretting got to overshadow the
> performance gain...

I was trying to address all arguments for the use of C-style for.  In
general, though, premature optimization is a waste of time.  You
should be aware of the general cost of the constructs you use (that is
why I occasionally post benchmarks for alternate algorithms), but you
should be more concerned with making what you write clearly express
your intent.  This is why I prefer

my @a = (0 .. 10);
my $i = 0;
for my $elem (grep {not $i++ % 3} @a) {
       func($elem);
}

to

for (my $i = 0; $i < @a; $i += 3) {
    func($a[$i]
}

The grep clearly states that I am looking for something and its block
tells me what the criteria are.

> For running mathematical stuff, wouldn't you use C?

Nah, Fortran.

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


