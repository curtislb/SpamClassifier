From perl6-all-return-80911-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri Apr 27 02:48:02 2007
Return-Path: <perl6-all-return-80911-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3R6m16w021923
	for <ktwarwic@speedy.uwaterloo.ca>; Fri, 27 Apr 2007 02:48:02 -0400
Received: (qmail 31521 invoked by uid 514); 27 Apr 2007 06:48:00 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 31516 invoked from network); 27 Apr 2007 06:48:00 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.5 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME,FORGED_RCVD_HELO
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Delivered-To: parrotbug-followup@parrotcode.org
Received-SPF: pass (x1.develooper.com: domain of chromatic@wgz.org designates 63.105.17.39 as permitted sender)
From: chromatic <chromatic@wgz.org>
Organization: Snafu
To: perl6-internals@perl.org
Subject: Re: malloc casts (was: [perl #42746] [PATCH] Continuing Parrot/C++ cleanups)
Date: Thu, 26 Apr 2007 23:47:10 -0700
User-Agent: KMail/1.9.5
Cc: Leopold Toetsch <lt@toetsch.at>,
   Steve Peters (via RT) <parrotbug-followup@parrotcode.org>
References: <RT-Ticket-42746@perl.org> <rt-3.6.HEAD-1687-1177598630-1339.42746-72-0@perl.org> <200704262212.01005.lt@toetsch.at>
In-Reply-To: <200704262212.01005.lt@toetsch.at>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-15"
Content-Disposition: inline
Message-Id: <200704262347.10116.chromatic@wgz.org>
X-Virus-Scanned: by amavisd-new at wgz.org
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.5 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME,FORGED_RCVD_HELO,SPF_PASS
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from quoted-printable to 8bit by speedy.uwaterloo.ca id l3R6m16w021923
Status: O
Content-Length: 1421
Lines: 32

On Thursday 26 April 2007 13:12, Leopold Toetsch wrote:

> Am Donnerstag, 26. April 2007 16:43 schrieb Steve Peters:

> > -    long * const out_array = mem_sys_allocate((sizeof (long)) *
> > (arraylen + 1)); +    long * const out_array = (long
> > *)mem_sys_allocate((sizeof (long)) * (arraylen + 1));
>
> I don't understand the rational for such patches nor the
> mem_allocate_.*typed wrappers. malloc(3) and friends are returning a (void
> *) pointer, a type which fits all memory related (i.e. non-function)
> pointers.
>
> Did I miss something?

Speaking practically, C++ compilers don't like implicit casts.  On some 
platforms, the only good C compiler is a C++ compiler.

Speaking pragmatically, I can't look at a structure full of void pointers or a 
variable declaration that uses void pointers as the type and tell what the 
code should or shouldn't do, and I expect that I'm not so strange among 
programmers myself.

For the cost of a bit more typing (and only sometimes), the code works with 
more compilers and can be easier to understand.  Meanwhile, yes, C still has 
the beautiful, well-designed, and above all, safe and clear type system of an 
assembly language that will core dump unless it knows exactly and only 
precisely how many bits of several dozen megabytes of memory, but we'll 
pretend that it actually matters to the compiler and runtime while it gives 
us the previous two benefits.

-- c

