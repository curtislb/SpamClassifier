From perl6-all-return-81168-ktwarwic=speedy.uwaterloo.ca@perl.org  Tue May  8 10:38:03 2007
Return-Path: <perl6-all-return-81168-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l48EbwqD016252
	for <ktwarwic@flax9.uwaterloo.ca>; Tue, 8 May 2007 10:37:58 -0400
Received: (qmail 16730 invoked by uid 514); 8 May 2007 14:37:56 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 16724 invoked from network); 8 May 2007 14:37:55 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: moderator for perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
From: "Alek Storm" (via RT) <parrotbug-followup@parrotcode.org>
X-RT-NewTicket: yes
To: bugs-bitbucket@netlabs.develooper.com
Resent-To: perl6-internals@perl.org
Mail-Followup-To: perl6-internals@perl.org
Reply-To: perl6-internals@perl.org
Date: Mon, 07 May 2007 18:23:17 -0700
Subject: [perl #42905] [PATCH] implement vtable overriding for PDD15, bugfix 
In-Reply-To: <189adbd0705071821l427409d9v94895cc11b9a374@mail.gmail.com>
References: <RT-Ticket-42905@perl.org> <189adbd0705071821l427409d9v94895cc11b9a374@mail.gmail.com>
Message-ID: <rt-3.6.HEAD-12281-1178587398-1986.42905-72-0@perl.org>
X-RT-Loop-Prevention: perl
RT-Ticket: perl #42905
Managed-by: RT 3.6.HEAD (http://www.bestpractical.com/rt/)
RT-Originator: alek.storm@gmail.com
MIME-Version: 1.0
X-RT-Original-Encoding: utf-8
Content-type: multipart/mixed; boundary="----------=_1178587399-12281-33"
Resent-Message-Id: <20070508012319.E99A12AFD6@x3.develooper.com>
Resent-Date: Mon,  7 May 2007 18:23:19 -0700 (PDT)
Resent-From: rt-alek.storm=gmail.com@netlabs.develooper.com
X-Virus-Checked: Checked
X-Virus-Checked: Checked
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,HTML_MESSAGE,SPF_PASS

------------=_1178587399-12281-33
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit

# New Ticket Created by  "Alek Storm" 
# Please include the string:  [perl #42905]
# in the subject line of all future correspondence about this issue. 
# <URL: http://rt.perl.org/rt3/Ticket/Display.html?id=42905 >


I've attached a patch to implement vtable overriding for PDD15.  The basic
idea is to wrap all Object vtable methods in code that searches up the
parent stack for the corresponding vtable method, call it if found, and if
it's not found, call the original implementation of the method, or throw an
exception.  Any variables used in the wrapper code are prefixed with '__' to
avoid name collisions.

The PCCMETHOD 'add_vtable_method' is added to Class.  Using two separate
methods for adding normal methods and vtable methods is much cleaner and
more logical, since they are two completely separate functionalities.  In
fact, using this interface, the :vtable pragma is completely unnecessary, so
we could remove it if we wanted to.  Because I was unsure exactly how the
interface is going to end up, 'add_method' also adds vtable methods also, if
:vtable is set on the method. If we decide to go with this interface, I'd
like to take it out, along with the :vtable pragma.

Trying to override 'mark', 'destroy', or 'morph' throws an exception,
because overriding them might be dangerous.  An exception is also thrown for
'init_pmc', see below.

The 'init' vtable method in Object is not wrapped by pmc2c, since its
override is called from Class.new().  Class.new() is changed from accepting
a named slurpy of attributes to an unnamed slurpy of initializer
parameters.  This slurpy is :flattened and passed to 'init'.  This is really
cool, because now 'init' acts like a normal method, and can accept a
variable-sized parameter list.  This makes 'init_pmc' obsolete, so trying to
override it throws an exception.  Named parameters don't work, but c'mon,
you can't have it all, right?

In the implementation of Class.new(), the slurpy had to be manually
flattened, due to limitations in the argument passing implementation:
Parrot_run_meth_fromc* takes a va_list, and va_lists are passed around
internally in src/inter_call.c.  This is bad, because va_list is an opaque
type, and we need to generate one without a variable argument list.  I don't
know why it's like that, but it definitely can't stay that way - it's much
better to use an array of UnionVal's.  Maybe I'll fix it later.

Currently, passing arguments to Class.new() when 'init' is not overridden
doesn't throw an exception.  Should it?

This patch also fixes a bug with 'invoke' in both ParrotObject and Object:
'self' had to be explicitly passed to the override.  This is fixed by adding
the signature flag PARROT_ARG_OBJECT, and unshifting that OR-ed with
PARROT_ARG_PMC onto the args signature.  This has a counterpart already used
in fetch_arg_sig() in src/inter_call.c.

For compatibility with the old object system, this patch doesn't change the
semantics of the :vtable pragma according to the discussion in #42430.  Once
the old system is gone, we can change it.

The old double-underscore method of vtable overriding can die along with the
old object system, but I would prefer to submit a patch to get rid of it
sooner, since I don't know how long the old object system will stick around.

I've updated PDD15 to match the new interface and semantics.  Obviously the
documentation is only correct if all of the patch gets applied, so if it
doesn't, this must be changed.

Tests are included for 'init', 'invoke', and vtable method lookup through
the parent stack.  Also, I fixed some tests in t/pmc/parrotobject.t that
overrode 'invoke' without using the :method pragma, and removed the test for
#41372, which is now obsolete.

Also, a question: what exactly is the '_namespace' member of Parrot_Class
used for?  I don't see it used anywhere; it can be gotten and set, but is
otherwise useless, since methods are added using a separate mechanism.

Well, that's about it.  I realize some people (especially Allison ;)) will
probably disagree with parts of this patch, but I'd like to get the parts we
do agree on committed.  Thanks.

diffstat output:
 docs/pdds/pdd15_objects.pod   |   32 ++++++--
 include/parrot/enums.h        |    5 -
 include/parrot/objects.h      |    1
 lib/Parrot/Pmc2c.pm           |    6 -
 lib/Parrot/Pmc2c/Object.pm    |  158
++++++++++++++++++++++++++++++++++++++++++
 lib/Parrot/Pmc2c/PCCMETHOD.pm |    2
 src/inter_call.c              |    7 +
 src/objects.c                 |    7 +
 src/ops/object.ops            |    4 -
 src/pmc/class.pmc             |  150
++++++++++++++++++++++++++++++++++++---
 src/pmc/classobject.h         |    4 +
 src/pmc/delegate.pmc          |   16 +++-
 src/pmc/object.pmc            |   51 +++++++++++++
 t/pmc/class.t                 |  114 ++++++++++++++++++++++--------
 t/pmc/object-meths.t          |   24 ++++++
 t/pmc/parrotobject.t          |   23 ------
 16 files changed, 521 insertions(+), 83 deletions(-)

-- 
Alek Storm

------------=_1178587399-12281-33
Content-Type: application/octet-stream; name="pdd15_override.patch"
Content-Disposition: inline; filename="pdd15_override.patch"
Content-Transfer-Encoding: base64
RT-Attachment: 42905/258984/112938

SW5kZXg6IHNyYy9vcHMvb2JqZWN0Lm9wcwo9PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09Ci0tLSBzcmMvb3BzL29iamVjdC5vcHMJKHJldmlzaW9uIDE4NDU1KQor
Kysgc3JjL29wcy9vYmplY3Qub3BzCSh3b3JraW5nIGNvcHkpCkBAIC01NSw3
ICs1NSw3IEBACiAgIG1ldGggPSAkMjsKICAgbmV4dCA9IGV4cHIgTkVYVCgp
OwogICBtZXRob2RfcG1jID0gVlRBQkxFX2ZpbmRfbWV0aG9kKGludGVycCwg
b2JqZWN0LCBtZXRoKTsKLSAgaWYgKCFtZXRob2RfcG1jKSB7CisgIGlmIChQ
TUNfSVNfTlVMTChtZXRob2RfcG1jKSkgewogICAgIHJlYWxfZXhjZXB0aW9u
KGludGVycCwgbmV4dCwgTUVUSF9OT1RfRk9VTkQsCiAgICAgICAgICJNZXRo
b2QgJyVTcycgbm90IGZvdW5kIiwgbWV0aCk7CiAgIH0KQEAgLTkxLDcgKzkx
LDcgQEAKICAgbWV0aCA9ICQyOwogICBuZXh0ID0gZXhwciBORVhUKCk7CiAg
IG1ldGhvZF9wbWMgPSBWVEFCTEVfZmluZF9tZXRob2QoaW50ZXJwLCBvYmpl
Y3QsIG1ldGgpOwotICBpZiAoIW1ldGhvZF9wbWMpIHsKKyAgaWYgKFBNQ19J
U19OVUxMKG1ldGhvZF9wbWMpKSB7CiAgICAgcmVhbF9leGNlcHRpb24oaW50
ZXJwLCBuZXh0LCBNRVRIX05PVF9GT1VORCwKICAgICAgICAgIk1ldGhvZCAn
JVNzJyBub3QgZm91bmQiLCBtZXRoKTsKICAgfQpJbmRleDogc3JjL2ludGVy
X2NhbGwuYwo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ci0tLSBzcmMvaW50ZXJf
Y2FsbC5jCShyZXZpc2lvbiAxODQ1NSkKKysrIHNyYy9pbnRlcl9jYWxsLmMJ
KHdvcmtpbmcgY29weSkKQEAgLTMxMiw3ICszMTIsMTAgQEAKICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBDVFhfUkVHX05VTShz
dC0+c3JjLmN0eCwgaWR4KTsKICAgICAgICAgICAgIGJyZWFrOwogICAgICAg
ICBjYXNlIFBBUlJPVF9BUkdfUE1DOgotICAgICAgICAgICAgVVZhbF9wbWMo
c3QtPnZhbCkgPSBjb25zdGFudCA/IHN0LT5zcmMuY3R4LT5jb25zdGFudHNb
aWR4XS0+dS5rZXkKKyAgICAgICAgICAgIGlmIChzdC0+c3JjLnNpZyAmIFBB
UlJPVF9BUkdfT0JKRUNUKQorICAgICAgICAgICAgICAgIFVWYWxfcG1jKHN0
LT52YWwpID0gQ09OVEVYVChpbnRlcnAtPmN0eCktPmN1cnJlbnRfb2JqZWN0
OworICAgICAgICAgICAgZWxzZQorICAgICAgICAgICAgICAgIFVWYWxfcG1j
KHN0LT52YWwpID0gY29uc3RhbnQgPyBzdC0+c3JjLmN0eC0+Y29uc3RhbnRz
W2lkeF0tPnUua2V5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIDogQ1RYX1JFR19QTUMoc3QtPnNyYy5jdHgsIGlkeCk7CiAKICAg
ICAgICAgICAgIGlmIChzdC0+c3JjLnNpZyAmIFBBUlJPVF9BUkdfRkxBVFRF
TikgewpAQCAtMTQ5OSw3ICsxNTAyLDcgQEAKICAgICBjdHgtPmN1cnJlbnRf
Y29udCA9IHJldF9jb250OwogICAgIFBNQ19jb250KHJldF9jb250KS0+ZnJv
bV9jdHggPSBjdHg7CiAgICAgcGNjaW52b2tlX21ldGggPSBWVEFCTEVfZmlu
ZF9tZXRob2QoaW50ZXJwLCBwbWMsIG1ldGhvZF9uYW1lKTsKLSAgICBpZiAo
IXBjY2ludm9rZV9tZXRoKSB7CisgICAgaWYgKFBNQ19JU19OVUxMKHBjY2lu
dm9rZV9tZXRoKSkgewogICAgICAgICByZWFsX2V4Y2VwdGlvbihpbnRlcnAs
IE5VTEwsIE1FVEhfTk9UX0ZPVU5ELCAiTWV0aG9kICclU3MnIG5vdCBmb3Vu
ZCIsIG1ldGhvZF9uYW1lKTsKICAgICB9CiAgICAgZWxzZSB7CkluZGV4OiBz
cmMvb2JqZWN0cy5jCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KLS0tIHNyYy9v
YmplY3RzLmMJKHJldmlzaW9uIDE4NDU1KQorKysgc3JjL29iamVjdHMuYwko
d29ya2luZyBjb3B5KQpAQCAtNzIsNiArNzIsMTMgQEAKICAgICByZXR1cm4g
LTE7CiB9CiAKK1NUUklORyoKK1BhcnJvdF9nZXRfdnRhYmxlX25hbWUoSW50
ZXJwICppbnRlcnAsIElOVFZBTCBpbmRleCkKK3sKKyAgICBjb25zdCBjaGFy
ICp2dGFibGVfbmFtZSA9IFBhcnJvdF92dGFibGVfc2xvdF9uYW1lc1tpbmRl
eF07CisgICAgcmV0dXJuIHN0cmluZ19mcm9tX2NzdHJpbmcoaW50ZXJwLCB2
dGFibGVfbmFtZSwgc3RybGVuKHZ0YWJsZV9uYW1lKSk7Cit9CisKIC8qCiAK
ID1pdGVtIEM8c3RhdGljIFBNQyogZmluZF92dGFibGVfbWV0aF9ucyhJbnRl
cnAgKmludGVycCwgUE1DICpucywgSU5UVkFMIHZ0YWJsZV9pbmRleCk+Cklu
ZGV4OiBzcmMvcG1jL2NsYXNzb2JqZWN0LmgKPT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PQotLS0gc3JjL3BtYy9jbGFzc29iamVjdC5oCShyZXZpc2lvbiAxODQ1
NSkKKysrIHNyYy9wbWMvY2xhc3NvYmplY3QuaAkod29ya2luZyBjb3B5KQpA
QCAtNDEsNyArNDEsMTEgQEAKIAogLyogRnVsbHkgcXVhbGlmaWVkIGNsYXNz
IG5hbWUgZ2VuZXJhdGlvbjsgZGVmaW5lZCBpbiBDbGFzcywgdXNlZCBieSBP
YmplY3QuICovCiBTVFJJTkcqIFBhcnJvdF9DbGFzc19nZXRfZnFfY2xhc3Nu
YW1lKFBhcnJvdF9JbnRlcnAgaW50ZXJwLCBQYXJyb3RfQ2xhc3MgKmNsYXNz
X2luZm8pOworUE1DKiBQYXJyb3RfQ2xhc3NfZmluZF92dGFibGVfbWV0aG9k
KFBhcnJvdF9JbnRlcnAgaW50ZXJwLCBQTUMgKnNlbGYsIFNUUklORyAqbWV0
aCk7CiAKKy8qIFRocm93IGFuIGV4Y2VwdGlvbiBpZiB3ZSB0cnkgdG8gb3Zl
cnJpZGUgdGhlc2UuICovCitzdGF0aWMgY29uc3QgY2hhciAqY29uc3QgY2Fu
dF9vdmVycmlkZVtdID0geyAiaW5pdF9wbWMiLCAiZGVzdHJveSIsICJtYXJr
IiwgIm1vcnBoIiwgTlVMTCB9OworCiAjZW5kaWYgLyogUEFSUk9UX0NMQVNT
T0JKRUNUX0dVQVJEICovCiAKIApJbmRleDogc3JjL3BtYy9jbGFzcy5wbWMK
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PQotLS0gc3JjL3BtYy9jbGFzcy5wbWMJ
KHJldmlzaW9uIDE4NDU1KQorKysgc3JjL3BtYy9jbGFzcy5wbWMJKHdvcmtp
bmcgY29weSkKQEAgLTExMiw3ICsxMTIsMjUgQEAKICAgICByZXR1cm4gZnFf
Y2xhc3M7CiB9CiAKKy8qIEZpbmQgYSB2dGFibGUgbWV0aG9kIGluIHRoZSB2
dGFibGVfbWV0aG9kcyBoYXNoICovCitQTUMqIFBhcnJvdF9DbGFzc19maW5k
X3Z0YWJsZV9tZXRob2QoUGFycm90X0ludGVycCBpbnRlcnAsIFBNQyAqc2Vs
ZiwgU1RSSU5HICptZXRoKSB7CisgICAgUGFycm90X0NsYXNzICpfY2xhc3Mg
PSBQQVJST1RfQ0xBU1Moc2VsZik7CisgICAgaW50IGk7CisgICAgSU5UVkFM
IG4gPSBWVEFCTEVfZWxlbWVudHMoaW50ZXJwLCBfY2xhc3MtPmFsbF9wYXJl
bnRzKTsKIAorICAgIC8qIFdhbGsgdXAgTVJPLCBsb29raW5nIGZvciB0aGUg
dnRhYmxlIG1ldGhvZCAqLworICAgIGZvciAoIGkgPSAwOyBpIDwgbjsgaSsr
ICkgeworICAgICAgICBQTUMgKnBhcmVudCA9IFZUQUJMRV9nZXRfcG1jX2tl
eWVkX2ludChpbnRlcnAsIF9jbGFzcy0+YWxsX3BhcmVudHMsIGkpOworICAg
ICAgICBQYXJyb3RfQ2xhc3MgKnBhcmVudF9jbGFzcyA9IFBBUlJPVF9DTEFT
UyhwYXJlbnQpOworCisgICAgICAgIFBNQyAqc3ViID0gVlRBQkxFX2dldF9w
bWNfa2V5ZWRfc3RyKGludGVycCwgcGFyZW50X2NsYXNzLT52dGFibGVfbWV0
aG9kcywgbWV0aCk7CisgICAgICAgIGlmICghUE1DX0lTX05VTEwoc3ViKSkK
KyAgICAgICAgICAgIHJldHVybiBzdWI7CisgICAgfQorCisgICAgcmV0dXJu
IFBNQ05VTEw7Cit9CisKIC8qIFRoaXMgZnVuY3Rpb24gYnVpbGRzIHRoZSBh
dHRyaWJ1dGUgaW5kZXggKHRhYmxlIHRvIG1hcCBjbGFzcyBuYW1lIGFuZAog
ICogYXR0cmlidXRlIG5hbWUgdG8gYW4gaW5kZXgpIGZvciB0aGUgY3VycmVu
dCBjbGFzcy4gKi8KIHN0YXRpYyB2b2lkIGJ1aWxkX2F0dHJpYl9pbmRleChQ
YXJyb3RfSW50ZXJwIGludGVycCwgUE1DICpzZWxmKSB7CkBAIC0zMDksNyAr
MzI3LDI2IEBACiAgICAgfQogfQogCitzdGF0aWMgdm9pZCBhZGRfdnRhYmxl
X21ldGhvZChQYXJyb3RfSW50ZXJwIGludGVycCwgUE1DICpzZWxmLCBTVFJJ
TkcgKm5hbWUsIFBNQyAqc3ViKQoreworICAgIGludCBpOworICAgIFBhcnJv
dF9DbGFzcyAqX2NsYXNzID0gUEFSUk9UX0NMQVNTKHNlbGYpOworICAgIGNo
YXIqIG5hbWVfYyA9IHN0cmluZ190b19jc3RyaW5nKGludGVycCwgbmFtZSk7
CiAKKyAgICAvKiBDaGVjayBpZiBpdCdzIGFuIHVuLW92ZXJyaWRhYmxlIHZ0
YWJsZSBtZXRob2QgKi8KKyAgICBmb3IgKCBpID0gMDsgY2FudF9vdmVycmlk
ZVtpXTsgaSsrICkgeworICAgICAgICBpZiAoIHN0cmNtcChuYW1lX2MsIGNh
bnRfb3ZlcnJpZGVbaV0pID09IDAgKSB7CisgICAgICAgICAgICBzdHJpbmdf
Y3N0cmluZ19mcmVlKG5hbWVfYyk7CisgICAgICAgICAgICByZWFsX2V4Y2Vw
dGlvbihpbnRlcnAsIE5VTEwsIEVfTmFtZUVycm9yLAorICAgICAgICAgICAg
ICAgICJDYW5ub3Qgb3ZlcnJpZGUgJyVzJyB2dGFibGUgbWV0aG9kIiwgY2Fu
dF9vdmVycmlkZVtpXSk7CisgICAgICAgIH0KKyAgICB9CisKKyAgICBpZiAo
IVBNQ19JU19OVUxMKHN1YikpCisgICAgICAgIFZUQUJMRV9zZXRfcG1jX2tl
eWVkX3N0cihpbnRlcnAsIF9jbGFzcy0+dnRhYmxlX21ldGhvZHMsIG5hbWUs
IHN1Yik7CisgICAgc3RyaW5nX2NzdHJpbmdfZnJlZShuYW1lX2MpOworfQor
CiAvKgogCiA9YmFjawpAQCAtMzI1LDcgKzM2Miw2IEBACiBwbWNsYXNzIENs
YXNzCiAgICAgbmVlZF9leHQgewogCi0KIC8qCiAKID1pdGVtIEM8dm9pZCBp
bml0KCk+CkBAIC00OTYsOSArNTMyLDI0IEBACiAgICAgICAgICAgICByZWFs
X2V4Y2VwdGlvbihpbnRlcnAsIE5VTEwsIEVfTm90SW1wbGVtZW50ZWRFcnJv
ciwKICAgICAgICAgICAgICAgICAiQSBtZXRob2Qgb2YgdGhpcyBuYW1lIGFs
cmVhZHkgZXhpc3RzLiBJdCBtYXkgaGF2ZSBiZWVuIHN1cHBsaWVkIGJ5IGEg
cm9sZS4iKTsKICAgICAgICAgfQotICAgICAgICBlbHNlIHsKKyAgICAgICAg
ZWxzZSBpZiAoIVBNQ19JU19OVUxMKHN1YikpIHsKICAgICAgICAgICAgIC8q
IEVudGVyIGl0IGludG8gdGhlIHRhYmxlLiAqLwogICAgICAgICAgICAgVlRB
QkxFX3NldF9wbWNfa2V5ZWRfc3RyKGludGVycCwgX2NsYXNzLT5tZXRob2Rz
LCBuYW1lLCBzdWIpOworCisgICAgICAgICAgICAvKiBJZiBtZXRob2Qgb3Zl
cnJpZGVzIGEgdnRhYmxlIG1ldGhvZCwgc3RpY2sgaXQgaW4gdGhlCisgICAg
ICAgICAgICAgICB2dGFibGUgbWV0aG9kIGhhc2ggKi8KKyAgICAgICAgICAg
IC8qIFhYWCB0aGlzIHNob3VsZCByZWFsbHkgb25seSBiZSBkb25lIGZyb20g
dGhlCisgICAgICAgICAgICAgICBhZGRfdnRhYmxlX21ldGhvZCBQQ0NNRVRI
T0QgKi8KKyAgICAgICAgICAgIGlmICggUE1DX3N1YihzdWIpLT52dGFibGVf
aW5kZXggPiAtMSApIHsKKyAgICAgICAgICAgICAgICBJTlRWQUwgdnRhYmxl
X2luZGV4ID0gUE1DX3N1YihzdWIpLT52dGFibGVfaW5kZXg7CisgICAgICAg
ICAgICAgICAgU1RSSU5HICp2dGFibGVfbmFtZSA9IFBhcnJvdF9nZXRfdnRh
YmxlX25hbWUoaW50ZXJwLCB2dGFibGVfaW5kZXgpOworCisgICAgICAgICAg
ICAgICAgLyogQ2hvcCBvZmYgdW5kZXJzY29yZXMgKi8KKyAgICAgICAgICAg
ICAgICB2dGFibGVfbmFtZS0+c3Ryc3RhcnQgKz0gMjsKKyAgICAgICAgICAg
ICAgICB2dGFibGVfbmFtZS0+c3RybGVuIC09IDI7CisKKyAgICAgICAgICAg
ICAgICBhZGRfdnRhYmxlX21ldGhvZChpbnRlcnAsIFNFTEYsIHZ0YWJsZV9u
YW1lLCBzdWIpOworICAgICAgICAgICAgfQogICAgICAgICB9CiAgICAgfQog
CkBAIC03OTksMTEgKzg1MCwxMSBAQAogPWN1dAogCiAqLwotICAgIFBDQ01F
VEhPRCB2b2lkIG5ldyhQTUMgKmFyZ3MgOnNsdXJweSA6bmFtZWQpIHsKKyAg
ICBQQ0NNRVRIT0Qgdm9pZCBuZXcoUE1DICpwYXJhbXMgOnNsdXJweSkgewog
ICAgICAgICBQYXJyb3RfQ2xhc3MgKl9jbGFzcyA9IFBBUlJPVF9DTEFTUyhT
RUxGKTsKLSAgICAgICAgUE1DICpvYmo7Ci0gICAgICAgIFBNQyAqaXRlcjsK
KyAgICAgICAgUE1DICpvYmosICppdGVyOwogICAgICAgICBQYXJyb3RfT2Jq
ZWN0ICpvYmpfZ3V0cyA9IE5VTEw7CisgICAgICAgIElOVFZBTCBuOwogCiAg
ICAgICAgIC8qIElmIHdlJ3ZlIG5vdCBiZWVuIGluc3RhbnRpYXRlZCBiZWZv
cmUuLi4gKi8KICAgICAgICAgaWYgKCFfY2xhc3MtPmluc3RhbnRpYXRlZCkg
ewpAQCAtODQ3LDE5ICs4OTgsNzUgQEAKICAgICAgICAgb2JqX2d1dHMtPmF0
dHJpYl9zdG9yZSA9IHBtY19uZXcoaW50ZXJwLCBlbnVtX2NsYXNzX1Jlc2l6
YWJsZVBNQ0FycmF5KTsKICAgICAgICAgUE1DX2RhdGEob2JqKSA9IG9ial9n
dXRzOwogCi0gICAgICAgIC8qIEluaXRpYWxpemUgYXR0cmlidXRlcyB3aXRo
IHRoZSBzdXBwbGllZCB2YWx1ZXMuICovCi0gICAgICAgIGl0ZXIgPSBWVEFC
TEVfZ2V0X2l0ZXIoaW50ZXJwLCBhcmdzKTsKLSAgICAgICAgd2hpbGUgKFZU
QUJMRV9nZXRfYm9vbChpbnRlcnAsIGl0ZXIpKSB7Ci0gICAgICAgICAgICAv
KiBHZXQgbmFtZSBhbmQgdmFsdWUuICovCi0gICAgICAgICAgICBTVFJJTkcg
KmF0dHJfbmFtZSA9IFZUQUJMRV9zaGlmdF9zdHJpbmcoaW50ZXJwLCBpdGVy
KTsKLSAgICAgICAgICAgIFBNQyAqYXR0cl92YWx1ZSA9IFZUQUJMRV9nZXRf
cG1jX2tleWVkX3N0cihpbnRlcnAsIGFyZ3MsIGF0dHJfbmFtZSk7CisgICAg
ICAgIC8qIENhbGwgaW5pdCwgaWYgaXQncyBvdmVycmlkZGVuLiBUaGlzIGNo
dW5rIGRvZXMgYSA6ZmxhdCBvbiB0aGUgcGFyYW1zCisgICAgICAgICAqIHNs
dXJweSBtYW51YWxseSwgdGhlbiBwYXNzZXMgaXQgdG8gdGhlIGluaXQoKSBv
dmVycmlkZS4gQWRhcHRlZCBmcm9tCisgICAgICAgICAqIFBDQ0lOVk9LRS4g
Ki8KKyAgICAgICAgSU5UVkFMIHNpZ19sZW4gICAgICAgPSBWVEFCTEVfZWxl
bWVudHMoaW50ZXJwLCBwYXJhbXMpICsgMTsKKyAgICAgICAgSU5UVkFMIG5f
cmVnc191c2VkW10gPSB7IDAsIDAsIDAsIHNpZ19sZW4gfTsKIAotICAgICAg
ICAgICAgLyogU2V0IHRoZSBhdHRyaWJ1dGUuICovCi0gICAgICAgICAgICBW
VEFCTEVfc2V0X2F0dHJfc3RyKGludGVycCwgb2JqLCBhdHRyX25hbWUsIGF0
dHJfdmFsdWUpOworICAgICAgICBvcGNvZGVfdCBhcmdfaW5kZXhlc1tzaWdf
bGVuXTsKKyAgICAgICAgaW50IGk7CisgICAgICAgIGZvciAoIGkgPSAwOyBp
IDwgc2lnX2xlbjsgaSsrICkKKyAgICAgICAgICAgIGFyZ19pbmRleGVzW2ld
ID0gaTsKKyAgICAgICAgb3Bjb2RlX3QgcmVzdWx0X2luZGV4ZXNbXSA9IHsg
MCB9OworCisgICAgICAgIC8qIEZpbGwgdGhlIGFyZ3Mgc2lnbmF0dXJlIHdp
dGggUE1Dcywgc2luY2UgdGhhdCdzIGFsbCB3ZSBrbm93CisgICAgICAgICAq
IGFib3V0IHRoZSBzbHVycHkncyBjb250ZW50cyAtIHRoZXkgZ2V0IGNvbnZl
cnRlZCB0byBpbnQsIGV0YworICAgICAgICAgKiBhZnRlciB0aGUgY2FsbC4g
Ki8KKyAgICAgICAgUE1DKiBhcmdzX3NpZyA9IHBtY19uZXcoaW50ZXJwLCBl
bnVtX2NsYXNzX0ZpeGVkSW50ZWdlckFycmF5KTsKKyAgICAgICAgVlRBQkxF
X3NldF9pbnRlZ2VyX25hdGl2ZShpbnRlcnAsIGFyZ3Nfc2lnLCBzaWdfbGVu
KTsKKyAgICAgICAgZm9yICggaSA9IDA7IGkgPCBzaWdfbGVuOyBpKysgKQor
ICAgICAgICAgICAgVlRBQkxFX3NldF9pbnRlZ2VyX2tleWVkX2ludChpbnRl
cnAsIGFyZ3Nfc2lnLCBpLCBQQVJST1RfQVJHX1BNQyk7CisKKyAgICAgICAg
UE1DKiByZXN1bHRzX3NpZyA9IHBtY19uZXcoaW50ZXJwLCBlbnVtX2NsYXNz
X0ZpeGVkSW50ZWdlckFycmF5KTsKKworICAgICAgICBQTUMqIHJldF9jb250
ICAgICAgICAgPSBuZXdfcmV0X2NvbnRpbnVhdGlvbl9wbWMoaW50ZXJwLCBO
VUxMKTsKKyAgICAgICAgcGFycm90X2NvbnRleHRfdCAqY3R4ID0gUGFycm90
X3B1c2hfY29udGV4dChpbnRlcnAsIG5fcmVnc191c2VkKTsKKworICAgICAg
ICBvcGNvZGVfdCogc2F2ZV9jdXJyZW50X2FyZ3MgPSBpbnRlcnAtPmN1cnJl
bnRfYXJnczsKKyAgICAgICAgUE1DKiBzYXZlX2FyZ3Nfc2lnbmF0dXJlICAg
ID0gaW50ZXJwLT5hcmdzX3NpZ25hdHVyZTsKKyAgICAgICAgUE1DKiBzYXZl
X2N1cnJlbnRfb2JqZWN0ICAgID0gaW50ZXJwLT5jdXJyZW50X29iamVjdDsK
KworICAgICAgICAvKiBGbGF0dGVuIHRoZSBzbHVycHkgaW50byByZWdpc3Rl
ciBzbG90cy4gKi8KKyAgICAgICAgQ1RYX1JFR19QTUMoY3R4LCAwKSA9IG9i
ajsKKyAgICAgICAgZm9yICggaSA9IDE7IGkgPCBzaWdfbGVuOyBpKysgKQor
ICAgICAgICAgICAgQ1RYX1JFR19QTUMoY3R4LCBpKSA9IFZUQUJMRV9nZXRf
cG1jX2tleWVkX2ludChpbnRlcnAsIHBhcmFtcywgaS0xKTsKKworICAgICAg
ICAvKiBXYWxrIHVwIE1STywgbG9va2luZyBmb3IgdGhlIHZ0YWJsZSBtZXRo
b2QgKi8KKyAgICAgICAgbiA9IFZUQUJMRV9lbGVtZW50cyhpbnRlcnAsIF9j
bGFzcy0+YWxsX3BhcmVudHMpOworICAgICAgICBmb3IgKCBpID0gMDsgaSA8
IG47IGkrKyApIHsKKyAgICAgICAgICAgIFBNQyAqcGFyZW50ID0gVlRBQkxF
X2dldF9wbWNfa2V5ZWRfaW50KGludGVycCwKKyAgICAgICAgICAgICAgICBf
Y2xhc3MtPmFsbF9wYXJlbnRzLCBpKTsKKyAgICAgICAgICAgIFBhcnJvdF9D
bGFzcyAqcGFyZW50X2NsYXNzID0gUEFSUk9UX0NMQVNTKHBhcmVudCk7CisK
KyAgICAgICAgICAgIFBNQyAqc3ViID0gVlRBQkxFX2dldF9wbWNfa2V5ZWRf
c3RyKGludGVycCwKKyAgICAgICAgICAgICAgICBwYXJlbnRfY2xhc3MtPnZ0
YWJsZV9tZXRob2RzLCBDT05TVF9TVFJJTkcoaW50ZXJwLCAiaW5pdCIpKTsK
KyAgICAgICAgICAgIGlmICghUE1DX0lTX05VTEwoc3ViKSkgeworICAgICAg
ICAgICAgICAgIGludGVycC0+Y3VycmVudF9hcmdzICAgPSBhcmdfaW5kZXhl
czsKKyAgICAgICAgICAgICAgICBpbnRlcnAtPmFyZ3Nfc2lnbmF0dXJlID0g
YXJnc19zaWc7CisgICAgICAgICAgICAgICAgY3R4LT5jdXJyZW50X3Jlc3Vs
dHMgICA9IHJlc3VsdF9pbmRleGVzOworICAgICAgICAgICAgICAgIGN0eC0+
cmVzdWx0c19zaWduYXR1cmUgPSByZXN1bHRzX3NpZzsKKworICAgICAgICAg
ICAgICAgIGludGVycC0+Y3VycmVudF9vYmplY3QgICAgICAgPSBvYmo7Cisg
ICAgICAgICAgICAgICAgaW50ZXJwLT5jdXJyZW50X2NvbnQgICAgICAgICA9
IE5FRURfQ09OVElOVUFUSU9OOworICAgICAgICAgICAgICAgIGN0eC0+Y3Vy
cmVudF9jb250ICAgICAgICAgICAgPSByZXRfY29udDsKKyAgICAgICAgICAg
ICAgICBQTUNfY29udChyZXRfY29udCktPmZyb21fY3R4ID0gY3R4OworCisg
ICAgICAgICAgICAgICAgLyogRmluYWxseSwgY2FsbCB0aGUgc3ViICovCisg
ICAgICAgICAgICAgICAgUGFycm90X3J1bm9wc19mcm9tYyhJTlRFUlAsIHN1
Yik7CisgICAgICAgICAgICB9CiAgICAgICAgIH0KIAorICAgICAgICBQT2Jq
X2xpdmVfQ0xFQVIoYXJnc19zaWcpOworICAgICAgICBQT2JqX2xpdmVfQ0xF
QVIocmVzdWx0c19zaWcpOworICAgICAgICBQYXJyb3RfcG9wX2NvbnRleHQo
aW50ZXJwKTsKKworICAgICAgICBpbnRlcnAtPmN1cnJlbnRfYXJncyAgID0g
c2F2ZV9jdXJyZW50X2FyZ3M7CisgICAgICAgIGludGVycC0+YXJnc19zaWdu
YXR1cmUgPSBzYXZlX2FyZ3Nfc2lnbmF0dXJlOworICAgICAgICBpbnRlcnAt
PmN1cnJlbnRfb2JqZWN0ID0gc2F2ZV9jdXJyZW50X29iamVjdDsKKwogICAg
ICAgICBQQ0NSRVRVUk4oUE1DICpvYmopCi0gICAgIH0KKyAgICB9CiAKIC8q
CiAKQEAgLTg3MSw2ICs5NzgsNyBAQAogPWN1dAogCiAqLworCiAgICAgUEND
TUVUSE9EIHZvaWQgYXR0cmlidXRlcygpIHsKICAgICAgICAgUE1DICpyZXRf
YXR0cmliX21ldGFkYXRhID0gVlRBQkxFX2luc3BlY3Rfc3RyKGludGVycCwg
U0VMRiwgQ09OU1RfU1RSSU5HKGludGVycCwgImF0dHJpYnV0ZXMiKSk7CiAg
ICAgICAgIFBDQ1JFVFVSTihQTUMgKnJldF9hdHRyaWJfbWV0YWRhdGEpOwpA
QCAtOTIyLDYgKzEwMzAsMjAgQEAKIAogLyoKIAorPWl0ZW0gQzx2b2lkIGFk
ZF92dGFibGVfbWV0aG9kKFNUUklORyAqbmFtZSwgUE1DICpzdWIpPgorCitB
ZGRzIHRoZSBnaXZlbiBzdWIgUE1DIGFzIGEgdnRhYmxlIG1ldGhvZCB3aXRo
IHRoZSBnaXZlbiBuYW1lLgorCis9Y3V0CisKKyovCisgICAgUENDTUVUSE9E
IHZvaWQgYWRkX3Z0YWJsZV9tZXRob2QoU1RSSU5HICpuYW1lLCBQTUMgKnN1
YikKKyAgICB7CisgICAgICAgIGFkZF92dGFibGVfbWV0aG9kKGludGVycCwg
U0VMRiwgbmFtZSwgc3ViKTsKKyAgICB9CisKKy8qCisKID1pdGVtIEM8dm9p
ZCBwYXJlbnRzKCk+CiAKIFJldHVybiB0aGUgcGFyZW50cyBhcnJheSBQTUMu
CkluZGV4OiBzcmMvcG1jL29iamVjdC5wbWMKPT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PQotLS0gc3JjL3BtYy9vYmplY3QucG1jCShyZXZpc2lvbiAxODQ1NSkK
KysrIHNyYy9wbWMvb2JqZWN0LnBtYwkod29ya2luZyBjb3B5KQpAQCAtNjEs
NyArNjEsMTcgQEAKICAgICByZXR1cm4gaW5kZXg7CiB9CiAKK3N0YXRpYyB2
b2lkCit2dGFibGVfbWV0aF9ub3RfZm91bmQoSW50ZXJwICppbnRlcnAsIFBN
QyAqcG1jLCBjb25zdCBjaGFyICptZXRoKQoreworICAgIFBhcnJvdF9PYmpl
Y3QgKm9iaiA9IFBBUlJPVF9PQkpFQ1QocG1jKTsKKyAgICBTVFJJTkcgKm5h
bWUgPSBQQVJST1RfQ0xBU1Mob2JqLT5fY2xhc3MpLT5uYW1lOworICAgIGNv
bnN0IGNoYXIgKm5hbWVfYyA9IHN0cmluZ190b19jc3RyaW5nKGludGVycCwg
bmFtZSk7CiAKKyAgICByZWFsX2V4Y2VwdGlvbihpbnRlcnAsIE5VTEwsIEVf
TG9va3VwRXJyb3IsCisgICAgICAgICJDYW4ndCBmaW5kIHZ0YWJsZSBtZXRo
b2QgJyVzJyBpbiBjbGFzcyAnJXMnIiwgbWV0aCwgbmFtZV9jKTsKK30KKwog
cG1jbGFzcyBPYmplY3QgbmVlZF9leHQgewogCiAvKgpAQCAtMjExLDYgKzIy
MSw0NyBAQAogCiAvKgogCis9aXRlbSBDPFBNQyogaW52b2tlKCk+CisKK0lu
dm9rZSB0aGUgb2JqZWN0IGFzIGEgbWV0aG9kLgorCis9Y3V0CisKKyovCisg
ICAgb3Bjb2RlX3QqIGludm9rZSh2b2lkICpuZXh0KSB7CisgICAgICAgIFNU
UklORyAqbWV0aCA9IENPTlNUX1NUUklORyhpbnRlcnAsICJpbnZva2UiKTsK
KyAgICAgICAgUE1DICpzdWIgPSBQYXJyb3RfQ2xhc3NfZmluZF92dGFibGVf
bWV0aG9kKGludGVycCwgUEFSUk9UX09CSkVDVChwbWMpLT5fY2xhc3MsIG1l
dGgpOworICAgICAgICBpZiAoUE1DX0lTX05VTEwoc3ViKSkgeworICAgICAg
ICAgICAgdnRhYmxlX21ldGhfbm90X2ZvdW5kKGludGVycCwgcG1jLCAiaW52
b2tlIik7CisgICAgICAgICAgICByZXR1cm4gTlVMTDsKKyAgICAgICAgfQor
ICAgICAgICBlbHNlIHsKKyAgICAgICAgICAgIC8qIFNpbmNlIGludm9rZSgp
IGlzIGEgbm9ybWFsIG1ldGhvZCwgJ3NlbGYnIG11c3QgYmUgcGFzc2VkIGFz
IHRoZQorICAgICAgICAgICAgICogZmlyc3QgYXJndW1lbnQsIGJ1dCBiZWNh
dXNlIHRoaXMgbG9va3MgbGlrZSBhIG5vbi1tZXRob2QgY2FsbCBpbgorICAg
ICAgICAgICAgICogUElSLCB0aGUgYXJncyBzaWduYXR1cmUgZG9lc24ndCBo
YXZlIGl0LCBzbyB3ZSBoYXZlIHRvIGdldCB0aGUKKyAgICAgICAgICAgICAq
IGFyZ3Mgc2lnbmF0dXJlIGFuZCB1bnNoaWZ0ICdzZWxmJyBvbnRvIGl0LiAq
LworCisgICAgICAgICAgICBQTUMgKm9sZF9zaWcgPSBDT05URVhUKGludGVy
cC0+Y3R4KS0+Y29uc3RhbnRzWyooaW50ZXJwLT5jdXJyZW50X2FyZ3MrMSld
LT51LmtleTsKKyAgICAgICAgICAgIElOVFZBTCBzaWdfbGVuID0gVlRBQkxF
X2VsZW1lbnRzKGludGVycCwgb2xkX3NpZykgKyAxOworICAgICAgICAgICAg
aW50IGk7CisKKyAgICAgICAgICAgIFBNQyAqbWV0aF9zaWcgPSBwbWNfbmV3
KGludGVycCwgZW51bV9jbGFzc19GaXhlZEludGVnZXJBcnJheSk7CisgICAg
ICAgICAgICBWVEFCTEVfc2V0X2ludGVnZXJfbmF0aXZlKGludGVycCwgbWV0
aF9zaWcsIHNpZ19sZW4pOworCisgICAgICAgICAgICBWVEFCTEVfc2V0X2lu
dGVnZXJfa2V5ZWRfaW50KGludGVycCwgbWV0aF9zaWcsIDAsIFBBUlJPVF9B
UkdfUE1DIHwgUEFSUk9UX0FSR19PQkpFQ1QpOworICAgICAgICAgICAgZm9y
ICggaSA9IDE7IGkgPCBzaWdfbGVuOyBpKysgKQorICAgICAgICAgICAgICAg
IFZUQUJMRV9zZXRfaW50ZWdlcl9rZXllZF9pbnQoaW50ZXJwLCBtZXRoX3Np
ZywgaSwgVlRBQkxFX2dldF9pbnRlZ2VyX2tleWVkX2ludChpbnRlcnAsIG9s
ZF9zaWcsIGktMSkpOworCisgICAgICAgICAgICBpbnRlcnAtPmFyZ3Nfc2ln
bmF0dXJlID0gbWV0aF9zaWc7CisgICAgICAgICAgICBpbnRlcnAtPmN1cnJl
bnRfYXJncysrOworCisgICAgICAgICAgICBJTlRFUlAtPmN1cnJlbnRfb2Jq
ZWN0ID0gU0VMRjsKKyAgICAgICAgICAgIHJldHVybiBWVEFCTEVfaW52b2tl
KGludGVycCwgc3ViLCBuZXh0KTsKKyAgICAgICAgfQorICAgIH0KKworLyoK
KwogPWl0ZW0gQzxQTUMqIGdldF9jbGFzcygpPgogCiBHZXQgdGhlIGNsYXNz
IFBNQyByZXByZXNlbnRpbmcgdGhlIGNsYXNzIHRoYXQgdGhpcyBvYmplY3Qg
aXMgYW4gaW5zdGFuY2Ugb2YuCkluZGV4OiBzcmMvcG1jL2RlbGVnYXRlLnBt
Ywo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09Ci0tLSBzcmMvcG1jL2RlbGVnYXRl
LnBtYwkocmV2aXNpb24gMTg0NTUpCisrKyBzcmMvcG1jL2RlbGVnYXRlLnBt
Ywkod29ya2luZyBjb3B5KQpAQCAtMTM1LDEwICsxMzUsMjQgQEAKICAgICAg
ICAgUE1DICpzdWIgPSBQYXJyb3RfZmluZF92dGFibGVfbWV0aChJTlRFUlAs
IFNFTEYsIG1ldGgpOwogICAgICAgICBpZiAoUE1DX0lTX05VTEwoc3ViKSkK
ICAgICAgICAgICAgIHZ0YWJsZV9tZXRoX25vdF9mb3VuZChJTlRFUlAsIFNF
TEYsICJpbnZva2UiKTsKKworICAgICAgICBQTUMgKm9sZF9zaWcgPSBDT05U
RVhUKGludGVycC0+Y3R4KS0+Y29uc3RhbnRzWyooaW50ZXJwLT5jdXJyZW50
X2FyZ3MrMSldLT51LmtleTsKKyAgICAgICAgSU5UVkFMIHNpZ19sZW4gPSBW
VEFCTEVfZWxlbWVudHMoaW50ZXJwLCBvbGRfc2lnKSArIDE7CisgICAgICAg
IGludCBpOworCisgICAgICAgIFBNQyAqbWV0aF9zaWcgPSBwbWNfbmV3KGlu
dGVycCwgZW51bV9jbGFzc19GaXhlZEludGVnZXJBcnJheSk7CisgICAgICAg
IFZUQUJMRV9zZXRfaW50ZWdlcl9uYXRpdmUoaW50ZXJwLCBtZXRoX3NpZywg
c2lnX2xlbik7CisKKyAgICAgICAgVlRBQkxFX3NldF9pbnRlZ2VyX2tleWVk
X2ludChpbnRlcnAsIG1ldGhfc2lnLCAwLCBQQVJST1RfQVJHX1BNQyB8IFBB
UlJPVF9BUkdfT0JKRUNUKTsKKyAgICAgICAgZm9yICggaSA9IDE7IGkgPCBz
aWdfbGVuOyBpKysgKQorICAgICAgICAgICAgVlRBQkxFX3NldF9pbnRlZ2Vy
X2tleWVkX2ludChpbnRlcnAsIG1ldGhfc2lnLCBpLCBWVEFCTEVfZ2V0X2lu
dGVnZXJfa2V5ZWRfaW50KGludGVycCwgb2xkX3NpZywgaS0xKSk7CisKKyAg
ICAgICAgaW50ZXJwLT5hcmdzX3NpZ25hdHVyZSA9IG1ldGhfc2lnOworICAg
ICAgICBpbnRlcnAtPmN1cnJlbnRfYXJncysrOworCiAgICAgICAgIElOVEVS
UC0+Y3VycmVudF9vYmplY3QgPSBTRUxGOwogICAgICAgICByZXR1cm4gVlRB
QkxFX2ludm9rZShpbnRlcnAsIHN1YiwgbmV4dCk7CiAgICAgfQotCiB9CiAK
IC8qCkluZGV4OiBkb2NzL3BkZHMvcGRkMTVfb2JqZWN0cy5wb2QKPT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PQotLS0gZG9jcy9wZGRzL3BkZDE1X29iamVjdHMu
cG9kCShyZXZpc2lvbiAxODQ1NSkKKysrIGRvY3MvcGRkcy9wZGQxNV9vYmpl
Y3RzLnBvZAkod29ya2luZyBjb3B5KQpAQCAtMjk3LDcgKzI5Nyw3IEBACiAK
ID1vdmVyIDQKIAotPWl0ZW0gbmV3KCkKKz1pdGVtIG5ldyhQTUMgKiA6b3B0
aW9uYWwpCiAKIEluc3RhbnRpYXRlIGEgbmV3IG9iamVjdCBmcm9tIHRoZSBj
bGFzcy4gU2V0IHRoZSBpbnN0YW50aWF0ZWQgZmxhZyBvbiB0aGUKIGNsYXNz
LgpAQCAtNDE1LDExICs0MTUsMTMgQEAKIAogPWl0ZW0gbmV3CiAKLSAgICAk
UDEgPSAkUDIubmV3KCAnbXlhdHRyaWInID0+ICJGb28iICkKKyAgJFAxID0g
JFAyLm5ldygpCisgICRQMSA9ICRQMi5uZXcoJFAzLCAuLi4pCiAKLUNyZWF0
ZSBhIG5ldyBpbnN0YW5jZSBvYmplY3QgZnJvbSB0aGUgY2xhc3Mgb2JqZWN0
LiBJdCB0YWtlcyBhbiBvcHRpb25hbCwKLXNsdXJweSwgbmFtZWQgbGlzdCBv
ZiBhdHRyaWJ1dGVzIGFuZCB2YWx1ZXMgdG8gaW5pdGlhbGl6ZSB0aGUgb2Jq
ZWN0LgotUGFzc2luZyBhdHRyaWJ1dGUgbmFtZXMgdGhhdCB3ZXJlbid0IGRl
Y2xhcmVkIGluIHRoZSBjbGFzcyBpcyBhbiBlcnJvci4KK0NyZWF0ZSBhIG5l
dyBpbnN0YW5jZSBvYmplY3QgZnJvbSB0aGUgY2xhc3Mgb2JqZWN0LCBhbmQg
d2Fsa3MgdXAgdGhlIE1STyBvZgordGhlIGNsYXNzLCBjYWxsaW5nIEM8aW5p
dD4gb24gZWFjaCBwYXJlbnQsIGlmIHRoZXkgb3ZlcnJpZGRlIGl0LiBUYWtl
cyBhCitzbHVycHkgbGlzdCBvZiBpbml0aWFsaXplciBwYXJhbWV0ZXJzIHRv
IHBhc3MgdG8gQzxpbml0Pi4gIFRoZSBzbHVycHkgbXVzdAorbWF0Y2ggdGhl
IGFyZ3VtZW50IHNpZ25hdHVyZSBvZiBDPGluaXQ+LgogCiA9aXRlbSBhZGRf
YXR0cmlidXRlCiAKQEAgLTQ1MiwxMCArNDU0LDI0IEBACiBQTUMuICBJZiB0
aGUgbWV0aG9kIGFscmVhZHkgZXhpc3RzIChhbmQgaXNuJ3QgYSBNdWx0aSkg
aXQgd2lsbCByZXBsYWNlCiB0aGUgbWV0aG9kIHdpdGggdGhlIG5ldyBtZXRo
b2QgYW5kIHRocm93IGEgd2FybmluZy4KIAotSXQgYWxzbyB0YWtlcyBuYW1l
ZCBwYXJhbWV0ZXJzIHRvIGZsYWcgd2hldGhlciB0aGUgbWV0aG9kIGlzIGEg
dnRhYmxlCi1mdW5jdGlvbiwgYW5kIHdoZXRoZXIgaXQgaXMgYW5vbnltb3Vz
IChubyBuYW1lZCBlbnRyeSBhcyBhIG1ldGhvZCwgb25seQotYXMgYSB2dGFi
bGUpLgorPWl0ZW0gYWRkX3Z0YWJsZV9tZXRob2QKIAorICAkUDEuYWRkX3Z0
YWJsZV9tZXRob2QoJFMyLCAkUDMpCisKK0FkZHMgYSB2dGFibGUgbWV0aG9k
IHRvIHRoZSBjbGFzcywgd2hpY2ggd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVs
dAorYmVoYXZpb3IuICBJdCB0YWtlcyB0aGUgbmFtZSBvZiBhIHZ0YWJsZSBt
ZXRob2QgKHNlZSBMPHBkZDAyX3Z0YWJsZXMucG9kPgorZm9yIGEgbGlzdGlu
ZykgYW5kIGEgbWV0aG9kIFBNQy4gIElmIHRoZSBtZXRob2QgYWxyZWFkeSBl
eGlzdHMgKGFuZCBpc24ndAorYSBNdWx0aSkgaXQgd2lsbCByZXBsYWNlIHRo
ZSBtZXRob2Qgd2l0aCB0aGUgbmV3IG1ldGhvZCBhbmQgdGhyb3cgYQord2Fy
bmluZy4KKworVHJ5aW5nIHRvIG92ZXJyaWRlIEM8aW5pdF9wbWM+LCBDPGRl
c3Ryb3k+LCBDPG1hcms+LCBvciBDPG1vcnBoPiB3aWxsIHRocm93CithbiBl
eGNlcHRpb24uCisKK1doZW4gb3ZlcnJpZGRlbiwgQzxpbml0PiBhbmQgQzxp
bnZva2U+IHdvcmsgZGlmZmVyZW50bHkgdGhhbiB0aGV5IGRvIGluIEMuCitU
aG91Z2ggdGhlaXIgQyBjb3VudGVycGFydHMgYXJlIGxpbWl0ZWQgdG8gYSBm
aXhlZCBudW1iZXIgb2YgcGFyYW1ldGVycywKK3RoZXkgY2FuIGFjY2VwdCBh
bmQgcmV0dXJuIHBhcmFtZXRlcnMgYWNjb3JkaW5nIHRvIHRoZSBmdWxsIFBh
cnJvdCBjYWxsaW5nCitjb252ZW50aW9ucy4KKwogPWl0ZW0gbWV0aG9kcwog
CiAgICRQMSA9ICRQMi5tZXRob2RzKCkKSW5kZXg6IGxpYi9QYXJyb3QvUG1j
MmMucG0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PQotLS0gbGliL1BhcnJvdC9Q
bWMyYy5wbQkocmV2aXNpb24gMTg0NTUpCisrKyBsaWIvUGFycm90L1BtYzJj
LnBtCSh3b3JraW5nIGNvcHkpCkBAIC00MCwxNSArNDAsMTQgQEAKIAogQzwk
c2VsZj4gaXMgYSBoYXNoIHJlZmVyZW5jZSBDPGV2YWw+LWVkIGZyb20gYSBG
PCouZHVtcD4gZmlsZSBnZW5lcmF0ZWQKIGJ5IEY8dG9vbHMvYnVpbGQvcG1j
MmMucGw+IGZyb20gYSBGPCoucG1jPiBmaWxlLiBJdCBpcyBDPGJsZXNzPi1l
ZCBlaXRoZXIgaW50bwotQzxQYXJyb3Q6OlBtYzJjOjpTdGFuZGFyZD4sIG9y
IGludG8gb25lIG9mIHRoZSBvdGhlciBJPHNwZWNpYWw+IFBNQ3M6Ci1GPGRl
ZmF1bHQ+LCBDPGRlbGVnYXRlPiwgQzxOdWxsPiwgQzxSZWY+IG9yIEM8U2hh
cmVkUmVmPi4KK0M8UGFycm90OjpQbWMyYzo6U3RhbmRhcmQ+LCBvciBpbnRv
IG9uZSBvZiB0aGUgb3RoZXIgSTxzcGVjaWFsPiBQTUNzLgogCiBDPCRvcHQ+
IGlzIGEgaGFzaCByZWZlcmVuY2UuCiAKID1jdXQKIAogbXkgJXNwZWNpYWxf
Y2xhc3NfbmFtZSA9Ci0gICAgbWFwIHsgKCAkXywgMSApIH0gcXcoIFNUTVJl
ZiBSZWYgZGVmYXVsdCBOdWxsIGRlbGVnYXRlIFNoYXJlZFJlZiBkZWxlZ19w
bWMgKTsKKyAgICBtYXAgeyAoICRfLCAxICkgfSBxdyggU1RNUmVmIFJlZiBk
ZWZhdWx0IE51bGwgT2JqZWN0IFNoYXJlZFJlZiBkZWxlZ2F0ZSBkZWxlZ19w
bWMgKTsKIAogc3ViIG5ldyB7CiAgICAgbXkgKCAkdGhpcywgJHNlbGYsICRv
cHRpb25zICkgPSBAXzsKQEAgLTEyMTksNiArMTIxOCw3IEBACiByZXF1aXJl
IFBhcnJvdDo6UG1jMmM6OmRlZmF1bHQ7CiByZXF1aXJlIFBhcnJvdDo6UG1j
MmM6OmRlbGVnYXRlOwogcmVxdWlyZSBQYXJyb3Q6OlBtYzJjOjpkZWxlZ19w
bWM7CityZXF1aXJlIFBhcnJvdDo6UG1jMmM6Ok9iamVjdDsKIHJlcXVpcmUg
UGFycm90OjpQbWMyYzo6TnVsbDsKIHJlcXVpcmUgUGFycm90OjpQbWMyYzo6
UmVmOwogcmVxdWlyZSBQYXJyb3Q6OlBtYzJjOjpTaGFyZWRSZWY7CkluZGV4
OiBsaWIvUGFycm90L1BtYzJjL1BDQ01FVEhPRC5wbQo9PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09Ci0tLSBsaWIvUGFycm90L1BtYzJjL1BDQ01FVEhPRC5wbQko
cmV2aXNpb24gMTg0NTUpCisrKyBsaWIvUGFycm90L1BtYzJjL1BDQ01FVEhP
RC5wbQkod29ya2luZyBjb3B5KQpAQCAtNTI0LDcgKzUyNCw3IEBACiAgICAg
ICBQTUNfY29udChyZXRfY29udCktPmZyb21fY3R4ID0gY3R4OwogCiAgICAg
ICBwY2NpbnZva2VfbWV0aCA9IFZUQUJMRV9maW5kX21ldGhvZChpbnRlcnAs
ICRpbnZvY2FudCwgJG1ldGhvZF9uYW1lKTsKLSAgICAgIGlmICghcGNjaW52
b2tlX21ldGgpCisgICAgICBpZiAoUE1DX0lTX05VTEwocGNjaW52b2tlX21l
dGgpKQogICAgICAgICAgIHJlYWxfZXhjZXB0aW9uKGludGVycCwgTlVMTCwg
TUVUSF9OT1RfRk9VTkQsCiAgICAgICAgICAgICAiTWV0aG9kICclU3MnIG5v
dCBmb3VuZCIsICRtZXRob2RfbmFtZSk7CiAgICAgICBlbHNlCkluZGV4OiBs
aWIvUGFycm90L1BtYzJjL09iamVjdC5wbQo9PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09Ci0tLSBsaWIvUGFycm90L1BtYzJjL09iamVjdC5wbQkocmV2aXNpb24g
MCkKKysrIGxpYi9QYXJyb3QvUG1jMmMvT2JqZWN0LnBtCShyZXZpc2lvbiAw
KQpAQCAtMCwwICsxLDE1OCBAQAorCis9aGVhZDEgUGFycm90OjpQbWMyYzo6
ZGVsZWdhdGUgSW5zdGFuY2UgTWV0aG9kcworCis9b3ZlciA0CisKKz1jdXQK
KworcGFja2FnZSBQYXJyb3Q6OlBtYzJjOjpPYmplY3Q7Cit1c2UgYmFzZSAn
UGFycm90OjpQbWMyYyc7Cit1c2Ugc3RyaWN0OwordXNlIHdhcm5pbmdzOwor
Cis9aXRlbSBDPGltcGxlbWVudHMoJG1ldGhvZCk+CisKK1RydWUgZm9yIHZ0
YWJsZXMuCisKKz1jdXQKKworc3ViIGltcGxlbWVudHMgeworICAgIG15ICgg
JHNlbGYsICRtZXRoICkgPSBAXzsKKyAgICAkc2VsZi0+aW1wbGVtZW50c192
dGFibGUoJG1ldGgpOworfQorCis9aXRlbSBDPHRyYW5zKCR0eXBlKT4KKwor
VXNlZCBpbiBDPHNpZ25hdHVyZSgpPiB0byBub3JtYWxpemUgYXJndW1lbnQg
dHlwZXMuCisKKz1jdXQKKworc3ViIHRyYW5zIHsKKyAgICBteSAoICRzZWxm
LCAkdHlwZSApID0gQF87CisKKyAgICBteSAkY2hhciA9IHN1YnN0ciAkdHlw
ZSwgMCwgMTsKKyAgICByZXR1cm4gJDEgaWYgKCAkY2hhciA9fiAvKFtJU1Bd
KS8gKTsKKyAgICByZXR1cm4gJ04nIGlmICggJGNoYXIgZXEgJ0YnICk7Cisg
ICAgcmV0dXJuICd2JyBpZiAoICR0eXBlIGVxICd2b2lkJyApOworICAgIHJl
dHVybiAnPyc7Cit9CisKKz1pdGVtIEM8c2lnbmF0dXJlKCRwYXJhbXMpPgor
CitSZXR1cm5zIHRoZSBtZXRob2Qgc2lnbmF0dXJlIGZvciBDPCRwYXJhbXM+
LgorCis9Y3V0CisKK3N1YiBzaWduYXR1cmUgeworICAgIG15ICggJHNlbGYs
ICRwYXJhbXMgKSA9IEBfOworCisgICAgbXkgJG4gPSAxOworICAgIG15IEB0
eXBlcyA9IGdyZXAgeyAkbisrICYgMSA/ICRfIDogMCB9IHNwbGl0IC8gLywg
JHBhcmFtczsKKyAgICBAdHlwZXMgPSBtYXAgeyAkc2VsZi0+dHJhbnMoJF8p
IH0gQHR5cGVzOworICAgIHJldHVybiBqb2luICcnLCBAdHlwZXM7Cit9CisK
Kz1pdGVtIEM8Ym9keSgkbWV0aG9kLCAkbGluZSwgJG91dF9uYW1lKT4KKwor
UmV0dXJucyB0aGUgQyBjb2RlIGZvciB0aGUgbWV0aG9kIGJvZHkuIEM8JGxp
bmU+IGlzIHVzZWQgdG8gYWNjdW11bGF0ZQordGhlIG51bWJlciBvZiBsaW5l
cywgQzwkb3V0X25hbWU+IGlzIHRoZSBuYW1lIG9mIHRoZSBvdXRwdXQgZmls
ZSB3ZSBhcmUKK2dlbmVyYXRpbmcuCisKK1RoZSBDPGRlbGVnYXRlPiBQTUMg
cmVkaXJlY3RzIGFsbCBtZXRob2RzIHRvIGJ5dGVjb2RlLgorCis9YmFjawor
Cis9Y3V0CisKK3N1YiBib2R5IHsKKyAgICBteSAoICRzZWxmLCAkbWV0aG9k
LCAkbGluZSwgJG91dF9uYW1lICkgPSBAXzsKKworICAgIG15ICRtZXRoID0g
JG1ldGhvZC0+e21ldGh9OworCisgICAgbXkgJGZ1bmNfcmV0ID0gJyc7Cisg
ICAgbXkgJHJldF90eXBlID0gJyc7CisgICAgbXkgJHR5cGUgPSAkbWV0aG9k
LT57dHlwZX07CisgICAgaWYgKCAkdHlwZSBuZSAndm9pZCcgKSB7CisgICAg
ICAgICRmdW5jX3JldCA9ICJyZXR1cm4gKCR0eXBlKSI7CisgICAgICAgIGlm
ICggJHR5cGUgIX4gL1wqLyApIHsKKyAgICAgICAgICAgICRmdW5jX3JldCA9
ICJyZXR1cm4gIjsKKyAgICAgICAgICAgICRyZXRfdHlwZSA9ICJfcmV0IiAu
IGxjIHN1YnN0ciAkdHlwZSwgMCwgMTsKKyAgICAgICAgICAgICRyZXRfdHlw
ZSA9ICJfcmV0aSIgaWYgJHJldF90eXBlIGVxICdfcmV0dSc7CisgICAgICAg
IH0KKyAgICB9CisKKyAgICBteSAkYm9keTsKKyAgICBpZiAoIGV4aXN0cyAk
bWV0aG9kLT57bG9jfSBhbmQgJG1ldGhvZC0+e2xvY30gbmUgJ3Z0YWJsZScg
KSB7CisgICAgICAgICMgbWV0aG9kIGlzIFBDQ01FVEhPRCwgZXRjIC0gbGV0
IGRlZmF1bHQgaGFuZGxlciBkbyBpdAorICAgICAgICByZXR1cm4gJHNlbGYt
PlNVUEVSOjpib2R5KCAkbWV0aG9kLCAkbGluZSwgJG91dF9uYW1lICk7Cisg
ICAgfQorICAgIGVsc2lmICggJHNlbGYtPlNVUEVSOjppbXBsZW1lbnRzKCRt
ZXRoKSApIHsKKyAgICAgICAgIyBtZXRob2QgaXMgaW1wbGVtZW50ZWQgLSBn
ZXQgYm9keSBhbmQgZm9ybWF0IGl0CisgICAgICAgIG15ICRuICAgPSAkc2Vs
Zi0+e2hhc19tZXRob2R9eyRtZXRofTsKKyAgICAgICAgJG1ldGhvZCA9ICRz
ZWxmLT57bWV0aG9kc31bJG5dOworCisgICAgICAgICRib2R5ID0gJG1ldGhv
ZC0+e2JvZHl9OworICAgICAgICAkYm9keSA9fiBzL15cdC8gICAgICAgIC9t
ZzsKKyAgICAgICAgJGJvZHkgPX4gcy9eWyBdezR9Ly9tZzsKKworICAgICAg
ICBteSAkc3RhcnRfaWR4ID0gaW5kZXgoJGJvZHksICJcbiIpOworICAgICAg
ICAkYm9keSAgICAgICAgID0gc3Vic3RyICRib2R5LCAkc3RhcnRfaWR4KzEs
IGxlbmd0aCgkYm9keSktJHN0YXJ0X2lkeC1yaW5kZXgoJGJvZHksICd9Jykt
MTsKKyAgICB9CisgICAgZWxzZSB7CisgICAgICAgICMgdGhyb3cgZXhjZXB0
aW9uCisgICAgICAgIG15ICRudWxsX3JldCA9ICJyZXR1cm4iOworICAgICAg
ICAkbnVsbF9yZXQgLj0gIiAoJHR5cGUpMCIgaWYgJHR5cGUgbmUgJ3ZvaWQn
OworICAgICAgICAkYm9keSA9IDw8RU9DOwordnRhYmxlX21ldGhfbm90X2Zv
dW5kKElOVEVSUCwgU0VMRiwgIiRtZXRoIik7CisgICAgICAgICRudWxsX3Jl
dDsKK0VPQworICAgIH0KKworICAgIG15ICRkZWNsICAgICAgID0gJHNlbGYt
PmRlY2woICRzZWxmLT57Y2xhc3N9LCAkbWV0aG9kLCAwICk7CisgICAgbXkg
JHBhcmFtZXRlcnMgPSAkbWV0aG9kLT57cGFyYW1ldGVyc307CisgICAgbXkg
JG4gICAgICAgICAgPSAwOworICAgIG15IEBhcmdzICAgICAgID0gZ3JlcCB7
ICRuKysgJiAxID8gJF8gOiAwIH0gc3BsaXQgLyAvLCAkcGFyYW1ldGVyczsK
KyAgICBteSAkYXJnICAgICAgICA9ICcnOworICAgICRhcmcgICAgICAgICAg
ID0gIiwgIiAuIGpvaW4oICcgJywgQGFyZ3MgKSBpZiBAYXJnczsKKyAgICBt
eSAkc2lnICAgICAgICA9ICRzZWxmLT5zaWduYXR1cmUoJHBhcmFtZXRlcnMp
OworICAgICRzaWcgICAgICAgICAgID0gJHNlbGYtPnRyYW5zKCAkbWV0aG9k
LT57dHlwZX0gKSAuICRzaWc7CisKKyAgICAkYm9keSA9ICRzZWxmLT5yZXdy
aXRlX3Z0YWJsZV9tZXRob2QoICRzZWxmLT57Y2xhc3N9LCAkbWV0aCwKKyAg
ICAgICAgJHNlbGYtPntzdXBlcn17JG1ldGh9LCAkc2VsZi0+e3N1cGVyfSwg
JGJvZHkgKTsKKyAgICBQYXJyb3Q6OlBtYzJjOjpQQ0NNRVRIT0Q6OnJld3Jp
dGVfcGNjaW52b2tlKCAkbWV0aG9kLCBcJGJvZHkgKTsKKworICAgICMgSSB0
aGluayB0aGF0IHRoZXNlIHdpbGwgYmUgb3V0IGJ5IG9uZSAtIE5XQworICAg
IG15ICRsID0gJHNlbGYtPmxpbmVfZGlyZWN0aXZlKCAkbGluZSwgIm9iamVj
dC5jIiApOworCisgICAgIyBtZXRob2RzIHdlIGRvbid0IHdhbnQgb3ZlcnJp
ZGRlbgorICAgIG15IEBvbWl0X21ldGhzID0gcXcoaW5pdCBpbml0X3BtYyBp
bnZva2UgZGVzdHJveSBtYXJrIG1vcnBoKTsKKworICAgIGlmICggc2NhbGFy
IGdyZXAoLyRtZXRoLywgQG9taXRfbWV0aHMpID09IDAgKSB7CisgICAgICAg
ICRib2R5ID0gPDxFT0M7CisgICAgU1RSSU5HICpfX21ldGggPSBDT05TVF9T
VFJJTkcoaW50ZXJwLCAiJG1ldGgiKTsKKyAgICBQTUMgKl9fc3ViID0gUGFy
cm90X0NsYXNzX2ZpbmRfdnRhYmxlX21ldGhvZChpbnRlcnAsIFBBUlJPVF9P
QkpFQ1QocG1jKS0+X2NsYXNzLCBfX21ldGgpOworICAgIGlmIChQTUNfSVNf
TlVMTChfX3N1YikpIHsKKyAgICAgICAgJGJvZHkgICAgfQorICAgIGVsc2UK
KyAgICAgICAgJHtmdW5jX3JldH1QYXJyb3RfcnVuX21ldGhfZnJvbWNfYXJn
cyRyZXRfdHlwZShpbnRlcnAsIF9fc3ViLAorICAgICAgICAgICAgcG1jLCBf
X21ldGgsICIkc2lnIiRhcmcpOworRU9DCisgICAgfQorCisgICAgcmV0dXJu
IDw8RU9DOworJGwKKyR7ZGVjbH17CiskYm9keQorfQorCitFT0MKK30KKwor
MTsKKworIyBMb2NhbCBWYXJpYWJsZXM6CisjICAgbW9kZTogY3BlcmwKKyMg
ICBjcGVybC1pbmRlbnQtbGV2ZWw6IDQKKyMgICBmaWxsLWNvbHVtbjogMTAw
CisjIEVuZDoKKyMgdmltOiBleHBhbmR0YWIgc2hpZnR3aWR0aD00OgpJbmRl
eDogaW5jbHVkZS9wYXJyb3QvZW51bXMuaAo9PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09Ci0tLSBpbmNsdWRlL3BhcnJvdC9lbnVtcy5oCShyZXZpc2lvbiAxODQ1
NSkKKysrIGluY2x1ZGUvcGFycm90L2VudW1zLmgJKHdvcmtpbmcgY29weSkK
QEAgLTU2LDEyICs1NiwxMyBAQAogICAgIC8qIGFyZ3VtZW50IG1lYW5pbmcg
YW5kIGNvbnZlcnNpb24gYml0cyAqLwogICAgIFBBUlJPVF9BUkdfQ09OU1RB
TlQgICAgICAgICA9IDB4MDEwLCAgLyogMTYgKi8KICAgICAvKiBiaXRzIGEg
dXNlciBoYXMgdG8gZGVmaW5lICovCi0gICAgUEFSUk9UX0FSR19GTEFUVEVO
ICAgICAgICAgID0gMHgwMjAsICAgICAgIC8qIC5mbGF0dGVuX2FyZyAqLwor
ICAgIFBBUlJPVF9BUkdfRkxBVFRFTiAgICAgICAgICA9IDB4MDIwLCAgICAg
ICAvKiAzMiAuZmxhdHRlbl9hcmcgKi8KICAgICBQQVJST1RfQVJHX1NMVVJQ
WV9BUlJBWSAgICAgPSBQQVJST1RfQVJHX0ZMQVRURU4sICAvKiBpLmUuIGZv
bGR1cCAgKi8KICAgICAvKiB1bnVzZWQgLSAweDA0MCAqLwogICAgIFBBUlJP
VF9BUkdfT1BUSU9OQUwgICAgICAgICA9IDB4MDgwLCAvKiAxMjggKi8KICAg
ICBQQVJST1RfQVJHX09QVF9GTEFHICAgICAgICAgPSAweDEwMCwgLyogMjU2
IHByZXYgb3B0aW9uYWwgd2FzIHNldCAqLwotICAgIFBBUlJPVF9BUkdfTkFN
RSAgICAgICAgICAgICA9IDB4MjAwICAvKiA1MTIgdGhpcyBTdHJpbmcgaXMg
YW4gYXJnIG5hbWUgKi8KKyAgICBQQVJST1RfQVJHX05BTUUgICAgICAgICAg
ICAgPSAweDIwMCwgLyogNTEyIHRoaXMgU3RyaW5nIGlzIGFuIGFyZyBuYW1l
ICovCisgICAgUEFSUk9UX0FSR19PQkpFQ1QgICAgICAgICAgID0gMHg0MDAg
IC8qIDEwMjQgKi8KICAgICAvKiBtb3JlIHRvIGNvbWUgc29vbiAqLwogCiB9
IENhbGxfYml0c19lbnVtX3Q7CkluZGV4OiBpbmNsdWRlL3BhcnJvdC9vYmpl
Y3RzLmgKPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PQotLS0gaW5jbHVkZS9wYXJy
b3Qvb2JqZWN0cy5oCShyZXZpc2lvbiAxODQ1NSkKKysrIGluY2x1ZGUvcGFy
cm90L29iamVjdHMuaAkod29ya2luZyBjb3B5KQpAQCAtNTgsNiArNTgsNyBA
QAogUEFSUk9UX0FQSSB2b2lkIFBhcnJvdF9pbnZhbGlkYXRlX21ldGhvZF9j
YWNoZShJbnRlcnAqLCBTVFJJTkcgKl9jbGFzcywgU1RSSU5HICptZXRoKTsK
IFBBUlJPVF9BUEkgU1RSSU5HICpyZWFkYWJsZV9uYW1lKFBhcnJvdF9JbnRl
cnAsIFBNQyAqKTsKIFBBUlJPVF9BUEkgSU5UVkFMIFBhcnJvdF9nZXRfdnRh
YmxlX2luZGV4KEludGVycCAqLCBTVFJJTkcgKm5hbWUpOworUEFSUk9UX0FQ
SSBTVFJJTkcgKlBhcnJvdF9nZXRfdnRhYmxlX25hbWUoSW50ZXJwICppbnRl
cnAsIElOVFZBTCBpbmRleCk7CiBQQVJST1RfQVBJIFBNQyAqUGFycm90X2Zp
bmRfdnRhYmxlX21ldGgoSW50ZXJwKiBpbnRlcnAsIFBNQyAqcG1jLCBTVFJJ
TkcgKm1ldGgpOwogCiAvKiBPYmplY3RzLCBjbGFzc2VzIGFuZCBQTUNhcnJh
eXMgYWxsIHVzZSB0aGUgc2FtZSBkYXRhIHNjaGVtZToKSW5kZXg6IHQvcG1j
L3BhcnJvdG9iamVjdC50Cj09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KLS0tIHQv
cG1jL3BhcnJvdG9iamVjdC50CShyZXZpc2lvbiAxODQ1NSkKKysrIHQvcG1j
L3BhcnJvdG9iamVjdC50CSh3b3JraW5nIGNvcHkpCkBAIC02LDcgKzYsNyBA
QAogdXNlIHdhcm5pbmdzOwogdXNlIGxpYiBxdyggLiBsaWIgLi4vbGliIC4u
Ly4uL2xpYiApOwogdXNlIFRlc3Q6Ok1vcmU7Ci11c2UgUGFycm90OjpUZXN0
IHRlc3RzID0+IDExOwordXNlIFBhcnJvdDo6VGVzdCB0ZXN0cyA9PiAxMDsK
IAogPWhlYWQxIE5BTUUKIApAQCAtMTk1LDcgKzE5NSw3IEBACiBwaXJfb3V0
cHV0X2lzKCA8PCdDT0RFJywgPDwnT1VUJywgJ1JUIzQxNzMzIC0gRXhlY3V0
aW9uIGVuZHMgYWZ0ZXIgcmV0dXJuaW5nIGZyb20gaW52b2tlJyApOwogLm5h
bWVzcGFjZSBbJ0ZvbyddCiAKLS5zdWIgaW52b2tlIDp2dGFibGUKKy5zdWIg
aW52b2tlIDp2dGFibGUgOm1ldGhvZAogc2F5ICJ5b3UgaW52b2tlZCBtZSEi
CiAucmV0dXJuKCkKIC5lbmQKQEAgLTIxNCw3ICsyMTQsNyBAQAogcGlyX291
dHB1dF9pcyggPDwnQ09ERScsIDw8J09VVCcsICdwYXJhbXMvcmV0dXJucyBm
cm9tIG92ZXJyaWRkZW4gaW52b2tlJyApOwogLm5hbWVzcGFjZSBbJ0Zvbydd
CiAKLS5zdWIgaW52b2tlIDp2dGFibGUKKy5zdWIgaW52b2tlIDp2dGFibGUg
Om1ldGhvZAogICAucGFyYW0gaW50IGEKICAgcHJpbnQgYQogICBwcmludCAi
XG4iCkBAIC0yMzQsMjMgKzIzNCw2IEBACiAzCiBPVVQKIAotcGlyX291dHB1
dF9saWtlKCA8PCdDT0RFJywgPDwnT1VUJywgJ1JUIzQxNzMyJyApOwotLm5h
bWVzcGFjZSBbJ0ZvbyddCi0KLS5zdWIgaW52b2tlIDp2dGFibGUKLSAgLnBh
cmFtIHBtYyBhCi0gIHNheSAnaGknCi0uZW5kCi0KLS5zdWIgbWFpbiA6bWFp
bgotICAgICRQMCA9IG5ld2NsYXNzICJGb28iCi0gICAgJFAxID0gbmV3ICJG
b28iCi0gICAgJFAxKCkKLS5lbmQKLUNPREUKLS8xIHBhcmFtcyBleHBlY3Rl
ZC8KLU9VVAotCiAjICcKIAogIyBMb2NhbCBWYXJpYWJsZXM6CkluZGV4OiB0
L3BtYy9jbGFzcy50Cj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KLS0tIHQvcG1j
L2NsYXNzLnQJKHJldmlzaW9uIDE4NDU1KQorKysgdC9wbWMvY2xhc3MudAko
d29ya2luZyBjb3B5KQpAQCAtNiw3ICs2LDcgQEAKIHVzZSB3YXJuaW5nczsK
IHVzZSBsaWIgcXcoIC4gbGliIC4uL2xpYiAuLi8uLi9saWIgKTsKIHVzZSBU
ZXN0OjpNb3JlOwotdXNlIFBhcnJvdDo6VGVzdCB0ZXN0cyA9PiAxNTsKK3Vz
ZSBQYXJyb3Q6OlRlc3QgdGVzdHMgPT4gMTc7CiAKID1oZWFkMSBOQU1FCiAK
QEAgLTk3LDQxICs5Nyw5NyBAQAogT1VUCiAKICMgTDxQREQxNS9DbGFzcyBQ
TUMgQVBJLz1pdGVtIG5ldz4KLXBpcl9vdXRwdXRfaXMoIDw8J0NPREUnLCA8
PCdPVVQnLCAnbmV3JyApOworcGlyX291dHB1dF9pcyggPDwnQ09ERScsIDw8
J09VVCcsICduZXcgY2FsbHMgaW5pdCgpJyApOwogLnN1YiAndGVzdCcgOm1h
aW4KLSAgICBuZXcgJFAwLCAuQ2xhc3MKLSAgICAkUDEgPSAkUDAuJ25ldyco
KQotICAgICRJMCA9IGlzYSAkUDEsICdPYmplY3QnCi0gICAgaWYgJEkwIGdv
dG8gb2tfMQotICAgIHByaW50ICdub3QgJwotICBva18xOgotICAgIHNheSAn
b2sgMSAtIG5ldygpIHdpdGggbm8gYXJncyByZXR1cm5zIGFuIG9iamVjdCcK
KyAgICAubG9jYWwgcG1jIGNsYXNzLCBzdWJjbGFzcywgb2JqLCBtZXRoCisg
ICAgY2xhc3MgPSBuZXcgIkNsYXNzIgorICAgIG1ldGggPSBmaW5kX2dsb2Jh
bCAiaW5pdF9zdXBlciIKKyAgICBjbGFzcy4nYWRkX3Z0YWJsZV9tZXRob2Qn
KCJpbml0IiwgbWV0aCkKIAotICAgIHB1c2hfZWggb2tfMgotICAgICRQMSA9
ICRQMC4nbmV3JygnYWJjJyA9PiAnMTIzJyApCi0gICAgY2xlYXJfZWgKLSAg
ICBwcmludCAnbm90ICcKLSAgb2tfMjoKLSAgICBzYXkgJ29rIDIgLSBuZXco
KSB3aXRoIG5vbi1hdHRyaWJ1dGUga2V5IGZhaWxzJworICAgIHN1YmNsYXNz
ID0gbmV3ICJDbGFzcyIKKyAgICBzdWJjbGFzcy4nYWRkX3BhcmVudCcoY2xh
c3MpCisgICAgbWV0aCA9IGZpbmRfZ2xvYmFsICJpbml0IgorICAgIHN1YmNs
YXNzLidhZGRfdnRhYmxlX21ldGhvZCcoImluaXQiLCBtZXRoKQorICAgIG9i
aiA9IHN1YmNsYXNzLiduZXcnKCJwYXJhbSIpCisuZW5kCiAKLSAgICAkUDAg
PSBuZXcgLkNsYXNzCi0gICAgJFAwLidhZGRfYXR0cmlidXRlJygnZm9vJykK
LSAgICAkUDAuJ2FkZF9hdHRyaWJ1dGUnKCdiYXInKQotICAgICRQMSA9ICRQ
MC4nbmV3JygnZm9vJyA9PiAxLCAnYmFyJyA9PiAyKQotICAgICRQMiA9IGdl
dGF0dHJpYnV0ZSAkUDEsICdmb28nCi0gICAgc2F5ICRQMgotICAgICRQMiA9
IGdldGF0dHJpYnV0ZSAkUDEsICdiYXInCi0gICAgc2F5ICRQMgotICAgIHNh
eSAnb2sgMyAtIG5ldygpIHdpdGgga2V5L3ZhbHVlIHBhaXJzIHNldHMgYXR0
cmlidXRlcycKKy5zdWIgJ2luaXRfc3VwZXInIDp2dGFibGUoJ2luaXQnKSA6
bWV0aG9kCisgIC5wYXJhbSBzdHJpbmcgcGFyCisgIHNheSAic3VwZXIgaW5p
dCIKKyAgc2F5IHBhcgogLmVuZAorCisuc3ViICdpbml0JyA6dnRhYmxlIDpt
ZXRob2QKKyAgLnBhcmFtIHN0cmluZyBwYXIKKyAgc2F5ICJzdWIgaW5pdCIK
KyAgc2F5IHBhcgorLmVuZAogQ09ERQotb2sgMSAtIG5ldygpIHdpdGggbm8g
YXJncyByZXR1cm5zIGFuIG9iamVjdAotb2sgMiAtIG5ldygpIHdpdGggbm9u
LWF0dHJpYnV0ZSBrZXkgZmFpbHMKLTEKLTIKLW9rIDMgLSBuZXcoKSB3aXRo
IGtleS92YWx1ZSBwYWlycyBzZXRzIGF0dHJpYnV0ZXMKK3N1YiBpbml0Citw
YXJhbQorc3VwZXIgaW5pdAorcGFyYW0KIE9VVAogCisjIEw8UEREMTUvVnRh
YmxlIE92ZXJsb2FkaW5nPgorcGlyX291dHB1dF9pcyggPDwnQ09ERScsIDw8
J09VVCcsICd2dGFibGUgbWV0aG9kIGxvb2t1cCcgKTsKKy5zdWIgJ3Rlc3Qn
IDptYWluCisgICAgLmxvY2FsIHBtYyBjbGFzcywgc3ViY2xhc3MsIG9iaiwg
bWV0aAorICAgIGNsYXNzID0gbmV3ICJDbGFzcyIKKyAgICBtZXRoID0gZmlu
ZF9nbG9iYWwgImdldF9zdHJpbmdfc3VwZXIiCisgICAgY2xhc3MuJ2FkZF92
dGFibGVfbWV0aG9kJygiZ2V0X3N0cmluZyIsIG1ldGgpCisgICAgb2JqID0g
Y2xhc3MuJ25ldycoKQorICAgIHNheSBvYmoKKworICAgIHN1YmNsYXNzID0g
bmV3ICJDbGFzcyIKKyAgICBzdWJjbGFzcy4nYWRkX3BhcmVudCcoY2xhc3Mp
CisgICAgb2JqID0gc3ViY2xhc3MuJ25ldycoKQorICAgIHNheSBvYmoKKwor
ICAgIHN1YmNsYXNzID0gbmV3ICJDbGFzcyIKKyAgICBzdWJjbGFzcy4nYWRk
X3BhcmVudCcoY2xhc3MpCisgICAgbWV0aCA9IGZpbmRfZ2xvYmFsICJnZXRf
c3RyaW5nIgorICAgIHN1YmNsYXNzLidhZGRfdnRhYmxlX21ldGhvZCcoImdl
dF9zdHJpbmciLCBtZXRoKQorICAgIG9iaiA9IHN1YmNsYXNzLiduZXcnKCkK
KyAgICBzYXkgb2JqCisuZW5kCisKKy5zdWIgJ2dldF9zdHJpbmdfc3VwZXIn
IDp2dGFibGUoJ2dldF9zdHJpbmcnKSA6bWV0aG9kCisgIC5yZXR1cm4oInN1
cGVyY2xhc3MgZ2V0X3N0cmluZygpIikKKy5lbmQKKworLnN1YiAnZ2V0X3N0
cmluZycgOnZ0YWJsZSA6bWV0aG9kCisgIC5yZXR1cm4oInN1YmNsYXNzIGdl
dF9zdHJpbmcoKSIpCisuZW5kCitDT0RFCitzdXBlcmNsYXNzIGdldF9zdHJp
bmcoKQorc3VwZXJjbGFzcyBnZXRfc3RyaW5nKCkKK3N1YmNsYXNzIGdldF9z
dHJpbmcoKQorT1VUCisKKyMgTDxQREQxNS9WdGFibGUgT3ZlcmxvYWRpbmc+
CitwaXJfb3V0cHV0X2lzKCA8PCdDT0RFJywgPDwnT1VUJywgJ292ZXJyaWRp
bmcgaW52b2tlKCkgdnRhYmxlIG1ldGhvZCcgKTsKKy5zdWIgJ3Rlc3QnIDpt
YWluCisgICAgLmxvY2FsIHBtYyBjbGFzcywgb2JqLCBtZXRoLCByZXQKKyAg
ICBjbGFzcyA9IG5ldyAiQ2xhc3MiCisgICAgbWV0aCA9IGZpbmRfZ2xvYmFs
ICJpbnZva2UiCisgICAgY2xhc3MuJ2FkZF92dGFibGVfbWV0aG9kJygiaW52
b2tlIiwgbWV0aCkKKyAgICBvYmogPSBjbGFzcy4nbmV3JygpCisKKyAgICBy
ZXQgPSBvYmooInBhcmFtIikKKyAgICBzYXkgcmV0CisuZW5kCisKKy5zdWIg
J2ludm9rZScgOnZ0YWJsZSA6bWV0aG9kCisgIC5wYXJhbSBzdHJpbmcgcGFy
CisgICBzYXkgcGFyCisgIC5yZXR1cm4oInJldHVybiB2YWwiKQorLmVuZAor
Q09ERQorcGFyYW0KK3JldHVybiB2YWwKK09VVAorCiAjIEw8UEREMTUvQ2xh
c3MgUE1DIEFQSS89aXRlbSBhdHRyaWJ1dGVzPgogcGlyX291dHB1dF9pcygg
PDwnQ09ERScsIDw8J09VVCcsICdhdHRyaWJ1dGVzJyApOwogLnN1YiAndGVz
dCcgOm1haW4KSW5kZXg6IHQvcG1jL29iamVjdC1tZXRocy50Cj09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT0KLS0tIHQvcG1jL29iamVjdC1tZXRocy50CShyZXZp
c2lvbiAxODQ1NSkKKysrIHQvcG1jL29iamVjdC1tZXRocy50CSh3b3JraW5n
IGNvcHkpCkBAIC02LDcgKzYsNyBAQAogdXNlIHdhcm5pbmdzOwogdXNlIGxp
YiBxdyggLiBsaWIgLi4vbGliIC4uLy4uL2xpYiApOwogdXNlIFRlc3Q6Ok1v
cmU7Ci11c2UgUGFycm90OjpUZXN0IHRlc3RzID0+IDQzOwordXNlIFBhcnJv
dDo6VGVzdCB0ZXN0cyA9PiA0NDsKIAogPWhlYWQxIE5BTUUKIApAQCAtNzI5
LDYgKzcyOSwyOCBAQAogYmFyIGluaXQKIE9VVFBVVAogCitwaXJfb3V0cHV0
X2lzKCA8PCdDT0RFJywgPDwnT1VUUFVUJywgImNvbnN0cnVjdG9yIC0gdnRh
YmxlIG92ZXJyaWRlIiApOworLnN1YiBtYWluIDptYWluCisgICRQMCA9IG5l
d2NsYXNzICdGb28nCisgICRQMSA9IHN1YmNsYXNzICdGb28nLCAnQmFyJwor
ICAkUDIgPSBuZXcgJ0JhcicKKy5lbmQKKworLm5hbWVzcGFjZSBbJ0Zvbydd
Cisuc3ViIGluaXQgOnZ0YWJsZSA6bWV0aG9kCisgIHByaW50ICJmb28gaW5p
dFxuIgorLmVuZAorCisubmFtZXNwYWNlIFsnQmFyJ10KKy5zdWIgaW5pdCA6
dnRhYmxlIDptZXRob2QKKyAgcHJpbnQgImJhciBpbml0XG4iCisuZW5kCisK
K0NPREUKK2ZvbyBpbml0CitiYXIgaW5pdAorT1VUUFVUCisKIHBpcl9vdXRw
dXRfaXMoIDw8J0NPREUnLCA8PCdPVVRQVVQnLCAic2FtZSBtZXRob2QgbmFt
ZSBpbiB0d28gbmFtZXNwYWNlcyIgKTsKIAogLm5hbWVzcGFjZSBbIkEiXQo=

------------=_1178587399-12281-33--

