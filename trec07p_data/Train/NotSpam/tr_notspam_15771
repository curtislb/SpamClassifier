From perl6-all-return-81761-ktwarwic=speedy.uwaterloo.ca@perl.org  Sun Jun  3 05:41:03 2007
Return-Path: <perl6-all-return-81761-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l539f1hB014236
	for <ktwarwic@flax9.uwaterloo.ca>; Sun, 3 Jun 2007 05:41:02 -0400
Received: (qmail 2762 invoked by uid 514); 3 Jun 2007 09:40:54 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 2757 invoked from network); 3 Jun 2007 09:40:53 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-0.7 required=8.0
	tests=BAYES_20,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: domain of chas.owens@gmail.com designates 209.85.146.178 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=QivRaVdQgWFvOSNWeQecRjdweX1s/tZU+Szo5FHT6pzsQCYpur1+2r5FjVgIPi2PDVErHwq9QqtoQjR6JwUjOUif5cVcFgxXIJO+66rcuVIf8JXxjuxNbIJPL0eyIcrTRFR3sGJYdphRZlrLUin2MajUMw+sTrvBCIdRPIds7ds=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=tA1pIi3w1NsfZiE10h/9iHnzKuKBZhz1K9xiVyuPocV9+5vCjW+rjLJGdNarK6s5kj087XmAjEhth1z6+rztHIR7b+ee7nMYH31df224tYr+LTluPLm7VhnMNvCI+Vza22E1Umc99kXzPXiHm76EvCRZSJJ9rTP3XnhXPC7b2QE=
Message-ID: <58ce48dc0706030219x1c961624r41500cd12c01d39@mail.gmail.com>
Date: Sun, 3 Jun 2007 05:19:13 -0400
From: "Chas Owens" <chas.owens@gmail.com>
To: "Jonathan Lang" <dataweaver@gmail.com>
Subject: Re: 'x' vs. 'xx'
Cc: p6l <perl6-language@perl.org>
In-Reply-To: <ef30550b0706022108p3f3d448dv4f66a9f1b8198655@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <ef30550b0706021517m281093c3qcf1e12d99debc8b7@mail.gmail.com>
	 <58ce48dc0706021820n444ff9a4v44aeab16f25ee62b@mail.gmail.com>
	 <ef30550b0706022108p3f3d448dv4f66a9f1b8198655@mail.gmail.com>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-0.2 required=8.0
	tests=BAYES_40,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS

On 6/3/07, Jonathan Lang <dataweaver@gmail.com> wrote:
> Chas Owens wrote:
> > Jonathan Lang wrote:
> > > Is there any reason why we can't simply define '$a x $n' as being
> > > shorthand for 'cat($a xx $n)'?  In what way does the former differ
> > > from the latter, other than the use of a Whatever in place of $n?
> >
> > "$a x $n" is equivalent to "join '', $a xx $n", but that isn't an apt
> > description of its behavior.  "cat($a xx *)" is an attempt to provide
> > an infinite string since 'a' x Inf would result in memory overflow
> > (but the cat trick works since lists are evaluated lazily).
>
> Then it looks to me like 'cat($a xx $n)' is more flexible than "join
> '', $a xx $n", and would work better as the baseline definition for
> '$a x $n'.  Is there any reason to prefer a join-based definition to a
> cat-based one?  AFAICT, the only thing that 'join' can do that 'cat'
> can't is to provide a delimiter when stitching the component strings
> together; in the case of 'x', this feature is (rightfully) not being
> used.
>
> --
> Jonathan "Dataweaver" Lang
>

Okay, maybe my understanding of the cat function is flawed, but I
thought it walked through each array handed to it in a serial fashion
(as opposed to zip which walks the arrays in a parallel fashion).  If
that is the case then ("a" x 5) ne cat("a" xx 5).  The former produces
a scalar string value of five characters and the other produces a list
of one character scalar string values.  My understanding is that the
cat function and the xx operator are being used in  the documentation
to mimic what an _infinite_ string (not a normal string) would look
like.  Since you cannot have an infinite string with the current
implementation of scalars (memory would give out), a list with lazy
evaluation is used; however, you could not just drop cat("a" xx *)
into a spot where you you were using "a" x 5.

