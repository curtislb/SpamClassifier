From beginners-return-91979-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed May 30 12:15:52 2007
Return-Path: <beginners-return-91979-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4UGFohB015842
	for <ktwarwic@flax9.uwaterloo.ca>; Wed, 30 May 2007 12:15:51 -0400
Received: (qmail 24765 invoked by uid 514); 30 May 2007 16:15:33 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 24756 invoked from network); 30 May 2007 16:15:32 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 30 May 2007 16:15:32 -0000
Received: (qmail 21775 invoked by uid 225); 30 May 2007 16:15:32 -0000
Delivered-To: beginners@perl.org
Received: (qmail 21768 invoked by alias); 30 May 2007 16:15:32 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of chas.owens@gmail.com designates 209.85.146.177 as permitted sender)
Received: from wa-out-1112.google.com (HELO wa-out-1112.google.com) (209.85.146.177)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Wed, 30 May 2007 09:14:58 -0700
Received: by wa-out-1112.google.com with SMTP id m38so1126431waf
        for <beginners@perl.org>; Wed, 30 May 2007 09:14:53 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=bDyAsI1XDkziCYZSzaEM1VEIXM8uR9TbCH+QdneJCgDxsOL1GNz7TAAAEWBkgFsGSg4E4AEi8h1qK5ZCQ80eKCF/QeoDZdAHMHiTtiYlv2SGyrs2SikusQmH8F6qbWn9nmk4ySIDOid4JNz25SA2Q/m5M3LbZ0YkShpYlv0T9WM=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=sfmuRZuKQObury4LdQqjsJWRcUqfSyf1XAQ+Gd54DSmK5V4NDWmVJT8AAk79EBUkPlBrgd2+DGo/Mf3i7futXIQMLMGwViMyjdSYWLYDY6ChvD7b/cDm8dBAbDsU/S+7sDj+r2n8GeXINRL+WhbhsaKz/ghKDkRw/L1bQ58YG7I=
Received: by 10.114.73.1 with SMTP id v1mr4056890waa.1180541693246;
        Wed, 30 May 2007 09:14:53 -0700 (PDT)
Received: by 10.114.92.6 with HTTP; Wed, 30 May 2007 09:14:52 -0700 (PDT)
Message-ID: <58ce48dc0705300914x5525b987g16e0466294250277@mail.gmail.com>
Date: Wed, 30 May 2007 12:14:52 -0400
From: "Chas Owens" <chas.owens@gmail.com>
To: "Laxminarayan G Kamath A" <laxminarayan@deeproot.co.in>
Subject: Re: Outlook CSV Parser
Cc: beginners@perl.org
In-Reply-To: <20070530111000.d2025b70.laxminarayan@deeproot.co.in>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <20070530111000.d2025b70.laxminarayan@deeproot.co.in>

On 5/30/07, Laxminarayan G Kamath A <laxminarayan@deeproot.co.in> wrote:
snip
> Any ways of optimising it further?
snip

Premature optimization is the root of all evil.  Have you profiled the
code yet?  If not then here is some documentation that will point you
in the right direction

http://www.perl.com/pub/a/2004/06/25/profiling.html
http://search.cpan.org/~nwclark/perl-5.8.8/utils/dprofpp.PL

But while I am looking lets see what is going on.

snip
>         1. One line need not be one record. They may cointain multine
> fields.
>         2. A sigh of relief but : only multi-line fields are wrapped in
> double quotes.
>         3. commas are both inside and outside the fields. the ones in
> the fileds must not be treated as "seperator" - again fields with
> commans are wrapped in double quotes.
snip

The following code seems to speed up the parsing by two orders of
magnitude (2.214 seconds for the old code and 0.036 seconds for this
code on 100 records).  Also, there seems to be a bug in your original
code.  I setup a test file with a 100 records of 30 fields each and it
found

found 33 fields in 1 records
found 34 fields in 1 records
found 36 fields in 3 records
found 37 fields in 5 records
found 38 fields in 10 records
found 39 fields in 9 records
found 40 fields in 12 records
found 41 fields in 17 records
found 42 fields in 15 records
found 43 fields in 13 records
found 44 fields in 7 records
found 45 fields in 5 records
found 46 fields in 1 records
found 48 fields in 1 records

===code to generate test file===
#!/usr/bin/perl

use strict;
use warnings;

my $fields    = 30;
my $fieldlen  = 30;
my @fieldtype = qw(normal quoted comma);
my $records   = shift;

for my $rec (1 .. $records) {
        for my $field (1 .. $fields) {
                my $type = $fieldtype[int rand @fieldtype];
                if ($type eq 'normal') {
                        print 'n' x $fieldlen, ",";
                } elsif ($type eq 'quoted') {
                        print '"';
                        my $i = 0;
                        until ($i < $fieldlen) {
                                my $len = int rand $fieldlen;
                                print 'q' x $len, "\n";
                                $i += $len;
                        }
                        print '",';
                } elsif ($type eq 'comma') {
                        print '"';
                        my $i = 0;
                        until ($i == $fieldlen) {
                                my $len = int rand $fieldlen;
                                $len = $fieldlen - $i if $i+$len > $fieldlen;
                                print 'c' x ($len/2), ',', 'c' x ($len/2), "\n";
                                $i += $len;
                        }
                        print '",';
                }
        }
        print "\n";
}

===code to parse test file===
#!/usr/bin/perl

use strict;
use warnings;

my $record = "";
my $quotes = 0;
my @records;
while (defined (my $line = <>)) {
        next if $record eq "" and $line =~ /^\s*$/;

        $record .= $line;

        #count the number of quotes
        $quotes += () = $line =~ /"/g;

        #if $quotes is even then we have a full record
        if ($quotes % 2 == 0) {
                $quotes = 0;
                chomp $record;
                my @fields;
                my $unbalanced = 0;
                for my $field (split /,/, $record) {
                        my $count = $field =~ s/"//g;
                        if ($count % 2) {
                                if ($unbalanced) {
                                        $unbalanced = 0;
                                        $fields[-1] .= ",$field";
                                        next;
                                }
                                $unbalanced = 1;
                                push @fields, $field;
                                next;
                        }
                        if ($unbalanced) {
                                $fields[-1] .= ",$field";
                        } else {
                                push @fields, $field;
                        }
                }
                push @records, { whole => $record, fields => \@fields};
                $record = "";
        }

}

for my $rec (@records) {
        print join "|", @{$rec->{fields}},"\n===\n";
}

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


