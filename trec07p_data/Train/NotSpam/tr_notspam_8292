From perl6-all-return-81160-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon May  7 14:44:19 2007
Return-Path: <perl6-all-return-81160-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l47IiHqD002088
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 7 May 2007 14:44:18 -0400
Received: (qmail 3735 invoked by uid 514); 7 May 2007 18:44:15 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 3727 invoked from network); 7 May 2007 18:44:15 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Delivered-To: parrotbug-followup@parrotcode.org
Received-SPF: pass (x1.develooper.com: domain of Bernhard.Schmalhofer@gmx.de designates 213.165.64.20 as permitted sender)
X-Authenticated: #5068625
X-Provags-ID: V01U2FsdGVkX1/BTfot7xTB+T/lJjC0794coLR2SPtEdQNuLKFxRq
	eDvS4mOL/jcFU1
Message-ID: <463F72C0.8020609@gmx.de>
Date: Mon, 07 May 2007 20:41:04 +0200
From: Bernhard Schmalhofer <Bernhard.Schmalhofer@gmx.de>
User-Agent: Thunderbird 1.5.0.10 (X11/20070403)
MIME-Version: 1.0
To: Mark Glines <mark@glines.org>
CC: parrotbug-followup@parrotcode.org
Subject: Re: [perl #42883] [PATCH] Fix up headerfile guards
References: <RT-Ticket-42883@perl.org>	<20070504143850.229cc5ad@chirp>	<rt-3.6.HEAD-12281-1178377124-1835.42883-74-0@perl.org> <20070506222708.41a6be75@chirp>
In-Reply-To: <20070506222708.41a6be75@chirp>
Content-Type: text/plain; charset=ISO-8859-15; format=flowed
Content-Transfer-Encoding: 7bit
X-Y-GMX-Trusted: 0
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS

Mark Glines schrieb:
>>> * Fix up the indentation problems caused by the above bullet point.
>>> (TODO: why does t/codingstd/c_indent.t require indentation for #if
>>> and #ifdef, but not for #ifndef?)
>>>       
>> As far as I understand c_indent.t, #ifndef is also covered
>>     
>
> Except that it isn't.  If you apply the attached patch, you will see
> that t/codingstd/c_indent.t starts failing.  C_indent.t will not be
> happy until you reindent everything else, inside of it.  (This patch
> should not be checked in, it only exhibits the problem, it does not
> solve anything.)
>
>   
After applying c_indent_doesnt_recognise_ifndef.diff
I got no complaints from c_indent.t.
Could you check again?

In r18452 I checked in a small beautification of c_indent.t, which shouldn't
have chaned the algorithm.


On Sat, 05 May 2007 07:58:45 -0700
"Bernhard Schmalhofer via RT" <parrotbug-followup@parrotcode.org> wrote:

>   
>>> I'd like to write some tests for this stuff, and then fix up the
>>> rest of the cases (I know I've missed a bunch).  How would the list
>>> feel about a patch to PDD07 specifying the above for header files,
>>> and a codingstd test to enforce it?
>>>       
>> My feeling is that we need to differentiate two cases:
>> i. header files that define an interfaces for e.g. a subsystem
>> ii. Convenience headers, that contain declaration of internal
>> functions
>>
>> Case i. might need stricter checks than ii.
>>     
>
>
> Thanks for your input.  I have written a test case for this,
> t/codingstd/c_header_guards.t (attached), which checks the following:
>
> * The existence of an #ifndef PARROT_*_GUARD
> * That each header file only contains one #ifndef PARROT_*_GUARD
> * The existence of a matching #define (this caught a few misspells)
> * The existence of an #endif /* PARROT_*_GUARD */
> * That the PARROT_*_GUARD macro is unique (doesn't stomp on any other
> files)
>
> I patched up another large set of headers, to pass this test.  But
> before I send in another big patch with some changes to type ii
> ("convenience") headers, can you please tell me if there's a clean,
> programmatic way to determine which headers it should perform strict
> checks on?  That way I can fix the test to only run on the
> non-"convenience" subset of headers.
>   
IMHO the above tests looks quite sane for all header files.

For API defining headers I was vaguely pondering a check like.
  "Make sure that the API does not change, unless there has been a
   deprecation cycle."
This might be along the lined of 'tools/dev/parrot_api.pl'.

> Also, should any of the above tests be applied to type ii headers, or
> should they only apply to type i headers?  (Should type ii headers be
> ignored completely, or only subjected to a subset of the tests?)
>   
Checking for header guards in  all *.h files sounds good to me.

Regards,
  Bernhard

