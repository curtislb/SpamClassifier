From perl6-all-return-82013-ktwarwic=speedy.uwaterloo.ca@perl.org  Sat Jun 16 15:11:57 2007
Return-Path: <perl6-all-return-82013-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5GJBuL9018665
	for <ktwarwic@flax9.uwaterloo.ca>; Sat, 16 Jun 2007 15:11:57 -0400
Received: (qmail 21272 invoked by uid 514); 16 Jun 2007 19:11:54 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 21261 invoked from network); 16 Jun 2007 19:11:53 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: domain of dataweaver@gmail.com designates 64.233.162.236 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:mime-version:content-type:content-transfer-encoding:content-disposition;
        b=evks2km7a+W6zeLQvwbYNjHW01648EamMqrJw3TTE9rtPnN57OJDIPu5/uqBcRJ0U312t7aMKrj2t8ZSaKg2u++m/XGqYystyt3tSK/tYcycj1dsJaCE7ZH0kIcUtPVMHJNOnjRhydlzD9cBzq9cvjWpzSsqzTLA3nnFrNSYDvI=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:mime-version:content-type:content-transfer-encoding:content-disposition;
        b=ii4UnCO9iu6t05RnJeVclyAMkrUhB0oC1i4Yt4N8+Vi8J0LGv9+Yx3i9WDopoxwEK7ur7D5IpkP86m42FFn3fLXs4hGQyMVumICsZg1dJ/V2HPxqLI7mWTsHap4pZIbQQqNdOFtP7/utOfiR6Y7deocugIaZBSCFRQcjW81cUxg=
Message-ID: <ef30550b0706161211s513c3de3r7682ae278cd6e1ca@mail.gmail.com>
Date: Sat, 16 Jun 2007 12:11:29 -0700
From: "Jonathan Lang" <dataweaver@gmail.com>
To: damian@conway.org
Subject: Quirky comments
Cc: "perl6-language@perl.org" <perl6-language@perl.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
X-Virus-Checked: Checked
X-Virus-Checked: Checked
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS

In "[svn:perl6-synopsis] r14421 - doc/trunk/design/syn",
Damian Conway wrote:
> brian wrote:
> > So, if this is the case, how will a new Perl 6 user debug a program
> > failure when part of their program mysteriously disappears because
> > they just happened to have =begin at the beginning of a line?
>
> The same way they debug it when part of their program mysteriously
> disappears because they just happened to have # at the beginning of a
> line: by learning to distinguish between code and commentary.
>
> Except, of course, the Pod mysteriously vanishing will be considerably
> easier to debug, because ALL lines starting with =begin vanish, whereas
> only some lines beginning with # do.

By this reasoning, a case could be made for declaring that all lines
that begin with '#' are comments (either block or line, depending on
the second character), no matter what.  That way, you'll have more
consistency between block comments and Pod Sections (which, from
Perl's perspective, should be equivalent).

The price to be paid (in both cases) is that you have to finagle any
code that would normally start a line with a '#' or '=' respectively,
such as the aforementioned block quote.  Admittedly, this isn't hard
to do: starting the line with whitespace or an unspace will do the
trick.  (But ending the previous line with an unspace won't, as
comments are apparently found and turned into whitespace by the
lexer.)

There is an additional price to be paid in the case of '#': you'd have
to distinguish between end-of-line comments (which cease to be
comments if placed in quotes) and line comments (which are always
comments, no matter what).  In effect, you would have four kinds of
comments, not counting Pod sections:

bracketed?  starts line?
            yes:   no:
 no:         line   end-of-line
yes:        block  embedded

The semantic similarities would be as follows:

* line-oriented comments (line and block) don't care about quotes;
character-oriented comments (end-of-line and embedded) do.
* block and embedded comments continue until explicitly terminated;
line and end-of-line comments are terminated by newline.

--

Another quirk concerning comments: if I'm reading S02 correctly, C<\#>
is an unspaced comment whenever it would normally be a comment, and is
only an escaped pound sign when it would normally be a quoted pound
sign.  This is one (possibly the only) case where backslashing a
special character does _not_ shut off its special behavior.  As a
result, you have to quote a pound sign if you want to use it in a
pattern.  If this behavior is kept (I don't care either way), it
should probably be noted in "Learning Perl 6" or the like, as a
"gotcha".

--

I also can't seem to find any means of starting a comment from within
a quote, aside from Pod Sections (and, if my first suggestion is
adopted, line and block comments).  Perhaps C<\#> should count as the
start of a comment when appearing in a quote?  This has the advantage
that almost every appearance of that pair of characters will act to
comment out what follows; the only exception would be when it appears
as part of the C<\\#> sequence, which is easily tested for.  It does,
however, mean that you can't start a line that's within a quote with
C<\#> in order to start that line with a literal pound sign.  C<\ #>
would work, though, as would indenting the quote in the case of a
heredoc.

--

Also from S02:

  Although we say that the unspace hides the whitespace from the
  parser, it does not hide whitespace from the lexer. As a
  result, unspace is not allowed within a token.

Technically true; but what does this mean?  If I were to say

  foo\ bar

would the lexer generate a pair of tokens ('foo' and 'bar') that don't
have any intervening whitespace (which might be important in some
cases that involve whitespace-based disambiguation), or would it
complain about finding an unspace where it doesn't belong?  I hope
that the former is true; although Larry seems to have been very
conscientious about making sure that whitespace is never forbidden
between tokens unless a dot can be placed there instead.  Still,
letting unspace split tokens provides a more general solution.

--

Finally, from S02:

  Since there is a newline before the first =, the POD form of
  comment counts as whitespace equivalent to a newline.

This rationale doesn't hold, for two reasons.  First, there is not
going to be a newline before the first = in a Pod Section if said Pod
Section starts the file.  Second, the stated behavior doesn't follow
from the premise.  Given the logic that Pod Sections are effectively
stripped out of the file before anything else happens, one would
expect:

  say qq:to'END';
  =begin comment
  END
  =end comment
  END

to be equivalent to:

  say qq:to'END';
  END

instead of:

  say qq:to'END';

  END

However, the latter is what occurs under the current rule.  I submit
that Pod Sections shouldn't be equivalent to whitespace; they should
be equivalent to empty strings.  Likewise with line and block
comments: all line-oriented comments should remove all traces of the
line(s) being commented out, including the trailing newline
character(s).  There will still be a newline between the last line
before the comment and the first line after it (assuming that there
_is_ a line before the comment): the trailing newline of the preceding
line.

-- 
Jonathan "Dataweaver" Lang

