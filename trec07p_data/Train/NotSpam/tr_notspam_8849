From perl6-all-return-81226-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed May  9 10:43:00 2007
Return-Path: <perl6-all-return-81226-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l49EgxqD030088
	for <ktwarwic@flax9.uwaterloo.ca>; Wed, 9 May 2007 10:42:59 -0400
Received: (qmail 3859 invoked by uid 514); 9 May 2007 14:42:57 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 3854 invoked from network); 9 May 2007 14:42:57 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DKIM_SIGNED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: domain of parrotcode@gmail.com designates 64.233.162.229 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=eDpIfxhDbVah6NXnbTKDWIbR7KKlx84tdy+ulwNGIXQ3FBeUmCVLzkvQ72w8tkAbMCfpFQ0yGJorFnCx9aFwN+oLG7ESmtvt6cImXFpAg87/VA8oU4KkL7wwZd1tuNKj/J25nyMnH8X6OGiTFLWEThTPSZza8MxBYFmPMBhkdjQ=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=WU/MShgbWxsMHI/Tay1Sz6NQEuqgBZaFro59XhKMLNtVhNFFGQoE5l4MSEwNOfSpc4oO/xAzM7bHtmqBvnPse3PiwSOIPWeWMpNS7AnoP4QLQmRvwv/TMCkMxiBrrm8I0WtLMsDWMaRopPQC7u/JZXMEQZvt1vSVcAN2zTYluCs=
Message-ID: <7b0e52b40705090720g58125a6ei3638c9f8de4f74d0@mail.gmail.com>
Date: Wed, 9 May 2007 22:20:55 +0800
From: "Klaas-Jan Stol" <parrotcode@gmail.com>
To: "Allison Randal" <allison@perl.org>
Subject: Re: PIR syntax methods ambiguity
Cc: perl6-internals@perl.org
In-Reply-To: <4640B856.1020102@perl.org>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_111500_15881427.1178720455770"
References: <7b0e52b40705032235q20a0cce9pdd5c80cc6d08e2f4@mail.gmail.com>
	 <4640B856.1020102@perl.org>
X-Virus-Checked: Checked
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,HTML_MESSAGE,SPF_PASS

------=_Part_111500_15881427.1178720455770
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

On 5/9/07, Allison Randal <allison@perl.org> wrote:
>
> Klaas-Jan Stol wrote:
> > hi,
> > IIRC (currently no pc around to check, but I realized this issue when
> > reading on objects pdd), calling a method in PIR can be done as follows:
> >
> > $P0.'someMethod'()
> >
> > but also:
> >
> > .local string meth  /* or maybe a pmc ?*/
> > meth = 'someMethod'
> > $P0.meth()
>
> This is a long-standing IMCC issue and also affects subs. The PMC
> variant also works:
>
> .local pmc meth
> meth = # fetch the method object
> $P0.meth()
>
> > However, this looks like as if the object in $P0 has a method called
> > 'meth',
> > just as a class object has methods like 'inspect', and 'roles'. This is
> > imho
> > a bit unfortunate, it makes this syntax a bit ambiguous.
> > It gets tricky if you have some variable that goes by the same name,
> like
> > 'inspect', or 'roles'.
>
> An annoyance I've been caught by before.


sorry, didn't realize that.

> So, I would suggest to disallow arbitrary objects holding methods for this
> > syntax; only allow for strings as method names, or barenames if they are
> > known to be methods on the PMC.
>
> That doesn't quite get around the problem, because you still have the
> ambiguity, "sometimes it's one thing and sometimes it's another". And if
> barenames are allowed for the methods that are defined, what if you
> write some code passing in a named variable containing a string method
> name, and then update the object to have a method of that same name?
>
>
>
> We could entirely disallow barenames, so it's always either a quoted
> string or a variable.


In other words, both PCCMETHODs as well as methods defined in PIR should be
quoted?
(so, calling methods by their name needs quoting the name, for instance:
$P0."new"() for the new object instantiation method). I would like this, I
think.
(just for my understanding, a PCCMETHOD is just a ".sub :method", but
defined in C, right? I keep forgetting; didn' implement a PCCMETHOD yet.)

But even that doesn't solve the problem, because currently if the method
> name is a string PMC:
>
>   $P0 = new String
>   $P0 = "hello"
>   object.$P0()


It tries to treat the PMC as a method object and gives you the error
> "invoke() not implemented in class 'String'".


Does this make sense? Then maybe we should fix this ($P0 should evaluate to
its value, which is a string).

We need more distinctions in the PIR syntactic sugar. On the drive home
> from the last Portland Perl Mongers meeting I was kicking around
> something a little Perl 6-ish.
>
>   object.method() # bareword methodname
>   object~method() # string variable name (string or PMC)
>   object!method() # invoke PMC method object


with all due respect, I think too much different notations is confusing.

But those differences are really hard to see. So, this lingers on as an
> unresolved question.
>
> Allison


kjs

------=_Part_111500_15881427.1178720455770--

