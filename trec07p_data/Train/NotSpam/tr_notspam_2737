From samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org  Wed Apr 18 09:28:51 2007
Return-Path: <samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org>
Received: from lists.samba.org (mail.samba.org [66.70.73.150])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l3IDSo0I010988
	for <ktwarwic@speedy.uwaterloo.ca>; Wed, 18 Apr 2007 09:28:51 -0400
Received: from dp.samba.org (localhost [127.0.0.1])
	by lists.samba.org (Postfix) with ESMTP id B7CA6163A6D
	for <ktwarwic@speedy.uwaterloo.ca>; Wed, 18 Apr 2007 13:28:26 +0000 (GMT)
X-Spam-Checker-Version: SpamAssassin 3.1.7 (2006-10-05) on dp.samba.org
X-Spam-Level: 
X-Spam-Status: No, score=-0.8 required=3.8 tests=AWL,BAYES_00,
	FORGED_RCVD_HELO autolearn=ham version=3.1.7
X-Original-To: samba-cvs@samba.org
Delivered-To: samba-cvs@samba.org
Received: from castor.warande.net (castor.sshunet.nl [145.97.192.41])
	by lists.samba.org (Postfix) with ESMTP id 91CDB163881
	for <samba-cvs@samba.org>; Wed, 18 Apr 2007 13:27:50 +0000 (GMT)
Received: from localhost (localhost.localdomain [127.0.0.1])
	by castor.warande.net (Postfix) with ESMTP id 9E12157C014
	for <samba-cvs@samba.org>; Wed, 18 Apr 2007 15:27:47 +0200 (CEST)
Received: from castor.warande.net ([127.0.0.1])
	by localhost (castor [127.0.0.1]) (amavisd-new, port 10024)
	with ESMTP id 22216-06 for <samba-cvs@samba.org>;
	Wed, 18 Apr 2007 15:27:47 +0200 (CEST)
Received: from ganieda.vernstok.nl (135pc197.sshunet.nl [145.97.197.135])
	by castor.warande.net (Postfix) with ESMTP
	for <samba-cvs@samba.org>; Wed, 18 Apr 2007 15:27:47 +0200 (CEST)
Received: by ganieda.vernstok.nl (Postfix, from userid 1000)
	id B5EC75C4923; Wed, 18 Apr 2007 16:27:46 +0200 (CEST)
To: samba-cvs@samba.org
From: Jelmer Vernooij <jelmer@samba.org>
Message-Id: <20070418142746.B5EC75C4923@ganieda.vernstok.nl>
Date: Wed, 18 Apr 2007 16:27:46 +0200 (CEST)
X-Virus-Scanned: by amavisd-new-20030616-p10 (Debian) at sshunet.nl
Subject: Rev 11915: Add some more share tests. in
	file:///home/jelmer/bzr.samba/SAMBA_4_0/
X-BeenThere: samba-cvs@lists.samba.org
X-Mailman-Version: 2.1.5
Precedence: list
Reply-To: samba-technical@lists.samba.org
List-Id: Samba CVS and subversion commit messages <samba-cvs.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/archive/samba-cvs>
List-Post: <mailto:samba-cvs@lists.samba.org>
List-Help: <mailto:samba-cvs-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=subscribe>
Sender: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Errors-To: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Status: O
Content-Length: 6855
Lines: 212

At file:///home/jelmer/bzr.samba/SAMBA_4_0/

------------------------------------------------------------
revno: 11915
revision-id: jelmer@samba.org-20070418142730-mw1iyyly57oefo58
parent: svn-v2:22335@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0
committer: Jelmer Vernooij <jelmer@samba.org>
branch nick: SAMBA_4_0
timestamp: Wed 2007-04-18 16:27:30 +0200
message:
  Add some more share tests.
modified:
  source/param/share_ldb.c       svn-v2:17207@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2fparam%2fshare_ldb.c
  source/torture/local/share.c   svn-v2:22328@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2ftorture%2flocal%2fshare.c
=== modified file 'source/param/share_ldb.c'
--- a/source/param/share_ldb.c	2006-12-05 04:25:27 +0000
+++ b/source/param/share_ldb.c	2007-04-18 14:27:30 +0000
@@ -289,7 +289,7 @@
 	NTSTATUS ret;
 	int err, i, j;
 
-	for (i = 0, j = 0; i < count || j != 0x03; i++) {
+	for (i = 0, j = 0; i < count && j != 0x03; i++) {
 		if (strcasecmp(info[i].name, SHARE_TYPE) == 0) j |= 0x02;
 		if (strcasecmp(info[i].name, SHARE_PATH) == 0) j |= 0x01;
 		if (strcasecmp(info[i].name, SHARE_NAME) == 0) {

=== modified file 'source/torture/local/share.c'
--- a/source/torture/local/share.c	2007-04-18 01:17:30 +0000
+++ b/source/torture/local/share.c	2007-04-18 14:27:30 +0000
@@ -25,15 +25,147 @@
 #include "torture/torture.h"
 
 static bool test_list_empty(struct torture_context *tctx, 
-							void *tcase_data, 
-							void *test_data)
-{
-	struct share_context *ctx = tcase_data;
-	int count;
-	const char **names;
-
-	torture_assert_ntstatus_ok(tctx, share_list_all(tctx, ctx, &count, &names),
-							   "share_list_all failed");
+							const void *tcase_data, 
+							const void *test_data)
+{
+	struct share_context *ctx = discard_const(tcase_data);
+	int count;
+	const char **names;
+
+	torture_assert_ntstatus_ok(tctx, share_list_all(tctx, ctx, &count, &names),
+							   "share_list_all failed");
+
+	return true;
+}
+
+static bool test_create(struct torture_context *tctx, 
+							const void *tcase_data, 
+							const void *test_data)
+{
+	struct share_context *ctx = discard_const(tcase_data);
+	int count;
+	const char **names;
+	int i;
+	bool found = false;
+	struct share_info inf[] = { 
+		{ SHARE_INFO_STRING, SHARE_TYPE, discard_const_p(void *, "IPC$") },
+		{ SHARE_INFO_STRING, SHARE_PATH, discard_const_p(void *, "/tmp/bla") }
+	};
+	NTSTATUS status;
+
+	status = share_create(ctx, "bloe", inf, 2);
+
+	if (NT_STATUS_EQUAL(status, NT_STATUS_NOT_IMPLEMENTED))
+		torture_skip(tctx, "Not supported by backend");
+
+	torture_assert_ntstatus_ok(tctx, status, "create_share failed");
+
+	torture_assert_ntstatus_ok(tctx, share_list_all(tctx, ctx, &count, &names),
+							   "share_list_all failed");
+
+	torture_assert(tctx, count >= 1, "creating share failed");
+
+
+	for (i = 0; i < count; i++) {
+		found |= strcmp(names[i], "bloe") == 0;
+	}
+
+	torture_assert(tctx, found, "created share found");
+
+	return true;
+}
+
+
+static bool test_create_invalid(struct torture_context *tctx, 
+							const void *tcase_data, 
+							const void *test_data)
+{
+	struct share_context *ctx = discard_const(tcase_data);
+	NTSTATUS status;
+
+	status = share_create(ctx, "bla", NULL, 0);
+
+	if (NT_STATUS_EQUAL(status, NT_STATUS_NOT_IMPLEMENTED))
+		torture_skip(tctx, "Not supported by backend");
+
+	torture_assert_ntstatus_equal(tctx, NT_STATUS_INVALID_PARAMETER, 
+								  status,
+							   "create_share failed");
+
+	torture_assert_ntstatus_equal(tctx, NT_STATUS_INVALID_PARAMETER, 
+								  share_create(ctx, NULL, NULL, 0),
+							   "create_share failed");
+
+	return true;
+}
+
+static bool test_share_remove_invalid(struct torture_context *tctx, 
+							const void *tcase_data, 
+							const void *test_data)
+{
+	struct share_context *ctx = discard_const(tcase_data);
+	NTSTATUS status;
+
+	status = share_remove(ctx, "nonexistant");
+
+	if (NT_STATUS_EQUAL(status, NT_STATUS_NOT_IMPLEMENTED))
+		torture_skip(tctx, "Not supported by backend");
+
+	torture_assert_ntstatus_equal(ctx, status, NT_STATUS_UNSUCCESSFUL, 
+								  "remove fails");
+
+	return true;
+}
+
+
+
+static bool test_share_remove(struct torture_context *tctx, 
+							const void *tcase_data, 
+							const void *test_data)
+{
+	struct share_context *ctx = discard_const(tcase_data);
+	struct share_info inf[] = { 
+		{ SHARE_INFO_STRING, SHARE_TYPE, discard_const_p(void *, "IPC$") },
+		{ SHARE_INFO_STRING, SHARE_PATH, discard_const_p(void *, "/tmp/bla") }
+	};
+	NTSTATUS status;
+
+	status = share_create(ctx, "blie", inf, 2);
+
+	if (NT_STATUS_EQUAL(status, NT_STATUS_NOT_IMPLEMENTED))
+		torture_skip(tctx, "Not supported by backend");
+
+	torture_assert_ntstatus_ok(tctx, status,
+							   "create_share failed");
+
+	torture_assert_ntstatus_ok(tctx, share_remove(ctx, "blie"), 
+							   "remove failed");
+
+	return true;
+}
+
+static bool test_double_create(struct torture_context *tctx, 
+							const void *tcase_data, 
+							const void *test_data)
+{
+	struct share_context *ctx = discard_const(tcase_data);
+	struct share_info inf[] = { 
+		{ SHARE_INFO_STRING, SHARE_TYPE, discard_const_p(void *, "IPC$") },
+		{ SHARE_INFO_STRING, SHARE_PATH, discard_const_p(void *, "/tmp/bla") }
+	};
+	NTSTATUS status;
+
+	status = share_create(ctx, "bla", inf, 2);
+
+	if (NT_STATUS_EQUAL(status, NT_STATUS_NOT_IMPLEMENTED))
+		torture_skip(tctx, "Not supported by backend");
+
+	torture_assert_ntstatus_ok(tctx, status,
+							   "create_share failed");
+
+	torture_assert_ntstatus_equal(tctx, NT_STATUS_UNSUCCESSFUL, 
+								  share_create(ctx, "bla", inf, 2),
+							   "create_share failed");
 
 	return true;
 }
@@ -41,16 +173,22 @@
 static void tcase_add_share_tests(struct torture_tcase *tcase)
 {
 	torture_tcase_add_test(tcase, "list_empty", test_list_empty, NULL);
+	torture_tcase_add_test(tcase, "share_create", test_create, NULL);
+	torture_tcase_add_test(tcase, "share_remove", test_share_remove, NULL);
+	torture_tcase_add_test(tcase, "share_remove_invalid", test_share_remove_invalid, NULL);
+	torture_tcase_add_test(tcase, "share_create_invalid", test_create_invalid, 
+						   NULL);
+	torture_tcase_add_test(tcase, "share_double_create", test_double_create, NULL);
 }
 
 static BOOL setup_ldb(struct torture_context *tctx, void **data)
 {
-	return NT_STATUS_IS_OK(share_get_context_by_name(tctx, "ldb", data));
+	return NT_STATUS_IS_OK(share_get_context_by_name(tctx, "ldb", (struct share_context **)data));
 }
 
 static BOOL setup_classic(struct torture_context *tctx, void **data)
 {
-	return NT_STATUS_IS_OK(share_get_context_by_name(tctx, "classic", data));
+	return NT_STATUS_IS_OK(share_get_context_by_name(tctx, "classic", (struct share_context **)data));
 }
 
 static BOOL teardown(struct torture_context *tctx, void *data)

