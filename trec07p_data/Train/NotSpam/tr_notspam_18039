From perl6-all-return-81886-ktwarwic=speedy.uwaterloo.ca@perl.org  Sun Jun 10 17:10:55 2007
Return-Path: <perl6-all-return-81886-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5ALAsL9006500
	for <ktwarwic@flax9.uwaterloo.ca>; Sun, 10 Jun 2007 17:10:54 -0400
Received: (qmail 19724 invoked by uid 514); 10 Jun 2007 21:10:52 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 19718 invoked from network); 10 Jun 2007 21:10:52 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=1.4 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,PLING_QUERY,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: domain of dataweaver@gmail.com designates 64.233.162.236 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:mime-version:content-type:content-transfer-encoding:content-disposition;
        b=TLub6UkWFVdKAqtxuxkvdnhgKsYKCoecPCrCbuaSZeMR+qfD7mIoulqwmRZitFgp20jRl890rHH0WDZqVcUMlM26yeespuUuqxdUjFeATANmHyIa0RTbbhsg/8lpsygb7g2qMA54B7Ed8XXYwEPgVT3vKVFtusuk52aNdPkBTzM=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:mime-version:content-type:content-transfer-encoding:content-disposition;
        b=IE0ctJNTd0arGcFpDryQGG89mK27QU4PRHSR1ELPa7+nPG718m+xuLeXdeYMtbS1mMCJ4Lj9SHccqxV5pWjbkh25E/ZyiBFpiGMeD2oosF/JBpAG8ptlPOYcMwgaxuL99SlqKpOVC6k85iqBruz74SurHGKx1MkvvwmiS6W89jY=
Message-ID: <ef30550b0706101410l44485919m472e675a700a1daf@mail.gmail.com>
Date: Sun, 10 Jun 2007 14:10:32 -0700
From: "Jonathan Lang" <dataweaver@gmail.com>
To: p6l <perl6-language@perl.org>
Subject: Generalizing ?? !!
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=1.4 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,PLING_QUERY,SPF_PASS

Rereading A03, I ran across the original reasoning behind why Perl 5's
'?:' trinary operator became '?? ::' first, and then '?? !!'.  Three
reasons were given:

* the '?' and ':' tokens are far too broadly useful to be gobbled up
by the trinary operator.

* the doubled symbols bring to mind the short-circuiting operators
(e.g., '&&' and '||'), suggesting a similar short-circuiting behavior
here.

* the '!!' brings to mind "evaluate this when the condition fails".

IMHO, the first point was always more about the ':' than it was about
the '?'; if you were to replace ':' with '!', I suspect that this
concern would largely go away.  That is, I don't see any infix:<?> or
infix:<!> operators in the current draft.  A case could be made that a
trinary '... ? ... ! ...' operator could work within the current state
of things without conflict.  Also, the whitespace disambiguation rules
that were later implemented go a long way to resolving the original
problem of ':' trying to do too much.

That said, the latter two points are still valid.  '... ? ... : ...'
might be perfectly workable; but so is '... ?? ... !! ...'.

However, there still may be room for improvement.  Consider the
following possibility:

Instead of being a single, inflexible trinary operator, break this
into a pair of binary operators: infix:<??> and infix:<!!>.  Each can
be used on its own, returning the right side if the condition
evaluates as expected (i.e., true for ?? and false for !!), and
otherwise returns 'undef'.  A variation of chaining associativity gets
used, with the "chaining rule" being '$v1 op1 $v2 // $v1 op2 $v3'
instead of '$v1 op1 $v2 && $v2 op2 $v3', as is the case for comparison
chaining.  So all of the following would be valid syntax:

  $test ?? $a !! $b  # true: $a; false: $b
  $test !! $a ?? $b  # true: $b; false: $a
  $test ?? $a       # true: $a; false: undef
  $test !! $b       # true: undef; false: $a

I suggest this mainly because it's potentially more extensible than
the current model.  I could see someone devising a "fuzzy logic"
module which could allow for such things as:

  $test ?? $a !! $b maybe $c likely $d unlikely $e

-- 
Jonathan "Dataweaver" Lang

