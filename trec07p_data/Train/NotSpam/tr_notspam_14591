From beginners-return-91973-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed May 30 09:24:48 2007
Return-Path: <beginners-return-91973-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4UDOlhB014141
	for <ktwarwic@flax9.uwaterloo.ca>; Wed, 30 May 2007 09:24:47 -0400
Received: (qmail 7316 invoked by uid 514); 30 May 2007 13:24:37 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 7306 invoked from network); 30 May 2007 13:24:37 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 30 May 2007 13:24:37 -0000
Received: (qmail 32257 invoked by uid 225); 30 May 2007 13:24:36 -0000
Delivered-To: beginners@perl.org
Received: (qmail 32248 invoked by alias); 30 May 2007 13:24:35 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,HTML_MESSAGE,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of sharan.basappa@gmail.com designates 209.85.132.248 as permitted sender)
Received: from an-out-0708.google.com (HELO an-out-0708.google.com) (209.85.132.248)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Wed, 30 May 2007 06:23:43 -0700
Received: by an-out-0708.google.com with SMTP id c25so642351ana
        for <beginners@perl.org>; Wed, 30 May 2007 06:23:38 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=HbQ4AmO/q5LuBW77FhyK6JH7jQKPgEzL6o5qCax0ebXTaOi9uRnnwmS0LbyzyUAIssDWLj2ftdt1/QSiQJZCbyiTBs0kwPO2orPYIVpp8AEdiiF7KRPkNxFOZSb+nf2IbJoo9BOar/gybqMBnG05EgOo3usEoYMb5jhidONGxEo=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=lO4pyl5UIk4Uisz29tnmmQBQnOCJY7yU3bz188E2XyKkNl28NAGFput+DyMDMtTBkijGLlrdbXC/t/CSMkZ82+gnW7uIbnE4GF2K+x8qRfnCd5hxVRD7nWeJQXOlU+q/7Xl8BKc6X+gR13OIearHunkomOKSDBd87yIGSnD73F8=
Received: by 10.142.87.15 with SMTP id k15mr281654wfb.1180531417680;
        Wed, 30 May 2007 06:23:37 -0700 (PDT)
Received: by 10.143.2.8 with HTTP; Wed, 30 May 2007 06:23:37 -0700 (PDT)
Message-ID: <8a31202a0705300623w18766a6fud2b2b749cd766652@mail.gmail.com>
Date: Wed, 30 May 2007 18:53:37 +0530
From: "Sharan Basappa" <sharan.basappa@gmail.com>
To: "Chas Owens" <chas.owens@gmail.com>
Subject: Re: zero width lookahead match
Cc: beginners@perl.org
In-Reply-To: <58ce48dc0705300612xb0d46b5q55771654d4223fc0@mail.gmail.com>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_1365_6221544.1180531417655"
References: <8a31202a0705300457l38219d07s8a236d11af4e2db0@mail.gmail.com>
	 <58ce48dc0705300612xb0d46b5q55771654d4223fc0@mail.gmail.com>
X-Virus-Checked: Checked

------=_Part_1365_6221544.1180531417655
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

>> this is what the zero-width lookahead assertion means.  It say with
>>out moving where you are currently starting the match, make certain
>>you can match the following pattern.  If you want it to move where the
>>match starts then you have to include something that does not have
>>zero-width like this

>> #match groups of three characters followed by three characters: "123" and
"456"
>> @store = $str =~ m/(\d\d\d)(?=\d\d\d)/g;

You mention that if I write a rule like @store = $str =~ m/((?=\d\d\d))/g;
then the scanner does not move ahead. But as I mentioned in my mail,
the result of this regex is 123 234 etc. This clearly shows that after every
match,
the regex engine of perl is moving its pointer to next char in the string (
i.e. it starts
looking at 23456 once 123 is matched)
This was exactly my question.

Regarding the other question about comparing with Flex, actually there is
no need to compare with flex. What I was trying to understand is, why is
that
it is called zero lookahead rule when the number of chars it looks ahead
depends
on the rule I write. For example, the regex in the above rule looks ahead 3
chars
ahead to find a match ..

Regards,
Sharan




On 5/30/07, Chas Owens <chas.owens@gmail.com> wrote:
>
> On 5/30/07, Sharan Basappa <sharan.basappa@gmail.com> wrote:
> > Hi All,
> >
> > I have some background working with scanners built from Flex. And I have
> > used lookahead capability of flex many a times. But I dont understand
> the
> > meaning of ZERO in zero lookahead match rule i.e. (?=pattern)
> snip
>
> I don't know jack about flex, so I can't help you with a comparison, but
>
> snip
> > The other question I have is - how does regex engine decide that it has
> to
> > move further its scanner by 1 character everytime
> snip
>
> this is what the zero-width lookahead assertion means.  It say with
> out moving where you are currently starting the match, make certain
> you can match the following pattern.  If you want it to move where the
> match starts then you have to include something that does not have
> zero-width like this
>
> #match groups of three characters followed by three characters: "123" and
> "456"
> @store = $str =~ m/(\d\d\d)(?=\d\d\d)/g;
>

------=_Part_1365_6221544.1180531417655--

