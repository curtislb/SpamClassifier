From beginners-return-90933-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu Apr 19 12:15:21 2007
Return-Path: <beginners-return-90933-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3JGFI0I026694
	for <ktwarwic@speedy.uwaterloo.ca>; Thu, 19 Apr 2007 12:15:19 -0400
Received: (qmail 16015 invoked by uid 514); 19 Apr 2007 16:14:48 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 16006 invoked from network); 19 Apr 2007 16:14:48 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 19 Apr 2007 16:14:48 -0000
Received: (qmail 11317 invoked by uid 225); 19 Apr 2007 16:14:48 -0000
Delivered-To: beginners@perl.org
Received: (qmail 11308 invoked by alias); 19 Apr 2007 16:14:47 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME,UPPERCASE_25_50
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: local policy)
Received: from smtp.njpservices.co.uk (HELO smtp.njpservices.co.uk) (84.45.106.4)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 19 Apr 2007 09:14:45 -0700
Received: from [85.92.179.53] (85-92-179-53.eurisp.net [85.92.179.53] (may be forged))
	by smtp.njpservices.co.uk (8.10.2/8.10.2) with ESMTP id l3JGEWa21845;
	Thu, 19 Apr 2007 17:14:32 +0100
Message-ID: <46279569.3070808@350.com>
Date: Thu, 19 Apr 2007 17:14:33 +0100
From: Rob Dixon <rob.dixon@350.com>
User-Agent: Thunderbird 1.5.0.10 (Windows/20070221)
MIME-Version: 1.0
To: Perl List <beginners@perl.org>
CC: Dave Gauthier <dave.gauthier@intel.com>
Subject: Re: how to use xml::simple with nested for loops???
References: <4ce365ec0704031520h5083306cwf4c5b2a6ca9b47c3@mail.gmail.com>	 <D7FF158337303A419CF4A183F48302D602293794@hdsmsx411.amr.corp.intel.com> <4ce365ec0704181311g4fe848d5nc033c503e4bab345@mail.gmail.com>
In-Reply-To: <4ce365ec0704181311g4fe848d5nc033c503e4bab345@mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-7; format=flowed
Content-Transfer-Encoding: 7bit
Status: O
Content-Length: 3559
Lines: 165

Dave Gauthier wrote:
>
> Going back a couple weeks regarding the nested foreach to read out nested
> data using XML::Simple, your solution works great, Thanks !
>
> But a new requirement is that I sort the output
>
>
> foreach (@{$xml->{FOREST}}) {
>
>     print $_->{NAME}, ":\n";
>
>     foreach (@{$_->{TREE}}) {
>
>         print "\t", $_->{NAME}, ":\n";
>
>         foreach (@{$_->{DIAM_HEIGHT}}) {
>
>             print "\t\ttdata:\t", $_, "\n";
>
>         }
>
>     }
>
> }
>
>
> To be painfully honest, I'm not sure what's going on inside the...
>
> {@{$xml->{FOREST}}} (for example).  Is there some sort of casting
> going on
> here?  I tried to "sort" the list, and it ran, but the output was not
> sorted.  I suspect that it's sortig pointers and not values :-(
>
> Any help would be appreciated.

May I encourage you to use an XML module other than XML::Simple, if that is
possible? XML::LibXML, for instance, allows you to use both XPath and the
Document Object Model to access the XML data, and makes for a more readable
program. You don't say what sorts you need to do on your output, but the program
below sorts the data by forest name and tree name as an example.

I hope this helps,

Rob



use strict;
use warnings;

use XML::LibXML;

my $parser = XML::LibXML->new;
$parser->keep_blanks(0);

my $doc = $parser->parse_fh(\*DATA);

sub byname {
  $a->getAttribute('NAME') cmp $b->getAttribute('NAME');
}

my @forests = $doc->findnodes('/ARBORINFO/FOREST');

foreach my $forest (sort byname @forests) {

  print $forest->getAttribute('NAME'), ":\n";

  foreach my $tree (sort byname $forest->childNodes) {

    print "  ", $tree->getAttribute('NAME'), ":\n";

    foreach my $size ($tree->childNodes) {

      print "    ", $size->textContent, "\n";
    }
  }
}

__DATA__
<?xml version='1.0' encoding='ISO-8859-1' ?>
<ARBORINFO NAME="Info about Trees">
<FOREST NAME="olympic">
  <TREE NAME="spruce">
    <DIAM_HEIGHT>4.0,70.0</DIAM_HEIGHT>
    <DIAM_HEIGHT>4.1,70.1</DIAM_HEIGHT>
    <DIAM_HEIGHT>4.2,70.2</DIAM_HEIGHT>
  </TREE>
  <TREE NAME="redwood">
    <DIAM_HEIGHT>5.0,80.0</DIAM_HEIGHT>
    <DIAM_HEIGHT>5.1,80.1</DIAM_HEIGHT>
    <DIAM_HEIGHT>5.2,80.2</DIAM_HEIGHT>
    <DIAM_HEIGHT>5.3,80.3</DIAM_HEIGHT>
  </TREE>
  <TREE NAME="pine">
    <DIAM_HEIGHT>3.0,60.0</DIAM_HEIGHT>
    <DIAM_HEIGHT>3.1,60.1</DIAM_HEIGHT>
  </TREE>
</FOREST>
<FOREST NAME="acadia">
  <TREE NAME="birch">
    <DIAM_HEIGHT>1.0,30.0</DIAM_HEIGHT>
    <DIAM_HEIGHT>1.1,30.1</DIAM_HEIGHT>
    <DIAM_HEIGHT>1.2,30.2</DIAM_HEIGHT>
    <DIAM_HEIGHT>1.3,30.3</DIAM_HEIGHT>
    <DIAM_HEIGHT>1.4,30.4</DIAM_HEIGHT>
    <DIAM_HEIGHT>1.5,30.5</DIAM_HEIGHT>
  </TREE>
  <TREE NAME="oak">
    <DIAM_HEIGHT>3.0,50.0</DIAM_HEIGHT>
    <DIAM_HEIGHT>3.1,50.1</DIAM_HEIGHT>
    <DIAM_HEIGHT>3.2,50.2</DIAM_HEIGHT>
    <DIAM_HEIGHT>3.3,50.3</DIAM_HEIGHT>
  </TREE>
  <TREE NAME="maple">
    <DIAM_HEIGHT>2.0,40.0</DIAM_HEIGHT>
  </TREE>
</FOREST>
<FOREST NAME="caddo">
  <TREE NAME="scrb">
    <DIAM_HEIGHT>0.5,30.0</DIAM_HEIGHT>
  </TREE>
</FOREST>
</ARBORINFO>

**OUTPUT**

acadia:
  birch:
    1.0,30.0
    1.1,30.1
    1.2,30.2
    1.3,30.3
    1.4,30.4
    1.5,30.5
  maple:
    2.0,40.0
  oak:
    3.0,50.0
    3.1,50.1
    3.2,50.2
    3.3,50.3
caddo:
  scrb:
    0.5,30.0
olympic:
  pine:
    3.0,60.0
    3.1,60.1
  redwood:
    5.0,80.0
    5.1,80.1
    5.2,80.2
    5.3,80.3
  spruce:
    4.0,70.0
    4.1,70.1
    4.2,70.2


-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


