From perl6-all-return-80450-ktwarwic=speedy.uwaterloo.ca@perl.org  Tue Apr 10 02:33:27 2007
Return-Path: <perl6-all-return-80450-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3A6XQ0I025388
	for <ktwarwic@speedy.uwaterloo.ca>; Tue, 10 Apr 2007 02:33:27 -0400
Received: (qmail 333 invoked by uid 514); 10 Apr 2007 06:33:03 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 328 invoked from network); 10 Apr 2007 06:33:02 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
Delivered-To: perlmail-parrot-porters@onion.perl.org
Delivered-To: parrot-porters@perl.org
Received-SPF: neutral (x1.develooper.com: local policy)
X-Virus-Scanned: by both ClamAV and Kaspersky at http://aliencamel.com/
Message-ID: <461B2F9A.4020001@perl.org>
Date: Mon, 09 Apr 2007 23:32:58 -0700
From: Allison Randal <allison@perl.org>
User-Agent: Thunderbird 1.5.0.10 (Macintosh/20070221)
MIME-Version: 1.0
To: Will Coleda <will@coleda.com>
CC: Jonathan Worthington <jonathan@jnthn.net>, parrot-porters@perl.org
Subject: Re: vtable cleanup and questions
References: <461675FA.4070709@jnthn.net> <ADA2B15F-F86D-4473-B356-7ED1D397E9EC@coleda.com>
In-Reply-To: <ADA2B15F-F86D-4473-B356-7ED1D397E9EC@coleda.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME
Status: O
Content-Length: 1944
Lines: 50

Will Coleda wrote:
> On Apr 6, 2007, at 12:31 PM, Jonathan Worthington wrote:
> 
>> Hi,
>>
>> I'm adding the new vtable entries required for PDD15. A few questions.
>>
>> 1) become_parent we agreed should go. It appears to be completely 
>> unused anywhere in the repository (languages included). Should we take 
>> that as evidence enough to just kill it, or go for a standard 
>> deprecation cycle?
> 
> Standard cycle, which means it'll be gone in 11 days or so.

Yes, standard cycle. Get the deprecation note into DEPRECATED.pod before 
the next release.

>> 2) I think we agreed that the subclass vtable method should go too, 
>> but the current ParrotClass and ParrotObject use it, so we can't 
>> deprecate that until we deprecate those. Note that it is only 
>> impelmented in default.pmc.

Yes, it's adequately handled by add_parent, no need for both.

>> 3) I just discovered we also have:
>>
>> PMC* new_singleton()
>> PMC* get_anonymous_subclass()
>>
>> I marked them unspecified. Neither of them are implemented by any PMCs 
>> in the repository - not even default. Should they go?

Yes. I'd say they're a case of being overly prepared for possible future 
needs. Both can be adequately handled by passing in options to 'new', or 
  (for singletons) altering the instantiation code in the class (if all 
instantiations are singletons).

>> 4) We have:
>> PMC* get_attr(INTVAL idx)
>> void set_attr(INTVAL idx, PMC* value) :write
>> I guess, like subclass, these are things we plan to deprecate along 
>> with ParrotClass and ParrotObject once folks are all using the PDD 15 
>> implementation, since attribute lookup is by name now? Or do we leave 
>> them for other languages that might want integer indexed attribute 
>> lookup, but just not implement them in our own class system?

Let's go ahead and deprecate them (when we do the full change to PDD 
15). We can bring them back at some point if absolutely necessary.

Allison

