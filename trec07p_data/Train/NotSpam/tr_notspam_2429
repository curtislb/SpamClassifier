From r-help-bounces@stat.math.ethz.ch  Tue Apr 17 11:42:31 2007
Return-Path: <r-help-bounces@stat.math.ethz.ch>
Received: from hypatia.math.ethz.ch (hypatia.math.ethz.ch [129.132.145.15])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l3HFgN0I029665
	for <ktwarwic@speedy.uwaterloo.ca>; Tue, 17 Apr 2007 11:42:30 -0400
Received: from hypatia.math.ethz.ch (hypatia [129.132.145.15])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l3HFf5dU022988;
	Tue, 17 Apr 2007 17:41:11 +0200
X-Spam-Checker-Version: SpamAssassin 3.1.8 (2007-02-13) on hypatia.math.ethz.ch
X-Spam-Level: *
X-Spam-Status: No, score=1.5 required=5.0 tests=AWL, BAYES_50, FORGED_RCVD_HELO,
	RCVD_NUMERIC_HELO autolearn=no version=3.1.8
Received: from pythagoras.zen.co.uk (pythagoras.zen.co.uk [212.23.3.140])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l3HFelVC022913
	for <r-help@stat.math.ethz.ch>; Tue, 17 Apr 2007 17:40:47 +0200
Received: from [88.96.44.206] (helo=88.96.44.206)
	by pythagoras.zen.co.uk with esmtp (Exim 4.50)
	id 1HdpnS-0000fW-C3; Tue, 17 Apr 2007 15:40:46 +0000
Received: (from efh@localhost) by 88.96.44.206 (8.8.8/8.8.5) id QAA01685;
	Tue, 17 Apr 2007 16:40:45 +0100
Message-ID: <XFMail.070417164045.ted.harding@nessie.mcc.ac.uk>
X-Mailer: XFMail 1.3-alpha-031298 [p0] on Linux
X-Priority: 3 (Normal)
MIME-Version: 1.0
In-Reply-To: <6ade6f6c0704170726o6ff90644x51c671ce33031767@mail.gmail.com>
Date: Tue, 17 Apr 2007 16:40:45 +0100 (BST)
From: (Ted Harding) <ted.harding@nessie.mcc.ac.uk>
To: R-help <r-help@stat.math.ethz.ch>
X-Originating-Pythagoras-IP: [88.96.44.206]
X-Virus-Scanned: by amavisd-new at stat.math.ethz.ch
Subject: Re: [R] A problem about all possible sequences
X-BeenThere: r-help@stat.math.ethz.ch
X-Mailman-Version: 2.1.9
Precedence: list
Reply-To: ted.harding@manchester.ac.uk
List-Id: "Main R Mailing List: Primary help" <r-help.stat.math.ethz.ch>
List-Unsubscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=unsubscribe>
List-Archive: <https://stat.ethz.ch/pipermail/r-help>
List-Post: <mailto:r-help@stat.math.ethz.ch>
List-Help: <mailto:r-help-request@stat.math.ethz.ch?subject=help>
List-Subscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: r-help-bounces@stat.math.ethz.ch
Errors-To: r-help-bounces@stat.math.ethz.ch
Status: O
Content-Length: 3215
Lines: 88

On 17-Apr-07 14:26:15, Paul Smith wrote:
> Dear All
> 
> Suppose a sequence of length 10 generated by the following rule:
> the first element is 0 with 50% of probability or 1 with the
> same probability; the second element likewise; and so on.

You don't say whether the elements of the sequence are independent,
but plausibility suggests that this may be what you intend.

In which case:

> Is there some R command to obtain all possible different sequences
> formed by the above rule?

  while(TRUE){print(sample(c(0,1),10,replace=TRUE))}

and just wait!

(Expected time to wait: about 7700 iterations, I think).

> I am aware that one could write a small
> program to do that, but I am speculating about whether a command
> is already existent.

Taking my tongue out of my cheek, however, it's not clear what you
are really asking for.

If really you want to generate those sequences randomly according
to your probabilistic description, retaining as you go only those
which have not been sampled before, until you have all 2^10
possible sequences, then my "suggestion" above is not the way
to do it! And as far as I know there is not an R function which
does this by proceeding in exactly that way.

Better to recognise that your random scheme means that each
possible sequence is equally likely with all the others, and
so you can do the equivalent by sampling 1024 from (1:1024)
without replacement, i.e. putting (1:1024) in random order.
Then the binary representation of each element is such a
sequence.

So

   S<-sample((1:1024),1024)

is an existing R function which does the heart of the job.
(It remains to convert each integer K in S to binary form,
but as far as I know there is not an R function to convert
an integer K directly into a vector of binary 0/1 with a
given number of digits, i.e. not the equivalent of

  to.binary(13,10) --> c(0,0,0,0,0,0,1,1,0,1)

except maybe in some special package, so I think you'll end
up writing your own for this bit anyway).

It gets more interesting if your example is just an illustraton,
and what you really want is more general.

E.g. if the different 0/1 outcomes in the 10 positions do
not have the same probabilities, but are still independent,
then you have to do more spadework (and again I'm pretty
sure there is no simple function in R to do it).

In that case it's definitely a programming job.

Even more so if the successive 0/1 outcomes are not independent,
whether P[0] = P[1] = 0.5 in each position or not. So again
a prgramming job.

Since you seem to be quite willling to do the programming
if necessary, I won't try to spoil your fun on that front!

Best wishes,
Ted.

--------------------------------------------------------------------
E-Mail: (Ted Harding) <ted.harding@nessie.mcc.ac.uk>
Fax-to-email: +44 (0)870 094 0861
Date: 17-Apr-07                                       Time: 16:40:42
------------------------------ XFMail ------------------------------

______________________________________________
R-help@stat.math.ethz.ch mailing list
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.

