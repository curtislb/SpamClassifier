From perl6-all-return-81899-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon Jun 11 11:10:15 2007
Return-Path: <perl6-all-return-81899-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5BFAFL9015457
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 11 Jun 2007 11:10:15 -0400
Received: (qmail 32422 invoked by uid 514); 11 Jun 2007 15:10:14 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 32417 invoked from network); 11 Jun 2007 15:10:13 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=0.7 required=8.0
	tests=BAYES_20,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,PLING_QUERY,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: domain of dataweaver@gmail.com designates 64.233.184.232 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=rMFOXHDgUZjcyjQFtl3Ayr/NhgtH4KQ4GhmCNIb34tENWUgMwWEWoQrFQc1gW+oQSgrIcO/v9DJh5jpUR5ryUkXxvqYurhRDJIrgd/ZSt78hoKS7adE5I5nEy9gdEjsB+qw1SYCZOjDU4jfrjux1z7POSjBhuU5N1Q4EZiAYLLI=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=rhhfXwt/wzpbueEwTR8pOfavY6pJiiLtYqwycwqFTXrG1UpK8wNWhpL4ixTyk45qpepTrI6Wfed4H8agkKWUKezPQeyDDHKGh/SDgMFQArBwc2VvPcxeA6DooKJ3mOoWYaHko6TZRBr07hbh2GvWIJjC3Z/xitydv/pYB2Hevuc=
Message-ID: <ef30550b0706110809w47d436e3veeb0962cfb38f620@mail.gmail.com>
Date: Mon, 11 Jun 2007 08:09:52 -0700
From: "Jonathan Lang" <dataweaver@gmail.com>
To: p6l <perl6-language@perl.org>
Subject: Re: Generalizing ?? !!
In-Reply-To: <83F5E0A4-3320-46F2-9319-35DEF2E79584@audreyt.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <ef30550b0706101410l44485919m472e675a700a1daf@mail.gmail.com>
	 <83F5E0A4-3320-46F2-9319-35DEF2E79584@audreyt.org>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.7 required=8.0
	tests=BAYES_20,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,PLING_QUERY,SPF_PASS

Audrey Tang wrote:
> Jonathan Lang wrote:
> > A variation of chaining associativity gets
> > used, with the "chaining rule" being '$v1 op1 $v2 // $v1 op2 $v3'
> > instead of '$v1 op1 $v2 && $v2 op2 $v3', as is the case for comparison
> > chaining.
>
> But wouldn't that make:
>
>    True ?? undef !! Moose;
>
> evaluate to Moose, instead of undef as we wanted?

Nope; because of the short-circuiting behavior:

    True ?? undef !! Moose
->
    True ?? undef // True !! Moose

The condition evaluates to True, causing the ?? to evaluate its RHS
and then short-circuit the rest of the expression.  The fact that the
RHS evaluates to undef is irrelevant.

In a sense, ?? and !! would invert the usual short-circuiting
behavior: with normal short-circuiting operators (&& and ||), the RHS
is evaluated if and only if the operator does not short-circuit; with
?? and !!, the RHS would be evaluated if and only if the operator
_does_ short-circuit.

NeonGraal wrote:
> Surely if you defined !! to return "undef but true" and both operators
> to be left associative then it all works.
>
>  1==0 ?? "True" !! "False" -> (undef) !! "False" which seems right to
> me.
>
>  1==1 !! "False" ?? "True" -> (undef but true) ?? "True" also good.

...except that '1==1 !! "False"' would return 'undef but true' on a
failure.  I'm sure that a rationale could be provided for doing this;
but it's a potentially surprising result which could get you in
trouble.  Best to keep to a simple 'undef' result on a failure.

Hakim: I'm not familiar with Haskell, so I can't follow your code as
well as I need to to provide an informed response.

Juerd Waalboer wrote:
> Zev Benjamin wrote:
> > ?? and !! could always return some kind of result object that boolizes
> > to true or false.
>
> Can we *please* keep simple things simple?

Agreed.  I'm in favor of this proposal to the extent that it breaks a
simple trinary operator down into equally simple binary operators
(with the trinary form continuing to exist as an emergent property of
the interaction of the binaries); if those binary operators become
more complex than the trinary form, or if you lose the ability to
recover the trinary form from them, there's no point in pursuing this
proposal.

-- 
Jonathan "Dataweaver" Lang

