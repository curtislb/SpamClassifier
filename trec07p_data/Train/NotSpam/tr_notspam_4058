From beginners-return-90987-ktwarwic=speedy.uwaterloo.ca@perl.org  Sun Apr 22 18:09:49 2007
Return-Path: <beginners-return-90987-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3MM9m0I024618
	for <ktwarwic@speedy.uwaterloo.ca>; Sun, 22 Apr 2007 18:09:48 -0400
Received: (qmail 9846 invoked by uid 514); 22 Apr 2007 22:09:19 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 9837 invoked from network); 22 Apr 2007 22:09:19 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 22 Apr 2007 22:09:19 -0000
Received: (qmail 6120 invoked by uid 225); 22 Apr 2007 22:09:19 -0000
Delivered-To: beginners@perl.org
Received: (qmail 6113 invoked by alias); 22 Apr 2007 22:09:18 -0000
X-Spam-Status: No, hits=-2.4 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME,DK_POLICY_TESTING,DNS_FROM_RFC_ABUSE
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
Received: from pop-scotia.atl.sa.earthlink.net (HELO pop-scotia.atl.sa.earthlink.net) (207.69.195.65)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Sun, 22 Apr 2007 15:09:16 -0700
Received: from dialup-4.154.250.238.dial1.boston1.level3.net ([4.154.250.238] helo=[10.0.1.4])
	by pop-scotia.atl.sa.earthlink.net with esmtp (Exim 3.36 #1)
	id 1HfkF5-0001fd-00
	for beginners@perl.org; Sun, 22 Apr 2007 18:09:12 -0400
Mime-Version: 1.0 (Apple Message framework v752.2)
Content-Transfer-Encoding: 7bit
Message-Id: <395B6D9C-5936-4CE9-AAEB-450EF98F6AA4@earthlink.net>
Content-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed
To: Beginners Perl <beginners@perl.org>
From: Mike Lesser <exceptions@earthlink.net>
Subject: testing return values
Date: Sun, 22 Apr 2007 18:10:24 -0400
X-Mailer: Apple Mail (2.752.2)
Status: O
Content-Length: 1377
Lines: 47

Hiya. I'm looking for the correct Perl style for testing and storing  
a return value in a control statement. The solution in any other  
language is pretty obvious, but I get the distinct impression that  
there's a 'right' way in Perl...

Let's say I want to test a scalar returned from a subroutine, and  
also keep a copy for my own use:

  $scalar = sub( $argument );

  if( $scalar ){
  }

Naturally that's no big deal. Now let's say I have a tree I want to  
traverse, or some similar open-ended thing to evaluate, and want to  
run it until a condition is reached..

  while( read_tree( $argument ){
  }

Again no biggie. The problem is if I want to keep the result.  
Obviously I can't do this:

while( $tree_element = read_tree( $argument ) ){
    do_something( $tree_element );
}

I can come up with a brute-force solution of course, but there's  
probably a better, Perlish way that I'm not aware of. In addition, I  
don't expect a return value from some module to be consistently  
undefined or zero; it could change under some circumstances. This  
makes me think that the problem has been dealt with long ago, and  
just doesn't stick out in the llama/alpaca/whatever books.

Hopefully I explained this correctly!







-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


