From r-help-bounces@stat.math.ethz.ch  Wed Apr 25 18:24:45 2007
Return-Path: <r-help-bounces@stat.math.ethz.ch>
Received: from hypatia.math.ethz.ch (hypatia.math.ethz.ch [129.132.145.15])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l3PMOi6w004786
	for <ktwarwic@speedy.uwaterloo.ca>; Wed, 25 Apr 2007 18:24:45 -0400
Received: from hypatia.math.ethz.ch (hypatia [129.132.145.15])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l3PMNHxr008588;
	Thu, 26 Apr 2007 00:23:30 +0200
X-Spam-Checker-Version: SpamAssassin 3.1.8 (2007-02-13) on hypatia.math.ethz.ch
X-Spam-Level: 
X-Spam-Status: No, score=-0.5 required=5.0 tests=AWL,
	BAYES_50 autolearn=no version=3.1.8
Received: from wr-out-0506.google.com (wr-out-0506.google.com [64.233.184.225])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l3PMN4A4008536
	for <r-help@stat.math.ethz.ch>; Thu, 26 Apr 2007 00:23:05 +0200
Received: by wr-out-0506.google.com with SMTP id i21so407365wra
	for <r-help@stat.math.ethz.ch>; Wed, 25 Apr 2007 15:23:04 -0700 (PDT)
Received: by 10.114.57.1 with SMTP id f1mr356709waa.1177539783102;
	Wed, 25 Apr 2007 15:23:03 -0700 (PDT)
Received: by 10.114.169.18 with HTTP; Wed, 25 Apr 2007 15:23:03 -0700 (PDT)
Message-ID: <eb555e660704251523j42db09e5s9930f87e3ec4612c@mail.gmail.com>
Date: Wed, 25 Apr 2007 15:23:03 -0700
From: "Deepayan Sarkar" <deepayan.sarkar@gmail.com>
To: "Waichler, Scott R" <Scott.Waichler@pnl.gov>
In-Reply-To: <F807B6FD7E7BE144A22B8A449CDAD93401220F06@EMAIL02.pnl.gov>
MIME-Version: 1.0
Content-Disposition: inline
References: <F807B6FD7E7BE144A22B8A449CDAD93401220F05@EMAIL02.pnl.gov>
	<f8e6ff050704250931m114e8528t67b88f329b5f5aeb@mail.gmail.com>
	<F807B6FD7E7BE144A22B8A449CDAD93401220F06@EMAIL02.pnl.gov>
X-Virus-Scanned: by amavisd-new at stat.math.ethz.ch
Cc: r-help@stat.math.ethz.ch
Subject: Re: [R] levelplot and unequal cell sizes
X-BeenThere: r-help@stat.math.ethz.ch
X-Mailman-Version: 2.1.9
Precedence: list
List-Id: "Main R Mailing List: Primary help" <r-help.stat.math.ethz.ch>
List-Unsubscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=unsubscribe>
List-Archive: <https://stat.ethz.ch/pipermail/r-help>
List-Post: <mailto:r-help@stat.math.ethz.ch>
List-Help: <mailto:r-help-request@stat.math.ethz.ch?subject=help>
List-Subscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: r-help-bounces@stat.math.ethz.ch
Errors-To: r-help-bounces@stat.math.ethz.ch
Status: O
Content-Length: 4017
Lines: 115

On 4/25/07, Waichler, Scott R <Scott.Waichler@pnl.gov> wrote:
> Hadley and Deepayan,
>
> Thank you for responding.  Here is a simple example of what I'm talking
> about.  It is a grid that is 5 cells wide by 2 cells tall.  The width of
> the cells in the x-direction is variable; the cells at either end have
> width = 4 units, and the three cells in the middle have width = 2 units.
> My objective is to have the color contour boundaries fall on the cell
> boundaries instead of equidistant between cell nodes.  In the plot, I
> want the cyan/blue and orange/gray boundaries to be located at the red
> cell boundary lines.  Also, the colored regions should extend to the
> ends of the domain (x = 0, 14).
>
>
> library(lattice)
>
> x.node <- rep(c(2, 5, 7, 9, 12), 2)
> y.node <- c(rep(0.5, 5), rep(1.5, 5))
> z <- rep(1:5, 2)
> contour.levels <- seq(0.5, 5.5, by=1)
> x.cell.boundary <- c(0, 4, 6, 8, 10, 14)
> contour.colors <- c("cyan", "blue", "green", "orange", "gray")
>
> print(
>   levelplot(z ~ x.node * y.node,
>      panel = function(z,...) {
>         panel.levelplot(z,...)
>         panel.abline(v = x.cell.boundary, col="red")
>      },
>      xlim = range(x.cell.boundary),
>      at=contour.levels,
>      colorkey = list(space="top", width=1, height=0.9,
>                      at=1:5,
>                      col=contour.colors,
>                      labels=list(labels=z, at=z)
>                     ),
>      col.regions=contour.colors,
>      region = T,
>      contour = F
>   )
> )

You are right, panel.levelplot is indeed assuming that the boundaries
are between consecutive midpoints. There is no built in way around
that; there simply isn't enough information available to the panel
function.

The cleanest solution, in principle, is to write your own panel
function that ends up calling panel.polygon or grid.polygon.
panel.levelplot is a good starting point (the only tricky part is
getting the colors right, almost everything else you can get rid of).
Maybe Hadley will have a simpler solution.

Here's a possible implementation using a panel function:


my.panel.levelplot <-
    function (x, y, z, subscripts, at = pretty(z),
              col.regions = regions$col, ...,
              w, h)
{
    regions <- trellis.par.get("regions")
    numcol <- length(at) - 1
    numcol.r <- length(col.regions)
    col.regions <- if (numcol.r <= numcol)
        rep(col.regions, length = numcol)
    else col.regions[floor(1+(1:numcol-1) * (numcol.r-1)/(numcol-1))]
    zcol <- findInterval(z, at, rightmost.closed = TRUE)
    x <- as.numeric(x[subscripts])
    y <- as.numeric(y[subscripts])
    z <- as.numeric(z[subscripts])
    w <- as.numeric(w[subscripts])
    h <- as.numeric(h[subscripts])
    zcol <- as.numeric(zcol[subscripts])
    print(data.frame(z, x.node, y.node, w.node, h.node, col.regions[zcol]))
    panel.rect(x = x, y = y, width = w, height = h,
               col = col.regions[zcol], ...)
}



x.node <- rep(c(2, 5, 7, 9, 12), 2)
y.node <- c(rep(0.5, 5), rep(1.5, 5))
z <- rep(1:5, 2)
contour.levels <- seq(0.5, 5.5, by=1)
x.cell.boundary <- c(0, 4, 6, 8, 10, 14)
contour.colors <- c("cyan", "blue", "green", "orange", "gray")


w.node <- rep(diff(x.cell.boundary), 2)
h.node <- rep(1, 10)


levelplot(z ~ x.node * y.node, h = h.node, w = w.node,
          panel = function(...) {
              my.panel.levelplot(...)
              panel.abline(v = x.cell.boundary, col="red")
          },
          xlim = range(x.cell.boundary),
          at=contour.levels,
          colorkey =
          list(space="top", width=1, height=0.9,
               at=contour.levels,
               col=contour.colors,
               labels=list(labels=z, at=z)),
          col.regions=contour.colors)


-Deepayan

______________________________________________
R-help@stat.math.ethz.ch mailing list
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.

