From perl6-all-return-80905-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu Apr 26 16:44:31 2007
Return-Path: <perl6-all-return-80905-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3QKiU6w016859
	for <ktwarwic@speedy.uwaterloo.ca>; Thu, 26 Apr 2007 16:44:30 -0400
Received: (qmail 26834 invoked by uid 514); 26 Apr 2007 20:44:28 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 26829 invoked from network); 26 Apr 2007 20:44:28 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
From: Leopold Toetsch <lt@toetsch.at>
To: perl6-internals@perl.org
Subject: mmx/sse copy functions (was: Puzzling structure in <parrot/stacks.h>)
Date: Thu, 26 Apr 2007 22:44:05 +0200
User-Agent: KMail/1.9.1
Cc: Andy Spieherty <spiehera@lafayette.edu>
References: <Pine.LNX.4.62.0704261514050.20693@fractal.phys.lafayette.edu>
In-Reply-To: <Pine.LNX.4.62.0704261514050.20693@fractal.phys.lafayette.edu>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200704262244.05667.lt@toetsch.at>
X-Scan-Signature: e425a59c30fde796842d2963c4859a3d
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME
Status: O
Content-Length: 2334
Lines: 57

Am Donnerstag, 26. April 2007 21:44 schrieb Andy Spieherty:
> Does anyone understand the 'dummy' element in
> include/parrot/stacks.h?  Here is the relevant snippet:
>
>     typedef struct Stack_Chunk {
>         pobj_t obj;
>         int size;
>         const char * name;
>         struct Stack_Chunk *prev;
>     #if ! DISABLE_GC_DEBUG && defined(I386)
>         void * dummy;   /* force 8 byte align for mmx and sse moves */
>     #endif
>         union { /* force appropriate alignment of 'data' */
>             void *data;
>     #ifndef I386
>             double d_dummy;         /* align double values on stack */
>     #endif
>         } u;
>     } Stack_Chunk_t;
>
> (I assume that mmx and sse are some sort of i386-specific instructions.)

Indeed.

> Specifically, I'm wondering about two things:
>
> 1.  Is the comment backwards?  If I count correctly, including the
>     void *dummy means that u.data will *NOT* be aligned on an 8-byte
>     boundary.  Is that the actual intent?  (Of course, compilers are
>     free to add in extra padding inside structures, and it may end up
>     aligned with some compilers but not aligned with others.)

At some earlier time in parrot history, there was a (32 bit, pointer-sized) 
'version' [1] structure item in pobj_t, which was active 
with !DISABLE_GC_DEBUG. The dummy was needed for i386 (when x86_64 didn't 
even exist) to align the data pointer at an 8-byte boundary.

The assembly coded mmx/sse copy subroutines were active at that time and did 
introduce a nice speedup.
These copy functions were used to copy register frames at - hmmm ancient - 
times before parrot got more than 32 registers.

As the past tense is indicating, above dummy is totally obsolete and the copy 
functions[2] are unused. The latter could be removed too, but might be a 
nice-to-have, when something faster than memcpy(3) is wanted or needed, 
albeit only on restricted (but common) platforms and for aligned memory only. 
Some recent CPUs do have special instructions for copying unaligned memory 
reegions too.

leo

[1] it was renamed later to a similar name and was removed thereafter:
    $ svn log include/parrot/pobj.h | grep version

[2] see also these (and related) in the parrot tree
    $ find . -type f | egrep '_mmx|_sse' | grep -v svn
    $ find . -type f | xargs grep mmx # ...

