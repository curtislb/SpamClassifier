From perl6-all-return-80637-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon Apr 16 15:34:42 2007
Return-Path: <perl6-all-return-80637-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3GJYe0I017817
	for <ktwarwic@speedy.uwaterloo.ca>; Mon, 16 Apr 2007 15:34:40 -0400
Received: (qmail 29775 invoked by uid 514); 16 Apr 2007 19:34:15 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 29770 invoked from network); 16 Apr 2007 19:34:15 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DK_POLICY_SIGNSOME,DK_SIGNED
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: domain of jrisom@gmail.com designates 64.233.166.176 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:mime-version:content-type:resent-date:message-id:cc:resent-to:from:resent-message-id:subject:resent-from:date:to:x-mailer;
        b=bAvkaxWuR5D4vQmnbwJ6VVVoKxYejm+Ul3znBTo2AOz//A7G3iWYnI2Aqpm12wxWO6/mQmoLCyg3MB/j2i9MJjeByu2y2iskwnYC0Nfv5lC9AnkO0TdO90SoNweXxM3ikXeW+/OkSXMDHPRA4I08oIqO2SajS+Sp1gBFZoKvAb4=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:mime-version:content-type:resent-date:message-id:cc:resent-to:from:resent-message-id:subject:resent-from:date:to:x-mailer;
        b=uHvgq4QivKO5aesOCKCNrDtZt4YFPGAksct+xkCPkFKiTmYfb89D+gWQQZAoFoOOlCf/GL4WwF6r+hBTZqngH3mzCeBpJgtfc3oSxTAQ3E/V6CMhrRnXMpr4Ql/0WRvrLT4Jo16jG3ggzGOeQucrV/E2N+56XzRByyp0SbaZtMo=
Mime-Version: 1.0 (Apple Message framework v624)
Content-Type: multipart/mixed; boundary=Apple-Mail-8-876331717
Resent-Date: Mon, 16 Apr 2007 14:33:47 -0500
Message-Id: <e7da1be017d597473716388e8c18fcbc@gmail.com>
Cc: Allison Randal via RT <parrotbug-followup@parrotcode.org>
Resent-To: Perl 6 Internals <perl6-internals@perl.org>
From: Joshua Isom <jrisom@gmail.com>
Resent-Message-Id: <700eea9dfa84fc6d89d644ea473610db@gmail.com>
Subject: Re: [perl #39063] [RESOLVED] [TODO] ResizableBooleanArray uses 64 bytes per bit of information 
Resent-From: Joshua Isom <jrisom@gmail.com>
Date: Mon, 16 Apr 2007 14:29:41 -0500
To: Andy Spieherty <spiehera@lafayette.edu>
X-Mailer: Apple Mail (2.624)
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
Status: O
Content-Length: 4916
Lines: 146

--Apple-Mail-8-876331717
Content-Transfer-Encoding: 7bit
Content-Type: text/plain;
	charset=US-ASCII;
	format=flowed

On Apr 16, 2007, at 8:46 AM, Andy Spieherty wrote:

> On Sun, 15 Apr 2007, Allison Randal via RT wrote:
>
>> According to our records, your request regarding
>>   "[TODO] ResizableBooleanArray uses 64 bytes per bit of information"
>> has been resolved.
>>
>> If you have any further questions or concerns, please respond to this 
>> message.
>>
>> For other topics, please create a new ticket.
>
>> <URL: http://rt.perl.org/rt3/Ticket/Display.html?id=39063 >
>
> Are you *sure* it's been fixed?  My test involved running a simple
> program something like this
>
>     .sub _main
> 	.local pmc pmc1
> 	pmc1 = new ResizableBooleanArray
> 	pmc1[1000] = 1
>     .end
>
> and incrementing the '1000'.  I found that for every element I added,
> parrot allocated 64 extra bytes.  (I monitored parrot's calls to 
> malloc()
> with -DDETAIL_MEMORY_DEBUG.)
>
> Hence if I want to store 1,000 bits, parrot will call malloc() to
> allocate 64,000 bytes.  That's why I said it "uses 64 bytes per bit of
> information".
>
> I apologize in advance if I have misunderstood the correct way to use
> ResizableBooleanArray or what the number '1000' means in the above
> example.
>
> -- 
>     Andy Spieherty		spiehera@lafayette.edu
>
>

Well using this script I seem to improve the results greatly...  Using 
freeze is ugly and not best but the only way I could think of the 
really get the size of the pmc(especially since a pmc could compress 
it's data).

.sub _main
     .local pmc pmc1
     pmc1 = new .ResizableBooleanArray
     pmc1 = 100000
     $S0 = freeze pmc1
     $I0 = length $S0
     $S0 = $I0
     say $S0
     pmc1[1000000] = 1
     $S0 = freeze pmc1
     $I0 = length $S0
     $S0 = $I0
     say $S0
.end

I get 6400136 and 64000136 before, and 100080 and 1000080 now.  But 
before applying this patch(which passes it's tests, and one 
unexpectedly), I'd probably recommend improving the testing suite.




--Apple-Mail-8-876331717
Content-Transfer-Encoding: 7bit
Content-Type: application/octet-stream;
	x-unix-mode=0644;
	name="rba.patch"
Content-Disposition: attachment;
	filename=rba.patch

Index: src/pmc/resizablebooleanarray.pmc
===================================================================
--- src/pmc/resizablebooleanarray.pmc   (revision 18237)
+++ src/pmc/resizablebooleanarray.pmc   (working copy)
@@ -118,7 +118,9 @@
             real_exception(interp, NULL, E_IndexError,
                 "ResizableBooleanArray: Can't resize!");
 
-        newASize = (size / MIN_ALLOC + 1) * MIN_ALLOC;
+        newASize = (size / BITS_PER_CHAR + 1);
+        if (newASize < MIN_ALLOC)
+            newASize = MIN_ALLOC;
 
         /* Nothing allocated yet */
         if (! PMC_data(SELF)) {
@@ -189,15 +191,15 @@
         if (PMC_int_val2(SELF) <= 0) {
             Parrot_UInt1 * const sdOld = PMC_data(SELF);
             Parrot_UInt1 * const sdNew = mem_sys_allocate_zeroed(
-                ((PMC_int_val2(SELF) / MIN_ALLOC) * MIN_ALLOC)
+                ((PMC_int_val2(SELF) / BITS_PER_CHAR) * BITS_PER_CHAR)
                 + PMC_int_val(SELF)
-                + ((PMC_int_val(SELF) / MIN_ALLOC + 1) * MIN_ALLOC));
+                + ((PMC_int_val(SELF) / BITS_PER_CHAR + 1) * BITS_PER_CHAR));
             mem_sys_memmove(sdNew, sdOld + PMC_int_val2(SELF),
                 PMC_int_val(SELF));
             mem_sys_free(sdOld);
             PMC_data(SELF) = sdNew;
-            PMC_int_val2(SELF) += MIN_ALLOC;
-            PMC_int_val(SELF) += MIN_ALLOC;
+            PMC_int_val2(SELF) += BITS_PER_CHAR;
+            PMC_int_val(SELF) += BITS_PER_CHAR;
         }
 
         /* Move the head position */
@@ -232,12 +234,12 @@
 
         /* If int_val2 is bigger than our allocation unit size, size
             this thing down */
-        if (PMC_int_val2(SELF) >= MIN_ALLOC) {
+        if (PMC_int_val2(SELF) >= BITS_PER_CHAR) {
             Parrot_UInt1 * const sdOld = PMC_data(SELF);
             Parrot_UInt1 * const sdNew = mem_sys_allocate_zeroed(
-                ((PMC_int_val2(SELF) / MIN_ALLOC) * MIN_ALLOC)
+                ((PMC_int_val2(SELF) / BITS_PER_CHAR))
                 + PMC_int_val(SELF)
-                + ((PMC_int_val(SELF) / MIN_ALLOC + 1) * MIN_ALLOC));
+                + ((PMC_int_val(SELF) / BITS_PER_CHAR + 1)));
             mem_sys_memmove(sdNew, sdOld + PMC_int_val2(SELF),
                 PMC_int_val(SELF));
             mem_sys_free(sdOld);
@@ -298,7 +300,7 @@
 
         IMAGE_IO * const io = info->image_io;
         STRING *s;
-        const INTVAL size = (PMC_int_val(SELF) / MIN_ALLOC + 1) * MIN_ALLOC;
+        const INTVAL size = (PMC_int_val(SELF) / BITS_PER_CHAR + 1);
 
         io->vtable->push_integer(INTERP, io, PMC_int_val2(SELF));
         io->vtable->push_integer(INTERP, io, PMC_int_val(SELF));


--Apple-Mail-8-876331717--

