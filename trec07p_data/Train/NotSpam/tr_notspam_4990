From perl6-all-return-80879-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed Apr 25 14:03:20 2007
Return-Path: <perl6-all-return-80879-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3PI3J6w001361
	for <ktwarwic@speedy.uwaterloo.ca>; Wed, 25 Apr 2007 14:03:19 -0400
Received: (qmail 28862 invoked by uid 514); 25 Apr 2007 18:03:18 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 28857 invoked from network); 25 Apr 2007 18:03:17 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: domain of jerry.gay@gmail.com designates 66.249.92.171 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=PFEPms9aGc/ZsCPfxK5rnk4XdPIb2D0re6G5k1gziQs65yyBtyNroP7WKcyagtzVxenpAzp66ljjTtOmZbeOZISCLTrGjZHIOr5NmwaBOOhHmnphlu+LKbNGHBRcZvLByB4VkU5lwq+YjFe41UOat2tFekdwwqpmC3+BfDR0anY=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=GvNUZooZ16j88a/MlzfrX6S5Ze2IQkJesQzKkLYOvIIM26QQzLShJLMQvWoVhKyCVBiZddzp1yUGIY49Uz9lJdvYBzskmddrUWxRsJzrmT+dj5l9WivAiouakxhN3ILrVMXSaedc1pKBM64Wrlk/HkUp5l3Jelox4vIjwfxAwkQ=
Message-ID: <1d9a3f400704251102w1d754ca7n65dd41d37a84dc07@mail.gmail.com>
Date: Wed, 25 Apr 2007 11:02:56 -0700
From: "jerry gay" <jerry.gay@gmail.com>
To: "Jonathan Worthington" <jonathan@jnthn.net>
Subject: Re: [perl #42620] PGE 'Out of memory' panics.
Cc: "Andy Spieherty" <spiehera@lafayette.edu>, chromatic <chromatic@wgz.org>,
   "Perl6 Internals" <perl6-internals@perl.org>
In-Reply-To: <462F893E.5030206@jnthn.net>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <RT-Ticket-42620@perl.org>
	 <20070424200044.GA28003@host.pmichaud.com>
	 <Pine.LNX.4.62.0704241628410.19105@fractal.phys.lafayette.edu>
	 <200704241442.41493.chromatic@wgz.org>
	 <Pine.LNX.4.62.0704251053090.23058@fractal.phys.lafayette.edu>
	 <462F893E.5030206@jnthn.net>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
Status: O
Content-Length: 2288
Lines: 49

On 4/25/07, Jonathan Worthington <jonathan@jnthn.net> wrote:
> Andy Spieherty wrote:
> > 2.  Garbage collection really slows the program down (I observed factors of 10 difference in speed with and without -G), and I have a vague unsupported suspicion that the slowdown grows faster than linearly with the allocated memory.
> >
> I remember tracing through a load of this code for about an hour. I was
> none the wiser afterwards, but I was trying to work out arenas and
> allocation stuff and so on.
>
> Basically, if you run the program without -G and then break it, it will
> usually break inside the GC routine. What I do remember is that it was
> looping through some kinda memory pool, or arena, or whatever. However,
> the thing it was looping through was *huge* (like, from 0 to a six
> figure number) and I think it maybe was an n^2 algorithm, which
> amplified the effect further.
>
> Recent mentions of a lack of memory pool compaction kinda resonates with
> what I analyzed; I always meant to return to look a bit more, but never
> had time to dig deeper. I think re-discovering where it's spending so
> much time during GC would be a good start, though. And just randomly
> breaking into the program did it for me, usually first time.
>
yep, in src/gc/dod.c, i end up inside Parrot_dod_sweep()
cur_arena->used is 137910 at present, which is where i broke in at test 177.

there's a loop that looks like:

        for (i = nm = 0; i < cur_arena->used; i++) {
            if (PObj_on_free_list_TEST(b))
                ; /* if it's on free list, do nothing */
            else if (PObj_live_TEST(b)) {
                total_used++;
                PObj_live_CLEAR(b);
                PObj_get_FLAGS(b) &= ~PObj_custom_GC_FLAG;
            }
            else {
                /* it must be dead */

i set a breakpoint at
                total_used++;

the first time this line is executed is when i = 134459 -- that's the
first live object. that seems odd. when i get up around 137700, just
about every object is live.

and that is just for one arena. counting through the chain of
cur_arena->prev, it seems there are ten arenas. i'm in over my head
here--but it seems to me that both this chain of arenas and the size
of each is much bigger than i imagine it should be.
~jerry

