From beginners-return-92038-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri Jun  1 02:34:40 2007
Return-Path: <beginners-return-92038-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l516YahB005837
	for <ktwarwic@flax9.uwaterloo.ca>; Fri, 1 Jun 2007 02:34:37 -0400
Received: (qmail 24300 invoked by uid 514); 1 Jun 2007 06:34:24 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 24291 invoked from network); 1 Jun 2007 06:34:24 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 1 Jun 2007 06:34:24 -0000
Received: (qmail 24741 invoked by uid 225); 1 Jun 2007 06:34:23 -0000
Delivered-To: beginners@perl.org
Received: (qmail 24736 invoked by alias); 1 Jun 2007 06:34:23 -0000
X-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
Received: from chilli.pcug.org.au (HELO smtps.tip.net.au) (203.10.76.44)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 31 May 2007 23:34:05 -0700
Received: from www.tip.net.au (localhost [127.0.0.1])
	by smtps.tip.net.au (Postfix) with ESMTP id 49DF536806E;
	Fri,  1 Jun 2007 16:33:58 +1000 (EST)
Received: from 203.11.71.91
        (SquirrelMail authenticated user rcook)
        by www.tip.net.au with HTTP;
        Fri, 1 Jun 2007 16:33:58 +1000 (EST)
Message-ID: <42173.203.11.71.91.1180679638.squirrel@www.tip.net.au>
In-Reply-To: <465FAB1E.2010200@yahoo.com>
References: <465FA240.4060105@yahoo.com> <465FAB1E.2010200@yahoo.com>
Date: Fri, 1 Jun 2007 16:33:58 +1000 (EST)
Subject: Re: Effective date grab
From: rcook@pcug.org.au
To: "Mathew Snyder" <theillien@yahoo.com>
Cc: "Perl Beginners" <beginners@perl.org>
User-Agent: SquirrelMail/1.4.9a
MIME-Version: 1.0
Content-Type: text/plain;charset=iso-8859-1
Content-Transfer-Encoding: 8bit
X-Priority: 3 (Normal)
Importance: Normal

> Yes,  a month from the first to the last day.  This is how I'm doing it
> right
> now which seems to be a lot of code which should be able to be pruned:
> #Declare the variables we'll need
> my $count = 1;
> my $febDays;
> my @days;
> my %time;
> my %months31 = (
>         "01" => undef,
>         "03" => undef,
>         "05" => undef,
>         "07" => undef,
>         "08" => undef,
>         "10" => undef,
>         "12" => undef,
> );
> my %months30 = (
>         "04" => undef,
>         "06" => undef,
>         "09" => undef,
>         "11" => undef,
> );
> my %months = (
>         "01" => "Jan",
>         "02" => "Feb",
>         "03" => "Mar",
>         "04" => "Apr",
>         "05" => "May",
>         "06" => "Jun",
>         "07" => "Jul",
>         "08" => "Aug",
>         "09" => "Sept",
>         "10" => "Oct",
>         "11" => "Nov",
>         "12" => "Dec",
> );
>
> my @date; #  = (localtime)[4,5];
> my $month = (sprintf '%02d', (localtime)[4]); #$date[0]);
> my $year      = (localtime)[5] + 1900; #$date[1] + 1900;
>
> # If the value of the 'month' variable is '00' we are in January so need
> # to set the $month to 12 in order to get December's data.  Any other
> # value is spot on.  The reason being that  while (localtime) will produce
> # a value based  on a startpoint of '00', we are shifting this back one by
> # making '00' equal to '12' causing all other numbers to match up to their
> # respective month.
> if ($month == '00') {
>         $month = 12;
>         $year--;
> }
>
> # We need to determine if the current year is a leap year so we use the
> # right number of days for Feb.
> if (isleap($year)) {
>         $febDays = 29;
> }else{
>         $febDays = 28;
> }
>
>  Determine if the month requested has 31, 30 or 28 days and build
> # our days array to match
> if (exists($months31{$month})){
>         while ($count <= 31) {
>                 push @days, (sprintf '%02d', $count);
>                 $count++;
>         }
> }elsif (exists($months30{$month})){
>         while ($count <= 30) {
>                 push @days, (sprintf '%02d', $count);
>                 $count++;
>         }
> }else{
>         while ($count <= $febDays) {
>                 push @days, (sprintf '%02d', $count);
>                 $count++;
>         }
> }
>
> That's just a keister-load of code just to create an array of 28/29, 30 or
> 31 dates.

Yes.

You might want to think about this rather common snippet of code that pops
up from time to time

Assuming you input a month ( $mon ) like February as a 2, this may help
========================================================
    my @days_month = (31,28,31,30,31,30,31,31,30,31,30,31); # Number of
days in a month
    if ($mon == 2 && ((!($year%4)) && (($year%100) || (!($year%400))))){
           $days_month = 29;
    }
    else{
           $days_month = $days_month[$mon-1];
    }

=========================================================






-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


