From perl6-all-return-81401-ktwarwic=speedy.uwaterloo.ca@perl.org  Tue May 15 17:49:52 2007
Return-Path: <perl6-all-return-81401-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4FLnqqD010601
	for <ktwarwic@flax9.uwaterloo.ca>; Tue, 15 May 2007 17:49:52 -0400
Received: (qmail 18072 invoked by uid 514); 15 May 2007 21:49:48 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 18067 invoked from network); 15 May 2007 21:49:48 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: domain of dataweaver@gmail.com designates 64.233.184.224 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=RGc2lUSfuOyAVFCw89oqGyfPS5OHWqDQ3eYiswCzXOGKPgMyqU+4uz3FIE/WqNY1eaem58JlEspbpqekXSS1daoMWVH/gjH+za0UL2sKavqOkQhHktBJZXphRezsrUxqe9v6BUwjTPfYObIVJrZjdrwUd4o3ZNuJ3wl/Dg3wBbw=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=T+yPJ2cvtO9AsylhIHXyHCq5ymPkRWoIhG3P9eEqFeguk/03Xai2kdTQynHRj397MzM4axCQ4C24+CAzOmhBacDXHwnRRQv9jZ8OratYUIRK8HOFyGodhu3yt39XVcFDWJkx8hXC+6g72wUoEeA3nlvW3wy5Deo0GYZ8B6idu0U=
Message-ID: <ef30550b0705151448n21390519qf2dacc4bb61ef976@mail.gmail.com>
Date: Tue, 15 May 2007 14:48:03 -0700
From: "Jonathan Lang" <dataweaver@gmail.com>
To: perl6-language@perl.org
Subject: Re: explicit line termination with ";": why?
In-Reply-To: <20070515191306.GA23041@wall.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <20070514170459.17631.qmail@lists.develooper.com>
	 <ef30550b0705141429i23d3531lb25ed1f6193214b1@mail.gmail.com>
	 <20070514231705.GA22680@istic.org>
	 <ef30550b0705141713k36c7f70apdcc328e6bc0c4c8c@mail.gmail.com>
	 <20070515185742.7356.qmail@lists.develooper.com>
	 <20070515191306.GA23041@wall.org>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS

Larry Wall wrote:
> Dave Whipp wrote:
> : A slightly tangental thought: is the behavior of C<given> with no block
> : defined? I.e. is
>
> It would be illegal syntax currently.

As I understand it, the proposal is to say that if the parser finds a
';' where it was expecting to find a control block, it treats the rest
of the current block as the expected control block - or something to
that effect.  Eh... messy, and with no substantial gain.

> : given $foo { when 1 {...} };
> :
> : equivalent to
> :
> : given $foo;
> : when 1 {...};
>
> Both of these suggestions would seem to duplicate the existing construct:
>
>     $_ = $foo;
>
> :-)

Agreed.  But I think that postfix:<?> is rather clean:

    $foo?
    when 1 {...}

Two catches:

1. I could easily define postfix:<?> myself, save for one thing: what
would I put as the parameter for the 'is equiv' trait, so that it has
terminator precedence?

2. 'when' implicitly leaves its current block after successfully being
executed (as per 'last'), since it's designed primarily for use as one
of a set of mutually-exclusive options.  I'm not sure how wise of a
decision that is, since it's easier to add a "last" to a block that
implicitly lacks one than it is to remove a "last" from a block that
implicitly includes one.  Part of me would strongly prefer that "when
$x { ... }" be exactly equivalent to "if $_ ~~ $x { ... }", except for
the inability to append an else block to the former.

> Of course, now someone will argue that unary:<=> should assign to $_ by
> default, in which case we'd have to find a new iteration operator...

Horrors, no!  '=$filehandle' works just fine for reading an iterator,
thank you...

I _might_ flirt with the idea of postfix:<=> being equivalent to a
filehandle's '.say' method (i.e., writing to an iterator) - or not.
Given the mandatory whitespace that a postfix operator imposes on an
equivalent infix operator, I'd strongly suggest that good practice for
Perl 6 would be to avoid defining both forms if at all reasonable; and
infix:<=> definitely has the edge here.  (Rule of thumb: if you can
avoid doing something that will mandate or forbid whitespace, avoid
it.)

-- 
Jonathan "Dataweaver" Lang

