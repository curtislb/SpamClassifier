From r-help-bounces@stat.math.ethz.ch  Wed Apr 11 09:27:36 2007
Return-Path: <r-help-bounces@stat.math.ethz.ch>
Received: from hypatia.math.ethz.ch (hypatia.math.ethz.ch [129.132.145.15])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l3BDRT0I017136
	for <ktwarwic@speedy.uwaterloo.ca>; Wed, 11 Apr 2007 09:27:30 -0400
Received: from hypatia.math.ethz.ch (hypatia [129.132.145.15])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l3BDQ2cO015277;
	Wed, 11 Apr 2007 15:26:12 +0200
X-Spam-Checker-Version: SpamAssassin 3.1.8 (2007-02-13) on hypatia.math.ethz.ch
X-Spam-Level: 
X-Spam-Status: No, score=-0.9 required=5.0 tests=AWL, BAYES_50,
	FORGED_RCVD_HELO autolearn=no version=3.1.8
Received: from markov.stats.ox.ac.uk (markov.stats.ox.ac.uk [163.1.210.1])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l3BDHF4M011509
	for <r-help@stat.math.ethz.ch>; Wed, 11 Apr 2007 15:17:16 +0200
Received: from gannet.stats.ox.ac.uk (gannet.stats [163.1.211.17])
	by markov.stats.ox.ac.uk (8.13.6/8.13.6) with ESMTP id l3BDH4pV024645; 
	Wed, 11 Apr 2007 14:17:04 +0100 (BST)
Date: Wed, 11 Apr 2007 14:17:04 +0100 (BST)
From: Prof Brian Ripley <ripley@stats.ox.ac.uk>
To: yoooooo <magno_yu@ml.com>
In-Reply-To: <9937981.post@talk.nabble.com>
Message-ID: <Pine.LNX.4.64.0704111409400.13778@gannet.stats.ox.ac.uk>
References: <9929835.post@talk.nabble.com>
	<Pine.LNX.4.64.0704110636130.16622@gannet.stats.ox.ac.uk>
	<9937981.post@talk.nabble.com>
MIME-Version: 1.0
X-Virus-Scanned: by amavisd-new at stat.math.ethz.ch
Cc: r-help@stat.math.ethz.ch
Subject: Re: [R] Memory management
X-BeenThere: r-help@stat.math.ethz.ch
X-Mailman-Version: 2.1.9
Precedence: list
List-Id: "Main R Mailing List: Primary help" <r-help.stat.math.ethz.ch>
List-Unsubscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=unsubscribe>
List-Archive: <https://stat.ethz.ch/pipermail/r-help>
List-Post: <mailto:r-help@stat.math.ethz.ch>
List-Help: <mailto:r-help-request@stat.math.ethz.ch?subject=help>
List-Subscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: r-help-bounces@stat.math.ethz.ch
Errors-To: r-help-bounces@stat.math.ethz.ch
Status: O
Content-Length: 3119
Lines: 87

Start with the 'R Internals' manual.  R has 'call by value' semantics, but 
lazy copying (the idea is to make a copy only when an object is changed 
and there are still references to the original version, but that idea is 
partially implemented).

'which strategy is better at which situation' is difficult.  'S 
Programming' (see the FAQ) has a lot of accumulated wisdom that has 
largely been superseded by changes to S and R.  We keep making changes to 
reduce copying (another slew of changes is planned for 2.6.0), so this is 
something that is very hard to keep up with.

We can tell you that some things are likely to be bad, and 'S Programming' 
is a good place to find out about most of those.

On Wed, 11 Apr 2007, yoooooo wrote:

>
> I guess I have more reading to do.... Are there any website that I can read
> up on memory management, or specifically what happen when we 'pass in'
> variables, which strategy is better at which situation?
>
> Thanks~
> - yoooooooo
>
>
> Prof Brian Ripley wrote:
>>
>> On Tue, 10 Apr 2007, yoooooo wrote:
>>
>>>
>>> Hi all, I'm just curious how memory management works in R... I need to
>>> run an
>>> optimization that keeps calling the same function with a large set of
>>> parameters... so then I start to wonder if it's better if I attach the
>>> variables first vs passing them in (coz that involves a lot of copying..
>>> )
>>
>> Your paranethetical comment is wrong: no copying is needed to 'pass in' a
>> variable.
>>
>>> Thus, I do this
>>> fn3 <- function(x, y, z, a, b, c){ sum(x, y, z, a, b, c) }
>>> fn4 <- function(){ sum(x, y, z, a, b, c) }
>>>
>>> rdn <- rep(1.1, times=1e8)
>>> r <- proc.time()
>>> for (i in 1:5)
>>>  fn3(rdn, rdn, rdn, rdn, rdn, rdn)
>>> time1 <- proc.time() - r
>>> print(time1)
>>>
>>> lt <- list(x = rdn, y = rdn, z = rdn, a = rdn, b = rdn, c = rdn)
>>> attach(lt)
>>> r <- proc.time()
>>> for (i in 1:5)
>>>  fn4()
>>> time2 <- proc.time() - r
>>> print(time2)
>>> detach("lt")
>>>
>>> The output is
>>> [1] 25.691  0.003 25.735  0.000  0.000
>>> [1] 25.822  0.005 25.860  0.000  0.000
>>>
>>> Turns out attaching takes longer to run.. which is counter intuitive
>>> (unless
>>> the search to the pos=2 envir takes long time as well) Do you guys know
>>> why
>>> this is the case?
>>
>> I would not trust timing differences of that nature: they often depend on
>> the state of the system, and in particular of the garbage collector.
>> You should be using system.time() for that reason: it calls the garbage
>> collector immediately before timing.

-- 
Brian D. Ripley,                  ripley@stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595

______________________________________________
R-help@stat.math.ethz.ch mailing list
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.

