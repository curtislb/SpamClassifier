From perl6-all-return-81807-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon Jun  4 19:24:27 2007
Return-Path: <perl6-all-return-81807-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l54NOQhB001481
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 4 Jun 2007 19:24:26 -0400
Received: (qmail 3213 invoked by uid 514); 4 Jun 2007 23:24:20 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 3208 invoked from network); 4 Jun 2007 23:24:19 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: moderator for perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
Subject: [perl #43105] [PATCH] function mmd.c::mmd_expand_y: newly allocated memory unitialized 
From: "Bernhard Schmalhofer via RT" <parrotbug-followup@parrotcode.org>
Reply-To: parrotbug-followup@parrotcode.org
In-Reply-To: <rt-3.6.HEAD-1668-1180904200-1441.43105-15-0@perl.org>
References: <RT-Ticket-43105@perl.org> <200706011521.05438.chromatic@wgz.org> <1abd9eb20706011629l7915c3a3hef4f829bb70ead59@mail.gmail.com> <200706012111.28041.chromatic@wgz.org> <1abd9eb20706020300j59c25869td6dd9c9c71784cb5@mail.gmail.com> <rt-3.6.HEAD-1668-1180778511-309.43105-15-0@perl.org> <rt-3.6.HEAD-1668-1180882817-1024.43105-15-0@perl.org> <20070603205536.GK20876@plum.flirble.org> <rt-3.6.HEAD-1668-1180904200-1441.43105-15-0@perl.org>
Message-ID: <rt-3.6.HEAD-1668-1180980600-1487.43105-15-0@perl.org>
X-RT-Loop-Prevention: perl
RT-Ticket: perl #43105
Managed-by: RT 3.6.HEAD (http://www.bestpractical.com/rt/)
RT-Originator: Bernhard.Schmalhofer@gmx.de
Cc: perl6-internals@perl.org
To: "OtherRecipients of perl Ticket #43105": ;
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit
X-RT-Original-Encoding: utf-8
Date: Mon, 04 Jun 2007 11:10:01 -0700
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS


> > What happens when NULL is not a consective series of '\0' chars?
> 
> I think that it breaks.
> 
> > Are there such platforms and are they releavant for parrot?
> 
> I believe that this assumption is endemic in Perl 5, and it's never
> hindered
> Perl 5's portability. The C FAQ gives examples of platforms where NULL
> is not
> all bits zero - http://c-faq.com/null/machexamp.html - and I've never
> encountered anyone using them.

This answers the question. So I propose to apply Mehmet's patch and
add to pdd07 something like:

--- pdds/pdd07_codingstd.pod    (Revision 18803)
+++ pdds/pdd07_codingstd.pod    (Arbeitskopie)
@@ -62,6 +62,9 @@
 integral type (no smaller than typedef C<INTVAL> in Parrot), then back
to its
 original type, without loss.

+Also C code may assume that there is a single NULL pointer representation
+and that it consists of a number, usually 4 or 8, of '\0' chars in memory.
+
 C code that makes assumptions beyond these must depend on the configuration
 system, either to not compile an entire non-portable source where it
will not
 work, or to provide an appropriate #ifdef macro.


Regards,
  Bernhard
-- 
/* Bernhard.Schmalhofer <!-- x --> at gmx.de */

