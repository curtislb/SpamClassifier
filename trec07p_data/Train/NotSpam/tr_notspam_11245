From r-help-bounces@stat.math.ethz.ch  Thu May 17 05:57:28 2007
Return-Path: <r-help-bounces@stat.math.ethz.ch>
Received: from hypatia.math.ethz.ch (hypatia.math.ethz.ch [129.132.145.15])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l4H9vQqD030579
	for <ktwarwic@flax9.uwaterloo.ca>; Thu, 17 May 2007 05:57:27 -0400
Received: from hypatia.math.ethz.ch (hypatia [129.132.145.15])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l4H9ueFh015350;
	Thu, 17 May 2007 11:57:00 +0200
X-Spam-Checker-Version: SpamAssassin 3.1.8 (2007-02-13) on hypatia.math.ethz.ch
X-Spam-Level: 
X-Spam-Status: No, score=-0.8 required=5.0 tests=AWL,
	BAYES_50 autolearn=no version=3.1.8
Received: from relay3.mail.ox.ac.uk (relay3.mail.ox.ac.uk [163.1.2.165])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l4H9uUNj015273
	for <r-help@stat.math.ethz.ch>; Thu, 17 May 2007 11:56:30 +0200
Received: from smtp1.mail.ox.ac.uk ([129.67.1.207])
	by relay3.mail.ox.ac.uk with esmtp (Exim 4.62)
	(envelope-from <ramasamy@cancer.org.uk>)
	id 1Hocij-000831-C5; Thu, 17 May 2007 10:56:29 +0100
Received: from dhcp-132.wolf.ox.ac.uk ([163.1.180.132] helo=[127.0.0.1])
	by smtp1.mail.ox.ac.uk with esmtpsa (TLSv1:AES256-SHA:256)
	(Exim 4.63) (envelope-from <ramasamy@cancer.org.uk>)
	id 1Hocij-0004Si-5K; Thu, 17 May 2007 10:56:29 +0100
Message-ID: <464C26CB.1060609@cancer.org.uk>
Date: Thu, 17 May 2007 10:56:27 +0100
From: Adaikalavan Ramasamy <ramasamy@cancer.org.uk>
User-Agent: Thunderbird 1.5.0.10 (Windows/20070221)
MIME-Version: 1.0
To: "Inman, Brant A. M.D." <Inman.Brant@mayo.edu>
References: <6021CA6EF4C8374084D4F5A141F1CBBBC14C68@msgebe23.mfad.mfroot.org>
In-Reply-To: <6021CA6EF4C8374084D4F5A141F1CBBBC14C68@msgebe23.mfad.mfroot.org>
X-Oxford-Username: scro0777
X-Virus-Scanned: by amavisd-new at stat.math.ethz.ch
Cc: r-help@stat.math.ethz.ch
Subject: Re: [R] MICE for Cox model
X-BeenThere: r-help@stat.math.ethz.ch
X-Mailman-Version: 2.1.9
Precedence: list
List-Id: "Main R Mailing List: Primary help" <r-help.stat.math.ethz.ch>
List-Unsubscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=unsubscribe>
List-Archive: <https://stat.ethz.ch/pipermail/r-help>
List-Post: <mailto:r-help@stat.math.ethz.ch>
List-Help: <mailto:r-help-request@stat.math.ethz.ch?subject=help>
List-Subscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: r-help-bounces@stat.math.ethz.ch
Errors-To: r-help-bounces@stat.math.ethz.ch

I encountered this problem about 18 months ago. I contacted Prof. Fox 
and Dr. Malewski (the R package maintainers for mice) but they referred 
me to Prof. van Buuren. I wrote to Prof. van Buuren but am unable to 
find his reply (if he did reply).

Here are the functions I used at that time, if you want to take it with 
lots of salt. Let me know if you find anything fishy with it.


coxph.mids <- function (formula, data, ...) {

   call <- match.call()
   if (!is.mids(data)) stop("The data must have class mids")

   analyses <- as.list(1:data$m)

   for (i in 1:data$m) {
     data.i        <- complete(data, i)
     analyses[[i]] <- coxph(formula, data = data.i, ...)
   }

   object <- list(call = call, call1 = data$call,
                  nmis = data$nmis, analyses = analyses)

   oldClass(object) <- if (.SV4.) "mira" else c("mira", "coxph")
   return(object)
}


And in the function 'pool', the small sample adjustment requires 
residual degrees of freedom (i.e. dfc). For a cox model, I believe that 
this is simply the number of events minus the regression coefficients. 
There is support for this from middle of page 149 of the book by Parmer 
& Machin (ISBN 0471936405). Please correct me if I am wrong.

Here is the slightly modified version of pool :


pool <- function (object, method = "smallsample") {

   call <- match.call()
   if (!is.mira(object)) stop("The object must have class 'mira'")

   if ((m <- length(object$analyses)) < 2)
     stop("At least two imputations are needed for pooling.\n")

   analyses <- object$analyses

   k     <- length(coef(analyses[[1]]))
   names <- names(coef(analyses[[1]]))
   qhat  <- matrix(NA, nrow = m, ncol = k, dimnames = list(1:m, names))
   u     <- array(NA, dim = c(m, k, k),
                  dimnames = list(1:m, names, names))

   for (i in 1:m) {
     fit       <- analyses[[i]]
     qhat[i, ] <- coef(fit)
     u[i, , ]  <- vcov(fit)
   }

   qbar <- apply(qhat, 2, mean)
   ubar <- apply(u, c(2, 3), mean)
   e <- qhat - matrix(qbar, nrow = m, ncol = k, byrow = TRUE)
   b <- (t(e) %*% e)/(m - 1)
   t <- ubar + (1 + 1/m) * b
   r <- (1 + 1/m) * diag(b/ubar)
   f <- (1 + 1/m) * diag(b/t)
   df <- (m - 1) * (1 + 1/r)2

   if (method == "smallsample") {

     if( any( class(fit) == "coxph" ) ){

       ### this loop is the hack for survival analysis ###

       status   <- fit$y[ , 2]
       n.events <- sum(status == max(status))
       p        <- length( coefficients( fit )  )
       dfc      <- n.events - p

     } else {

       dfc <- fit$df.residual
     }

     df <- dfc/((1 - (f/(m + 1)))/(1 - f) + dfc/df)
   }

   names(r) <- names(df) <- names(f) <- names
   fit <- list(call = call, call1 = object$call, call2 = object$call1,
               nmis = object$nmis, m = m, qhat = qhat, u = u,
               qbar = qbar, ubar = ubar, b = b, t = t, r = r, df = df,
               f = f)
   oldClass(fit) <- if (.SV4.) "mipo" else c("mipo", oldClass(object))
   return(fit)
}


print.miro only gives the coefficients. Often I need the standard errors
as well since I want to test if each regression coefficient from
multiple imputation is zero or not. Since the function summary.mipo does
not exist, can I suggest the following


summary.mipo <- function(object){

    if (!is.null(object$call1)){
      cat("Call: ")
      dput(object$call1)
    }

    est  <- object$qbar
    se   <- sqrt(diag(object$t))
    tval <- est/se
    df   <- object$df
    pval <- 2 * pt(abs(tval), df, lower.tail = FALSE)

    coefmat <- cbind(est, se, tval, pval)
    colnames(coefmat) <- c("Estimate", "Std. Error",
                                         "t value", "Pr(>|t|)")

    cat("\nCoefficients:\n")
    printCoefmat( coefmat, P.values=T, has.Pvalue=T, signif.legend=T )

    cat("\nFraction of information about the coefficients
                                    missing due to nonresponse:", "\n")
    print(object$f)

    ans <- list( coefficients=coefmat, df=df,
                 call=object$call1, fracinfo.miss=object$f )
    invisible( ans )

}


Hope this helps.

Regards, Adai



Inman, Brant A. M.D. wrote:
> R-helpers:
> 
> I have a dataset that has 168 subjects and 12 variables.  Some of the
> variables have missing data and I want to use the multiple imputation
> capabilities of the "mice" package to address the missing data. Given
> that mice only supports linear models and generalized linear models (via
> the lm.mids and glm.mids functions) and that I need to fit Cox models, I
> followed the previous suggestion of John Fox and have created my own
> function "cox.mids" to use coxph to fit models to the imputed datasets.
> 
> (http://tolstoy.newcastle.edu.au/R/help/06/03/22295.html)
> 
> The function I created is:
> 
> ------------
> 
> cox.mids <- function (formula, data, ...)
> {
>     call <- match.call()
>     if (!is.mids(data)) 
>         stop("The data must have class mids")
>     analyses <- as.list(1:data$m)
>     for (i in 1:data$m) {
>         data.i <- complete(data, i)
>         analyses[[i]] <- coxph(formula, data = data.i, ...)
>     }
>     object <- list(call = call, call1 = data$call, nmis = data$nmis, 
>         analyses = analyses)
>     oldClass(object) <- c("mira", "coxph")
>     return(object)
> }
> 
> ------------
> 
> The problem that I encounter occurs when I try to use the "pool"
> function to pool the fitted models into one general model. Here is some
> code that reproduces the error using the pbc dataset.
> 
> ------------
> 
> d <- pbc[,c('time','status','age','sex','hepmeg','platelet', 'trt',
> 'trig')]
> d[d==-9] <- NA 
> d[,c(4,5,7)] <- lapply(d[,c(4,5,7)], FUN=as.factor)
> str(d)
> 
> imp <- mice(d, m=10, maxit=10, diagnostics=T, seed=500, 
> 	defaultImputationMethod=c('norm', 'logreg', 'polyreg'))
> 
> fit <- cox.mids(Surv(time,status) ~ age + sex + hepmeg + platelet + trt
> + 	trig, imp)
> 
> pool(fit)
> 
> ------------
> 
> I have looked at the "pool" function but cannot figure out what I have
> done wrong.  Would really appreciate any help with this.
> 
> Thanks,
> 
> Brant Inman
> Mayo Clinic
> 
> ______________________________________________
> R-help@stat.math.ethz.ch mailing list
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
> 
> 
>

______________________________________________
R-help@stat.math.ethz.ch mailing list
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.

