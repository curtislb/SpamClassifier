From perl6-all-return-80785-ktwarwic=speedy.uwaterloo.ca@perl.org  Sun Apr 22 17:15:49 2007
Return-Path: <perl6-all-return-80785-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3MLFm0I024148
	for <ktwarwic@speedy.uwaterloo.ca>; Sun, 22 Apr 2007 17:15:48 -0400
Received: (qmail 31533 invoked by uid 514); 22 Apr 2007 21:15:19 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 31507 invoked from network); 22 Apr 2007 21:15:18 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.5 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME,FORGED_RCVD_HELO
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: domain of chromatic@wgz.org designates 63.105.17.39 as permitted sender)
From: chromatic <chromatic@wgz.org>
Organization: Snafu
To: perl6-internals@perl.org
Subject: Re: I Don't Understand The Context Allocation/Destruction Code
Date: Sun, 22 Apr 2007 14:14:34 -0700
User-Agent: KMail/1.9.5
Cc: Uri Guttman <uri@stemsystems.com>, Joerg Plate <plate@patterner.de>,
   parrot-porters@perl.org
References: <200704211824.18554.chromatic@wgz.org> <87slat2bsl.fsf@psyche.kn-bremen.de> <x7wt04jewc.fsf@mail.sysarch.com>
In-Reply-To: <x7wt04jewc.fsf@mail.sysarch.com>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200704221414.34761.chromatic@wgz.org>
X-Virus-Scanned: by amavisd-new at wgz.org
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.5 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME,FORGED_RCVD_HELO,SPF_PASS
Status: O
Content-Length: 923
Lines: 25

On Sunday 22 April 2007 14:08, Uri Guttman wrote:

> >>>>> "JP" == Joerg Plate <plate@patterner.de> writes:
>   >>
>   >> const int slot = (reg_alloc + 7) >> 3; reg_alloc = slot << 3;
>   >>
>   >> This is where I start not to understand.  Why reg_alloc + 7? Why
>   >> shift left and right by 3?
>
>   JP> That's just a rounding up (if necessary) to a multiple of 8 (2<<3).
>
> and those sort of things should be macros as they are confusing
> otherwise and annoying to change. and named something like
> ROUND_UP_TO_BOUNDARY. as others have said it is a common idiom. and i
> agree that there should be comments on WHY the rounding is used/needed.

I figured it was a rounding, but I saw two magic numbers and didn't want to 
guess what it was.

Any volunteers to macroize this?

Also, is anyone *sure* that this boundary is effective on both 32- and 64-bit 
platforms?  I hate to make assumptions about alignment.

-- c

