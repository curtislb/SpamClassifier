From sugar-bounces@laptop.org  Tue Apr 24 07:05:03 2007
Return-Path: <sugar-bounces@laptop.org>
Received: from pedal.laptop.org (pedal.laptop.org [18.85.2.148])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l3OB516w013134
	for <ktwarwic@speedy.uwaterloo.ca>; Tue, 24 Apr 2007 07:05:02 -0400
Received: from pedal.laptop.org (localhost [127.0.0.1])
	by pedal.laptop.org (Postfix) with ESMTP id EBBED4F904;
	Tue, 24 Apr 2007 07:04:20 -0400 (EDT)
X-Original-To: sugar@laptop.org
Delivered-To: sugar@laptop.org
Received: from spam.laptop.org (spam.laptop.org [18.85.46.23])
	by pedal.laptop.org (Postfix) with ESMTP id 999644F904
	for <sugar@laptop.org>; Tue, 24 Apr 2007 07:04:19 -0400 (EDT)
X-ASG-Debug-ID: 1177412694-2f7600090000-3Xmyjt
X-Barracuda-URL: http://18.85.46.23:8000/cgi-bin/mark.cgi
X-Barracuda-Connect: www.WarpOMatic.com[66.98.182.86]
X-Barracuda-Start-Time: 1177412694
X-Barracuda-Encrypted: DHE-RSA-AES256-SHA
Received: from WarpOMatic.com (www.WarpOMatic.com [66.98.182.86])
	(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by spam.laptop.org (Spam Firewall) with ESMTP
	id ABC8048A3; Tue, 24 Apr 2007 07:04:54 -0400 (EDT)
Received: from [192.168.1.104] (h-67-101-42-128.snfccasy.dynamic.covad.net
	[67.101.42.128]) (authenticated bits=0)
	by WarpOMatic.com (8.12.10/8.12.10) with ESMTP id l3OB1C8u032619;
	Tue, 24 Apr 2007 04:01:14 -0700
Message-ID: <462DE44D.1060304@DonHopkins.com>
Date: Tue, 24 Apr 2007 04:04:45 -0700
From: Don Hopkins <dhopkins@DonHopkins.com>
User-Agent: Thunderbird 1.5.0.10 (Windows/20070221)
MIME-Version: 1.0
To: Dan Williams <dcbw@redhat.com>
X-ASG-Orig-Subj: Efficient general purpose tile engine,
	and a cellular automata machine
References: <461F508F.8000406@rpi.edu> <46216D8A.4000103@DonHopkins.com>	
	<1176615055.864.14.camel@localhost.localdomain>	
	<87fy70tdn9.wl%cworth@cworth.org>	
	<1176753788.29852.17.camel@localhost.localdomain>	
	<46240DD6.1070600@DonHopkins.com> <87647vtynk.wl%cworth@cworth.org>
	<1176818012.26202.10.camel@localhost.localdomain>
In-Reply-To: <1176818012.26202.10.camel@localhost.localdomain>
X-ImpeachBushNow-Information: Please contact postmaster@WarpOMatic.com for
	more information
X-ImpeachBushNow: Found to be clean
X-Barracuda-Bayes: INNOCENT GLOBAL 0.0000 1.0000 -2.0210
X-Barracuda-Virus-Scanned: by Barracuda Spam Firewall at laptop.org
X-Barracuda-Spam-Score: -1.08
X-Barracuda-Spam-Status: No, SCORE=-1.08 using global scores of TAG_LEVEL=3.5
	QUARANTINE_LEVEL=1000.0 KILL_LEVEL=5.5 tests=HTML_10_20,
	HTML_MESSAGE
X-Barracuda-Spam-Report: Code version 3.1, rules version 3.1.15119
	Rule breakdown below
	pts rule name              description
	---- ----------------------
	--------------------------------------------------
	0.00 HTML_MESSAGE           BODY: HTML included in message
	0.94 HTML_10_20             BODY: Message is 10% to 20% HTML
Cc: Games for the OLPC <games@laptop.org>,
   "OLPC Developer's List" <devel@laptop.org>,
   "'Sugar List'" <sugar@laptop.org>, Carl Worth <cworth@redhat.com>
Subject: [sugar] Efficient general purpose tile engine,
	and a cellular automata machine
X-BeenThere: sugar@laptop.org
X-Mailman-Version: 2.1.9
Precedence: list
List-Id: "Discussion of OLPC design,
	desktop platform and user experience" <sugar.laptop.org>
List-Unsubscribe: <http://mailman.laptop.org/mailman/listinfo/sugar>,
	<mailto:sugar-request@laptop.org?subject=unsubscribe>
List-Archive: <http://mailman.laptop.org/pipermail/sugar>
List-Post: <mailto:sugar@laptop.org>
List-Help: <mailto:sugar-request@laptop.org?subject=help>
List-Subscribe: <http://mailman.laptop.org/mailman/listinfo/sugar>,
	<mailto:sugar-request@laptop.org?subject=subscribe>
Content-Type: multipart/mixed; boundary="===============7473875999642646956=="
Mime-version: 1.0
Sender: sugar-bounces@laptop.org
Errors-To: sugar-bounces@laptop.org
Status: O
Content-Length: 19353
Lines: 415

This is a multi-part message in MIME format.
--===============7473875999642646956==
Content-Type: multipart/alternative;
 boundary="------------050608090201040608060404"

This is a multi-part message in MIME format.
--------------050608090201040608060404
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit

I'm developing a general purpose tile engine that can be used for 
cellular automata, and other tile based games, including all of 
SimCity's needs: the close-up map editor that's fully zoomable to any 
scale, with cursor and sprite overlays, and the overall map view, with 
transparent overlays to show stuff like population density, traffic, etc.

Thanks to all the helpful advice I've received, I've re-written my tile 
engine to use "nativeTarget = ctx.get_target()" to get the native 565 
xlib surface from the cairo context associated with the gtk widget, and 
then use "tilesSurface = 
nativeTarget.create_similar(cairo.CONTEXT_COLOR, tilesWidth, 
tilesHeight)" to create a 565 xlib surface for the tiles in the server. 
The I copied the tiles there to convert them from 888 to 565. So then it 
can copy them quickly onto the screen or an offscreen 565 xlib surface, 
where I can draw on top of them efficiently with Cairo, to implement 
efficient offscreen composition and overlays!

The tile engine is designed to provide an efficient 565 critical path to 
the screen, support scaling the tiles to any integral number of pixels, 
and it has a fast path for unscaled tiles. If the scale is 1:1, it just 
copies the entire tile collection into an xlib 565 surface in the 
server, to convert them all at once up front. If the scale is not 1:1, 
then it creates a temporary 888 single tile sized surface to clip out 
each tile, then clips and copies it into the 565 tile surface (a single 
surface that contains all tiles) in the server. That way the tiles are 
cleanly sliced apart so there is no possibility of bleeding between 
adjacent tiles when they're scaled (and resampled). [Maybe I'm just 
being paranoid. If it turns out there is no bleeding problem then I can 
simplify the code. But I'm afraid that if you just scale and resample 
all the tiles together they might bleed into each other along the edges.]

The tile engine also supports an alternative efficient pixel based 
renderer for single pixel sized tiles (which uses a surface as a color 
map, like the tile map but each tile is 1x1). The API is a bit different 
because instead of passing in a cairo context to draw with, you pass in 
a 24 bit image surface that it draws into, which you can then draw onto 
the screen yourself by scaling and clipping it however necessary. (Of 
course that does require Cairo or the X server to resample it, but at 
least it minimizes the size of the image it has to convert.) It could 
easily support 32 bit rgba images, too, so colormaps could contain 
transparency to produce translucent overlays with opaque bands (to make 
iso contour maps for population density and other overlays).

Since the colormaps and tiles are cairo surfaces, it's easy to process 
and render dynamic colormaps and tiles!

Question: How to I tell Cairo to use FILTER_FAST instead of FILTER_BEST? 
The set_filter method is supported by the cairo pattern object, but not 
the surface or the context. How to I wrangle a surface into a pattern, 
or use a pattern instead of a surface, or whatever I have to do to 
switch to fast nearest neighbor interpolation mode when scaling a surface?

It supports both pixels based color maps as well as bigger tile sets, 
because I want to be able to zoom into any scale, and have it still look 
nice and run fast. That way you can supply an "iconified" pixel based 
color map for use at small scales, as well a nice looking tiles that 
will be used at closer zooms. The higher level Python part of the tile 
engine lets you specify a minimum and maximum scale between which to 
cross-fade between the tiles and the pixels, so you can have your cake 
and eat it too. When you're zoomed way out, you see the pixels scaled to 
the exact zoom, softly interpolated with smooth solid colors. As you 
zoom in and it gets big enough to use the tiles, they fade in underneath 
the pixels with more detail, with the pixel colors overlayed 
transparently on top of the tiles. It looks really cool with the smooth 
interpolation, like the detailed tiles have colored LEDs that light up 
the cell area.

I made a demo application that uses my cellular automata machine engine 
(currently it runs the von Neumann 29 state cellular automata, but it 
supports lots of other rules). The initial configuration is an 
"autoinitializing exclusive or gate" which I like because it has lots of 
pretty blinking lights. I've started writing a 
panning/zooming/cursor/tile/editing user interface.

I've put up a tar file with the latest code drop:

http://www.DonHopkins.com/home/cam.tgz

The way to build and run it is:

Untar the "cam" directory into your "sugar-jhbuild/source" directory.
Go into the directory "sugar-jhbuild/source/cam".
Edit the file autogen-sugar.sh to contain the absolute path to your 
sugar-jhbuild directory.
Run the script "./autogen-sugar.sh" to configure the project.
Build and install the project with "make install".
Go into the directory "sugar-jhbuild/source/cam/cam/test".
Run the script "python test.py".
A small window will open up.
Click in the window to set the input focus.
Press the left mouse button and drag to pan the cells.
Press "i" to zoom in, "o" to zoom out, and "r" to reset the zoom.
Once you zoom out with "o" a few notches you will see the pixel overlay 
fading in, and after enough zooming out it will be solid scaled pixels.
You can zoom into the tiles with "i". There is no limit on the zoom but 
the X server will barf after a while if you keep zooming.
Press the "d" key to toggle debug inset mode, which insets the view by a 
bit and draws a red rectangle where the clip of the view would be, so 
you can see how it optimizes the cells it draws.
It only draws exactly the cells it needs, into an offscreen buffer, then 
composes the outside background and the cursor on top of that in another 
buffer, then copies that to the screen.

Here are some pictures at various zooms, showing the cross fading and 
the debug inset mode:

http://www.DonHopkins.com/home/cam-1.png
http://www.DonHopkins.com/home/cam-2.png
http://www.DonHopkins.com/home/cam-3.png
http://www.DonHopkins.com/home/cam-4.png
http://www.DonHopkins.com/home/cam-5.png

    -Don

Thanks a lot for all the advice, which I have tried to follow!

> Right.  Make sure the whole critical path is 16-bit 565.
>   

>> Drawing a single rectangle, (if pixel aligned---that is, just using
>> integer coordinates and an identity transformation), has lots of
>> fast-path treatment in cairo, so please take advantage of it. You can
>> do that with either:
>>
>> 	cairo_rectangle
>> 	cairo_clip
>>
>> to setup the clipping and then cairo_paint to do the painting, or
>> just:
>>
>> 	cairo_rectangle
>> 	cairo_fill
>>
>> to draw the part you want. Either way you should be hitting the same
>> path in cairo to ask the X server to do very efficient things.
>>
>>     
>> OK, so that's giving you image surfaces, and that's causing the slow
>> conversion when drawing to X. So the best would be to do that just
>> once, (get your data uploaded into an xlib surface, and then draw from
>> there).
>>     
>
> Correct; about the only thing you can do here is use create_similar() on
> the xlib _window_ surface, draw your 24bpp image surface to that, and
> cache the 565 xlib surface for all further drawing.  Note that you will
> _not_ get alpha because the surface is 565.
>
>   

>> For a cairo context you can call cairo_get_target, (probably
>> context.get_target in python), to get the surface it's targeting. So
>> that should give you the surface you need from which you can call
>> create_similar. And for the case of a gdk drawable you can call
>> gdk_cairo_create, and then cairo_get_target. (I do think it's a little
>> annoying that GTK+ doesn't have a direct way to create a cairo surface
>> from a GDK drawable, but the gdk_cairo_create;cairo_get_target
>> approach works fine---even if its not quite obvious).
>>     

> Again, ensure that _any_ surfaces you use in your critical paths are
> 565.  If anything is not 565, you'll be subject to Xlib having to smash
> an 888 pixmap down to 565, and that's not very fast, even with MMX.
>   

>> Anyway, I hope that all works out well for you. And I'm looking
>> forward to hearing what kinds of performance improvements you get from
>> using cairo xlib surfaces of the desired depth.
>>
>> -Carl
>>     


--------------050608090201040608060404
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit

<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta content="text/html;charset=ISO-8859-1" http-equiv="Content-Type">
  <title></title>
</head>
<body bgcolor="#ffffff" text="#000000">
I'm developing a general purpose tile engine that can be used for
cellular automata, and other tile based games, including all of
SimCity's needs: the close-up
map editor that's fully zoomable to any scale, with cursor and sprite
overlays, and the overall map view, with transparent
overlays to show stuff like population density, traffic, etc. <br>
<br>
Thanks to all the helpful advice I've received, I've re-written my tile
engine to use "nativeTarget = ctx.get_target()" to get the native 565
xlib surface from the cairo context associated with the gtk widget, and
then use "tilesSurface =
nativeTarget.create_similar(cairo.CONTEXT_COLOR, tilesWidth,
tilesHeight)" to create a 565 xlib surface for the tiles in the server.
The I copied the tiles there to convert them from 888 to 565. So then
it can copy them quickly onto the screen or an offscreen 565 xlib
surface, where I can draw on top of them efficiently with Cairo, to
implement efficient offscreen composition and overlays! <br>
<br>
The tile engine is designed to provide an efficient 565 critical path
to the screen, support scaling the tiles to any integral number of
pixels, and it has a fast path for unscaled tiles. If the scale is 1:1,
it just copies the entire tile collection into an xlib 565 surface in
the server, to convert them all at once up front. If the scale is not
1:1, then it creates a temporary 888 single tile sized surface to clip
out each tile, then clips and copies it into the 565 tile surface (a
single surface that contains all tiles) in the server. That way the
tiles are cleanly sliced apart so there is no possibility of bleeding
between adjacent tiles when they're scaled (and resampled). [Maybe I'm
just being paranoid. If it turns out there is no bleeding problem then
I can simplify the code. But I'm afraid that if you just scale and
resample all the tiles together they might bleed into each other along
the edges.] <br>
<br>
The tile engine also supports an alternative efficient pixel based
renderer for single pixel sized tiles (which uses a surface as a color
map, like the tile map but each tile is 1x1). The API is a bit
different because instead of passing in a cairo context to draw with,
you pass in a 24 bit image surface that it draws into, which you can
then draw onto the screen yourself by scaling and clipping it however
necessary. (Of course that does require Cairo or the X server to
resample it, but at least it minimizes the size of the image it has to
convert.) It could easily support 32 bit rgba images, too, so colormaps
could contain transparency to produce translucent overlays with opaque
bands (to make iso contour maps for population density and other
overlays). <br>
<br>
Since the colormaps and tiles are cairo surfaces, it's easy to process
and render dynamic colormaps and tiles! <br>
<br>
Question: How to I tell Cairo to use FILTER_FAST instead of
FILTER_BEST? The set_filter method is supported by the cairo pattern
object, but not the surface or the context. How to I wrangle a surface
into a pattern, or use a pattern instead of a surface, or whatever I
have to do to switch to fast nearest neighbor interpolation mode when
scaling a surface? <br>
<br>
It supports both pixels based color maps as well as bigger tile sets,
because I want to be able to zoom into any scale, and have it still
look nice and run fast. That way you can supply an "iconified" pixel
based color map for use at small scales, as well a nice looking tiles
that will be used at closer zooms. The higher level Python part of the
tile engine lets you specify a minimum and maximum scale between which
to cross-fade between the tiles and the pixels, so you can have your
cake and eat it too. When you're zoomed way out, you see the pixels
scaled to the exact zoom, softly interpolated with smooth solid colors.
As you zoom in and it gets big enough to use the tiles, they fade in
underneath the pixels with more detail, with the pixel colors overlayed
transparently on top of the tiles. It looks really cool with the smooth
interpolation, like the detailed tiles have colored LEDs that light up
the cell area. <br>
<br>
I made a demo application that uses my cellular automata machine engine
(currently it runs the von Neumann 29 state cellular automata, but it
supports lots of other rules). The initial configuration is an
"autoinitializing exclusive or gate" which I like because it has lots
of pretty blinking lights. I've started writing a
panning/zooming/cursor/tile/editing user interface. <br>
<br>
I've put up a tar file with the latest code drop:<br>
<br>
<a class="moz-txt-link-freetext" href="http://www.DonHopkins.com/home/cam.tgz">http://www.DonHopkins.com/home/cam.tgz</a><br>
<br>
The way to build and run it is:<br>
<br>
Untar the "cam" directory into your "sugar-jhbuild/source" directory. <br>
Go into the directory "sugar-jhbuild/source/cam". <br>
Edit the file autogen-sugar.sh to contain the absolute path to your
sugar-jhbuild directory. <br>
Run the script "./autogen-sugar.sh" to configure the project. <br>
Build and install the project with "make install".<br>
Go into the directory "sugar-jhbuild/source/cam/cam/test". <br>
Run the script "python test.py". <br>
A small window will open up.<br>
Click in the window to set the input focus. <br>
Press the left mouse button and drag to pan the cells. <br>
Press "i" to zoom in, "o" to zoom out, and "r" to reset the zoom. <br>
Once you zoom out with "o" a few notches you will see the pixel overlay
fading in, and after enough zooming out it will be solid scaled pixels.
<br>
You can zoom into the tiles with "i". There is no limit on the zoom but
the X server will barf after a while if you keep zooming. <br>
Press the "d" key to toggle debug inset mode, which insets the view by
a bit and draws a red rectangle where the clip of the view would be, so
you can see how it optimizes the cells it draws. <br>
It only draws exactly the cells it needs, into an offscreen buffer,
then composes the outside background and the cursor on top of that in
another buffer, then copies that to the screen. <br>
<br>
Here are some pictures at various zooms, showing the cross fading and
the debug inset mode:<br>
<br>
<a class="moz-txt-link-freetext" href="http://www.DonHopkins.com/home/cam-1.png">http://www.DonHopkins.com/home/cam-1.png</a><br>
<a class="moz-txt-link-freetext" href="http://www.DonHopkins.com/home/cam-2.png">http://www.DonHopkins.com/home/cam-2.png</a><br>
<a class="moz-txt-link-freetext" href="http://www.DonHopkins.com/home/cam-3.png">http://www.DonHopkins.com/home/cam-3.png</a><br>
<a class="moz-txt-link-freetext" href="http://www.DonHopkins.com/home/cam-4.png">http://www.DonHopkins.com/home/cam-4.png</a><br>
<a class="moz-txt-link-freetext" href="http://www.DonHopkins.com/home/cam-5.png">http://www.DonHopkins.com/home/cam-5.png</a><br>
<br>
&nbsp;&nbsp;&nbsp; -Don<br>
<br>
Thanks a lot for all the advice, which I have tried to follow!<br>
<br>
<blockquote cite="mid1176818012.26202.10.camel@localhost.localdomain"
 type="cite">
  <pre wrap="">Right.  Make sure the whole critical path is 16-bit 565.
  </pre>
</blockquote>
<br>
<blockquote cite="mid1176818012.26202.10.camel@localhost.localdomain"
 type="cite">
  <blockquote type="cite">
    <pre wrap="">Drawing a single rectangle, (if pixel aligned---that is, just using
integer coordinates and an identity transformation), has lots of
fast-path treatment in cairo, so please take advantage of it. You can
do that with either:

	cairo_rectangle
	cairo_clip

to setup the clipping and then cairo_paint to do the painting, or
just:

	cairo_rectangle
	cairo_fill

to draw the part you want. Either way you should be hitting the same
path in cairo to ask the X server to do very efficient things.

    </pre>
  </blockquote>
</blockquote>
<blockquote cite="mid1176818012.26202.10.camel@localhost.localdomain"
 type="cite">
  <blockquote type="cite">
    <pre wrap="">OK, so that's giving you image surfaces, and that's causing the slow
conversion when drawing to X. So the best would be to do that just
once, (get your data uploaded into an xlib surface, and then draw from
there).
    </pre>
  </blockquote>
  <pre wrap=""><!---->
Correct; about the only thing you can do here is use create_similar() on
the xlib _window_ surface, draw your 24bpp image surface to that, and
cache the 565 xlib surface for all further drawing.  Note that you will
_not_ get alpha because the surface is 565.

  </pre>
</blockquote>
<br>
<blockquote cite="mid1176818012.26202.10.camel@localhost.localdomain"
 type="cite">
  <blockquote type="cite">
    <pre wrap="">For a cairo context you can call cairo_get_target, (probably
context.get_target in python), to get the surface it's targeting. So
that should give you the surface you need from which you can call
create_similar. And for the case of a gdk drawable you can call
gdk_cairo_create, and then cairo_get_target. (I do think it's a little
annoying that GTK+ doesn't have a direct way to create a cairo surface
from a GDK drawable, but the gdk_cairo_create;cairo_get_target
approach works fine---even if its not quite obvious).
    </pre>
  </blockquote>
  <pre wrap=""><!----></pre>
</blockquote>
<br>
<blockquote cite="mid1176818012.26202.10.camel@localhost.localdomain"
 type="cite">
  <pre wrap="">Again, ensure that _any_ surfaces you use in your critical paths are
565.  If anything is not 565, you'll be subject to Xlib having to smash
an 888 pixmap down to 565, and that's not very fast, even with MMX.
  </pre>
</blockquote>
<br>
<blockquote cite="mid1176818012.26202.10.camel@localhost.localdomain"
 type="cite">
  <blockquote type="cite">
    <pre wrap="">Anyway, I hope that all works out well for you. And I'm looking
forward to hearing what kinds of performance improvements you get from
using cairo xlib surfaces of the desired depth.

-Carl
    </pre>
  </blockquote>
</blockquote>
<br>
</body>
</html>

--------------050608090201040608060404--

--===============7473875999642646956==
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

_______________________________________________
Sugar mailing list
Sugar@laptop.org
http://mailman.laptop.org/mailman/listinfo/sugar

--===============7473875999642646956==--

