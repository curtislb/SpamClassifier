From perl6-all-return-82006-ktwarwic=speedy.uwaterloo.ca@perl.org  Sat Jun 16 11:23:32 2007
Return-Path: <perl6-all-return-82006-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5GFNWL9016902
	for <ktwarwic@flax9.uwaterloo.ca>; Sat, 16 Jun 2007 11:23:32 -0400
Received: (qmail 10146 invoked by uid 514); 16 Jun 2007 15:23:29 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 10135 invoked from network); 16 Jun 2007 15:23:29 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: neutral (x1.develooper.com: 63.251.223.186 is neither permitted nor denied by domain of brian.d.foy@gmail.com)
To: perl6-language@perl.org
Subject: Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn
Date: Sat, 16 Jun 2007 08:23:04 -0700
From: brian d foy <brian.d.foy@gmail.com>
Message-ID: <160620070823046479%brian.d.foy@gmail.com>
References: <20070613205525.7ECA0CB9B8@x12.develooper.com> <ef30550b0706131429o34838a6es6704e8ec73851b49@mail.gmail.com> <467073C4.6020708@conway.org> <ef30550b0706140749w6c6290e9qc164901b578a8d5b@mail.gmail.com> <832f158a0706141722o5f68cf09l724d4f4520ee146@mail.gmail.com> <150620070756055824%brian.d.foy@gmail.com> <4673C546.5060806@conway.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-transfer-encoding: 8bit
User-Agent: Thoth/1.7.2 (Carbon/OS X)
X-Posted-By: 75.211.227.38
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.7 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL

In article <4673C546.5060806@conway.org>, Damian Conway
<damian@conway.org> wrote:

[ First, I should note that whatever we end up with, that's the party
line and that's what I teach, but before we end up there, I know from
my years of experience teaching that certain sorts of questions are
going to come up. I'm looking at this from the perspective of the
student sitting in a class, not from the implementors perspective. ]


> brian wrote:
> 
>  > As you know, one of the biggest complaints about Perl is that you have
>  > to have a lot of special rules knowledge to figure some things out.
>  > Whether that is true doesn't really matter: people still complain about
>  > it.
>  >
>  > In this case, it will actually be true.
> 
> I don't think that's the case.

I'm speaking at the programmer level, not the implementor level. For the
guy in the trenches, this is a special case. This is more complexity
for the guy typing code, even if it's easier syntactically for the guy
writing the parser.


>  > This impacts Learning Perl 6 rather early because it's a rule that
>  > people need to know at the same time that we tell them that whitespace
>  > is insignificant.
> 
> I'm pretty sure "Learning Perl 6" won't say that.

Well, it won't say that if it's not true, but until pretty recently
it's been mostly true.

> The rule you have to teach under the Separation model is:
> 
>      "Any line that starts with an = is Pod...and not part of your program."

And that's something that now comes up very early in teaching the
assignment operator. 


> Whereas the rule you have to teach under the Integration model is:

We don't teach any rule under this model, and it's been fine for over a
decade :)

When we do teach the current Pod, the simple rule is that Pod starts:

   * when Perl is expecting a new statement
   * there is a =something at the beginning of the line

Which is considerably simpler than the long rule list you used to say
the same thing (which seems a bit of FUD, honestly).


>  > So, if this is the case, how will a new Perl 6 user debug a program
>  > failure when part of their program mysteriously disappears because
>  > they just happened to have =begin at the beginning of a line?
> 
> The same way they debug it when part of their program mysteriously
> disappears because they just happened to have # at the beginning of a
> line: 

> Except, of course, the Pod mysteriously vanishing will be considerably
> easier to debug, because ALL lines starting with =begin vanish, whereas
> only some lines beginning with # do.

That's not really the case. The # only affects one line, and a pound in
a literal string doesn't start a comment. People grok single line
comments very well. 

The start of a Pod comment now affects it's line and the ones following
it.


> 
>  > Also, doesn't this then limit Pod to Perl 6 (which I thought was not
>  > the goal)? I doubt other languages will want to deal with this
>  > situation.
> 
> As Smylers so ably pointed out, enabling Pod to be parsed independently
> of the underlying language syntax actually makes it vastly easier to use
> Pod with other languages.

Well, easy to use Pod with other languages until they try to use the
assignment operator at the beginning of the line, or a = in a literal
string at the beginning of a line.


I know you think it's easier to teach and explain, but that's because
you came up with it. The notion that a special character in a certain
column means something was tough to explain to other people in FORTRAN
too.


There are other things to consider, and to me it looks like this design
decision isn't based on what's easier for the Perl 6 programmer but
what's easier for the implementors. It's not that I don't understand
both sides, I just disagree about where the complexity should be.

