From beginners-return-92180-ktwarwic=speedy.uwaterloo.ca@perl.org  Tue Jun  5 23:32:06 2007
Return-Path: <beginners-return-92180-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l563W5hB016929
	for <ktwarwic@flax9.uwaterloo.ca>; Tue, 5 Jun 2007 23:32:06 -0400
Received: (qmail 17468 invoked by uid 514); 6 Jun 2007 03:31:53 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 17459 invoked from network); 6 Jun 2007 03:31:53 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 6 Jun 2007 03:31:53 -0000
Received: (qmail 17838 invoked by uid 225); 6 Jun 2007 03:31:53 -0000
Delivered-To: beginners@perl.org
Received: (qmail 17726 invoked by alias); 6 Jun 2007 03:31:40 -0000
X-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of chas.owens@gmail.com designates 64.233.162.229 as permitted sender)
Received: from nz-out-0506.google.com (HELO nz-out-0506.google.com) (64.233.162.229)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Tue, 05 Jun 2007 20:31:33 -0700
Received: by nz-out-0506.google.com with SMTP id x7so11745nzc
        for <beginners@perl.org>; Tue, 05 Jun 2007 20:31:29 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=cKBtf9nNgAYf8fYXCeZ1mDQQejtDP/bYk5jG5pMx+NDK8JQ8FRd6So3aam7GFRQmhSAXCdBau3xfGklhJQwpTOQFXHXTmYVrZ2HL5ofaVyq/fUhjaWr4yhBqK2lci9Iq1YriI/zmJf979Bj5MmOJdte5b0BhzKGOUyXNonFx7MQ=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=D5+vg3pI8NPe1qStJrlunvtDoyaqZjV1vZsTpsmVkZh/wtQZ/y6zNW+g7OFq5PP5Ax9vZ3YGX1ugz+rVbh48MRWClD/AlJq6L+DGBCng4hE3ik8J8cwuIZ6yLY/w+dLi87/qyqs9qa+QGDru7f3uzb1l2Li6aJUstTnoW1b3s3w=
Received: by 10.114.81.1 with SMTP id e1mr10901wab.1181100688666;
        Tue, 05 Jun 2007 20:31:28 -0700 (PDT)
Received: by 10.114.79.3 with HTTP; Tue, 5 Jun 2007 20:31:28 -0700 (PDT)
Message-ID: <58ce48dc0706052031s26610363oe1de205b22a29134@mail.gmail.com>
Date: Tue, 5 Jun 2007 23:31:28 -0400
From: "Chas Owens" <chas.owens@gmail.com>
To: "sgallagh@mail.med.upenn.edu" <sgallagh@mail.med.upenn.edu>
Subject: Re: transpose/reshape wide dataset to long and vice versa
Cc: beginners@perl.org
In-Reply-To: <1181069745.4665b1b121e26@webmail.pobox.upenn.edu>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <1181069745.4665b1b121e26@webmail.pobox.upenn.edu>

On 6/5/07, sgallagh@mail.med.upenn.edu <sgallagh@mail.med.upenn.edu> wrote:
> hello all--
>
> I have been trying to wrap my head around the right approach to doing what I
> would normally do with SAS's "PROC TRANSPOSE" in Perl. The below toy dataset is
> summarized from http://www.ats.ucla.edu/stat/sas/modules/wtol_transpose.htm.
>
> I have searched CPAN and google and the list to the best of my ability for any
> hints related to transposing a "long" dataset to a "wide" dataset and vice
> versa. I assume I am missing an obvious solution to what I presume is a common
> dilemma?
>
> LONG:
> famid year faminc
> 1 96 40000
> 1 97 40500
> 1 98 41000
> 2 96 45000
> 2 97 45400
> 2 98 45800
> 3 96 75000
> 3 97 76000
> 3 98 77000
>
> desired output,WIDE: .
> Obs    famid    _NAME_    faminc96    faminc97    faminc98
>  1       1      faminc      40000       40500       41000
>  2       2      faminc      45000       45400       45800
>  3       3      faminc      75000       76000       77000
>
> Variables I think I would need to make use of would be:
> 1) BY--uniquely identifies an individual, an observation, a primary key etc
> 2) ID--the category or grouping
> 2) var--the variable values to be transposed
> 3) prefix--(concatenated to the id for naming column output in long to wide)
>
> if anyone has any thoughts on how to approach this problem or pointers to an
> already rolled solution I would be most appreciative.
>
> best,
> sg
>

It sounds like you need a hash of HoAs (hash of arrays).  Look at
perldoc perldsc for more detailed info, but here is some ugly code
that seems to do what you want.  It is not very flexible, but probably
could be made so.

#!/usr/bin/perl

use strict;
use warnings;

my %ds;

#the first line is the headers, so read it
#in to use as keys to the hash
#FIXME: remove the hardcodes and make this a function
my $id    = 'famid';
my %joins = (
        _NAME_ => [ 'faminc', 'year' ]
);
my @headers = split ' ', <DATA>;
my $observation = 1; #aka rows if remember SAS correctly
while (<DATA>) {
        my %rec = zip(\@headers, [split ' ']);
        my $id = $rec{$id}; #this masks the earlier $id
        unless ($ds{$id}) {
                $ds{$id}{obs} = $observation++;
        }
        for my $name (sort keys %joins) {
                my ($col, $var) = @{$joins{$name}};
                my $key = "$col$rec{$var}";
                $ds{$id}{$name} = $col;
                $ds{$id}{$key} = $rec{$col};
        }
}

my @keys = sort(uniq(map { keys %{$ds{$_}} } keys %ds));

print join("\t", $id, @keys), "\n";
for my $id (sort keys %ds) {
        print join("\t", $id, map { $ds{$id}{$_} } @keys), "\n";
}


#in Perl 6 a function like this, but better,
#is part of the core, I can't wait
sub zip {
        my ($a1, $a2) = @_;
        my $min = @$a1 < @$a2 ? $#$a1 : $#$a2;
        my @result;
        for my $i (0 .. $min) {
                push @result, $a1->[$i], $a2->[$i];
        }
        return @result;
}

sub uniq {
        my %hash = map { $_ => 1 } @_;
        return keys %hash;
}

__DATA__
famid year faminc
1 96 40000
1 97 40500
1 98 41000
2 96 45000
2 97 45400
2 98 45800
3 96 75000
3 97 76000
3 98 77000

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


