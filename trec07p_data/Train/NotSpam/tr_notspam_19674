From r-help-bounces@stat.math.ethz.ch  Fri Jun 15 19:23:10 2007
Return-Path: <r-help-bounces@stat.math.ethz.ch>
Received: from hypatia.math.ethz.ch (hypatia.math.ethz.ch [129.132.145.15])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l5FNN9L9007745
	for <ktwarwic@flax9.uwaterloo.ca>; Fri, 15 Jun 2007 19:23:10 -0400
Received: from hypatia.math.ethz.ch (hypatia [129.132.145.15])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l5FNLgYU012323;
	Sat, 16 Jun 2007 01:21:54 +0200
X-Spam-Checker-Version: SpamAssassin 3.2.0 (2007-05-01) on hypatia.math.ethz.ch
X-Spam-Level: 
X-Spam-Status: No, score=0.4 required=5.0 tests=AWL, BAYES_50,
	DKIM_POLICY_SIGNSOME autolearn=no version=3.2.0
Received: from alnrmhc14.comcast.net (alnrmhc14.comcast.net [206.18.177.54])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l5FNLZae012300
	for <r-help@stat.math.ethz.ch>; Sat, 16 Jun 2007 01:21:35 +0200
Received: from [192.168.1.104]
	(c-76-17-205-60.hsd1.mn.comcast.net[76.17.205.60])
	by comcast.net (alnrmhc14) with SMTP
	id <20070615232133b14001io80e>; Fri, 15 Jun 2007 23:21:34 +0000
From: Marc Schwartz <marc_schwartz@comcast.net>
To: Dirk Eddelbuettel <edd@debian.org>
In-Reply-To: <18034.63464.877565.242357@basebud.nulle.part>
References: <18034.46215.223478.311352@basebud.nulle.part>
	<1181936004.3697.6.camel@Bellerophon.localdomain>
	<18034.63464.877565.242357@basebud.nulle.part>
Date: Fri, 15 Jun 2007 18:21:33 -0500
Message-Id: <1181949693.3691.42.camel@Bellerophon.localdomain>
Mime-Version: 1.0
X-Mailer: Evolution 2.10.2 (2.10.2-2.fc7) 
X-Virus-Scanned: by amavisd-new at stat.math.ethz.ch
Cc: r-help@stat.math.ethz.ch, Philipp Benner <mail@philipp-benner.de>
Subject: Re: [R] model.frame: how does one use it?
X-BeenThere: r-help@stat.math.ethz.ch
X-Mailman-Version: 2.1.9
Precedence: list
Reply-To: marc_schwartz@comcast.net
List-Id: "Main R Mailing List: Primary help" <r-help.stat.math.ethz.ch>
List-Unsubscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=unsubscribe>
List-Archive: <https://stat.ethz.ch/pipermail/r-help>
List-Post: <mailto:r-help@stat.math.ethz.ch>
List-Help: <mailto:r-help-request@stat.math.ethz.ch?subject=help>
List-Subscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: r-help-bounces@stat.math.ethz.ch
Errors-To: r-help-bounces@stat.math.ethz.ch

On Fri, 2007-06-15 at 15:34 -0500, Dirk Eddelbuettel wrote:
> Hi Mark,
> 
> Thanks for the reply.
> 
> On 15 June 2007 at 14:33, Marc Schwartz wrote:
> | On Fri, 2007-06-15 at 10:47 -0500, Dirk Eddelbuettel wrote: 
> | > Philipp Benner reported a Debian bug report against r-cran-rpart aka rpart.
> | > In short, the issue has to do with how rpart evaluates a formula and
> | > supporting arguments, in particular 'weights'.  
> | > 
> | > A simple contrived example is
> | > 
> | > -----------------------------------------------------------------------------
> | > library(rpart)
> | > 
> | > ## using data from help(rpart), set up simple example
> | > myformula <- formula(Kyphosis ~ Age + Number + Start)
> | > mydata <- kyphosis
> | > myweight <- abs(rnorm(nrow(mydata)))
> | > 
> | > goodFunction <- function(mydata, myformula, myweight) {
> | >   hyp <- rpart(myformula, data=mydata, weights=myweight, method="class")
> | >   prev <- hyp
> | > }
> | > goodFunction(mydata, myformula, myweight)
> | > cat("Ok\n")
> | > 

<snip>

> | 
> | However, now let's do this:
> | 
> | 
> | library(rpart)
> | myformula <- formula(Kyphosis ~ Age + Number + Start)
> | mydata <- kyphosis
> | myweight <- abs(rnorm(nrow(mydata)))
> | 
> | goodFunction <- function(mydata, myformula) {
> |                          hyp <- rpart(myformula, data=mydata,
> |                                       weights=myweight, method="class")
> |                          prev <- hyp
> |                         }
> | 
> | > goodFunction(mydata, myformula)
> | > 
> | 
> | It works, because 'myweight' is found in the global environment, which
> | is where the formula is created.
> 
> Well,yes, but doesn't this just recreate the working example I showed above?
> It works 'because we get lucky' with the data in the outer global env.

Technically, it is not the same, as I was trying to emphasize that there
was no need to pass 'myweight' as an argument to the function to
facilitate successful location/evaluation within the function.

We don't get lucky here. The behavior is by design and consistent with
the documentation, which is that 'myweight' in the call to rpart() is
evaluated within the environment of the formula in this case. The
formula is created in the global environment, so 'myweight' is found
there. Hence, no need to pass it as an argument.

A review of the code for rpart() will reveal code similar to that which
is used in most R modeling functions, relative to the evaluation of the
formula, associated args and the creation of the model frame.

One exception to the above, is that in other modeling functions, one
could forgo passing the formula and just pass the entire data frame,
where the presumption is that the first column is the response variable
and the remaining columns would be the independent terms. I don't see
that supported in rpart().

> 
> | Now, final example, try this:
> | 
> | 
> | library(rpart)
> | goodFunction <- function() {
> |                          myformula <- formula(Kyphosis ~ Age + Number +
> |                                               Start)
> |                          mydata <- kyphosis
> |                          myweight <- abs(rnorm(nrow(mydata)))
> | 
> |                          hyp <- rpart(myformula, data=mydata,
> |                                       weights=myweight, method="class")
> |                          prev <- hyp
> |                         }
> | 
> | > goodFunction()
> | > 
> | 
> | It works because the formula is created within the environment of the
> | function and hence, 'myweight', which is created there as well, is
> | found.
> 
> That works because we force it to be local. BDR claims that my 'badFunction'
> (derived from Philipp's original bug report) above can be made to work
> provide you use model.frame.  I asked about model.frame -- and you were kind
> enough do answer, but you dodged the question.
> 
> So let me try again:  How can rpart be called inside a function using a
> local weight variable as I do above ?   Either it can, and the BDR is right
> and there is no bug, or one cannot, and then mere mortals like myself must
> consider rpart to be buggy as it does not support all its argument in at
> least some conceivable calling situations. 
> 
> Is that a fair question?
> 
> Regards,  Dirk

Yep, entirely fair. 

Without knowing what specific approach Prof. Ripley had in mind, I am
envisioning a couple of possibilities, but here is one:

library(rpart)

myformula <- formula(Kyphosis ~ Age + Number + Start)
mydata <- kyphosis

badFunction <- function(mydata, myformula) {
  mydata$myweight <- abs(rnorm(nrow(mydata)))
  rpart(myformula, data = mydata, weights = myweight, method = "class")
}

badFunction(mydata, myformula)


Basically, there are 3 places in which 'myweights' could be found:

1. Formula environment

2. Data frame environment

3. Global environment


In this case, we add the weights as a new column within the function to
the 'mydata' data frame, so that it will be found in the call to
rpart(), based upon location number 2 above.

Does that help?

Regards,

Marc

______________________________________________
R-help@stat.math.ethz.ch mailing list
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.

