From beginners-return-92246-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri Jun  8 11:01:29 2007
Return-Path: <beginners-return-92246-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l58F1ShB016738
	for <ktwarwic@flax9.uwaterloo.ca>; Fri, 8 Jun 2007 11:01:28 -0400
Received: (qmail 32241 invoked by uid 514); 8 Jun 2007 15:00:36 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 31864 invoked from network); 8 Jun 2007 15:00:33 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 8 Jun 2007 15:00:33 -0000
Received: (qmail 25406 invoked by uid 225); 8 Jun 2007 15:00:33 -0000
Delivered-To: beginners@perl.org
Received: (qmail 25399 invoked by alias); 8 Jun 2007 15:00:32 -0000
X-Spam-Status: No, hits=0.7 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: 63.251.223.186 is neither permitted nor denied by domain of sigzero@gmail.com)
Received: from x6.develooper.com (HELO lists.develooper.com) (63.251.223.186)
    by la.mx.develooper.com (qpsmtpd/0.28) with SMTP; Fri, 08 Jun 2007 08:00:30 -0700
Received: (qmail 31802 invoked by uid 515); 8 Jun 2007 15:00:23 -0000
Message-ID: <20070608150023.31800.qmail@lists.develooper.com>
To: beginners@perl.org
Date: Fri, 08 Jun 2007 11:00:21 -0400
From: Robert Hicks <sigzero@gmail.com>
Reply-To: sigzero@gmail.com
User-Agent: Thunderbird 2.0.0.0 (Windows/20070326)
MIME-Version: 1.0
Subject: Re: new vs ->new
References: <20070608140818.20900.qmail@lists.develooper.com> <58ce48dc0706080719r490648e1w84265b267511ed64@mail.gmail.com>
In-Reply-To: <58ce48dc0706080719r490648e1w84265b267511ed64@mail.gmail.com>
Content-Type: text/plain; charset=ISO-2022-JP
Content-Transfer-Encoding: 7bit
X-Posted-By: 152.121.16.49

Chas Owens wrote:
> On 6/8/07, Robert Hicks <sigzero@gmail.com> wrote:
>> I see some modules that call "new" like:
>>
>> my $test = new Some::Module;
>>
>> and some like:
>>
>> my $test = Some::Module->new;
>>
>> Is there a difference and what is the "recommended" way?
>>
>> Robert
> 
> "new Object" uses indirect invocation*.  Some people feel it improves
> readability; I am not one of those people.
> 
> from perldoc perlobj
>       There is another problem with this syntax: the indirect object is 
> lim‐
>       ited to a name, a scalar variable, or a block, because it would 
> have to
>       do too much lookahead otherwise, just like any other postfix derefer‐
>       ence in the language.  (These are the same quirky rules as are 
> used for
>       the filehandle slot in functions like "print" and "printf".)  This 
> can
>       lead to horribly confusing precedence problems, as in these next two
>       lines:
> 
>           move $obj->{FIELD};                 # probably wrong!
>           move $ary[$i];                      # probably wrong!
> 
>       Those actually parse as the very surprising:
> 
>           $obj->move->{FIELD};                # Well, lookee here
>           $ary->move([$i]);                   # Didn't expect this one, eh?
> 
>       Rather than what you might have expected:
> 
>           $obj->{FIELD}->move();              # You should be so lucky.
>           $ary[$i]->move;                     # Yeah, sure.
> 
>       To get the correct behavior with indirect object syntax, you would 
> have
>       to use a block around the indirect object:
> 
>           move {$obj->{FIELD}};
>           move {$ary[$i]};
> 
>       Even then, you still have the same potential problem if there happens
>       to be a function named "move" in the current package.  The "->" nota‐
>       tion suffers from neither of these disturbing ambiguities, so we 
> recom‐
>       mend you use it exclusively.  However, you may still end up having to
>       read code using the indirect object notation, so it's important to be
>       familiar with it.
I will read "perlobj" then...

Thanks!

Robert

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


