From perl6-all-return-81504-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon May 21 18:57:35 2007
Return-Path: <perl6-all-return-81504-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4LMvZqD004812
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 21 May 2007 18:57:35 -0400
Received: (qmail 23095 invoked by uid 514); 21 May 2007 22:57:31 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 23090 invoked from network); 21 May 2007 22:57:30 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: neutral (x1.develooper.com: local policy)
Delivered-To: perlmail-parrot-porters@onion.perl.org
Delivered-To: parrot-porters@perl.org
Received-SPF: neutral (x1.develooper.com: local policy)
Mime-Version: 1.0 (Apple Message framework v752.3)
Content-Transfer-Encoding: 7bit
Message-Id: <2EC75429-C3F1-45FB-8D86-EDD733FA713A@coleda.com>
Content-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed
To: p2 <parrot-porters@perl.org>
From: Will Coleda <will@coleda.com>
Subject: new FAQs
Date: Mon, 21 May 2007 18:56:36 -0400
X-Mailer: Apple Mail (2.752.3)
X-Virus-Scanned: Symantec AntiVirus Scan Engine
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.7 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.7 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL

I was talking to a colleague (who wishes to remain anonymous), and s/ 
he had a list of questions about the state of parrot that I think  
should end up in the FAQ or elsewhere in the repo. I wanted to post  
them here to get some discussion - I don't have answers to many of  
these questions myself.

---


1. Why Parrot?

http://www.parrotcode.org/docs/intro.html:

"Parrot is designed with the needs of dynamically typed languages
(such as Perl and Python) in mind, and should be able to run programs
written in these languages more efficiently than VMs developed with
static languages in mind (JVM, .NET). Parrot is also designed to
provide interoperability between languages that compile to it. In
theory, you will be able to write a class in Perl, subclass it in
Python and then instantiate and use that subclass in a Tcl program."

a. What, precisely, about Parrot makes possible more efficient
execution of a dynamically typed language than would be the case with
the JVM or the CLR?

b. Whatever that is, how will it adversely impact the execution of
statically typed languages, including type-inferred languages?

c. How will this impact the execution of statically typed code in
Perl, Python and other targeted languages?

2. General Features

a. How will Parrot support reflection and attributes?

b. How will Parrot support generics types?

c. How will Parrot support interface types?

d. What kind of security models will Parrot support?

e. How will Parrot support small-footprint systems?

f. How will Parrot support direct access to "unmanaged" resources?

g. How will Parrot facilitate distributed processing?

3. Parrot PMC Issues

The Parrot PMC vtable provides a large number of optional functions,
which PMCs can either implement or not. If not implemented, they will
throw an exception at runtime.


a. What support will Parrot provide a compiler to interrogate a PMC at
compile time to know what it actually implements?

All of these functions appear to be predefined because there is no
mechanism for extending this functionality at runtime. It appears that
compilers will be limited to implementing functionality that is
defined in the vtable. The vtable contains the common operations
required by certain languages.

b. How will Parrot handle languages with operations that are not
provided?

http://www.parrotcode.org/docs/vtables.html:

"To be perfectly honest, this is a slightly flawed example, since it's
unlikely that there will be a distinct "Python scalar" PMC class. The
Python compiler could well type-inference variables such that a would
be a PythonString and b would be a PythonNumber. But the point remains
- incrementing a PythonString is very different from incrementing a
PerlScalar."

c. How will Parrot address cross-language semantics?

d. Will each language have to provide its own support for interacting
with PMCs for other languages?

e. How will a PerlScalar interact with a PythonString?

f. What will happen when a PythonString is incremented in Perl code?

Comparing the vtable for a PMC to the JVM and CLR base Object classes,
the PMC is essentially an "abstract" class with dozens of
"unimplemented" methods, while Java's Object provides (and implements)
the following public methods:

   equals getClass hashCode notify notifyAll toString wait

Discounting the methods related to Java's peculiar threading
implementation, that's:

   equals                 getClass hashCode    toString

Similarly, the CLR's CTS Object provides:

   Equals ReferenceEquals GetType  GetHashCode ToString

g. Why is it a good thing that PMCs essentially non-contractual
abstract base classes that define a lot of functionality without
implementing it?

h. Why is there no first-tier depth in Parrot's type system, such as:

   PMCString, PMCIntger, PMCNumber, ...

4. Parrot VM Issues

Parrot provides what it calls "registers" with no guarantee that these
map to hardware registers.

a. Will any registers ever map, in a Parrot-controlled way, to hardware
registers?

b. How can a compiler efficiently allocate registers if it does not
know which ones will map to hardware registers?

5. Parrot Design Issues

Parrot has many operators and number of Core PMC types for them to
operate on. Parrot has so many operators that it appears to be using
them instead of having a standard library. This is markedly different
than the CLR and JVM systems.

a. Why was this done this way?

b. What is the basis for deciding what will be an operator?

c. How can substantial quantities of additional functionality be added
to this design cleanly?




--
Will "Coke" Coleda
will@coleda.com


