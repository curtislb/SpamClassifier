From beginners-return-90931-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu Apr 19 11:10:09 2007
Return-Path: <beginners-return-90931-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3JFA80I026070
	for <ktwarwic@speedy.uwaterloo.ca>; Thu, 19 Apr 2007 11:10:08 -0400
Received: (qmail 25545 invoked by uid 514); 19 Apr 2007 15:09:36 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 25536 invoked from network); 19 Apr 2007 15:09:35 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 19 Apr 2007 15:09:35 -0000
Received: (qmail 5360 invoked by uid 225); 19 Apr 2007 15:09:35 -0000
Delivered-To: beginners@perl.org
Received: (qmail 5336 invoked by alias); 19 Apr 2007 15:09:34 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME,MSGID_FROM_MTA_HEADER,UNPARSEABLE_RELAY
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
Received: from smtpout.mac.com (HELO smtpout.mac.com) (17.250.248.46)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 19 Apr 2007 08:09:31 -0700
Received: from webmail010 (webmail010-s [10.13.128.10])
	by smtpout.mac.com (Xserve/smtpout10/MantshX 4.0) with ESMTP id l3JF9Ohj009213
	for <beginners@perl.org>; Thu, 19 Apr 2007 08:09:26 -0700 (PDT)
Date: Thu, 19 Apr 2007 08:08:55 -0700
From: Jeni Zundel <jenizundel@mac.com>
To: beginners@perl.org
Message-ID: <725F6108-0112-1000-8819-E716B9E4A1D1-Webmail-10018@mac.com>
in-reply-to: <58ce48dc0704190807i14627a5bh53a356b664ffdd9a@mail.gmail.com>
references: <ca5781c80704180957w72c92fbbq2e083368ed9339e9@mail.gmail.com>
 <58ce48dc0704181057q79262a61q6d5e1370d8c99245@mail.gmail.com>
 <46276441.7213.2471F368@Jenda.Krynicky.cz> <58ce48dc0704190807i14627a5bh53a356b664ffdd9a@mail.gmail.com>
Subject: Re: Nested loop
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
X-Originating-IP: 163.191.134.136
Received: from [163.191.134.136] from webmail.mac.com with HTTP; Thu, 19 Apr 2007 08:08:55 -0700
X-Brightmail-Tracker: AAAAAA==
X-Brightmail-scanned: yes
Status: O
Content-Length: 3017
Lines: 107

foreach is dead?

dangit... I loved that.

and,  java 5 just put in a for loop construct that is very similar to the foreach.

jen 
On Thursday, April 19, 2007, at 08:08AM, "Chas Owens" <chas.owens@gmail.com> wrote:
>On 4/19/07, Jenda Krynicky <Jenda@krynicky.cz> wrote:
>> From: "Chas Owens" <chas.owens@gmail.com>
>snip
>> > foreach is dead, long live for.
>>
>> William is dead, long live Bill?
>>
>> foreach and for are two names for the same thing and just as you can
>> call someone both William and Bill you can use foreach and for
>> interchangeably.
>>
>> foreach(my $i = 0; $i < $whatever; $i++)
>> for(my $i = 0; $i < $whatever; $i++)
>>
>> for my $x (@array)
>> foreach my $x (@array)
>>
>> for (@array)
>> foreach (@array)
>>
>> No difference to the computer. Use whichever reads best!
>
>Yes, foreach was aliased to for for backwards compatibility, but, like
>telnet and rsh, it should not be used in new code.
>
>>
>> I would myself use "for" for the C-style loops
>
>And this is why.  As long as people think "well, I have foreach which
>is for iterating and for which is for C-style loops" they will
>continue to write C-style loops.  C-style loops are bad.  They are
>there for backwards compatibility.  I can't think of a single for loop
>that isn't better written as a range based for loop or while loop. For
>instance
>
>standard range based loop
>for (my $i = 0; $i < 10; $i++) {}
>for my $i (0 .. 9) {}
>
>often $i winds up being used as an index which just makes me cringe.
>
>The infinite loop
>for (;;) {}
>while (1) {}
>
>The reason C programmers give for using for (;;) is that it generates
>less overhead on their platform, but, at least with my tests*,
>while(1) is more efficient in Perl.
>
>Weirder stuff that you only tend to see people coming from a C background do
>for (my $node = $head; $node = $node; $node->next) {}
>my $node = $head;
>while ($node = $node->next) {}
>
>But in Perl it is rarely necessary to do this sort of loop since most
>functions return a list that can be iterated over using for:
>
>for my $node ($head->nodes) {}
>
>> and if I use the for loop as a way to create an alias
>
>And that is a perfectly idiomatic usage; at least until given is added
>to the language (in 5.10 from what I hear).
>
>* benchmark
>        Rate  bare   for while
>bare  6754/s    --  -17%  -31%
>for   8179/s   21%    --  -17%
>while 9823/s   45%   20%    --
>
>#!/usr/bin/perl
>
>use strict;
>use warnings;
>use Benchmark;
>
>
>my %subs = (
>        for   => sub { my $i; for (;;) { last if $i++ > 1_000 } },
>        while => sub { my $i; while (1) { last if $i++ > 1_000 } },
>        bare  => sub { my $i; { last if $i++ > 1_000; redo }  },
>);
>
>Benchmark::cmpthese(-10, \%subs);
>
>-- 
>To unsubscribe, e-mail: beginners-unsubscribe@perl.org
>For additional commands, e-mail: beginners-help@perl.org
>http://learn.perl.org/
>
>
>
>

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


