From perl6-all-return-81812-ktwarwic=speedy.uwaterloo.ca@perl.org  Tue Jun  5 03:08:49 2007
Return-Path: <perl6-all-return-81812-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5578mhB005282
	for <ktwarwic@flax9.uwaterloo.ca>; Tue, 5 Jun 2007 03:08:48 -0400
Received: (qmail 20153 invoked by uid 514); 5 Jun 2007 07:08:40 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 20123 invoked from network); 5 Jun 2007 07:08:39 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: domain of dataweaver@gmail.com designates 64.233.184.231 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=HaE/luk+Bb2HNbKpLVja/uz9FvxxmJsysKx4SQjC5nqP7nMmfmbAhGCSf+IvtxT+CQHeAsd7M5bZSe+Q1F5sqKTPhxLbW7HiLgIRJHCgjYm42I9rQk9XaAQT+o+MdvxwYdEKk62QguRwEdW0/ilvrB7eRQ/0leDsDusyLQJHDsk=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=ByV+VXHKJ7N204L4Hwnde7tjXu5JzzuDxBJy3f2mV0eVQVbyUyPVDNHPaiuun9p+3/bT4Aqw3Od4S87HwHB7IBsuNrAbdetYWepnvc1fcEvJyn0cFxZei5qgpkYm+4DcpNFKjgr2mflDYwlqBs7ftVNnrivJHfmwz1tuB5X8cAI=
Message-ID: <ef30550b0706050008i3d13e77fuaa81302bf816a910@mail.gmail.com>
Date: Tue, 5 Jun 2007 00:08:01 -0700
From: "Jonathan Lang" <dataweaver@gmail.com>
To: perl6-language@perl.org
Subject: Re: [svn:perl6-synopsis] r14415 - doc/trunk/design/syn
In-Reply-To: <20070604180618.GA26518@wall.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <20070604002317.AD5CCCBA7D@x12.develooper.com>
	 <ef30550b0706032223j33ae3e02qcd1dad48a2f64c06@mail.gmail.com>
	 <20070604180618.GA26518@wall.org>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS

Larry Wall wrote:
> : * In item context, a list of captures becomes a single Array object,
> : and the question about whether or not it gets flattened gets deferred
> : until its contents get looked at in list, slice, or hash context.
>
> That's the intent.  $() used to assume @@ inside till this latest
> change, but that seemed insufficiently lazy to me...
>
> But it kinda means there's yet another list context that doesn't
> decide yet, used explicitly by the insides of \(...) and implicitly
> by the $() context.  Not sure if it needs a name yet, or whether it's
> a design smell.

IMHO, no name is needed; just note that \(...) generates a variation
of the list context that is agnostic to flattening, but is otherwise
equivalent to "list".

> Arguably "list" should be non-committal and we give
> @() a different name like "flat", but that grates in my brain for
> some reason, if only because most list contexts would in the end
> be flat anyway.  And "list" in English already implies something
> flatter than, say, an "outline".

...which tends to be more akin to "slice".  In fact, consider renaming
"slice" as "outline".  Sure, it's two characters longer; but it's
_much_ more descriptive of what's going on.  "Slice" strikes me as
something of a holdover from its origins in array indices.

Conversely, our agnostic list _is_ flatter than a slice or outline,
just like a hardcore list is flatter than an agnostic list.  I'd tend
to agree about keeping "list" tied to the flattened stuff.  IMHO,
you're not going to find anything in English to represent the agnostic
"list of captures".

In essence, we have: list, list-of-captures, and slice (or outline?);
also, hash and item.

> : Meanwhile, 'zip' produces a list of captures - which, because list
> : context is the default "plural" context, immediately gets flattened
> : most of the time.  As I see it, then, the serial equivalent to
> : 'zip(@a;@b)' would be '(@a;@b)', and 'list(@a;@b)' would be the serial
> : equivalent to 'list(zip(@a;@b))'.
>
> That doesn't make sense to me.  You seem to be thinking that semicolon
> has zip semantics, when it doesn't.  All ; does is make a list of
> captures.

My focus in this comparison is on what is being produced, rather than
on what is being passed in.

My understanding is that 'zip' produces a list of captures.  It's just
that the default context that zip is likely to work in is list
context, which flattens that list of captures.  Or am I wrong about
this?  The other alternative is that zip knows whether it's being
called in list or slice/outline context, and produces its output
accordingly.  I was assuming that zip wouldn't need to know; but I
could be wrong about this.

If zip _does_ tailor its return value according to the variety of list
context that it finds itself in, then 'list()' is _still_ not the
serial analog to 'zip()', any more than 'slice()' is, since both
impose a specific context on the product.  You'd need a new function
that takes a list of captures as its parameters, and produces a flat
list in list context or a slice or outline in slice/outline context.

> : Or does '(@a;@b)' default to slice context?
>
> Parentheses don't supply context.  They only group.  (@a;@b) returns
> a list of captures.  It requires a binding (or other sigil) coercion
> to supply context.

The parentheses weren't concerning me here; the semicolon within
brackets was.  I've been working under the assumption that a bracketed
@a;@b produces an agnostic "list of captures", which then gets
flattened or structured when it hits list or slice context,
respectively; I was asking about the possibility that I was wrong
about this, and that bracket-within-semicolons produces a
slice/outline outright.

--

This does bring up another question, though: when are you in list
context, and when are you in list-of-captures context?  That is, when
do you force a list of captures to flatten, and when do you leave it
alone?

-- 
Jonathan "Dataweaver" Lang

