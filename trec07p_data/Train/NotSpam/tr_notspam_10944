From beginners-return-91741-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed May 16 08:33:31 2007
Return-Path: <beginners-return-91741-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4GCXUqD018572
	for <ktwarwic@flax9.uwaterloo.ca>; Wed, 16 May 2007 08:33:30 -0400
Received: (qmail 32328 invoked by uid 514); 16 May 2007 12:33:21 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 32319 invoked from network); 16 May 2007 12:33:21 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 16 May 2007 12:33:21 -0000
Received: (qmail 2192 invoked by uid 225); 16 May 2007 12:33:20 -0000
Delivered-To: beginners@perl.org
Received: (qmail 2176 invoked by alias); 16 May 2007 12:33:19 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_TESTING,DK_SIGNED,DK_VERIFIED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
Received: from smtp106.plus.mail.re2.yahoo.com (HELO smtp106.plus.mail.re2.yahoo.com) (206.190.53.31)
    by la.mx.develooper.com (qpsmtpd/0.28) with SMTP; Wed, 16 May 2007 05:33:09 -0700
Received: (qmail 94861 invoked from network); 16 May 2007 12:33:04 -0000
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
  s=s1024; d=yahoo.com;
  h=Received:X-YMail-OSG:Message-ID:Date:From:User-Agent:MIME-Version:To:CC:Subject:References:In-Reply-To:Content-Type:Content-Transfer-Encoding;
  b=30eQjpaABENIYa+lLl0GSwVjl0gi4VizsFQ0CXXs09QhICU1P+1u8iPbIBcQwBZqUn92nU6LJXVrWvNhOlEU9lkQiG6HKWWKElI7/mvhpLzgMSCzEaKxiMBFcCnzf6smRiYfOwf9XwgxBmoZf+s7ZrvE+Xkk/E82qZ8Qu+dn2M0=  ;
Received: from unknown (HELO ?127.0.0.1?) (theillien@76.21.182.124 with plain)
  by smtp106.plus.mail.re2.yahoo.com with SMTP; 16 May 2007 12:33:03 -0000
X-YMail-OSG: fmbs0FUVM1ksLtPa3_j43FKg64wkC.GPlS7WnGFTJG.UfhtBqBUfRY7HGaOH4Lp6aE4Biro_.w--
Message-ID: <464AF9E1.2070008@yahoo.com>
Date: Wed, 16 May 2007 08:32:33 -0400
From: Mathew <theillien@yahoo.com>
User-Agent: Thunderbird 2.0.0.0 (Windows/20070326)
MIME-Version: 1.0
To: Rob Dixon <rob.dixon@350.com>
CC: Perl Beginners <beginners@perl.org>
Subject: Re: Can't sort error out; strict refs
References: <46482C23.6010203@yahoo.com> <46484D17.2060108@350.com>
In-Reply-To: <46484D17.2060108@350.com>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit



Rob Dixon wrote:
> Mathew Snyder wrote:
>>
>> I'm passing two hash references into a subroutine.  One hash is in the
>> format of
>> $dept{$env}{$user}.  This contains an amount of time spent by each
>> user on a
>> customer ($env).  The second hash is in the format of
>> $ticCount{$env}{$user}{$ticID}.  This contains a running count of how
>> many times
>> a user worked on ticket '$ticID' which belongs to customer '$env'.  I
>> won't be
>> using that number though.  What I need is the number of tickets worked
>> on so I
>> simply use 'scalar keys' on this hash.
>>
>> The problem I'm encountering though, is that I'm passing the hashes
>> into my
>> subroutine as references.  When I get to the statement that gets the
>> key count I
>> get an error: "Can't use string ("2") as a HASH ref while "strict
>> refs" in use
>> at user_timesheet.pl line 63."  Presumably, 2 is the number of keys at
>> $ticCount{$env}{$user}{$ticID}.
>>
>> sub average {
>>
>>   my ($users, $count) = @_;
>>   my %userAvg;
>>
>>   foreach my $env (keys %$count) {
>>     foreach my $user (keys %{ $count->{$env} }) {
>>       foreach my $ticID (keys %{ $count->{$env}->{$user} }) {
>>
>>         my $ticCount = scalar keys %{$count->{$env}->{$user}->{$ticID}};
>>
>>         my @meantemp;
>>         my @meantime;
>>         my @endtime;
>>
>>         my $temp     = $users->{$env}->{$user};
>>         @meantemp    = split /\./, ($temp / $ticCount);
>>
>>         # If the time divided by the number of tickets has a decimal
>>         # value round up if that value is greater than
>>         # 0.5.  This will give an even number of minutes to figure
>>         # out the mean time with.
>>         if ($meantemp[1]) {
>>           if ($meantemp[1] >= 5) {
>>             $meantemp[0]++;
>>           }
>>         }
>>         @meantime  = split /\./, ($meantemp[0] / 60);
>>         $endtime[0]  = $meantime[0];
>>         $endtime[1]  = $meantemp[0] % 60;
>>         $userAvg{$env}{$user} = sprintf '%d:%02d', @endtime[0,1];
>>       }
>>     }
>>   }
>>
>>   return %userAvg;
>> }
>>
>> I've run this in the debugger and when I get to the line which assigns
>> $ticCount
>> I try to print it out and it's just blank.  If I keep hitting enter it
>> just
>> returns to a blank line.  I get the error when I continue to the next
>> line with 'c'.
> 
> Hi Mathew
> 
> First of all, you can replace
> 
>  $count->{$env}->{$user}->{$ticID}
> 
> with
> 
>  $count->{$env}{$user}{$ticID}
> 
> and Perl will infer the indirection. It makes for neater code.
> 
> The reason for your problem is that you've gone too far down in the hash
> structure. You
> said that $count->{$env}{$user}{$ticID} is a "count of how many times a
> user worked on
> [a] ticket", in this case 2. so you're then trying to do
> 
>  my $ticCount = scalar keys %{2};
> 
> which is failing.
> 
> Finally, you can round more efficiently by using int(x + 0.5). I suggest
> something
> like this (untested):
> 
>  sub average {
> 
>    my ($users, $count) = @_;
>    my %userAvg;
> 
>    foreach my $env (keys %$count) {
>      foreach my $user (keys %{ $count->{$env} }) {
> 
>          my $ticCount = scalar keys %{$count->{$env}{$user}};
> 
>          my $time = $users->{$env}{$user};
>          my $meantime = int($time / $ticCount + 0.5);
> 
>          $userAvg{$env}{$user} = sprintf '%d:%02d',
>              int($meantime / 60), $meantime % 60;
>      }
>    }
> 
>    return %userAvg;
>  }
> 
> HTH,
> 
> Rob
> 

Thanks.  That did the trick.  I'll be working with your provided method
for rounding up tonight when I get to work.

Mathew

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


