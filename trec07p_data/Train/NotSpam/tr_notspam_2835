From beginners-return-90903-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed Apr 18 13:53:52 2007
Return-Path: <beginners-return-90903-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3IHrp0I013870
	for <ktwarwic@speedy.uwaterloo.ca>; Wed, 18 Apr 2007 13:53:51 -0400
Received: (qmail 20836 invoked by uid 514); 18 Apr 2007 17:53:22 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 20826 invoked from network); 18 Apr 2007 17:53:21 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 18 Apr 2007 17:53:21 -0000
Received: (qmail 18790 invoked by uid 225); 18 Apr 2007 17:53:21 -0000
Delivered-To: beginners@perl.org
Received: (qmail 18785 invoked by alias); 18 Apr 2007 17:53:21 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of chas.owens@gmail.com designates 64.233.162.228 as permitted sender)
Received: from nz-out-0506.google.com (HELO nz-out-0506.google.com) (64.233.162.228)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Wed, 18 Apr 2007 10:53:18 -0700
Received: by nz-out-0506.google.com with SMTP id s1so196654nze
        for <beginners@perl.org>; Wed, 18 Apr 2007 10:53:13 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=hJhQIZWDvlxd94Dj9Jczhcg9hJBWEbErx77FCxkpwGRnMjEWWGfTDafWQ/VWXHxMnj/L06/k/nLKoJoHbZVJKe6+3dpX50M6iX2hUAh0/E7orRTfj0xHP5sV1dLoh2OtGm6yo/TFJPhg8715Lc4CjERq+dEIvGLTm7XCuQRHDRM=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=Tu/OpaGwe1kPl2cP3Mn/REiHc+45Bbzv3pwW+XHPPzgQ9XESkqJcfmI/dtq5iTlEvB3DuSTLB50VnQG4xjWk35q2NaBr9yNXxDDoW/Vk4cPw9VIeDaYqoHwRXZvxxwrcZ2E0xY3NGfPKlGyt7D1HnLKKVj0gL61U0yafEkT6ui0=
Received: by 10.114.169.2 with SMTP id r2mr332852wae.1176918793473;
        Wed, 18 Apr 2007 10:53:13 -0700 (PDT)
Received: by 10.114.79.3 with HTTP; Wed, 18 Apr 2007 10:53:13 -0700 (PDT)
Message-ID: <58ce48dc0704181053h28e94972s76caf6f2b3a300c2@mail.gmail.com>
Date: Wed, 18 Apr 2007 13:53:13 -0400
From: "Chas Owens" <chas.owens@gmail.com>
To: yitzle <yitzle@users.sourceforge.net>
Subject: Re: Array to Hash
Cc: "beginners perl" <beginners@perl.org>
In-Reply-To: <ca5781c80704181010t11ecfc97ua8a53b1c060c6d94@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <ca5781c80704181010t11ecfc97ua8a53b1c060c6d94@mail.gmail.com>
Status: O
Content-Length: 1699
Lines: 55

On 4/18/07, yitzle <yitzle@users.sourceforge.net> wrote:
> Any tips on compacting this sub?
>
> sub readFile($) {
>         my $fileName = shift;
>         open FILE, "<", $fileName;
>         while (<FILE>) {
>                 my($name,$oldCount,$oldNum) = split /~/;
>                 $dHash{$name}{'oldCount'} = $oldCount;
>                 $dHash{$name}{'oldNum'} = $oldNum;
>         }
>         close FILE;
> }

Don't use prototypes.  They are broken and will give you a false sense
of security.

Don't use global variables (%dHash), they make your code harder to
read and maintain.  Read up on decoupling.

Use lexical file handles instead and you don't have to close it (they
auto-close when they go out of scope).

open my $file, "<", $fileName or die "Could not open $fileName: $!";
while (<$file>) {

Use an anonymous hash ref in stead of assigning and use smaller names
for variables with limited scope.

my ($name,$cnt,$num) = split /~/;
$dHash{$name} = { oldCount => $cnt, oldNum => $num };

Alternatively, use a hash slice if you don't want to disturb other
keys that may exist at the level in %dHash

my ($name,$cnt,$num) = split /~/;
@{$dHash{$name}}{qw(oldCount oldNum)} = ($cnt, $num);

 Here is my version:
sub readFile {
    croak "readFile expects (filename, hashref)" unless @_ == 2 and
ref $_[1] == 'HASH';
    my ($file, $h) = @_;
    open my $f, "<", $file or die "could not open $f for reading: $!";
    while (<$f>) {
        my ($name, $cnt, $num) = split /~/;
        @{$h->{$name}}{qw(oldCount oldNum)} = ($cnt, $num);
    }
}

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


