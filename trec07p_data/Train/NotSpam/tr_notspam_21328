From perl6-all-return-82194-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu Jun 21 16:36:05 2007
Return-Path: <perl6-all-return-82194-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5LKa4L9028963
	for <ktwarwic@flax9.uwaterloo.ca>; Thu, 21 Jun 2007 16:36:05 -0400
Received: (qmail 432 invoked by uid 514); 21 Jun 2007 20:35:55 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 427 invoked from network); 21 Jun 2007 20:35:55 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
Date: Thu, 21 Jun 2007 19:02:26 +0100
From: Smylers <Smylers@stripey.com>
To: perl6-language@perl.org
Subject: Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn
Message-ID: <20070621180226.GK6900@stripey.com>
References: <20070613205525.7ECA0CB9B8@x12.develooper.com> <ef30550b0706131429o34838a6es6704e8ec73851b49@mail.gmail.com> <467073C4.6020708@conway.org> <20070614082341.GU31918@earth.overmeer.net> <832f158a0706141717j7accfb36w92bf3a2ed7a8e115@mail.gmail.com> <20070615075949.GR31918@earth.overmeer.net> <20070616090944.GG6900@stripey.com> <20070616103358.GB10601@earth.overmeer.net>
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20070616103358.GB10601@earth.overmeer.net>
User-Agent: Mutt/1.5.13 (2006-08-11)
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-0.2 required=8.0
	tests=BAYES_40,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS

Mark Overmeer writes:

> * Smylers (Smylers@stripey.com) [070616 09:09]:
> > 
> > You're concerned that an aspect of Perl 6 might have too much
> > freedom?  Isn't Perl all about giving users freedom to choose their
> > own way of doing something?
> 
> Why treat documentation as a second-class citizen all the time?

I'm not suggesting we do; it's precisely _because_ Perl provides so much
freedom in things like coding style that I think it would be bizarre to
be so restrictive in the documenation format.  Documentation should be a
first-class citizen, and therefore have as much freedom as coding.

> Why have a standard syntax for regexes, and not for docs?

We have a standard _syntax_ for docs; what you are additionally
proposing are standard _semantics_, which is something regeps (and other
areas of Perl) don't enforce -- they just provide the tools for
programmers to use them as they wish.

> Aren't you glad that at last we get a standard for OO programming and
> named parameters?

Yes.  But I'm also glad that these have both carefully been done in ways
which don't enforce them, leaving programmers free to do things in other
ways.

> The boundary between freedom and anacharchy is faint.

Indeed.  And I'd much rather we err on the side of anarchy.  Many times
have I been frustrated by the limits of some software or programming
language.  Far better to allow somebody enough freedom to create a poor
piece of software (since that's going to be possible anyway) than to go
too far in t'other direction and inadvertently prevent somebody in the
future from doing something really clever that none of us have yet
thought of.

> > Yes.  But in reality many people will follow what others do, or look
> > to follow best practices.  With Perl 5 you have complete freedom as
> > to the names of C<=head1> sections in the Pod for modules, yet in
> > browsing Cpan it's clear that there are conventions and many people
> > use the same headings.  So not mandating a convention isn't much of
> > a problem.
> 
> Well, the you are talking about the top three headers, the most.

Not true; there are several more which are shared between Cpan
distributions (by different authors).

> And those have a good example in standard UNIX manual-pages.  So:
> there is a definitions for them, which most people have seen.

I am sceptical of your claim that most Cpan authors have seen any
official definitions of sections in Unix manual pages.

> > Do you really think that people can now, before Perl 6 has gained
> > anything approaching the usage we expect, make policy for how things
> > should be documented, such that that policy will be the best
> > possible way of documenting everything written in Perl 6, for ever?
> > Or even a good way?
> 
> There is no need to think that a documentation syntax develops
> differently than a programming language.

I agree.  And programming languages develop in hard-to-predict ways,
which is why Larry is putting lots of flexibility for things to be
redefined into Perl 6, so it can grow and adapt in line with future
developments.  It would be good if Pod can keep up.

> So when Perl is developing, POD can develop in parallel.

Exactly!

> > That strikes me as incredibly shortsighted, verging on arrogance by
> > whoever comes up with the rules, and doomed to failure.
> 
> Sorry?  Not only you insult me,

Apologies, that wasn't supposed to be an insult.  Note that it isn't
that I'm objecting to your rules (nor any particular rules), nor
doubting your abilities to come up with good rules; you'd be one of the
best people for coming up with some standards.  I just don't believe
that _anybody_ can come up with rules that won't be bettered at some
point in the future.

> but you also ignore all these other languages which do have a nice and
> standard way of documenting.  Insignificant languages, like Java,
> which we tend to ignore.

I've encountered Javadoc, and I really dislike it[*0].  The fact that a
standard exists does not make it a good one.

Smylers

  [*0]  Consider a function C<valid_postcode>.  I'd document it along
  the lines of:

    valid_postcode

      Returns whether the specified postcode is valid, for example:

        if (valid_postcode $postcode) {

  Javadoc-style systems seem to insist on documentation like:

    valid_postcode
      Description: Returns whether the specified postcode is valid.
      Parameters:
        $postcode: (string) The postcode to test for validity
      Returns: (boolean) Whether $postcode is valid
      Exceptions: none
      Side Effects: none

  Lots of structure and consistency, but in practical terms no
  additional information compared to my informal doc -- and the
  verbosity and repetition actually make it harder to spot the
  information you want.

