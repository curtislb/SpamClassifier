From perl6-all-return-80906-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu Apr 26 19:44:57 2007
Return-Path: <perl6-all-return-80906-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3QNiu6w018600
	for <ktwarwic@speedy.uwaterloo.ca>; Thu, 26 Apr 2007 19:44:57 -0400
Received: (qmail 11442 invoked by uid 514); 26 Apr 2007 23:44:55 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 11437 invoked from network); 26 Apr 2007 23:44:55 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-4.4 required=8.0
	tests=ALL_TRUSTED,BAYES_00,DKIM_SIGNED,DK_POLICY_SIGNSOME,DK_SIGNED
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: moderator for perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Delivered-To: parrotbug-followup@parrotcode.org
Received-SPF: pass (x1.develooper.com: domain of yasapir@gmail.com designates 209.85.132.250 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:references;
        b=jwIPhZw6EMC39ayfIVbFUBpiXDjuj36l2g0NrCtS2THwImxvOl/vFOil4q8DL5LsvffDvN6nzt2UwFf5iUAv/E72J92XVzvV9FS/aEjYJAnAI4EGb4EEsBVAFApL75XG/uiNrKzZHkD+27Ncb0Wu/jbMZQMmd26rPYlZmdrV2vY=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:references;
        b=IAoKbNT3eu3cpDPX3KNXrnsirCX/HNMOSVEoxHW9D8get/WYPrYtFPEbjmAzJ/DCt/TAqdKyDVSCd+x3qlCaIuHRYZ+qYyp9RF22hJAsBvDcjMqialEYhpMV/iLl5pEPzEG4mHOqJ7jXWgA/tgJzR13P4ePv/iCBKC7+S/CUiHI=
Message-ID: <136714b40704261050i73781ct6d9df26395ea469a@mail.gmail.com>
Date: Thu, 26 Apr 2007 20:50:22 +0300
From: "Yehoshua Sapir" <yasapir@gmail.com>
To: parrotbug-followup@parrotcode.org
Subject: Re: [perl #42300] [PATCH] t/pmc/sub.t: test for creation of lex by clone op
In-Reply-To: <rt-3.6.HEAD-6655-1177566221-1029.42300-74-0@perl.org>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_67722_1829.1177609822424"
References: <RT-Ticket-42300@perl.org>
	 <136714b40704040724g26876a46je6602f95c8961087@mail.gmail.com>
	 <rt-3.6.HEAD-6655-1177566221-1029.42300-74-0@perl.org>
X-Virus-Checked: Checked
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.2 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,HTML_30_40,HTML_MESSAGE,SPF_PASS
Status: O
Content-Length: 2318
Lines: 73

------=_Part_67722_1829.1177609822424
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

On 4/26/07, Matt Diephouse via RT <parrotbug-followup@parrotcode.org> wrote:
>
> First, the test (rearranged to include only the relevant parts):
>
> +.sub main :main
> +    .local string ok, not_ok
> +    ok = "ok"
> +    not_ok = "not ok"
> +
> +    # if 'not ok' is printed, it means that the lexical environment
> +    # for the first closure in each pair, (where "out" = "ok")
> +    # was overwritten by the lexical environment created for the
> +    # second closure (where "out" = "not ok")
> +
> +    $P10 = makebar_clone(ok)
> +    $P20 = makebar_clone(not_ok)
> +    $P10()
> +.end
> +
> +.sub makebar_clone
> +    .param pmc out
> +    .lex 'out', out
> +    .const .Sub s = 'bar'
> +    $P0 = clone s
> +    .return($P0)
> +.end
> +
> +.sub bar :outer(makebar_clone)
> +    $P0 = find_lex 'out'
> +    say $P0
> +.end
>
> (This prints "not ok". The test in the patch expects "ok".)
>
> You're arguing that the different copies of "bar" that are returned from
> makebar_clone
> should have different lexical environments. I'm pretty sure that this is
> not the case. Without
> using "newclosure", there's no closure so the lexical environments are the
> same.
>
> What the :outer does in this case is rearrange the lexical stack so that
> "makebar_clone"
> appears in the lexical stack for "bar". So we're using the lexical
> environment from the last
> time that "makebar_clone" was called. It's bizarre that this even works
> because without the
> closure, I'd think that the lexical environment would have destroyed.
>
> I'm not sure how intentional this is. The PDD isn't clear (to me) about
> what :outer means in
> the absence of "newclosure". I'd definitely be interested in seeing why
> this would be a useful
> feature. More detail in the PDD would be nice.
>
> Thanks for the interesting patch.
>
> --
> Matt Diephouse
>
>
>
Now it makes sense. :) Anyway, I found this by following the Compiler FAQ,
which says that a new closure should be created by cloning the sub. I think
it should be changed to say newclosure, or even explain this (because you
might really want to clone the Sub in some cases.)

------=_Part_67722_1829.1177609822424--

