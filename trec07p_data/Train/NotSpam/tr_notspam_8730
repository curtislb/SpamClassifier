From r-help-bounces@stat.math.ethz.ch  Wed May  9 00:55:28 2007
Return-Path: <r-help-bounces@stat.math.ethz.ch>
Received: from hypatia.math.ethz.ch (hypatia.math.ethz.ch [129.132.145.15])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l494tKqD024481
	for <ktwarwic@flax9.uwaterloo.ca>; Wed, 9 May 2007 00:55:21 -0400
Received: from hypatia.math.ethz.ch (hypatia [129.132.145.15])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l494seok014978;
	Wed, 9 May 2007 06:54:51 +0200
X-Spam-Checker-Version: SpamAssassin 3.1.8 (2007-02-13) on hypatia.math.ethz.ch
X-Spam-Level: 
X-Spam-Status: No, score=-0.9 required=5.0 tests=AWL, BAYES_50,
	FORGED_RCVD_HELO autolearn=no version=3.1.8
Received: from markov.stats.ox.ac.uk (markov.stats.ox.ac.uk [163.1.210.1])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l494sX0b014944
	for <r-help@r-project.org>; Wed, 9 May 2007 06:54:33 +0200
Received: from gannet.stats.ox.ac.uk (gannet.stats [163.1.211.17])
	by markov.stats.ox.ac.uk (8.13.6/8.13.6) with ESMTP id l494sHov003271; 
	Wed, 9 May 2007 05:54:17 +0100 (BST)
Date: Wed, 9 May 2007 05:54:17 +0100 (BST)
From: Prof Brian Ripley <ripley@stats.ox.ac.uk>
To: Paulo Barata <pbarata@infolink.com.br>
In-Reply-To: <4640EE97.1090502@infolink.com.br>
Message-ID: <Pine.LNX.4.64.0705090552110.19448@gannet.stats.ox.ac.uk>
References: <07E228A5BE53C24CAD490193A7381BBB9727C1@LP-EXCHVS07.CO.IHC.COM>
	<Pine.LNX.4.64.0705011656260.28173@gannet.stats.ox.ac.uk>
	<46377911.9000404@infolink.com.br>
	<4637A697.8090400@stat.auckland.ac.nz>
	<4637B7B6.7000303@infolink.com.br>
	<4637C751.4080502@stat.auckland.ac.nz>
	<Pine.LNX.4.64.0705071006370.28591@gannet.stats.ox.ac.uk>
	<4640EE97.1090502@infolink.com.br>
MIME-Version: 1.0
X-Virus-Scanned: by amavisd-new at stat.math.ethz.ch
Cc: r-help@r-project.org, Paul Murrell <p.murrell@auckland.ac.nz>
Subject: Re: [R] to draw a smooth arc
X-BeenThere: r-help@stat.math.ethz.ch
X-Mailman-Version: 2.1.9
Precedence: list
List-Id: "Main R Mailing List: Primary help" <r-help.stat.math.ethz.ch>
List-Unsubscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=unsubscribe>
List-Archive: <https://stat.ethz.ch/pipermail/r-help>
List-Post: <mailto:r-help@stat.math.ethz.ch>
List-Help: <mailto:r-help-request@stat.math.ethz.ch?subject=help>
List-Subscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: r-help-bounces@stat.math.ethz.ch
Errors-To: r-help-bounces@stat.math.ethz.ch

On Tue, 8 May 2007, Paulo Barata wrote:

>
> Prof. Ripley,
>
> Maybe the fact that few R plot regions have a 1:1 aspect ratio
> is not a major problem here. One has to deal with the same
> issue when drawing a circle parametrically. Depending on the
> window size, a (cos(t),sin(t)) plot appears as an ellipse.
> To get a circle parametrically, one has to resize the plot region,
> or define it (possibly by trial and error) with functions like
> windows() or win.graph() (package grDevices), to have a 1:1 aspect
> ratio.

You miss the point: those graphics languages which support circular arcs 
do so in device space, not user space.

> Maybe more important is to have some sure way to draw smooth arcs
> and arrows. Could it be done even if the plot region does not have
> a 1:1 aspect ratio, when the arc (intended to be an arc of a circle)
> would show as an arc of an ellipse? Would the smooth ellipse arc
> then turn into a smooth circle arc, when the plot region is resized?
>
> Paulo Barata
> (Rio de Janeiro - Brazil)
>
> -----------------------------------------------------------------------
>
> Prof Brian Ripley wrote:
>> There is now an xspline() function in R-devel, with an example showing how 
>> to add arrows.
>> 
>> I thought a bit more about a 'circular arc' function, but there really is a 
>> problem with that.  Few R plot regions have a 1:1 aspect ratio including 
>> some that are intended to do so (see the rw-FAQ).  symbols() is designed to 
>> draw circles in device coordinates, but attempting to specify circular arcs 
>> by endpoints in user coordinates is fraught.
>> 
>> On Wed, 2 May 2007, Paul Murrell wrote:
>> 
>>> Hi
>>> 
>>> 
>>> Paulo Barata wrote:
>>>> Dr. Murrell and all,
>>>> 
>>>> One final suggestion: a future function arc() in package graphics,
>>>> with centre-radius-angle parameterisation, could also include an
>>>> option to draw arrows at either end of the arc, as one can find
>>>> in function arrows().
>>> 
>>> 
>>> ... and in grid.xspline() and grid.curve().
>>> 
>>> Paul
>>> 
>>> 
>>>> Thank you.
>>>> 
>>>> Paulo Barata
>>>> 
>>>> -----------------------------------------------------------------------
>>>> Paul Murrell wrote:
>>>>> Hi
>>>>> 
>>>>> 
>>>>> Paulo Barata wrote:
>>>>>> Dr. Snow and Prof. Ripley,
>>>>>> 
>>>>>> Dr. Snow's suggestion, using clipplot (package TeachingDemos),
>>>>>> is maybe a partial solution to the problem of drawing an arc of
>>>>>> a circle (as long as the line width of the arc is not that large,
>>>>>> as pointed out by Prof. Ripley). If the arc is symmetrical around
>>>>>> a vertical line, then it is not so difficult to draw it that way.
>>>>>> But an arc that does not have this kind of symmetry would possibly
>>>>>> require some geometrical computations to find the proper rectangle
>>>>>> to be used for clipping.
>>>>>> 
>>>>>> I would like to suggest that in a future version of R some function
>>>>>> be included in the graphics package to draw smooth arcs with
>>>>>> given center, radius, initial and final angles. I suppose
>>>>>> that the basic ingredients are available in function "symbols"
>>>>>> (graphics).
>>>>> 
>>>>> Just to back up a few previous posts ...
>>>>> 
>>>>> There is something like this facility already available via the
>>>>> grid.xspline() function in the grid package.  This provides very
>>>>> flexible curve drawing (including curves very close to Bezier curves)
>>>>> based on the X-Splines implemented in xfig.  The grid.curve() function
>>>>> provides a convenience layer that allows for at least certain
>>>>> parameterisations of arcs (you specify the arc end points and the 
>>>>> angle).
>>>>> 
>>>>> These functions are built on functionality within the core graphics
>>>>> engine, so exposing a similar interface (e.g., an xspline() function)
>>>>> within "traditional" graphics would be relatively straightforward.
>>>>> 
>>>>> The core functionality draws the curves as line segments (but
>>>>> automatically figures out how many segments to use so that the curve
>>>>> looks smooth);  it does NOT call curve-drawing primitives in the
>>>>> graphics device (like PostScript's curveto).
>>>>> 
>>>>> In summary:  there is some support for smooth curves, but we could still
>>>>> benefit from a specific arc() function with the standard
>>>>> centre-radius-angle parameterisation and we could also benefit from
>>>>> exposing the native strengths of different graphics devices (rather than
>>>>> the current lowest-common-denominator approach).
>>>>> 
>>>>> Paul
>>>>> 
>>>>> 
>>>>>> Thank you very much.
>>>>>> 
>>>>>> Paulo Barata
>>>>>> (Rio de Janeiro - Brazil)
>>>>>> 
>>>>>> ----------------------------------------------------------------------- 
>>>>>> Prof Brian Ripley wrote:
>>>>>>> On Tue, 1 May 2007, Greg Snow wrote:
>>>>>>> 
>>>>>>>> Here is an approach that clips the circle you like from symbols down 
>>>>>>>> to
>>>>>>>> an arc (this will work as long as the arc is less than half a circle,
>>>>>>>> for arcs greater than half a circle, you could draw the whole circle
>>>>>>>> then use this to draw an arc of the bacground color over the section 
>>>>>>>> you
>>>>>>>> don't want):
>>>>>>>> 
>>>>>>>> library(TeachingDemos)
>>>>>>>> plot(-5:5, -5:5, type='n')
>>>>>>>> clipplot( symbols(0,0,circles=2, add=TRUE), c(0,5), c(0,5) )
>>>>>>> I had considered this approach: clipping a circle to a rectangle isn't
>>>>>>> strictly an arc, as will be clear if the line width is large.
>>>>>>> Consider
>>>>>>> 
>>>>>>> clipplot(symbols(0, 0 ,circles=2, add=TRUE, lwd=5), c(-1,5), c(-1,5))
>>>>>>> 
>>>>>>> Note too that what happens with clipping is device-dependent.  If R's
>>>>>>> internal clipping is used, the part-circle is converted to a polygon.
>>>>>>> 
>>>>>>> 
>>>>>> ______________________________________________
>>>>>> R-help@stat.math.ethz.ch mailing list
>>>>>> https://stat.ethz.ch/mailman/listinfo/r-help
>>>>>> PLEASE do read the posting guide 
>>>>>> http://www.R-project.org/posting-guide.html
>>>>>> and provide commented, minimal, self-contained, reproducible code.
>>> 
>>> 
>> 
>

-- 
Brian D. Ripley,                  ripley@stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595

______________________________________________
R-help@stat.math.ethz.ch mailing list
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.

