From perl6-all-return-81940-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed Jun 13 14:41:47 2007
Return-Path: <perl6-all-return-81940-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5DIfjL9011114
	for <ktwarwic@flax9.uwaterloo.ca>; Wed, 13 Jun 2007 14:41:45 -0400
Received: (qmail 8840 invoked by uid 514); 13 Jun 2007 18:41:43 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 8835 invoked from network); 13 Jun 2007 18:41:43 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: softfail (x1.develooper.com: transitioning domain of chromatic@wgz.org does not designate 63.251.223.186 as permitted sender)
Delivered-To: perlmail-parrot-porters@onion.perl.org
Delivered-To: parrot-porters@perl.org
Received-SPF: pass (x1.develooper.com: domain of chromatic@wgz.org designates 63.105.17.39 as permitted sender)
From: chromatic <chromatic@wgz.org>
Organization: Snafu
To: parrot-porters@perl.org
Subject: I Hate find_vtable_meth_ns()
Date: Wed, 13 Jun 2007 11:40:55 -0700
User-Agent: KMail/1.9.6
MIME-Version: 1.0
Content-Type: Multipart/Mixed;
  boundary="Boundary-00=_3oDcGVqg6PCVwG8"
Message-Id: <200706131140.55630.chromatic@wgz.org>
X-Virus-Scanned: by amavisd-new at wgz.org
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-0.2 required=8.0
	tests=BAYES_40,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-0.1 required=8.0
	tests=BAYES_20,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_SOFTFAIL

--Boundary-00=_3oDcGVqg6PCVwG8
Content-Type: text/plain;
  charset="us-ascii"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

Look in src/objects.c, around line 80.  This function looks up a vtable method 
in a namespace.  It has the name of the vtable method, as well as the number 
of the vtable method.

Look how it reaches *inside* the namespace, grabs an iterator, and proceeds to 
iterate through all of the keys of the namespace, trying to match the name or 
the type number.

(One wonders why we bother with hashes, if O(n) is so much better for 
something we do as often as looking up methods.)

For kicks, here's a slightly nicer version.  There are potential improvements 
there, but it's shorter, clearer, and O(1) instead of O(n).  This makes a big 
difference.  Here's what callgrind thinks of parrot perl6.pbc 
t/01-sanity/01-tap.t before the change:

           Ir sysCount sysTime 
--------------------------------------------------------------------------------
2,859,808,451      452     591  PROGRAM TOTALS

--------------------------------------------------------------------------------
         Ir sysCount sysTime  file:function
--------------------------------------------------------------------------------
370,031,493        .       .  hash.c:parrot_hash_get_idx 
296,162,666        .       .  ascii.c:ascii_compare 
216,535,642        .       .  hash.c:parrot_hash_get_bucket 
205,389,756        .       .  string.c:string_compare 
188,198,076        .       .  objects.c:find_vtable_meth_ns 
132,994,291        .       .  dod.c:Parrot_dod_sweep 
116,631,596        .       .   
namespace.pmc:Parrot_NameSpace_get_pmc_keyed_str

... and after:

         Ir sysCount sysTime 
--------------------------------------------------------------------------------
880,046,504      495  22,527  PROGRAM TOTALS

--------------------------------------------------------------------------------
        Ir sysCount sysTime  file:function
--------------------------------------------------------------------------------
98,680,680        .       .  dod.c:Parrot_dod_sweep 
78,138,108        .       .  resources.c:compact_pool 
70,556,241        .       .  ascii.c:ascii_compute_hash 
49,233,260        .       .  string.c:string_make_direct 
41,103,096        .       .  headers.c:get_free_buffer 
30,652,923        .       .  resources.c:Parrot_allocate_string 
30,365,471        .       .  strcmp.c:strcmp

The resulting work is 30% that of the previous.  This is a huge amount of 
execution time.  (Note how even the functions in both lists do much less work 
in the second one.)

Unfortunately, applying this patch fails some other tests, and I'm not sure 
why.  (My guess is that more PMCNULLs will help.)

I wonder if changing the Namespace PMC to store all vtable methods in such a 
way that an indexed lookup will work is a benefit.  It might simplify the 
code even further.

-- c


--Boundary-00=_3oDcGVqg6PCVwG8
Content-Type: text/x-diff;
  charset="us-ascii";
  name="vtable_ns_lookup.patch"
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment;
	filename="vtable_ns_lookup.patch"

=== src/objects.c
==================================================================
--- src/objects.c	(revision 3994)
+++ src/objects.c	(local)
@@ -81,27 +81,16 @@
 static PMC*
 find_vtable_meth_ns(Interp *interp, PMC *ns, INTVAL vtable_index)
 {
-    const INTVAL k   = VTABLE_elements(interp, ns);
-    PMC   * const key = VTABLE_nextkey_keyed(interp, key_new(interp), ns,
-        ITERATE_FROM_START);
+    const char * const  meth     = Parrot_vtable_slot_names[vtable_index];
+    UINTVAL      const  meth_len = strlen(meth);
+    STRING             *key      = string_from_cstring(interp, meth     + 2,
+                                                               meth_len - 2 );
+    PMC * const res              = VTABLE_get_pmc_keyed_str(interp, ns, key);
 
-    const char * const meth     = Parrot_vtable_slot_names[vtable_index];
-    STRING     * const meth_str = string_from_cstring(interp, meth, strlen(meth));
+    if (   ! PMC_IS_NULL(res)
+        &&   VTABLE_isa(interp, res, CONST_STRING(interp, "Sub")))
+             return res;
 
-    int         j;
-
-    for (j = 0; j < k; ++j) {
-        STRING * const ns_key = (STRING *)parrot_hash_get_idx(interp,
-                            (Hash *)PMC_struct_val(ns), key);
-        PMC * const res    = VTABLE_get_pmc_keyed_str(interp, ns, ns_key);
-
-        /* success if matching vtable index or double-underscored name */
-        if (res->vtable->base_type == enum_class_Sub &&
-               (PMC_sub(res)->vtable_index == vtable_index ||
-                string_compare(interp, meth_str, ns_key) == 0))
-            return res;
-    }
-
     return PMCNULL;
 }
 

--Boundary-00=_3oDcGVqg6PCVwG8--

