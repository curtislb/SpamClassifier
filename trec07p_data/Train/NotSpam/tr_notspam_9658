From perl6-all-return-81264-ktwarwic=speedy.uwaterloo.ca@perl.org  Sat May 12 00:30:51 2007
Return-Path: <perl6-all-return-81264-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4C4UmqD005696
	for <ktwarwic@flax9.uwaterloo.ca>; Sat, 12 May 2007 00:30:49 -0400
Received: (qmail 9628 invoked by uid 514); 12 May 2007 04:30:46 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 9623 invoked from network); 12 May 2007 04:30:46 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: domain of codermattie@gmail.com designates 64.233.166.180 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:date:from:to:subject:message-id:x-mailer:mime-version:content-type;
        b=iTYCttlmh/NlpjmpL57LusKB3dGLBl6POVn7F1JuU/kAbdWVkBpxurbUWb73HBN9EAAzX33XPRvf5vI93fiRyoqXE6aWDylLUf15cZGsMi68n0zCl0cCQE4KgUtcGlGVvEBoJ+TOEbAqtgJJEj6oyjeuexnG72ZLn6DyET5Z7qc=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:date:from:to:subject:message-id:x-mailer:mime-version:content-type;
        b=GojtoUg+AgoElbNEQq1M2nzQZX+wba++lykCXC0f5FcaPJcSKGeT0Ap5L2Yttvsz9oBZnW/v9JpQ5Pwxf8tvhIetjPGdt8zN3lsd8NEh89m5K1jl5FiORiiW80IDw0svKnSl55yGHUByjg1ZtFOryNt+5PKYuB9hXZQx815z8pg=
Date: Fri, 11 May 2007 21:26:42 -0700
From: Mike Mattie <codermattie@gmail.com>
To: chromatic <chromatic@wgz.org>, parrot ML <perl6-internals@perl.org>
Subject: questions on pheme
Message-ID: <20070511212642.1385f807@reforged>
X-Mailer: Claws Mail 2.6.1 (GTK+ 2.10.9; i686-pc-linux-gnu)
Mime-Version: 1.0
Content-Type: multipart/signed; boundary=Sig_kyzhRW6NsA5KSgYcEF2IcgH;
 protocol="application/pgp-signature"; micalg=PGP-SHA1
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS

--Sig_kyzhRW6NsA5KSgYcEF2IcgH
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: quoted-printable

Hello,

I am very interested in chromatic's pheme language. I have been reading thr=
ough the code
and looking at your TODO list. I thought I would tackle some of the easier =
issues
to get a handle on PIR and help out a bit.

questions:

1. Are you targetting r5 or r6 ? I think r6 would be a better fit for parrot
   myself. In particular the spec for (library foo) aka name-spaces would
   help pheme integrate with parrot/other languages better.
=20
I decided to start with something easy: whitespace.

I looked up r6 which has a nice BNF grammar that is a useful starting point.
I came up with the rules below:

rule ignore { [ <comment> | <delimiter> ]* }

token comment { ; \N* <eol> }

rule delimiter { <blank> | <eol> }
token blank { <[\ \t]>+ }
token eol { \n\r? }

I know almost zero about PGE, I am reading docs etc. but basically what
I would like to do is build tokens out of tokens. Ideally I would like
to make both "ignore" and "delimiter" be tokens , not rules.

This is more of a writing convenience. In a difficult sed script I built in=
=20
the past to go through and convert a bunch of broken C++ decls I would use
shell variables to store regex building blocks, and then assemble those
building blocks into higher level expressions with basic string interpolati=
on.

question:

1. can tokens be used to build tokens ? In perl 5 I would compile a regex w=
ith=20
   string interpolation to get this sort of functionality. if so is there a=
 name=20
   for this feature in PGE ?=20

2. token eol { \n\r? }

   This is pretty clearly for handling windows line terminators. This is th=
e sort
   of thing that should be pushed down into parrot. a special builtin "eol"=
 or
   "end-of-line" token could help get rid of this stuff out of parrot. Is t=
his
   RT worthy ? Something like this would definitely fit with the "conservat=
ion of
   cruft" principle.

3. Is there a tool for pretty printing a AST dump ? I am thinking of dumping
   the AST using dump, then using a classic tree drawing algorithm , and
   drawing a tree using SVG. Something like that could probably be done
   easily in perl5. Is there a tool like this ?

4. how do you debug AST ? recommended tools ?

atom handling:

I noticed that atom handling looked very alpha. It looks like you want to d=
istinguish
between symbols "foo" | "foo-bar" , and literal values "#t" | "#f". This is=
 really nasty
to do at a lexical level.

A nicer way to do this would be to form a string token like this:

token string { <!reserved>+ }

token reserved {
  # r5 reserved
  # future reserved
  <[
    \( \) \# '

    \[ \] \{ \}
  ]>
}

At this point most languages are going to need to post-lexical analysis of =
the=20
string to distinguish literal values from symbols. A syntax like this would=
 be
nice:

token truth:string {
  # <[tf]>
}

token integral:string {
  \d+
}

token symbol:string fallback

This syntax would indicate that after the token string has been lexed that
it is again analyzed by a regex, and converted to either a truth value,
integral value, or a symbol if all else fails.

If this is not already implemented I would like to create a TODO RT for
it.

Thanks for any comments/suggestions.

Cheers,
Mike Mattie - codermattie@gmail.com

--Sig_kyzhRW6NsA5KSgYcEF2IcgH
Content-Type: application/pgp-signature; name=signature.asc
Content-Disposition: attachment; filename=signature.asc

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.6 (GNU/Linux)

iD8DBQFGRUIMdfRchrkBInkRAtMSAKCBYfz5Lh8kBjccw1+AGcz+7uGInQCgiDwh
3lX2MOJvqGKgGgEP4ujdC2U=
=+zqt
-----END PGP SIGNATURE-----

--Sig_kyzhRW6NsA5KSgYcEF2IcgH--

