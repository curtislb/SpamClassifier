From perl6-all-return-81973-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu Jun 14 18:19:25 2007
Return-Path: <perl6-all-return-81973-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5EMJOL9027105
	for <ktwarwic@flax9.uwaterloo.ca>; Thu, 14 Jun 2007 18:19:24 -0400
Received: (qmail 4686 invoked by uid 514); 14 Jun 2007 22:19:22 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 4681 invoked from network); 14 Jun 2007 22:19:22 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: domain of dataweaver@gmail.com designates 64.233.162.239 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=QTswdfzQoiUQY4Cy9UqyPzo7atJ1oHnI+K2gFku0o8FBZVBd8On7BKVRfgzGogUjIfUn74fROXfq7RYWKbbwBMND6XyltydpDsBjsnKUXEYOGQ61teYemkmExSP1bhZfsr0xmxfTHxjVDUjnR5l7dELGi/n8w/3Vbo3n/sN/8UE=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=aevMm3vpkdlx1b6flQPVTn5jxkUcxXboWY/poOKhKuruiYd7vI7QbFOjUMtbXSxXH77BbHJ9KKD930H0YT+ctwdo/gecH7ou6OBqDh/mTuATqJ/JkhmH+w1BksQv07EBZ8qYfJNV06rktWrQAznK3cvQFVjz5F0PlTabe5di0/E=
Message-ID: <ef30550b0706141512q5f8e9d48y9cf33784fe3d5700@mail.gmail.com>
Date: Thu, 14 Jun 2007 15:12:15 -0700
From: "Jonathan Lang" <dataweaver@gmail.com>
To: "perl6-language@perl.org" <perl6-language@perl.org>
Subject: Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn
In-Reply-To: <20070614184735.GA24866@wall.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <20070613205525.7ECA0CB9B8@x12.develooper.com>
	 <ef30550b0706131429o34838a6es6704e8ec73851b49@mail.gmail.com>
	 <467073C4.6020708@conway.org>
	 <ef30550b0706140749w6c6290e9qc164901b578a8d5b@mail.gmail.com>
	 <46715CD3.7070008@boyers.org> <20070614184735.GA24866@wall.org>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS

Larry Wall wrote:
> So I think a named reference is a good compromise, where the name in
> the documentation (in some easily recognized syntactic form) refers
> to the next declaration (or set of declarations) of that same name.
> Hopefully the pod either knows implicitly or has been told explicitly
> how to parse out such declarations for insertion into the document.
> (And a positional notation could just be a degenerate case of not
> specifying the name (or using a name of * maybe), so it finds the
> next declaration of any name.  Maybe even some kind of wildcarding
> works for hybrid situations.)
>
> The syntax for such named forward references is open for bikeshedding.
> (I've intentionally not given any examples in this message to avoid
> prejudicing the matter.)

My first instinct for such a thing would be to surround the perl code
to be referenced with POD-like tags:

  =code name
  class foo
  ...
  =/code

...the idea being that a Perl parser treats the =code and =/code lines
as line comments, while a Pod parser would take the block of lines
that exists between the two and attaches it to 'name', to be rendered
as is whenever 'name' is referenced.

In short, =code and =/code would define a target which could then be
referenced as few or as many times as you want within your regular
perl code using something like

  =ref name

...where POD would substitute

  class foo
  ...

every time that it sees

  =ref name

--

Expanding on this idea:

* if you don't specify a name on a '=ref' line, you automatically
reference the next '=code' section to be found.  If you don't bother
naming a '=code' section, this is the only way that it can be
referenced.  If you give '^' as the name, then you automatically
reference the last code section that was found.  So:

  =begin pod
  =ref
  =end pod

  =code
  foo
  =/code

  =begin pod
  =ref ^
  =end pod

would render the same as

  =begin pod
  foo
  =end pod
  =begin pod
  foo
  =end pod

* Put a number instead of a name, and it counts up (if negative) or
down (if non-negative) through the code blocks, with -1 being the
previous code block and 0 being the next one.  A blank name is
equivalent to 0, and a '^' is equivalent to -1.  This should be used
sparingly.

* Add or subtract a number to/from a name, and you count up or down
from that name, with '+1' giving the first code block following the
named codeblock and '-1' giving the last code block prior to it.

* In the same way that '=code'...'=/code' is designed to mimic the
'=begin'...'=end' syntax of POD blocks, you could introduce a
variation of '=code' that mimics the '=for' syntax by grabbing the
next line or block of code (say, '=codeline' and '=codeblock'), where
a block of code is terminated by a blank line.

* the final violation of the separation of Church and State would be
to have the Church ask the State to do something for it.  Let a
'=code' line specify a parser (such as perl): Pod passes the block of
code to the specified parser; that parser then (presumably) goes
through its paces with the goal of extracting language-specific
documentation (such as the previously suggested 'is doc' traits),
formatting the result as a text block, and handing that block back to
the POD parser.  If Pod can't talk to the language parser or vice
versa, Pod simply uses the code block as is.

-- 
Jonathan "Dataweaver" Lang

