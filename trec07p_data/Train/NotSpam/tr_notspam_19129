From samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org  Thu Jun 14 08:29:38 2007
Return-Path: <samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org>
Received: from lists.samba.org (mail.samba.org [66.70.73.150])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l5ECTYL9021388
	for <ktwarwic@speedy.uwaterloo.ca>; Thu, 14 Jun 2007 08:29:35 -0400
Received: from dp.samba.org (localhost [127.0.0.1])
	by lists.samba.org (Postfix) with ESMTP id E8E611639D2
	for <ktwarwic@speedy.uwaterloo.ca>; Thu, 14 Jun 2007 12:29:33 +0000 (GMT)
X-Spam-Checker-Version: SpamAssassin 3.1.7 (2006-10-05) on dp.samba.org
X-Spam-Level: 
X-Spam-Status: No, score=-0.4 required=3.8 tests=AWL,BAYES_00,
	DATE_IN_PAST_12_24,FORGED_RCVD_HELO,RCVD_IN_DSBL autolearn=no 
	version=3.1.7
X-Original-To: samba-cvs@samba.org
Delivered-To: samba-cvs@samba.org
Received: from smtp-vbr3.xs4all.nl (smtp-vbr3.xs4all.nl [194.109.24.23])
	by lists.samba.org (Postfix) with ESMTP id D1ED0163822
	for <samba-cvs@samba.org>; Thu, 14 Jun 2007 12:28:57 +0000 (GMT)
Received: from rhonwyn.vernstok.nl (a62-251-123-16.adsl.xs4all.nl
	[62.251.123.16])
	by smtp-vbr3.xs4all.nl (8.13.8/8.13.8) with ESMTP id l5ECSruO011149
	for <samba-cvs@samba.org>; Thu, 14 Jun 2007 14:28:57 +0200 (CEST)
	(envelope-from jelmer@vernstok.nl)
Received: from localhost (localhost [127.0.0.1])
	by rhonwyn.vernstok.nl (Postfix) with ESMTP id 656CE103827
	for <samba-cvs@samba.org>; Thu, 14 Jun 2007 14:28:52 +0200 (CEST)
Received: from rhonwyn.vernstok.nl ([127.0.0.1])
	by localhost (rhonwyn.vernstok.nl [127.0.0.1]) (amavisd-new, port 10024)
	with SMTP id e2fOgFrLvE7t for <samba-cvs@samba.org>;
	Thu, 14 Jun 2007 14:28:43 +0200 (CEST)
Received: from ganieda.vernstok.nl (localhost [127.0.0.1])
	by rhonwyn.vernstok.nl (Postfix) with ESMTP id 20B5010381D
	for <samba-cvs@samba.org>; Thu, 14 Jun 2007 14:28:43 +0200 (CEST)
Received: by ganieda.vernstok.nl (Postfix, from userid 1000)
	id B5F635C4BB1; Wed, 13 Jun 2007 19:38:04 +0200 (CEST)
To: samba-cvs@samba.org
From: Jelmer Vernooij <jelmer@samba.org>
Message-Id: <20070613173804.B5F635C4BB1@ganieda.vernstok.nl>
Date: Wed, 13 Jun 2007 19:38:04 +0200 (CEST)
X-Virus-Scanned: by XS4ALL Virus Scanner
Subject: Rev 11188: Make ldb pass the current tests. in
	file:///home/jelmer/bzr.samba-old/4.0-regwrite/
X-BeenThere: samba-cvs@lists.samba.org
X-Mailman-Version: 2.1.5
Precedence: list
Reply-To: samba-technical@lists.samba.org
List-Id: Samba CVS and subversion commit messages <samba-cvs.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/archive/samba-cvs>
List-Post: <mailto:samba-cvs@lists.samba.org>
List-Help: <mailto:samba-cvs-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=subscribe>
Sender: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Errors-To: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org

At file:///home/jelmer/bzr.samba-old/4.0-regwrite/

------------------------------------------------------------
revno: 11188
revision-id: jelmer@samba.org-20070612202736-meu8bltye0rberi6
parent: jelmer@samba.org-20070612200826-54acueedast7lnmr
committer: Jelmer Vernooij <jelmer@samba.org>
branch nick: 4.0-regwrite
timestamp: Tue 2007-06-12 22:27:36 +0200
message:
  Make ldb pass the current tests.
modified:
  source/lib/registry/ldb.c      svn-v2:4132@0c0555d6-39d7-0310-84fc-f1cc0bd64818-branches%2fSAMBA_4_0-source%2flib%2fregistry%2freg_backend_ldb.c
  source/lib/registry/tests/hive.c hive.c-20070612151642-hsxkm8j4r69ej3px-1
=== modified file 'source/lib/registry/ldb.c'
--- a/source/lib/registry/ldb.c	2007-06-12 16:54:40 +0000
+++ b/source/lib/registry/ldb.c	2007-06-12 20:27:36 +0000
@@ -25,6 +25,8 @@
 #include "db_wrap.h"
 #include "librpc/gen_ndr/winreg.h"
 
+static struct hive_operations reg_backend_ldb;
+
 struct ldb_key_data 
 {
 	struct hive_key key;
@@ -34,7 +36,8 @@
 	int subkey_count, value_count;
 };
 
-static void reg_ldb_unpack_value(TALLOC_CTX *mem_ctx, struct ldb_message *msg, const char **name, uint32_t *type, DATA_BLOB *data)
+static void reg_ldb_unpack_value(TALLOC_CTX *mem_ctx, struct ldb_message *msg, const char **name, 
+								 uint32_t *type, DATA_BLOB *data)
 {
 	const struct ldb_val *val;
 	*name = talloc_strdup(mem_ctx, ldb_msg_find_attr_as_string(msg, "value", NULL));
@@ -45,7 +48,8 @@
 	{
 	case REG_SZ:
 	case REG_EXPAND_SZ:
-		data->length = convert_string_talloc(mem_ctx, CH_UTF8, CH_UTF16, val->data, val->length, (void **)&data->data);
+		data->length = convert_string_talloc(mem_ctx, CH_UTF8, CH_UTF16, 
+											 val->data, val->length, (void **)&data->data);
 		break;
 
 	case REG_DWORD: {
@@ -73,7 +77,8 @@
 	switch (type) {
 	case REG_SZ:
 	case REG_EXPAND_SZ:
-		val.length = convert_string_talloc(mem_ctx, CH_UTF16, CH_UTF8, (void *)data.data, data.length, (void **)&val.data);
+		val.length = convert_string_talloc(mem_ctx, CH_UTF16, CH_UTF8, 
+										   (void *)data.data, data.length, (void **)&val.data);
 		ldb_msg_add_value(msg, "data", &val, NULL);
 		break;
 
@@ -130,7 +135,7 @@
 		return NULL;
 	}
 
-	while(mypath) {
+	while (mypath) {
 		char *keyname;
 
 		begin = strrchr(mypath, '\\');
@@ -197,7 +202,8 @@
 	return WERR_OK;
 }
 
-static WERROR ldb_get_value_by_id(TALLOC_CTX *mem_ctx, const struct hive_key *k, int idx, const char **name, uint32_t *data_type, DATA_BLOB *data)
+static WERROR ldb_get_value_by_id(TALLOC_CTX *mem_ctx, const struct hive_key *k, int idx, 
+								  const char **name, uint32_t *data_type, DATA_BLOB *data)
 {
 	struct ldb_key_data *kd = talloc_get_type(k, struct ldb_key_data);
 	struct ldb_context *c = kd->ldb;
@@ -280,6 +286,7 @@
 	ldb_set_debug_stderr(wrap);
 
 	kd = talloc_zero(parent_ctx, struct ldb_key_data);
+	kd->key.ops = &reg_backend_ldb;
 	kd->ldb = wrap;
 	talloc_set_destructor (kd, reg_close_ldb_key);
 	kd->dn = ldb_dn_new(kd, wrap, "hive=NONE");
@@ -289,8 +296,8 @@
 	return WERR_OK;
 }
 
-static WERROR ldb_add_key (TALLOC_CTX *mem_ctx, struct hive_key *parent, 
-						   const char *name, uint32_t access_mask, 
+static WERROR ldb_add_key (TALLOC_CTX *mem_ctx, const struct hive_key *parent, 
+						   const char *name, const char *classname,
 						   struct security_descriptor *sd, 
 						   struct hive_key **newkey)
 {
@@ -320,7 +327,7 @@
 	return WERR_OK;
 }
 
-static WERROR ldb_del_key (struct hive_key *key, const char *child)
+static WERROR ldb_del_key (const struct hive_key *key, const char *child)
 {
 	int ret;
 	struct ldb_key_data *parentkd = talloc_get_type(key, struct ldb_key_data);
@@ -333,7 +340,9 @@
 
 	talloc_free(childdn);
 
-	if (ret < 0) {
+	if (ret == LDB_ERR_NO_SUCH_OBJECT) {
+		return WERR_NOT_FOUND;
+	} else if (ret < 0) {
 		DEBUG(1, ("ldb_del_key: %s\n", ldb_errstring(parentkd->ldb)));
 		return WERR_FOOBAR;
 	}
@@ -390,6 +399,29 @@
 	return WERR_OK;
 }
 
+static WERROR ldb_get_key_info(TALLOC_CTX *mem_ctx, 
+							   const struct hive_key *key,
+							   const char **classname, 
+							   uint32_t *num_subkeys,
+							   uint32_t *num_values,
+							   NTTIME *last_change_time)
+{
+	/* FIXME */
+	if (classname != NULL)
+		*classname = NULL;
+
+	if (num_subkeys != NULL)
+		*num_subkeys = 0;
+
+	if (num_values != NULL)
+		*num_values = 0;
+
+	if (last_change_time != NULL)
+		*last_change_time = 0;
+
+	return WERR_OK;
+}
+
 static struct hive_operations reg_backend_ldb = {
 	.name = "ldb",
 	.add_key = ldb_add_key,
@@ -399,4 +431,5 @@
 	.enum_key = ldb_get_subkey_by_id,
 	.set_value = ldb_set_value,
 	.delete_value = ldb_del_value,
+	.get_key_info = ldb_get_key_info,
 };

=== modified file 'source/lib/registry/tests/hive.c'
--- a/source/lib/registry/tests/hive.c	2007-06-12 20:08:26 +0000
+++ b/source/lib/registry/tests/hive.c	2007-06-12 20:27:36 +0000
@@ -91,7 +91,6 @@
 
 static bool hive_setup_dir(struct torture_context *tctx, void **data)
 {
-
 	struct hive_key *key;
 	WERROR error;
 
@@ -106,6 +105,23 @@
 	return true;
 }
 
+static bool hive_setup_ldb(struct torture_context *tctx, void **data)
+{
+	struct hive_key *key;
+	WERROR error;
+
+	error = reg_open_ldb_file(tctx, "bla-ldb", NULL, NULL, &key);
+	if (!W_ERROR_IS_OK(error)) {
+		fprintf(stderr, "Unable to initialize ldb hive\n");
+		return false;
+	}
+
+	*data = key;
+
+	return true;
+
+}
+
 static bool test_dir_refuses_null_location(struct torture_context *tctx)
 {
 	torture_assert_werr_equal(tctx, WERR_INVALID_PARAM, 
@@ -127,5 +143,9 @@
 	tcase = torture_suite_add_tcase(suite, "dir");
 	torture_tcase_set_fixture(tcase, hive_setup_dir, NULL);
 	tcase_add_tests(tcase);
+
+	tcase = torture_suite_add_tcase(suite, "ldb");
+	torture_tcase_set_fixture(tcase, hive_setup_ldb, NULL);
+	tcase_add_tests(tcase);
 	return suite;
 }

