From r-help-bounces@stat.math.ethz.ch  Wed Apr 25 07:20:32 2007
Return-Path: <r-help-bounces@stat.math.ethz.ch>
Received: from hypatia.math.ethz.ch (hypatia.math.ethz.ch [129.132.145.15])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l3PBKV6w029753
	for <ktwarwic@speedy.uwaterloo.ca>; Wed, 25 Apr 2007 07:20:32 -0400
Received: from hypatia.math.ethz.ch (hypatia [129.132.145.15])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l3PBJYie018188;
	Wed, 25 Apr 2007 13:19:54 +0200
X-Spam-Checker-Version: SpamAssassin 3.1.8 (2007-02-13) on hypatia.math.ethz.ch
X-Spam-Level: 
X-Spam-Status: No, score=-0.3 required=5.0 tests=AWL,
	BAYES_50 autolearn=no version=3.1.8
Received: from ug-out-1314.google.com (ug-out-1314.google.com [66.249.92.171])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l3PBJPaa018139
	for <r-help@stat.math.ethz.ch>; Wed, 25 Apr 2007 13:19:25 +0200
Received: by ug-out-1314.google.com with SMTP id p37so387989ugc
	for <r-help@stat.math.ethz.ch>; Wed, 25 Apr 2007 04:19:25 -0700 (PDT)
Received: by 10.67.98.4 with SMTP id a4mr1017119ugm.1177499964702;
	Wed, 25 Apr 2007 04:19:24 -0700 (PDT)
Received: by 10.66.240.2 with HTTP; Wed, 25 Apr 2007 04:19:24 -0700 (PDT)
Message-ID: <644e1f320704250419h6b79f4d0ra28e6f221ac547bf@mail.gmail.com>
Date: Wed, 25 Apr 2007 07:19:24 -0400
From: "jim holtman" <jholtman@gmail.com>
To: "Peter Dalgaard" <P.Dalgaard@biostat.ku.dk>
In-Reply-To: <462F2F00.3060404@biostat.ku.dk>
MIME-Version: 1.0
Content-Disposition: inline
References: <769333.78839.qm@web39711.mail.mud.yahoo.com>
	<462F2F00.3060404@biostat.ku.dk>
X-Virus-Scanned: by amavisd-new at stat.math.ethz.ch
X-MIME-Autoconverted: from quoted-printable to 8bit by hypatia.math.ethz.ch id
	l3PBJPaa018139
Cc: r-help@stat.math.ethz.ch
Subject: Re: [R] regular expressions with grep() and negative indexing
X-BeenThere: r-help@stat.math.ethz.ch
X-Mailman-Version: 2.1.9
Precedence: list
List-Id: "Main R Mailing List: Primary help" <r-help.stat.math.ethz.ch>
List-Unsubscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=unsubscribe>
List-Archive: <https://stat.ethz.ch/pipermail/r-help>
List-Post: <mailto:r-help@stat.math.ethz.ch>
List-Help: <mailto:r-help-request@stat.math.ethz.ch?subject=help>
List-Subscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=subscribe>
Content-Type: text/plain; charset="iso-8859-1"
Sender: r-help-bounces@stat.math.ethz.ch
Errors-To: r-help-bounces@stat.math.ethz.ch
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from quoted-printable to 8bit by speedy.uwaterloo.ca id l3PBKV6w029753
Status: O
Content-Length: 2675
Lines: 83

Find the ones that match and then remove them from the full set with 'setdiff'.

> x <- c("seal.0","seal.1-exclude")
> x.match <- grep("exclude", x)  # find matches
> x.match
[1] 2
> setdiff(seq_along(x), x.match)  # exclude the matches
[1] 1
>


On 4/25/07, Peter Dalgaard <P.Dalgaard@biostat.ku.dk> wrote:
> Stephen Tucker wrote:
> > Dear R-helpers,
> >
> > Does anyone know how to use regular expressions to return vector elements
> > that don't contain a word? For instance, if I have a vector
> >   x <- c("seal.0","seal.1-exclude")
> > I'd like to get back the elements which do not contain the word "exclude",
> > using something like (I know this doesn't work) but:
> >   grep("[^(exclude)]",x)
> >
> > I can use
> >   x[-grep("exclude",x)]
> > for this case but then if I use this expression in a recursive function, it
> > will not work for instances in which the vector contains no elements with
> > that word. For instance, if I have
> >   x2 <- c("dolphin.0","dolphin.1")
> > then
> >   x2[-grep("exclude",x2)]
> > will give me 'character(0)'
> >
> > I know I can accomplish this in several steps, for instance:
> >   myfunc <- function(x) {
> >     iexclude <- grep("exclude",x)
> >     if(length(iexclude) > 0) x2 <- x[-iexclude] else x2 <- x
> >     # do stuff with x2 <...?
> >   }
> >
> > But this is embedded in a much larger function and I am trying to minimize
> > intermediate variable assignment (perhaps a futile effort). But if anyone
> > knows of an easy solution, I'd appreciate a tip.
> >
> It has come up a couple of times before, and yes, it is a bit of a pain.
>
> Probably the quickest way out is
>
> negIndex <- function(i)
>
>   if(length(i))
>
>       -i
>
>   else
>
>       TRUE
>
> --
>   O__  ---- Peter Dalgaard             Øster Farimagsgade 5, Entr.B
>  c/ /'_ --- Dept. of Biostatistics     PO Box 2099, 1014 Cph. K
>  (*) \(*) -- University of Copenhagen   Denmark          Ph:  (+45) 35327918
> ~~~~~~~~~~ - (p.dalgaard@biostat.ku.dk)                  FAX: (+45) 35327907
>
> ______________________________________________
> R-help@stat.math.ethz.ch mailing list
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>


-- 
Jim Holtman
Cincinnati, OH
+1 513 646 9390

What is the problem you are trying to solve?

______________________________________________
R-help@stat.math.ethz.ch mailing list
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.

