From beginners-return-91874-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed May 23 18:56:51 2007
Return-Path: <beginners-return-91874-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4NMunqD030842
	for <ktwarwic@flax9.uwaterloo.ca>; Wed, 23 May 2007 18:56:50 -0400
Received: (qmail 16526 invoked by uid 514); 23 May 2007 22:56:42 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 16517 invoked from network); 23 May 2007 22:56:41 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 23 May 2007 22:56:41 -0000
Received: (qmail 14203 invoked by uid 225); 23 May 2007 22:56:41 -0000
Delivered-To: beginners@perl.org
Received: (qmail 14192 invoked by alias); 23 May 2007 22:56:40 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of tom.phoenix@gmail.com designates 64.233.162.233 as permitted sender)
Received: from nz-out-0506.google.com (HELO nz-out-0506.google.com) (64.233.162.233)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Wed, 23 May 2007 15:55:43 -0700
Received: by nz-out-0506.google.com with SMTP id x7so420214nzc
        for <beginners@perl.org>; Wed, 23 May 2007 15:54:05 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:sender:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=paH6nT9WEP3jGPFdjibY+tZrkpCIGztG7dS3T6aFjOhc9OWvyPreXVzvf8BAGwzPUL4J56P62ADNg2y4kDdsyXKFZ8gY8QDRHh/RA5Yzw8Bd4o8IuLn2LKCrXTknwMafFhPd1mQabFNdcXrqXbhIhSGJ4vQWRwPtnVMZKAty2+c=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:sender:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=KHgks9pDfMEGi37aDsqvcBJXDe3zMZPMgewzHucBmR6L6Dctj2mfWaa5H9zdxOp/dYJVTpl+9zCMmXwFrEQNVLHOvwATIMqHI5kB32iNBkpyhQAmHNI6ZrhqadwEOpNiiy/o7WRntYL/+LwnWeaoC/uh+ogHocdzfGNDMB5CT8g=
Received: by 10.90.98.3 with SMTP id v3mr1311217agb.1179959262076;
        Wed, 23 May 2007 15:27:42 -0700 (PDT)
Received: by 10.90.114.19 with HTTP; Wed, 23 May 2007 15:27:42 -0700 (PDT)
Message-ID: <31086b240705231527ibd53d2pf3a4be72e07ce287@mail.gmail.com>
Date: Wed, 23 May 2007 15:27:42 -0700
From: "Tom Phoenix" <tom@stonehenge.com>
Sender: tom.phoenix@gmail.com
To: "Martin Barth" <barth@bitbone.de>
Subject: Re: syscall getpwnam and changing authetication on system
Cc: beginners@perl.org
In-Reply-To: <4652D478.2000305@bitbone.de>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <20070518180623.624b7ca5@nietzsche>
	 <31086b240705181911o9c40569y4047afc62a683c13@mail.gmail.com>
	 <4652D478.2000305@bitbone.de>
X-Google-Sender-Auth: b8338418b2013278

On 5/22/07, Martin Barth <barth@bitbone.de> wrote:

> afer trying a lot of stuff i figured out that following code line works:
>
>
> my ($login,$pass,$uid,$gid) = (getpwnam($user),rand);
>
> without rand it's still the old user... can anyone explain why perl seems
> to cache this? (even without eval)

Well, I'd guess (without looking at the source, which would be
cheating :-) that there's probably a one-user buffer for getpwnam,
which may be shared with getpwuid. If you ask for the same user
repeatedly, you get the cached value.

No; I'm sure that's wrong. Why should your random value affect the
cache? How odd.

While my explanation doesn't seem correct, a correct explanation for
this caching behavior belongs in the documentation. I strongly
encourage you to run the perlbug program, submit your test case
(above), and request that this cache be documented. At a minimum, the
documentation should show how to ensure that a fresh request is made,
by adding rand or another way, in case the underlying system
information has changed.

Thanks!

--Tom Phoenix
Stonehenge Perl Training

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


