From beginners-return-92340-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed Jun 13 04:54:45 2007
Return-Path: <beginners-return-92340-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5D8shL9005664
	for <ktwarwic@flax9.uwaterloo.ca>; Wed, 13 Jun 2007 04:54:44 -0400
Received: (qmail 20708 invoked by uid 514); 13 Jun 2007 08:54:38 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Delivered-To: moderator for beginners@perl.org
Received: (qmail 2673 invoked from network); 13 Jun 2007 04:45:57 -0000
Delivered-To: beginners@perl.org
X-Spam-Status: No, hits=0.4 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,DK_POLICY_TESTING,FORGED_YAHOO_RCVD,SPF_NEUTRAL
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: local policy)
To: beginners@perl.org
MBOX-Line: From news@google.com Wed Jun 13 04:45:41 2007
Delivered-To: colobus-nntpmod@lists.develooper.com
Delivered-To: news-moderator-perl.beginners@perl.org
Received-SPF: neutral (x1.develooper.com: 130.59.1.10 is neither permitted nor denied by domain of news@google.com)
From: tinaa <thisis_not_anapple@yahoo.com>
Subject: How to perform filetests on unicode filenames?
Date: Tue, 12 Jun 2007 21:45:30 -0700
Organization: http://groups.google.com
Lines: 98
Message-ID: <1181709930.080693.249280@i38g2000prf.googlegroups.com>
NNTP-Posting-Host: 74.102.72.65
Mime-Version: 1.0
Content-Type: text/plain; charset="iso-8859-1"
X-Trace: posting.google.com 1181709930 1228 127.0.0.1 (13 Jun 2007 04:45:30 GMT)
X-Complaints-To: groups-abuse@google.com
NNTP-Posting-Date: Wed, 13 Jun 2007 04:45:30 +0000 (UTC)
User-Agent: G2/1.0
X-HTTP-UserAgent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.4) Gecko/20070515 Firefox/2.0.0.4,gzip(gfe),gzip(gfe)
Complaints-To: groups-abuse@google.com
Injection-Info: i38g2000prf.googlegroups.com; posting-host=74.102.72.65;
   posting-account=yNLcXA0AAABcsmb4qwbJTSSup-TvV6uO
X-Posted-By: 63.251.223.186
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=2.2 required=8.0
	tests=BAYES_20,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,DK_POLICY_TESTING,FORGED_YAHOO_RCVD,SPF_NEUTRAL
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from quoted-printable to 8bit by flax9.uwaterloo.ca id l5D8shL9005664

I was trying to write a program that extracts filenames from an XML
file. The filenames in the XML are represented as URLs with percent
encoding. So I converted those to a regular path string (as used in
Windows XP SP2) and tried to perform a -e filetest to see if the file
is actually present. This works fine for many filenames, but it fails
to detect the existence of a file if the filename contains extended
characters.

To demonstrate here's a test script I wrote:
---------------------------------------------
use strict;
use warnings;

my $filename = 'H:\mp3\Gabriel O Pensador\Quebra Cabeça\Gabriel O
Pensador - Quebra-Cabeça - 06. En La Casa.mp3'; my $url = 'file://
localhost/H:/mp3/Gabriel%20O%20Pensador/Quebra%20Cabe
%C3%A7a/Gabriel%20O%20Pensador%20-%20Quebra-Cabe%C3%A7a%20-%2006.%20En
%20La%20Casa.mp3';

my $url2 = $url;
$url2 =~ s/^file:\/\/localhost\///;	# this removes the url "file://
localhost" header from the file start
$url2 =~ s/\//\\/g;	# this replaces the forward slashes
withbackslashes
$url2 =~ s/%([A-Fa-f\d]{2})/chr hex $1/eg;	# this should decode the
percent encoding of the URL (convert %dd to the character with that
hex value)
$url2 =~ s/&\#(\d*);/chr $1/eg;	# this should decode the decimal
numerical character references (eg. '&#38;' = '&')

my $url3 = $url2;
utf8::decode($url3);
print "     url: $url\n";
print "    url2: $url2\n";
print "    url3: $url3\n";
print "filename: $filename\n";
print "\n";

if (-e $url) { print "url EXISTS\n"; }
if (-e $url2) { print "url2 EXISTS\n"; } if (-e $url3) { print "url3
EXISTS\n"; } if (-e $filename) { print "filename EXISTS\n"; } print
"\n";

if ($url2 eq $url3) { print "url2 eq url3\n"; } if ($url2 eq
$filename) { print "url2 eq filename\n"; } if ($url3 eq $filename)
{ print "url3 eq filename\n"; } print "\n";

if (utf8::is_utf8($url2)) { print "url2 is utf8\n"; } if
(utf8::is_utf8($url3)) { print "url3 is utf8\n"; } if
(utf8::is_utf8($filename)) { print "filename is utf8\n"; }
---------------------------------------------

So in the above script, $url is a sample file URL taken from the
original XML file. $url2 converts this to a Windows path. $url3 tries
to convert this to standard UTF8 encoding (see below). $filename is
pasted from a text file produced by another script where the
equivalent of $url2 was output to the text file. This opens up in
Microsoft Word properly if you select UTF-8 encoding when it asks. The
string defining $filename was pasted from Microsoft Word.

Here's the output:
---------------------------------------------
     url: file://localhost/H:/mp3/Gabriel%20O%20Pensador/Quebra%20Cabe%C3%A7a/Gabriel%20O%20Pensador%20-%20Que
bra-Cabe%C3%A7a%20-%2006.%20En%20La%20Casa.mp3
    url2: H:\mp3\Gabriel O Pensador\Quebra Cabe+ºa\Gabriel O Pensador
- Quebra-Cabe+ºa - 06. En La Casa.mp3
    url3: H:\mp3\Gabriel O Pensador\Quebra Cabeta\Gabriel O Pensador -
Quebra-Cabeta - 06. En La Casa.mp3
filename: H:\mp3\Gabriel O Pensador\Quebra Cabeta\Gabriel O Pensador -
Quebra-Cabeta - 06. En La Casa.mp3

filename EXISTS

url3 eq filename

url3 is utf8
---------------------------------------------

So the file is detected if it's filename is pasted directly into the
Perl code. However, if it's generated by the script (as in $url2) it
doesn't work. Looking at the output, $url2 does seem to have a
different encoding than $filename but using the utf8::decode ($url3)
seems to make the string identical to $filename with the exception
that it is tagged as utf8 whereas $filename is not. $url3 fails when
it's used with the -e filetest.

So how do I convert my $url2 string into a format that is compatible
with the Windows operating system? It looks like if I were to disable
to utf8 flag it might work but I haven't been able to find any way to
do this without also altering the contents of the string.

If this isn't possible, is there some other approach I can use to test
these filenames? Is there a way to get at the file from the URL string
then extract the filename from the OS?

Thanks!


-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/



