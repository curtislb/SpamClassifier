From perl6-all-return-81929-ktwarwic=speedy.uwaterloo.ca@perl.org  Tue Jun 12 23:15:59 2007
Return-Path: <perl6-all-return-81929-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5D3FwL9002520
	for <ktwarwic@flax9.uwaterloo.ca>; Tue, 12 Jun 2007 23:15:58 -0400
Received: (qmail 19734 invoked by uid 514); 13 Jun 2007 03:15:56 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 19728 invoked from network); 13 Jun 2007 03:15:56 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=1.4 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,PLING_QUERY,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: neutral (x1.develooper.com: local policy)
Date: Wed, 13 Jun 2007 00:54:48 -0400
From: John Macdonald <john@perlwolf.com>
To: NeonGraal <scifigeeknz@gmail.com>
Cc: perl6-language@perl.org
Subject: Re: Generalizing ?? !!
Message-ID: <20070613045448.GB22459@lupus.perlwolf.com>
References: <ef30550b0706101410l44485919m472e675a700a1daf@mail.gmail.com> <1181526220.269316.18810@a26g2000pre.googlegroups.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <1181526220.269316.18810@a26g2000pre.googlegroups.com>
User-Agent: Mutt/1.4.1i
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=2.1 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,PLING_QUERY,SPF_NEUTRAL

On Mon, Jun 11, 2007 at 01:43:40AM -0000, NeonGraal wrote:
> Surely if you defined !! to return "undef but true" and both operators
> to be left associative then it all works.
> 
>  1==0 ?? "True" !! "False" -> (undef) !! "False" which seems right to
> me.
> 
>  1==1 !! "False" ?? "True" -> (undef but true) ?? "True" also good.
> 
> TTFN, Struan

Nope.

$a = $b ?? $c !! $c;

If $b is true, you want a to have the value of $c, NOT "$c but true".
Later code may want to use the value of $a in a boolean context.
When the "but true" is added to make the short circuiting work, it
can have longer lasting effects that are not desired.

(I know Larry already agreed with the principle of not mucking
around with simple stuff, but I just wanted to provide a bit
more detail of how said mucking might be a problem.  We don't
need no stinking epicycles upon epicycles. :-)

-- 

