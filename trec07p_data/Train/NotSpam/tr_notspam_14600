From beginners-return-91974-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed May 30 10:02:38 2007
Return-Path: <beginners-return-91974-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4UE2bhB014502
	for <ktwarwic@flax9.uwaterloo.ca>; Wed, 30 May 2007 10:02:37 -0400
Received: (qmail 20592 invoked by uid 514); 30 May 2007 14:02:26 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 20583 invoked from network); 30 May 2007 14:02:25 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 30 May 2007 14:02:25 -0000
Received: (qmail 18469 invoked by uid 225); 30 May 2007 14:02:22 -0000
Delivered-To: beginners@perl.org
Received: (qmail 18446 invoked by alias); 30 May 2007 14:02:20 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of chas.owens@gmail.com designates 64.233.162.231 as permitted sender)
Received: from nz-out-0506.google.com (HELO nz-out-0506.google.com) (64.233.162.231)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Wed, 30 May 2007 07:02:12 -0700
Received: by nz-out-0506.google.com with SMTP id x7so2136426nzc
        for <beginners@perl.org>; Wed, 30 May 2007 07:02:06 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=CldRgiDnBJLO5j7eg2gyDXi/jXb8bL6Ew1570R6cjcvOsECa8p/vR8zDB7TktsXMsOocAWnXTMhCO2LjbrL23IOzz6izL9x4Q+yvcN+xkI4ksNu/UqhTJT7mtsE7+/vyuxTBK31ipgE+s7nAgcz6Opz5EjhDhyHY4JljVGufOcc=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=FfEvAbOxpFx11zxb3T67sOmdyu+KkJ4VmxnA+qfrvE7pcrxZnI5T935gmHGdLc41hyoMsmsaOADc3X7LfspVXwAz8ci+bvJJAM78J1saNIAUSC4J6xnVO9nCxa6DqSlKbQelpGNh5QHWswqYZy3UcUJF+5ROADnyxkeIGVaIK8k=
Received: by 10.114.26.1 with SMTP id 1mr3962512waz.1180533725954;
        Wed, 30 May 2007 07:02:05 -0700 (PDT)
Received: by 10.114.92.6 with HTTP; Wed, 30 May 2007 07:02:05 -0700 (PDT)
Message-ID: <58ce48dc0705300702n2dfdd105w296166224c28bbbf@mail.gmail.com>
Date: Wed, 30 May 2007 10:02:05 -0400
From: "Chas Owens" <chas.owens@gmail.com>
To: "Sharan Basappa" <sharan.basappa@gmail.com>
Subject: Re: zero width lookahead match
Cc: beginners@perl.org
In-Reply-To: <8a31202a0705300623w18766a6fud2b2b749cd766652@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <8a31202a0705300457l38219d07s8a236d11af4e2db0@mail.gmail.com>
	 <58ce48dc0705300612xb0d46b5q55771654d4223fc0@mail.gmail.com>
	 <8a31202a0705300623w18766a6fud2b2b749cd766652@mail.gmail.com>

On 5/30/07, Sharan Basappa <sharan.basappa@gmail.com> wrote:
> >> this is what the zero-width lookahead assertion means.  It say with
> >>out moving where you are currently starting the match, make certain
> >>you can match the following pattern.  If you want it to move where the
> >>match starts then you have to include something that does not have
> >>zero-width like this
>
> >> #match groups of three characters followed by three characters: "123" and
> "456"
> >> @store = $str =~ m/(\d\d\d)(?=\d\d\d)/g;
>
> You mention that if I write a rule like @store = $str =~ m/((?=\d\d\d))/g;
> then the scanner does not move ahead. But as I mentioned in my mail,
> the result of this regex is 123 234 etc. This clearly shows that after every
> match,
> the regex engine of perl is moving its pointer to next char in the string
> (i.e. it starts
> looking at 23456 once 123 is matched)
> This was exactly my question.
snip

Because it always moves ahead by either one character or the match,
but zero-width constructs do not consume any characters.  That is why
they are called zero-width.

snip
> Regarding the other question about comparing with Flex, actually there is
> no need to compare with flex. What I was trying to understand is, why is
> that
> it is called zero lookahead rule when the number of chars it looks ahead
> depends
> on the rule I write. For example, the regex in the above rule looks ahead 3
> chars
> ahead to find a match ..
snip

Because it is not called zero lookahead, it is called zero-width
positive lookahead assertion, that is it consumes zero characters from
the string while at the same time causing the match to fail if the
assertion does not match.

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


