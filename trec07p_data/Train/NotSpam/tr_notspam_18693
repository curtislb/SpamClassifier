From r-help-bounces@stat.math.ethz.ch  Wed Jun 13 03:39:12 2007
Return-Path: <r-help-bounces@stat.math.ethz.ch>
Received: from hypatia.math.ethz.ch (hypatia.math.ethz.ch [129.132.145.15])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l5D7dAL9004662
	for <ktwarwic@flax9.uwaterloo.ca>; Wed, 13 Jun 2007 03:39:11 -0400
Received: from hypatia.math.ethz.ch (hypatia [129.132.145.15])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l5D7bgGc011900;
	Wed, 13 Jun 2007 09:37:54 +0200
X-Spam-Checker-Version: SpamAssassin 3.2.0 (2007-05-01) on hypatia.math.ethz.ch
X-Spam-Level: 
X-Spam-Status: No, score=-0.4 required=5.0 tests=AWL, BAYES_40,
	DKIM_POLICY_SIGNSOME autolearn=no version=3.2.0
Received: from markov.stats.ox.ac.uk (markov.stats.ox.ac.uk [163.1.210.1])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l5D7bZL9011489
	for <r-help@stat.math.ethz.ch>; Wed, 13 Jun 2007 09:37:36 +0200
Received: from [192.168.1.100] (cpc3-oxfd4-0-0-cust250.oxfd.cable.ntl.com
	[86.2.112.251])
	by markov.stats.ox.ac.uk (8.13.6/8.13.6) with ESMTP id l5D7bZA5014817; 
	Wed, 13 Jun 2007 08:37:35 +0100 (BST)
Date: Wed, 13 Jun 2007 08:37:31 +0100 (BST)
From: Prof Brian Ripley <ripley@stats.ox.ac.uk>
X-X-Sender: ripley@auk.stats
To: Stephen Tucker <brown_emu@yahoo.com>
In-Reply-To: <34506.83532.qm@web39710.mail.mud.yahoo.com>
Message-ID: <Pine.LNX.4.64.0706130723500.12760@gannet.stats.ox.ac.uk>
References: <34506.83532.qm@web39710.mail.mud.yahoo.com>
MIME-Version: 1.0
X-Virus-Scanned: by amavisd-new at stat.math.ethz.ch
Cc: r-help@stat.math.ethz.ch
Subject: Re: [R] passing (or obtaining) index or element name of list to FUN
 in lapply()
X-BeenThere: r-help@stat.math.ethz.ch
X-Mailman-Version: 2.1.9
Precedence: list
List-Id: "Main R Mailing List: Primary help" <r-help.stat.math.ethz.ch>
List-Unsubscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=unsubscribe>
List-Archive: <https://stat.ethz.ch/pipermail/r-help>
List-Post: <mailto:r-help@stat.math.ethz.ch>
List-Help: <mailto:r-help-request@stat.math.ethz.ch?subject=help>
List-Subscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: r-help-bounces@stat.math.ethz.ch
Errors-To: r-help-bounces@stat.math.ethz.ch

On Tue, 12 Jun 2007, Stephen Tucker wrote:

> Hello everyone,
>
> I wonder if there is a way to pass the index or name of a list to a
> user-specified function in lapply(). For instance, my desired effect is
> something like the output of
>
>> L <- list(jack=4098,sape=4139)
>> lapply(seq(along=L),function(i,x) if(i==1) "jack" else "sape",x=L)
> [[1]]
> [1] "jack"
>
> [[2]]
> [1] "sape"

as.list(names(L))

>> lapply(seq(along=L),function(i,x) if(names(x)[i]=="jack") 1 else 2,x=L)
> [[1]]
> [1] 1
>
> [[2]]
> [1] 2

as.list(seq_along(L))

lapply() can be faster than a for-loop, but usually not by much: its main 
advantage is clarity of code.

I think we need a real-life example to see what you are trying to do.

> But by passing L as the first argument of lapply(). I thought there was a
> tangentially-related post on this mailing list in the past but I don't recall
> that it was ever addressed directly (and I can't seem to find it now). The
> examples above are perfectly good alternatives especially if I wrap each of
> the lines in "names<-"() to return lists with appropriate names assigned, but

Try something like

L[] <- lapply(seq_along(L),function(i,x) if(i==1) "jack" else "sape",x=L)

> it feels like I am essentially writing a FOR-LOOP - though I was surprised to
> find that speed-wise, it doesn't seem to make much of a difference (unless I
> have not selected a rigorous test):
>
>> N <- 10000
>> y <- runif(N)
> ## looping through elements of y
>> system.time(lapply(y,
> +                    function(x) {
> +                      set.seed(222)
> +                      mean(rnorm(1e4,x,1))
> +                    }))
> [1] 21.00  0.17 21.29    NA    NA
> ## looping through indices
>> system.time(lapply(1:N,
> +                    function(x,y) {
> +                      set.seed(222)
> +                      mean(rnorm(1e4,y[x],1))
> +                      },y=y))
> [1] 21.09  0.14 21.26    NA    NA
>
> In Python, there are methods for Lists and Dictionaries called enumerate(),
> and iteritems(), respectively. Example applications:
>
> ## a list
> L = ['a','b','c']
> [x for x in enumerate(L)]
> ## returns index of list along with the list element
> [(0, 'a'), (1, 'b'), (2, 'c')]
>
> ## a dictionary
> D = {'jack': 4098, 'sape': 4139}
> [x for x in D.iteritems()]
> ## returns element key (name) along with element contents
> [('sape', 4139), ('jack', 4098)]
>
> And this is something of the effect I was looking for...
>
> Thanks to all,
>
> Stephen
>
> ______________________________________________
> R-help@stat.math.ethz.ch mailing list
> https://stat.ethz.ch/mailman/listinfo/r-help
> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
> and provide commented, minimal, self-contained, reproducible code.
>

-- 
Brian D. Ripley,                  ripley@stats.ox.ac.uk
Professor of Applied Statistics,  http://www.stats.ox.ac.uk/~ripley/
University of Oxford,             Tel:  +44 1865 272861 (self)
1 South Parks Road,                     +44 1865 272866 (PA)
Oxford OX1 3TG, UK                Fax:  +44 1865 272595

______________________________________________
R-help@stat.math.ethz.ch mailing list
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.

