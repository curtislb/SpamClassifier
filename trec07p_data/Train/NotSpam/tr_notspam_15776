From perl6-all-return-81762-ktwarwic=speedy.uwaterloo.ca@perl.org  Sun Jun  3 06:19:40 2007
Return-Path: <perl6-all-return-81762-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l53AJdhB014511
	for <ktwarwic@flax9.uwaterloo.ca>; Sun, 3 Jun 2007 06:19:40 -0400
Received: (qmail 11580 invoked by uid 514); 3 Jun 2007 10:19:33 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 11570 invoked from network); 3 Jun 2007 10:19:33 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-0.7 required=8.0
	tests=BAYES_20,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: domain of dataweaver@gmail.com designates 64.233.166.177 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=n4KLfUJ0OvYaRMWEP4FUoU7Vh/UeKWoeSoecDWD0MgMS13X7/iRfAJPfukGgPF9lSz0NGFeJIpGYS1LLjniT1yA9MlOi7HwKRb5peBzmWrEuGnNtb7wAsraJ1T9oyLteifO9Wi66nqKYF3xWLSc895sjDpR/EPB/Tl8EeoPBS7M=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=BIqerjTY9RLDmY0Xjp+90DTe0kGLsPbIXe/ta2gJjwqRFDE+CUcouk/3fUd6QWFRr2632fmDlciQWz5acR1cWgJKJKlfIL0fT+tTyzHBMflzfBjMC4S2PB6KbaxV3bnWTHISkWkU3GuT5UGhBhhIy/d1ptzcpFGfxngcf4RVfhU=
Message-ID: <ef30550b0706030318m245a3c46j2cb02894d7cde444@mail.gmail.com>
Date: Sun, 3 Jun 2007 03:18:57 -0700
From: "Jonathan Lang" <dataweaver@gmail.com>
To: "Chas Owens" <chas.owens@gmail.com>
Subject: Re: 'x' vs. 'xx'
Cc: p6l <perl6-language@perl.org>
In-Reply-To: <58ce48dc0706030219x1c961624r41500cd12c01d39@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <ef30550b0706021517m281093c3qcf1e12d99debc8b7@mail.gmail.com>
	 <58ce48dc0706021820n444ff9a4v44aeab16f25ee62b@mail.gmail.com>
	 <ef30550b0706022108p3f3d448dv4f66a9f1b8198655@mail.gmail.com>
	 <58ce48dc0706030219x1c961624r41500cd12c01d39@mail.gmail.com>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-0.2 required=8.0
	tests=BAYES_40,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS

Chas Owens wrote:
> Jonathan Lang wrote:
> > Chas Owens wrote:
> > > Jonathan Lang wrote:
> > > > Is there any reason why we can't simply define '$a x $n' as being
> > > > shorthand for 'cat($a xx $n)'?  In what way does the former differ
> > > > from the latter, other than the use of a Whatever in place of $n?
> > >
> > > "$a x $n" is equivalent to "join '', $a xx $n", but that isn't an apt
> > > description of its behavior.  "cat($a xx *)" is an attempt to provide
> > > an infinite string since 'a' x Inf would result in memory overflow
> > > (but the cat trick works since lists are evaluated lazily).
> >
> > Then it looks to me like 'cat($a xx $n)' is more flexible than "join
> > '', $a xx $n", and would work better as the baseline definition for
> > '$a x $n'.  Is there any reason to prefer a join-based definition to a
> > cat-based one?  AFAICT, the only thing that 'join' can do that 'cat'
> > can't is to provide a delimiter when stitching the component strings
> > together; in the case of 'x', this feature is (rightfully) not being
> > used.
>
> Okay, maybe my understanding of the cat function is flawed, but I
> thought it walked through each array handed to it in a serial fashion
> (as opposed to zip which walks the arrays in a parallel fashion).

Hmm... true enough.  That was an aspect of the 'cat' function that I
hadn't been aware of.  Rather, what came to mind when I saw the 'cat'
function was the following (from S29): "...a C<Cat> in item context
emulates the C<Str> interface lazily."

In short, 'cat("a" x 5)' effectively _is_ a scalar string value of
five characters - in item context.  And because it emulates the string
interface _lazily_, there's no danger from an infinitely long string.

Again, I was not aware that there _was_ a distinct list context result
for 'cat'; and I'm pretty sure that it was referenced as an
alternative to '$a x *' due to its behavior in scalar context, rather
than its behavior in list context.

So the question is this: is there a problem with "'a' x 5" producing
"'a', 'a', 'a', 'a', 'a'" in list context, and 'aaaaa' in item
context?  Or should it produce the latter in anything but void
context?

-- 
Jonathan "Dataweaver" Lang

