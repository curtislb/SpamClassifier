From perl6-all-return-81110-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri May  4 09:19:56 2007
Return-Path: <perl6-all-return-81110-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l44DJtqD015728
	for <ktwarwic@flax9.uwaterloo.ca>; Fri, 4 May 2007 09:19:55 -0400
Received: (qmail 6217 invoked by uid 514); 4 May 2007 13:19:53 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 6212 invoked from network); 4 May 2007 13:19:53 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-3.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,KARMA_CONTENT_POSITIVE,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
Subject: [perl #42412] Configure.pl things =no is true 
From: "James Keenan via RT" <parrotbug-followup@parrotcode.org>
Reply-To: parrotbug-followup@parrotcode.org
In-Reply-To: <rt-3.6.HEAD-5461-1178251341-378.42412-15-0@perl.org>
References: <RT-Ticket-42412@perl.org> <cbcbecbf3fd62ff3f85ce570a34209b5@gmail.com> <rt-3.6.HEAD-1687-1178072394-459.42412-15-0@perl.org> <Pine.LNX.4.62.0705020935560.10270@fractal.phys.lafayette.edu> <463AAFEE.8080007@perl.org> <rt-3.6.HEAD-5461-1178251341-378.42412-15-0@perl.org>
Message-ID: <rt-3.6.HEAD-12281-1178281764-1109.42412-15-0@perl.org>
X-RT-Loop-Prevention: perl
RT-Ticket: perl #42412
Managed-by: RT 3.6.HEAD (http://www.bestpractical.com/rt/)
RT-Originator: jkeen@verizon.net
Cc: perl6-internals@perl.org
To: "OtherRecipients of perl Ticket #42412": ;
MIME-Version: 1.0
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit
X-RT-Original-Encoding: utf-8
Date: Fri, 04 May 2007 05:29:27 -0700
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-3.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,KARMA_CONTENT_POSITIVE,SPF_PASS

On Thu May 03 21:02:21 2007, allison <!-- x --> at perl.org wrote:
> Andy Spieherty wrote:
> > On Tue, 1 May 2007, James Keenan via RT wrote:
> > 
> >> On Tue Apr 10 01:45:31 2007, jrisom <!-- x --> at gmail.com wrote:
> >>> Configure should act as though writing --foo=no is false instead of 
> >>> true.  Tonight I tried using --execcapable=no to get around a compile 
> >>> failure, but then realized that it would probably treat "no" as a true 
> >>> value.
> 
> I'm okay with having a plain English representation for "false value", 
> as long as we have exactly one. Pick 'no', 'none', 'false', or whatever 
> but we won't try to support every possible value a user might type in to 
> mean false. Whatever we pick will mean false everywhere, on every 
> option. And we have to be careful to make sure it's not a value that 
> someone might want to use as a string value.
> 

The more you multiply variant ways of providing values to options,
-- the more code you have to write,
-- the more code someone has to maintain,
-- the more tests someone has to write to verify the validity of the code and ensure high 
coverage by the tests, and
-- the more documentation someone has to write to explain the code.

For at least the third of those tasks, that someone, currently, is me.  If we choose to support 
"yes" and "no" where "1" and "0" would suffice, then I have to write additional tests to test 
that code.  That's more work for me -- but it also means that you, the Parrot developer, have 
to wait longer and longer for 'make test' to run.

I'm hoping to recruit additional people to help maintain Parrot's Perl 5 configuration and 
build tools, and I made some progress in this regard at Hackathon Toronto.  Still, almost all 
of Configure.pl's options are completely untouched by the test suite.  Code coverage for the 
config/*/*.pm hierarchy is generally only around 25%.  Why multiply features for which, if 
we're following best practices, we ought to write tests when we don't have the people to write 
those tests?

If the values available for a given option logically reduce to a Boolean, then reduce the 
possible values to "1" and "0".  Then, document them and test them.

kid51

