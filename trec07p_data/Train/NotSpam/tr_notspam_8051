From samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org  Sun May  6 17:07:32 2007
Return-Path: <samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org>
Received: from lists.samba.org (mail.samba.org [66.70.73.150])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l46L7WqD022649
	for <ktwarwic@speedy.uwaterloo.ca>; Sun, 6 May 2007 17:07:32 -0400
Received: from dp.samba.org (localhost [127.0.0.1])
	by lists.samba.org (Postfix) with ESMTP id B3E71162AE0
	for <ktwarwic@speedy.uwaterloo.ca>; Sun,  6 May 2007 21:07:30 +0000 (GMT)
X-Spam-Checker-Version: SpamAssassin 3.1.7 (2006-10-05) on dp.samba.org
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=3.8 tests=AWL,BAYES_00,NO_REAL_NAME,
	NO_RELAYS,RCVD_IN_DSBL,UPPERCASE_25_50 autolearn=no version=3.1.7
X-Original-To: samba-cvs@samba.org
Delivered-To: samba-cvs@samba.org
Received: by lists.samba.org (Postfix, from userid 540)
	id 17644162ADE; Sun,  6 May 2007 21:06:56 +0000 (GMT)
To: samba-cvs@samba.org
From: jerry@samba.org
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Message-Id: <20070506210656.17644162ADE@lists.samba.org>
Date: Sun,  6 May 2007 21:06:56 +0000 (GMT)
Subject: svn commit: samba r22714 - in branches: SAMBA_3_0/source/libads
	SAMBA_3_0_26/source/libads
X-BeenThere: samba-cvs@lists.samba.org
X-Mailman-Version: 2.1.5
Precedence: list
Reply-To: samba-technical@lists.samba.org
List-Id: Samba CVS and subversion commit messages <samba-cvs.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/archive/samba-cvs>
List-Post: <mailto:samba-cvs@lists.samba.org>
List-Help: <mailto:samba-cvs-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=subscribe>
Sender: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Errors-To: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org

Author: jerry
Date: 2007-05-06 21:06:55 +0000 (Sun, 06 May 2007)
New Revision: 22714

WebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22714

Log:
Prevent DNS lookup storms when the DNS servers are unreachable.
Helps when transitioning from offline to online mode.

Note that this is a quick hack and a better solution
would be to start the DNS server's state between processes
(similar to the namecache entries).


Modified:
   branches/SAMBA_3_0/source/libads/dns.c
   branches/SAMBA_3_0_26/source/libads/dns.c


Changeset:
Modified: branches/SAMBA_3_0/source/libads/dns.c
===================================================================
--- branches/SAMBA_3_0/source/libads/dns.c	2007-05-06 21:04:30 UTC (rev 22713)
+++ branches/SAMBA_3_0/source/libads/dns.c	2007-05-06 21:06:55 UTC (rev 22714)
@@ -270,45 +270,76 @@
  Simple wrapper for a DNS query
 *********************************************************************/
 
+#define DNS_FAILED_WAITTIME          30
+
 static NTSTATUS dns_send_req( TALLOC_CTX *ctx, const char *name, int q_type, 
                               uint8 **buf, int *resp_length )
 {
 	uint8 *buffer = NULL;
 	size_t buf_len;
 	int resp_len = NS_PACKETSZ;	
-	
+	static time_t last_dns_check = 0;
+	static NTSTATUS last_dns_status = NT_STATUS_OK;	
+	time_t now = time(NULL);
+
+	/* Try to prevent bursts of DNS lookups if the server is down */
+
+	/* Protect against large clock changes */
+
+	if ( last_dns_check > now )
+		last_dns_check = 0;
+
+	/* IF we had a DNS timeout or a bad server and we are still 
+	   in the 30 second cache window, just return the previous 
+	   status and save the network timeout. */
+
+	if ( (NT_STATUS_EQUAL(last_dns_status,NT_STATUS_IO_TIMEOUT) ||
+	      NT_STATUS_EQUAL(last_dns_status,NT_STATUS_CONNECTION_REFUSED)) &&
+	     (last_dns_check+DNS_FAILED_WAITTIME) > now ) 
+	{
+		DEBUG(10,("last_dns_check: Returning cached status (%s)\n",
+			  nt_errstr(last_dns_status) ));
+		return last_dns_status;
+	}
+
+	/* Send the Query */
 	do {
 		if ( buffer )
 			TALLOC_FREE( buffer );
 		
 		buf_len = resp_len * sizeof(uint8);
 
-		if (buf_len) {
+		if (buf_len) {			
 			if ( (buffer = TALLOC_ARRAY(ctx, uint8, buf_len)) == NULL ) {
 				DEBUG(0,("ads_dns_lookup_srv: talloc() failed!\n"));
-				return NT_STATUS_NO_MEMORY;
+				last_dns_status = NT_STATUS_NO_MEMORY;
+				last_dns_check = time(NULL);
+				return last_dns_status;	
 			}
-		} else {
-			buffer = NULL;
 		}
 
 		if ( (resp_len = res_query(name, C_IN, q_type, buffer, buf_len)) < 0 ) {
 			DEBUG(3,("ads_dns_lookup_srv: Failed to resolve %s (%s)\n", name, strerror(errno)));
 			TALLOC_FREE( buffer );
+			last_dns_status = NT_STATUS_UNSUCCESSFUL;
+			
 			if (errno == ETIMEDOUT) {
-				return NT_STATUS_IO_TIMEOUT;
+				last_dns_status = NT_STATUS_IO_TIMEOUT;				
 			}
 			if (errno == ECONNREFUSED) {
-				return NT_STATUS_CONNECTION_REFUSED;
+				last_dns_status = NT_STATUS_CONNECTION_REFUSED;				
 			}
-			return NT_STATUS_UNSUCCESSFUL;
+			last_dns_check = time(NULL);
+			return last_dns_status;
 		}
 	} while ( buf_len < resp_len && resp_len < MAX_DNS_PACKET_SIZE );
 	
 	*buf = buffer;
 	*resp_length = resp_len;
 
-	return NT_STATUS_OK;
+	last_dns_check = time(NULL);
+	last_dns_status = NT_STATUS_OK;	
+	return last_dns_status;
 }
 
 /*********************************************************************

Modified: branches/SAMBA_3_0_26/source/libads/dns.c
===================================================================
--- branches/SAMBA_3_0_26/source/libads/dns.c	2007-05-06 21:04:30 UTC (rev 22713)
+++ branches/SAMBA_3_0_26/source/libads/dns.c	2007-05-06 21:06:55 UTC (rev 22714)
@@ -270,45 +270,76 @@
  Simple wrapper for a DNS query
 *********************************************************************/
 
+#define DNS_FAILED_WAITTIME          30
+
 static NTSTATUS dns_send_req( TALLOC_CTX *ctx, const char *name, int q_type, 
                               uint8 **buf, int *resp_length )
 {
 	uint8 *buffer = NULL;
 	size_t buf_len;
 	int resp_len = NS_PACKETSZ;	
-	
+	static time_t last_dns_check = 0;
+	static NTSTATUS last_dns_status = NT_STATUS_OK;	
+	time_t now = time(NULL);
+
+	/* Try to prevent bursts of DNS lookups if the server is down */
+
+	/* Protect against large clock changes */
+
+	if ( last_dns_check > now )
+		last_dns_check = 0;
+
+	/* IF we had a DNS timeout or a bad server and we are still 
+	   in the 30 second cache window, just return the previous 
+	   status and save the network timeout. */
+
+	if ( (NT_STATUS_EQUAL(last_dns_status,NT_STATUS_IO_TIMEOUT) ||
+	      NT_STATUS_EQUAL(last_dns_status,NT_STATUS_CONNECTION_REFUSED)) &&
+	     (last_dns_check+DNS_FAILED_WAITTIME) > now ) 
+	{
+		DEBUG(10,("last_dns_check: Returning cached status (%s)\n",
+			  nt_errstr(last_dns_status) ));
+		return last_dns_status;
+	}
+
+	/* Send the Query */
 	do {
 		if ( buffer )
 			TALLOC_FREE( buffer );
 		
 		buf_len = resp_len * sizeof(uint8);
 
-		if (buf_len) {
+		if (buf_len) {			
 			if ( (buffer = TALLOC_ARRAY(ctx, uint8, buf_len)) == NULL ) {
 				DEBUG(0,("ads_dns_lookup_srv: talloc() failed!\n"));
-				return NT_STATUS_NO_MEMORY;
+				last_dns_status = NT_STATUS_NO_MEMORY;
+				last_dns_check = time(NULL);
+				return last_dns_status;	
 			}
-		} else {
-			buffer = NULL;
 		}
 
 		if ( (resp_len = res_query(name, C_IN, q_type, buffer, buf_len)) < 0 ) {
 			DEBUG(3,("ads_dns_lookup_srv: Failed to resolve %s (%s)\n", name, strerror(errno)));
 			TALLOC_FREE( buffer );
+			last_dns_status = NT_STATUS_UNSUCCESSFUL;
+			
 			if (errno == ETIMEDOUT) {
-				return NT_STATUS_IO_TIMEOUT;
+				last_dns_status = NT_STATUS_IO_TIMEOUT;				
 			}
 			if (errno == ECONNREFUSED) {
-				return NT_STATUS_CONNECTION_REFUSED;
+				last_dns_status = NT_STATUS_CONNECTION_REFUSED;				
 			}
-			return NT_STATUS_UNSUCCESSFUL;
+			last_dns_check = time(NULL);
+			return last_dns_status;
 		}
 	} while ( buf_len < resp_len && resp_len < MAX_DNS_PACKET_SIZE );
 	
 	*buf = buffer;
 	*resp_length = resp_len;
 
-	return NT_STATUS_OK;
+	last_dns_check = time(NULL);
+	last_dns_status = NT_STATUS_OK;	
+	return last_dns_status;
 }
 
 /*********************************************************************

