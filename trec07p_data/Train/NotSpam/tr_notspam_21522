From perl6-all-return-82235-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri Jun 22 05:37:36 2007
Return-Path: <perl6-all-return-82235-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5M9bZL9004481
	for <ktwarwic@flax9.uwaterloo.ca>; Fri, 22 Jun 2007 05:37:36 -0400
Received: (qmail 22960 invoked by uid 514); 22 Jun 2007 09:37:33 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 22947 invoked from network); 22 Jun 2007 09:37:32 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
Date: Fri, 22 Jun 2007 11:36:55 +0200
From: Mark Overmeer <mark@overmeer.net>
To: Damian Conway <damian@conway.org>
Cc: perl6-language@perl.org
Subject: Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn
Message-ID: <20070622093655.GL16156@earth.overmeer.net>
Mail-Followup-To: Damian Conway <damian@conway.org>,
	perl6-language@perl.org
References: <ef30550b0706131429o34838a6es6704e8ec73851b49@mail.gmail.com> <467073C4.6020708@conway.org> <20070614082341.GU31918@earth.overmeer.net> <832f158a0706141717j7accfb36w92bf3a2ed7a8e115@mail.gmail.com> <20070615075949.GR31918@earth.overmeer.net> <20070616090944.GG6900@stripey.com> <20070616103358.GB10601@earth.overmeer.net> <20070621180226.GK6900@stripey.com> <20070622084840.GJ16156@earth.overmeer.net> <832f158a0706220202p1baf8880ub10797003905e2be@mail.gmail.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <832f158a0706220202p1baf8880ub10797003905e2be@mail.gmail.com>
Organization: MARKOV Solutions
User-Agent: Mutt/1.5.9i
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS

* Damian Conway (damian@conway.org) [070622 09:02]:
> Mark Overmeer wrote:
> >Then, when you want to add some docs to the method, to help the
> >correct use, add it, for instance like:
> >
> >  method isValidPostalCode(str $postalcode) returns bool {...}
> >     ` Check wether the postal code confirms to the standards
> >     `$postalcode: a string with blanks trimmed.
> >     `return: the string is not cleaned-up.
> >
> >or maybe (exact syntax open to discussion)
> >
> >  method isValidPostalCode(str $postalcode) returns bool {...}
> >  #=  Check wether the postal code confirms to the standards
> >  #=$postalcode
> >  #=  a string with blanks trimmed.
> >  #=return
> >  #=  the string is not cleaned-up.
> 
> Would the following syntax suffice?
> 
>    method isValidPostalCode(str $postalcode) returns bool {...}
>    =PURPOSE  Check weather the postal code confirms to the standards
>    =ARG $postalcode
>        a string with blanks trimmed.
>    =RETURN
>        the string is not cleaned-up.
> 
> Because you can already do precisely that in the current design of Pod 6.

This is syntactically what can be done with the current design,
but is semantically very different.

> And having done it, the current Pod::Parser will extract all of that
> information (including the source code), preserving the sequential and
> hierarchical relationships, and present you with an internal object
> representation that your documentation tool can then analyze and
> convert to whatever content and layout you prefer (including
> non-semantic Pod that you can then feed into any of a dozen
> back-ends).

Besides the point that I do not really like the YELLING all the time, it
still has the complication to reconstruct Perl code from the Pod::Parser
tree.  The tools I wish for need to able to match the tree created by Perl
with the tree created by your Pod::Parser, in some safe and simple way.

The needs for my kind of documentation gerenators are very simple: the
Perl6 parser needs to collect all lines of docs which follow a certain
line with code into the AST node of that line or item.  The Perl6 
parser itself doesn't need to do anything more than that.  Tools doing
introspection on the AST do the rest.

You gave the hint that comments are also in the parse tree.  So, that
is suffiencent for me:

   sub greetings() { say "Hello, World!" }
   #= the standard first program    <-- doc for user
   #  we like Perl6 new features    <-- additional doc on internals.

or

   #=sub greetings
   #=   the standard first program
   sub greetings() { say "Hello, World!" }
   # we like Perl6 new features     <-- additional doc on internals.

 [ I think that the doc block should always start with the item
   what you are describing, so if the block is before the item (or
   anywhere else in the file), then it needs to be referenced to (as
   simple as possible) ]

 [ now I have to study the introspection features of the AST ]
-- 
               MarkOv

------------------------------------------------------------------------
       Mark Overmeer MSc                                MARKOV Solutions
       Mark@Overmeer.net                          solutions@overmeer.net
http://Mark.Overmeer.net                   http://solutions.overmeer.net

