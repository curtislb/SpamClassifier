From samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org  Mon May 14 09:47:36 2007
Return-Path: <samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org>
Received: from lists.samba.org (mail.samba.org [66.70.73.150])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l4EDlaqD022513
	for <ktwarwic@speedy.uwaterloo.ca>; Mon, 14 May 2007 09:47:36 -0400
Received: from dp.samba.org (localhost [127.0.0.1])
	by lists.samba.org (Postfix) with ESMTP id 0CC4B16389C
	for <ktwarwic@speedy.uwaterloo.ca>; Mon, 14 May 2007 13:47:34 +0000 (GMT)
X-Spam-Checker-Version: SpamAssassin 3.1.7 (2006-10-05) on dp.samba.org
X-Spam-Level: 
X-Spam-Status: No, score=-0.2 required=3.8 tests=AWL,BAYES_00,NO_REAL_NAME,
	NO_RELAYS,RCVD_IN_DSBL autolearn=no version=3.1.7
X-Original-To: samba-cvs@samba.org
Delivered-To: samba-cvs@samba.org
Received: by lists.samba.org (Postfix, from userid 620)
	id E79CD162AFD; Mon, 14 May 2007 13:47:05 +0000 (GMT)
To: samba-cvs@samba.org
From: metze@samba.org
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Message-Id: <20070514134705.E79CD162AFD@lists.samba.org>
Date: Mon, 14 May 2007 13:47:05 +0000 (GMT)
Subject: svn commit: samba r22849 - in branches/SAMBA_4_0/source/ntvfs: .
X-BeenThere: samba-cvs@lists.samba.org
X-Mailman-Version: 2.1.5
Precedence: list
Reply-To: samba-technical@lists.samba.org
List-Id: Samba CVS and subversion commit messages <samba-cvs.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/archive/samba-cvs>
List-Post: <mailto:samba-cvs@lists.samba.org>
List-Help: <mailto:samba-cvs-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=subscribe>
Sender: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Errors-To: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org

Author: metze
Date: 2007-05-14 13:47:03 +0000 (Mon, 14 May 2007)
New Revision: 22849

WebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22849

Log:
map smb2 lock to the generic level

metze
Modified:
   branches/SAMBA_4_0/source/ntvfs/ntvfs_generic.c


Changeset:
Modified: branches/SAMBA_4_0/source/ntvfs/ntvfs_generic.c
===================================================================
--- branches/SAMBA_4_0/source/ntvfs/ntvfs_generic.c	2007-05-14 13:36:14 UTC (rev 22848)
+++ branches/SAMBA_4_0/source/ntvfs/ntvfs_generic.c	2007-05-14 13:47:03 UTC (rev 22849)
@@ -33,6 +33,8 @@
 
 #include "includes.h"
 #include "ntvfs/ntvfs.h"
+#include "libcli/smb2/smb2.h"
+#include "libcli/smb2/smb2_calls.h"
 
 /* a second stage function converts from the out parameters of the generic
    call onto the out parameters of the specific call made */
@@ -960,28 +962,61 @@
 		return NT_STATUS_INVALID_LEVEL;
 
 	case RAW_LOCK_LOCK:
+		lck2->generic.level = RAW_LOCK_GENERIC;
+		lck2->generic.in.file.ntvfs= lck->lock.in.file.ntvfs;
+		lck2->generic.in.mode = 0;
+		lck2->generic.in.timeout = 0;
 		lck2->generic.in.ulock_cnt = 0;
 		lck2->generic.in.lock_cnt = 1;
+		lck2->generic.in.locks = locks;
+		locks->pid = req->smbpid;
+		locks->offset = lck->lock.in.offset;
+		locks->count = lck->lock.in.count;
 		break;
 
 	case RAW_LOCK_UNLOCK:
+		lck2->generic.level = RAW_LOCK_GENERIC;
+		lck2->generic.in.file.ntvfs= lck->unlock.in.file.ntvfs;
+		lck2->generic.in.mode = 0;
+		lck2->generic.in.timeout = 0;
 		lck2->generic.in.ulock_cnt = 1;
 		lck2->generic.in.lock_cnt = 0;
+		lck2->generic.in.locks = locks;
+		locks->pid = req->smbpid;
+		locks->offset = lck->unlock.in.offset;
+		locks->count = lck->unlock.in.count;
 		break;
 
 	case RAW_LOCK_SMB2:
-		return NT_STATUS_INVALID_LEVEL;
+		if (lck->smb2.in.unknown1 != 1) {
+			return NT_STATUS_INVALID_PARAMETER;
+		}
+
+		lck2->generic.level = RAW_LOCK_GENERIC;
+		lck2->generic.in.file.ntvfs= lck->smb2.in.file.ntvfs;
+		if (lck->smb2.in.flags & SMB2_LOCK_FLAG_EXCLUSIV) {
+			lck2->generic.in.mode = 0;
+		} else {
+			lck2->generic.in.mode = LOCKING_ANDX_SHARED_LOCK;
+		}
+		lck2->generic.in.timeout = 0;
+		if (lck->smb2.in.flags & SMB2_LOCK_FLAG_UNLOCK) {
+			lck2->generic.in.ulock_cnt = 1;
+			lck2->generic.in.lock_cnt = 0;
+		} else {
+			lck2->generic.in.ulock_cnt = 0;
+			lck2->generic.in.lock_cnt = 1;
+		}
+		lck2->generic.in.locks = locks;
+		locks->pid = 0;
+		locks->offset = lck->smb2.in.offset;
+		locks->count = lck->smb2.in.count;
+
+		/* initialize output value */
+		lck->smb2.out.unknown1 = 0;
+		break;
 	}
 
-	lck2->generic.level = RAW_LOCK_GENERIC;
-	lck2->generic.in.file.ntvfs= lck->lock.in.file.ntvfs;
-	lck2->generic.in.mode = 0;
-	lck2->generic.in.timeout = 0;
-	lck2->generic.in.locks = locks;
-	locks->pid = req->smbpid;
-	locks->offset = lck->lock.in.offset;
-	locks->count = lck->lock.in.count;
-
 	/* 
 	 * we don't need to call ntvfs_map_async_setup() here,
 	 * as lock() doesn't have any output fields

