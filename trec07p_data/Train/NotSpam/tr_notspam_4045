From perl6-all-return-80784-ktwarwic=speedy.uwaterloo.ca@perl.org  Sun Apr 22 17:09:56 2007
Return-Path: <perl6-all-return-80784-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3ML9t0I024102
	for <ktwarwic@speedy.uwaterloo.ca>; Sun, 22 Apr 2007 17:09:55 -0400
Received: (qmail 29205 invoked by uid 514); 22 Apr 2007 21:09:29 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 29200 invoked from network); 22 Apr 2007 21:09:29 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.5 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME,FORGED_RCVD_HELO
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: neutral (x1.develooper.com: local policy)
Delivered-To: perlmail-parrot-porters@onion.perl.org
Delivered-To: parrot-porters@perl.org
Received-SPF: neutral (x1.develooper.com: local policy)
To: Joerg Plate <plate@patterner.de>
Cc: parrot-porters@perl.org
Subject: Re: I Don't Understand The Context Allocation/Destruction Code
References: <200704211824.18554.chromatic@wgz.org>
	<87slat2bsl.fsf@psyche.kn-bremen.de>
From: Uri Guttman <uri@stemsystems.com>
Date: Sun, 22 Apr 2007 17:08:35 -0400
In-Reply-To: <87slat2bsl.fsf@psyche.kn-bremen.de> (Joerg Plate's message of
 "Sun, 22 Apr 2007 07:55:22 +0200")
Message-ID: <x7wt04jewc.fsf@mail.sysarch.com>
User-Agent: Gnus/5.1006 (Gnus v5.10.6) Emacs/21.4 (usg-unix-v)
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.5 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME,FORGED_RCVD_HELO
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.5 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME,FORGED_RCVD_HELO
Status: O
Content-Length: 860
Lines: 20

>>>>> "JP" == Joerg Plate <plate@patterner.de> writes:

  >> const int slot = (reg_alloc + 7) >> 3; reg_alloc = slot << 3;

  >> This is where I start not to understand.  Why reg_alloc + 7? Why
  >> shift left and right by 3?

  JP> That's just a rounding up (if necessary) to a multiple of 8 (2<<3).

and those sort of things should be macros as they are confusing
otherwise and annoying to change. and named something like
ROUND_UP_TO_BOUNDARY. as others have said it is a common idiom. and i
agree that there should be comments on WHY the rounding is used/needed.

uri, an expired c hacker recalling painful issues :)

-- 
Uri Guttman  ------  uri@stemsystems.com  -------- http://www.stemsystems.com
--Perl Consulting, Stem Development, Systems Architecture, Design and Coding-
Search or Offer Perl Jobs  ----------------------------  http://jobs.perl.org

