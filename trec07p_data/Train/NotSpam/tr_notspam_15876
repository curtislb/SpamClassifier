From perl6-all-return-81779-ktwarwic=speedy.uwaterloo.ca@perl.org  Sun Jun  3 17:03:52 2007
Return-Path: <perl6-all-return-81779-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l53L3phB019669
	for <ktwarwic@flax9.uwaterloo.ca>; Sun, 3 Jun 2007 17:03:51 -0400
Received: (qmail 9006 invoked by uid 514); 3 Jun 2007 21:03:45 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 9001 invoked from network); 3 Jun 2007 21:03:44 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-0.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,KARMA_CONNECT_NEGATIVE,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Delivered-To: parrotbug-followup@parrotcode.org
Received-SPF: pass (x1.develooper.com: domain of nick@flirble.org designates 194.70.3.20 as permitted sender)
Date: Sun, 3 Jun 2007 21:55:36 +0100
From: Nicholas Clark <nick@ccl4.org>
To: Bernhard Schmalhofer via RT <parrotbug-followup@parrotcode.org>
Cc: "OtherRecipients of perl Ticket #43105": ;, perl6-internals@perl.org
Subject: Re: [perl #43105] [PATCH] function mmd.c::mmd_expand_y: newly allocated memory unitialized
Message-ID: <20070603205536.GK20876@plum.flirble.org>
Mail-Followup-To: Bernhard Schmalhofer via RT <parrotbug-followup@parrotcode.org>,
	"OtherRecipients of perl Ticket #43105": ;,
	perl6-internals@perl.org
References: <RT-Ticket-43105@perl.org> <200706011521.05438.chromatic@wgz.org> <1abd9eb20706011629l7915c3a3hef4f829bb70ead59@mail.gmail.com> <200706012111.28041.chromatic@wgz.org> <1abd9eb20706020300j59c25869td6dd9c9c71784cb5@mail.gmail.com> <rt-3.6.HEAD-1668-1180778511-309.43105-15-0@perl.org> <rt-3.6.HEAD-1668-1180882817-1024.43105-15-0@perl.org>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <rt-3.6.HEAD-1668-1180882817-1024.43105-15-0@perl.org>
User-Agent: Mutt/1.4.2.1i
X-Organisation: Tetrachloromethane
Sender: Nicholas Clark <nick@flirble.org>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-1.7 required=8.0
	tests=BAYES_20,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,KARMA_CONTENT_POSITIVE,SPF_HELO_PASS,SPF_PASS

On Sun, Jun 03, 2007 at 08:00:18AM -0700, Bernhard Schmalhofer via RT wrote:

> I have looked at the 'more_memory.patch' and I'm wondering about the
> portability.
> In that patch loops where pointers are explicitly set to NULL
> are replaced with a  
>   memset( start, 0, len);
> 
> What happens when NULL is not a consective series of '\0' chars?

I think that it breaks.

> Are there such platforms and are they releavant for parrot?

I believe that this assumption is endemic in Perl 5, and it's never hindered
Perl 5's portability. The C FAQ gives examples of platforms where NULL is not
all bits zero - http://c-faq.com/null/machexamp.html - and I've never
encountered anyone using them.

(As an aside, I think that Perl 5 also (mostly?) doesn't assume 2s complement
storage of integers. IIRC a bug report from a Ahmdal mainframes gave the
impression that it was using sign and magnitude. However, we've not heard
about anyone using Ahmdal mainframes in years. Likewise no-one has missed the
removal of memory model support from Configure, so presumably no-one is
compiling on a PDP-11 anymore. We did discover nasal daemons, or something
similarly painful, on Irix64, until we removed assumptions about signed
integer overflow. (It's undefined behaviour. It will bite))

Nicholas Clark

