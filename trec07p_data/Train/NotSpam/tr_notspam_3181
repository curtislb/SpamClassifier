From beginners-return-90930-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu Apr 19 11:08:21 2007
Return-Path: <beginners-return-90930-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3JF8K0I026046
	for <ktwarwic@speedy.uwaterloo.ca>; Thu, 19 Apr 2007 11:08:20 -0400
Received: (qmail 23562 invoked by uid 514); 19 Apr 2007 15:07:44 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 23553 invoked from network); 19 Apr 2007 15:07:43 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 19 Apr 2007 15:07:43 -0000
Received: (qmail 4165 invoked by uid 225); 19 Apr 2007 15:07:40 -0000
Delivered-To: beginners@perl.org
Received: (qmail 4153 invoked by alias); 19 Apr 2007 15:07:39 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of chas.owens@gmail.com designates 64.233.184.225 as permitted sender)
Received: from wr-out-0506.google.com (HELO wr-out-0506.google.com) (64.233.184.225)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 19 Apr 2007 08:07:37 -0700
Received: by wr-out-0506.google.com with SMTP id 57so570020wri
        for <beginners@perl.org>; Thu, 19 Apr 2007 08:07:32 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=LqAJjvB6uxn7SSSNsoA6DHAcZ2bfPNFuhMuVLaAkcM2s4ZQV8UGz8DWFMtBNHt4LwIqb8vu6Hr0RSgr992g7loe4yManno7P0z9EdN/A78bhgbh3GcCnWR4yKmUyrUw5jj0HcRwj/TTfR1RR+3cbnAt4T9TX/8cmkdiaKyTBdco=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=GT2NdPosfDrgWYYAwTafFk0bgBtwXnsKZPTaMRvCEuq2PIXCUAwc7ZS2QDiJUPSuFBcHAl3w9ilNOYQoLmrbm879bGhn52rWKwtlnSlBPnZQIQmJQTy+E8w/bdTVqIthkekPSLkXfN4/iEpddx4MDCaTQDeGb6OSNFdRyTlIJ+U=
Received: by 10.115.95.1 with SMTP id x1mr788749wal.1176995245692;
        Thu, 19 Apr 2007 08:07:25 -0700 (PDT)
Received: by 10.114.79.3 with HTTP; Thu, 19 Apr 2007 08:07:25 -0700 (PDT)
Message-ID: <58ce48dc0704190807i14627a5bh53a356b664ffdd9a@mail.gmail.com>
Date: Thu, 19 Apr 2007 11:07:25 -0400
From: "Chas Owens" <chas.owens@gmail.com>
To: "Jenda Krynicky" <Jenda@krynicky.cz>
Subject: Re: Nested loop
Cc: "beginners perl" <beginners@perl.org>
In-Reply-To: <46276441.7213.2471F368@Jenda.Krynicky.cz>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <ca5781c80704180957w72c92fbbq2e083368ed9339e9@mail.gmail.com>
	 <58ce48dc0704181057q79262a61q6d5e1370d8c99245@mail.gmail.com>
	 <46276441.7213.2471F368@Jenda.Krynicky.cz>
Status: O
Content-Length: 2564
Lines: 90

On 4/19/07, Jenda Krynicky <Jenda@krynicky.cz> wrote:
> From: "Chas Owens" <chas.owens@gmail.com>
snip
> > foreach is dead, long live for.
>
> William is dead, long live Bill?
>
> foreach and for are two names for the same thing and just as you can
> call someone both William and Bill you can use foreach and for
> interchangeably.
>
> foreach(my $i = 0; $i < $whatever; $i++)
> for(my $i = 0; $i < $whatever; $i++)
>
> for my $x (@array)
> foreach my $x (@array)
>
> for (@array)
> foreach (@array)
>
> No difference to the computer. Use whichever reads best!

Yes, foreach was aliased to for for backwards compatibility, but, like
telnet and rsh, it should not be used in new code.

>
> I would myself use "for" for the C-style loops

And this is why.  As long as people think "well, I have foreach which
is for iterating and for which is for C-style loops" they will
continue to write C-style loops.  C-style loops are bad.  They are
there for backwards compatibility.  I can't think of a single for loop
that isn't better written as a range based for loop or while loop. For
instance

standard range based loop
for (my $i = 0; $i < 10; $i++) {}
for my $i (0 .. 9) {}

often $i winds up being used as an index which just makes me cringe.

The infinite loop
for (;;) {}
while (1) {}

The reason C programmers give for using for (;;) is that it generates
less overhead on their platform, but, at least with my tests*,
while(1) is more efficient in Perl.

Weirder stuff that you only tend to see people coming from a C background do
for (my $node = $head; $node = $node; $node->next) {}
my $node = $head;
while ($node = $node->next) {}

But in Perl it is rarely necessary to do this sort of loop since most
functions return a list that can be iterated over using for:

for my $node ($head->nodes) {}

> and if I use the for loop as a way to create an alias

And that is a perfectly idiomatic usage; at least until given is added
to the language (in 5.10 from what I hear).

* benchmark
        Rate  bare   for while
bare  6754/s    --  -17%  -31%
for   8179/s   21%    --  -17%
while 9823/s   45%   20%    --

#!/usr/bin/perl

use strict;
use warnings;
use Benchmark;


my %subs = (
        for   => sub { my $i; for (;;) { last if $i++ > 1_000 } },
        while => sub { my $i; while (1) { last if $i++ > 1_000 } },
        bare  => sub { my $i; { last if $i++ > 1_000; redo }  },
);

Benchmark::cmpthese(-10, \%subs);

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


