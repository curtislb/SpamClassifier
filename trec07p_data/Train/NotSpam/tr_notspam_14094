From beginners-return-91930-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon May 28 21:17:40 2007
Return-Path: <beginners-return-91930-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4T1HbhB024787
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 28 May 2007 21:17:38 -0400
Received: (qmail 32113 invoked by uid 514); 29 May 2007 01:17:26 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 32104 invoked from network); 29 May 2007 01:17:26 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 29 May 2007 01:17:26 -0000
Received: (qmail 29516 invoked by uid 225); 29 May 2007 01:17:25 -0000
Delivered-To: beginners@perl.org
Received: (qmail 29506 invoked by alias); 29 May 2007 01:17:25 -0000
X-Spam-Status: No, hits=-0.4 required=8.0
	tests=BAYES_05,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: 63.251.223.186 is neither permitted nor denied by domain of mritty@gmail.com)
Received: from x6.develooper.com (HELO lists.develooper.com) (63.251.223.186)
    by la.mx.develooper.com (qpsmtpd/0.28) with SMTP; Mon, 28 May 2007 18:17:05 -0700
Received: (qmail 32073 invoked by uid 515); 29 May 2007 01:17:02 -0000
To: beginners@perl.org, perl-beginners@moderators.isc.org
MBOX-Line: From news@google.com Tue May 29 01:17:00 2007
Delivered-To: colobus-nntpmod@lists.develooper.com
Received: (qmail 32065 invoked from network); 29 May 2007 01:17:00 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 29 May 2007 01:17:00 -0000
Received: (qmail 29348 invoked by uid 225); 29 May 2007 01:17:00 -0000
Delivered-To: news-moderator-perl.beginners@perl.org
Received: (qmail 29341 invoked by alias); 29 May 2007 01:16:59 -0000
Received-SPF: neutral (x1.develooper.com: 130.59.1.10 is neither permitted nor denied by domain of news@google.com)
Received: from pinatubo-2.switch.ch (HELO pinatubo.switch.ch) (130.59.1.10)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Mon, 28 May 2007 18:15:07 -0700
Received: from [64.233.184.4] (helo=proxy.google.com)
	by pinatubo.switch.ch with esmtp (Exim 4.50)
	id 1HsqIf-0001IH-Of
	for perl-beginners@moderators.isc.org; Tue, 29 May 2007 03:15:02 +0200
Received: from AR020007
	by proxy.google.com with ESMTP id l4T1EtPC021846
	for <perl-beginners@moderators.isc.org>; Mon, 28 May 2007 18:15:00 -0700
Received: (from news@localhost)
	by Google Production id l4T1EtcV012183
	for perl-beginners@moderators.isc.org; Mon, 28 May 2007 18:14:55 -0700
From: Paul Lalli <mritty@gmail.com>
Subject: Re: Array of Array refs
Date: 28 May 2007 18:14:55 -0700
Organization: http://groups.google.com
Lines: 112
Message-ID: <1180401295.320160.89300@q66g2000hsg.googlegroups.com>
References: <1180324847.364219.70910@r19g2000prf.googlegroups.com>
   <1180380406.125333.280220@n15g2000prd.googlegroups.com>
NNTP-Posting-Host: 74.70.185.44
Mime-Version: 1.0
Content-Type: text/plain; charset="iso-8859-1"
X-Trace: posting.google.com 1180401295 12182 127.0.0.1 (29 May 2007 01:14:55 GMT)
X-Complaints-To: groups-abuse@google.com
NNTP-Posting-Date: Tue, 29 May 2007 01:14:55 +0000 (UTC)
In-Reply-To: <1180380406.125333.280220@n15g2000prd.googlegroups.com>
User-Agent: G2/1.0
X-HTTP-UserAgent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1),gzip(gfe),gzip(gfe)
Complaints-To: groups-abuse@google.com
Injection-Info: q66g2000hsg.googlegroups.com; posting-host=74.70.185.44;
   posting-account=p3DCbw0AAAAc32agNMy1mXKInuw5KHP_
X-Posted-By: 63.251.223.186
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.5 required=8.0
	tests=BAYES_40,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL

On May 28, 3:26 pm, googleA...@screenlight.com (Brian) wrote:
> On May 27, 9:00 pm, googleA...@screenlight.com (Brian) wrote:
>
>
>
>
>
> > Hi All-
> >   I am trudging through some DBI, XML, etc.. I had a problem and was
> > baffled by how to get at array elements out of a series of pushed
> > array refs. But, by simplifying the problem, I found that the syntax I
> > used was in error. here is the small sample, already debugged. Hope
> > this helps someone...
>
> > #!/usr/bin/perl
>
> >         my @tRespsA;
>
> >         my @fieldList = ( "one", "two", "three", "four" );
> >         my @r1 = ( 1, 2, 3, 4 );
> >         my @r2 = ( 13, 14, 15, 16 );
> >         my @r3 = ( 23, 24, 25, 26 );
>
> >         push @tRespsA, \@r1;
> >         push @tRespsA, \@r2;
> >         push @tRespsA, \@r3;
>
> >         foreach my $tRowRef ( @tRespsA ) {
> >                 my $tCnt=0;
> >                 foreach my $tFld (@fieldList) {
> >                         #if ( $tRowRef->[ $tCnt] eq "") { next; }
> >                         print $tFld . "='" . $tRowRef->[ $tCnt++ ] . "' \r";
> >                 }
> >         }
>
>  oh yes, more important than all that minutiae... the push did not
> work for me in the working code.

The push worked absolutely fine.  It just didn't do what you wanted it
to.  Learning how to parse your problem should be your first step
toward becoming a better programmer.

> The array was being rewritten.

Then you didn't delcare your variables in the correct scope.  As a
general rule of thumb, declare your variables in the smallest scope
possible.

> I had to use an array copy
>
>   push @tRespsA, [ @r1 ];   ## copy contents to an anonymous array,
> push array ref

Do you understand *why* that was necessary?  Do you understand the
difference between these two pieces of code?

#Sample 1
my @array;
my @BigArray;
for (1..5) {
   @array = get_contents();
   push @BigArray(\@array);
}

#Sample 2;
my @BigArray;
for (1..5) {
   my @array = get_contents();
   push @BigArray(\@array);
}


In the first, you're reusing the same array over and over again.  Each
time, you're overwriting the contents of the array with new values,
but you keep pushing references to THE SAME ARRAY onto @BigArray.

In the second, you constantly create and destroy a brand new array
each time through the for loop.  The array gets created, it is filled
with contents, a reference to that array is created, that reference is
pushed onto @BigArray, and then that array goes out of scope.  The
contents are still accessable via the reference you pushed onto
@BigArray, but via no other means.  Next iteration, a brand new array
is created.

This might make it more clear:

my @BigArray;
my @array1;
for (1..3) {
   my @array2;
   my $ref1 = \@array1;
   my $ref2 = \@array2;
   push @BigArray, $ref1, $ref2;

   print "$ref1 - $ref2\n";
}
__END__

Output:
ARRAY(0x37c38) - ARRAY(0x37c80)
ARRAY(0x37c38) - ARRAY(0x2537c)
ARRAY(0x37c38) - ARRAY(0x25094)


Do you see now?  By declaring only one instance of @array1, you're
getting the same array every time you take a reference to it, so
within the for loop, you keep changing the contents of the same
array.  @array2, on the other hand, is a completely new and unrelated
array each time through the for loop.

Paul Lalli


-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


