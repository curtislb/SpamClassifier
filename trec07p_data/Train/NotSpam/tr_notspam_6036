From perl6-all-return-80983-ktwarwic=speedy.uwaterloo.ca@perl.org  Sun Apr 29 02:27:10 2007
Return-Path: <perl6-all-return-80983-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3T6R96w017358
	for <ktwarwic@speedy.uwaterloo.ca>; Sun, 29 Apr 2007 02:27:10 -0400
Received: (qmail 23665 invoked by uid 514); 29 Apr 2007 06:27:08 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 23660 invoked from network); 29 Apr 2007 06:27:07 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DK_POLICY_TESTING,DK_SIGNED,DK_VERIFIED
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
  s=s1024; d=yahoo.com;
  h=X-YMail-OSG:Received:Date:From:Reply-To:Subject:To:MIME-Version:Content-Type:Content-Transfer-Encoding:Message-ID;
  b=NIv1sbHNDv8RzNxXUljuDFAoh6D2vdqS1pbXJ+PLp4sahmtuclMEFMQRoAKWAGaI0l8XC2uK3qfn4L9PD+wVgBHLCU0MxLg1GEmpznweAu35p/D3451QKDsnSgdHo7oBJeBx/nX5xcc0+Sy7iaqo1GEodvatZ8KoRMxY73HNIV0=;
X-YMail-OSG: Iu8vkWoVM1l7xvSCyFDxbLdQaFPl7rPZDCP7bt7U6BVm2Nfe7LzSVhsWaagtmIULH7b8syLju3EYXof8w51a.ocjc503sjiuhRfi.M8EZmcJe8pl9EhF
Date: Sat, 28 Apr 2007 23:26:29 -0700 (PDT)
From: Ovid <publiustemp-perl6language2@yahoo.com>
Reply-To: publiustemp-perl6language2@yahoo.com
Subject: S12:  can(), signatures and casting
To: perl6-language@perl.org
MIME-Version: 1.0
Content-Type: text/plain; charset=iso-8859-1
Content-Transfer-Encoding: 8bit
Message-ID: <62482.87743.qm@web60813.mail.yahoo.com>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.8 required=8.0
	tests=BAYES_00,DK_POLICY_TESTING,DK_SIGNED,DK_VERIFIED,DNS_FROM_RFC_ABUSE,DNS_FROM_RFC_POST,DNS_FROM_RFC_WHOIS
Status: O
Content-Length: 1905
Lines: 53

My apologies if these have been answered.  I've been chatting with
Jonathan Worthington about some of this and any misconceptions are
mine, not his.

In reading through S12, I see that .can() returns an iterator for the
methods matched.  What I'm curious about is this:

  if $obj.can('fribble') {
    my BadPoet $jibbet = $obj.fribble('repeatedly');
  }

Just because $obj.can('fribble') does not mean that the available
fribble(s) will accept a string argument or return BadPoet instances. 
In chatting with Jonathan about this, he speculated that I would have
to manually walk the method objects in the iterator to find out if I
really have a suitable method.  This seems like what we really have is
$object.might($method).  Is there a simpler way of determining if
there's an appropriate method for what I need?  It seems like what we
really want is a method object where I can declare a signature and then
do this:

  if $obj.can($object_with_signature){ ... }

This raises my second question.  What if I have this?

  class MadHatter is BadPoet { ... }

If I get back a MadHatter instead of a BadPoet, but I really want the
superclass and not a subclass, how can I enforce that?  Do I have to do
something like this?  (pseudo-code)

  subset ReallyABadPoet where { $^N.type eq "BadPoet" }
  my ReallyABadPoet = $obj.fribble('reapetedly');

That seems to fail because the you'd have to invoke every method to
guarantee that you're really getting back the exact type you want.  As
such, it seems like we'd need return values to guarantee that the
returned type is exactly what we claimed.

  method foo(Int $bar, Int $baz) returns Int {
    return $foo/$baz;
  }

Since the return value might be a Float, does it get cast to an Int,
thereby discarding information?

Cheers,
Ovid

--

Buy the book -- http://www.oreilly.com/catalog/perlhks/
Perl and CGI -- http://users.easystreet.com/ovid/cgi_course/

