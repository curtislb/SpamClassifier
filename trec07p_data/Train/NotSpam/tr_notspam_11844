From perl6-all-return-81472-ktwarwic=speedy.uwaterloo.ca@perl.org  Sat May 19 12:06:51 2007
Return-Path: <perl6-all-return-81472-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4JG6oqD028104
	for <ktwarwic@flax9.uwaterloo.ca>; Sat, 19 May 2007 12:06:50 -0400
Received: (qmail 17374 invoked by uid 514); 19 May 2007 16:06:46 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 17368 invoked from network); 19 May 2007 16:06:45 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
From: larry@cvs.develooper.com
To: perl6-language@perl.org
Subject: [svn:perl6-synopsis] r14394 - doc/trunk/design/syn
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Message-Id: <20070519160613.28DD6CB9B8@x12.develooper.com>
Date: Sat, 19 May 2007 09:06:13 -0700 (PDT)
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-1.1 required=8.0
	tests=BAYES_05,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS

Author: larry
Date: Sat May 19 09:06:10 2007
New Revision: 14394

Modified:
   doc/trunk/design/syn/S12.pod

Log:
"basal" was not intuitive, changed to "super"
"use optimize" is too long and not specific enough
now turn on class closing and finalization with "use oo :closed :final"


Modified: doc/trunk/design/syn/S12.pod
==============================================================================
--- doc/trunk/design/syn/S12.pod	(original)
+++ doc/trunk/design/syn/S12.pod	Sat May 19 09:06:10 2007
@@ -12,9 +12,9 @@
 
   Maintainer: Larry Wall <larry@wall.org>
   Date: 27 Oct 2004
-  Last Modified: 14 May 2007
+  Last Modified: 19 May 2007
   Number: 12
-  Version: 50
+  Version: 51
 
 =head1 Overview
 
@@ -1649,9 +1649,10 @@
 
 =head1 Open vs Closed Classes
 
-By default, all classes in Perl are non-final, which means you can derive
-from them.  They are also open, which means you can add more methods
-to them, though you have to be explicit that that is what you're doing:
+By default, all classes in Perl are non-final ("super"), which means
+you can potentially derive from them.  They are also open, which means
+you can add more methods to them, though you have to be explicit that
+that is what you're doing:
 
     class Object is also {
         method wow () { say "Wow, I'm an object." }
@@ -1662,24 +1663,25 @@
 don't do that.)
 
 For optimization purposes, PerlÂ 6 gives the top-level application the
-right to close and finalize classes.
+right to close and finalize classes by the use of C<oo>, a pragma for
+selecting global semantics of the underlying object-oriented engine:
 
-    use optimize :classes<close finalize>;
+    use oo :closed :final;
 
 This merely changes the application's default to closed and final,
 which means that at the end of the main compilation (C<CHECK> time)
 the optimizer is allowed to look for candidate classes to close or
 finalize.  But anyone (including the main application) can request
-that any class stay open or basal, and the class closer/finalizer
+that any class stay open or super, and the class closer/finalizer
 must honor that.
 
-    use class :open<Mammal Insect> :basal<Str>
+    use class :open<Mammal Insect> :super<Str>
 
 These properties may also be specified on the class definition:
 
     class Mammal is open {...}
     class Insect is open {...}
-    class Str is basal {...}
+    class Str is super {...}
 
 or by lexically scoped pragma around the class definition:
 
@@ -1689,7 +1691,7 @@
         class Insect {...}
     }
     {
-        use class :basal;
+        use class :super;
         class Str {...}
     }
 

