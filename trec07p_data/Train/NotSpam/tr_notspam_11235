From perl6-all-return-81447-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu May 17 04:11:39 2007
Return-Path: <perl6-all-return-81447-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4H8BcqD029775
	for <ktwarwic@flax9.uwaterloo.ca>; Thu, 17 May 2007 04:11:39 -0400
Received: (qmail 26978 invoked by uid 514); 17 May 2007 08:11:35 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 26973 invoked from network); 17 May 2007 08:11:35 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-1.1 required=8.0
	tests=BAYES_05,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_POLICY_TESTING,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
  s=s1024; d=Yahoo.com;
  h=Received:X-YMail-OSG:Message-ID:Date:From:Reply-To:Organization:User-Agent:MIME-Version:To:CC:Subject:References:In-Reply-To:Content-Type:Content-Transfer-Encoding;
  b=TZ41iL1bkFTQdkWnSUnez7K2GRhxULkeruNVJH9mZwG9E6Deoi5zrIHJDFwNMVnu/qhJZ/Kg2pKU+4KZLTSfD87K0MLmCaramMe0Lc5rkvm0Nkar1rpO/OYiLGAtldYACUxYrWxf03NlOH0xE+WdraGfENlpslfIroQhjPWiHWE=  ;
X-YMail-OSG: n4PIPJwVM1lF0t2EYuMsdhbuyygB3BehmPennSJRnR0SiylC2rhsoIQmZW9SAxpLMa3C30daWQ--
Message-ID: <464C0BC6.8010507@Yahoo.com>
Date: Thu, 17 May 2007 04:01:10 -0400
From: Austin Hastings <Austin_Hastings@Yahoo.com>
Reply-To: Austin_Hastings@Yahoo.com
Organization: Longacre, Inc.
User-Agent: Thunderbird 1.5.0.10 (Windows/20070221)
MIME-Version: 1.0
To: Darren Duncan <darren@DarrenDuncan.net>
CC: perl6-language@perl.org
Subject: Re: protecting internals from mutable arguments
References: <p06240800c271ae7b147d@[192.168.1.101]>
In-Reply-To: <p06240800c271ae7b147d@[192.168.1.101]>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-0.7 required=8.0
	tests=BAYES_20,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_POLICY_TESTING,DK_SIGNED,SPF_PASS

Darren Duncan wrote:
>
> Larry had some ideas for dealing with the problem, but this is a 
> matter that should be more widely discussed, particularly among 
> implementers and such.
>
> A general thought is that a parameter could be marked so that any 
> argument passed through it is effectively snapshot (which is a no-op 
> if the type is already immutable, or it is likely lazy/COW if it is 
> mutable) so further changes to the external version do indeed not 
> affect our internal copy.


Is the class underlying the type immutable? Could I change the 
mutability of the type after the fact? (Really?)

>
> Such as this could solve the problem in the general case.
>
> (However, I should mention in postscript that there may be a 
> complicating factor which concerns immutable objects which are also 
> lazy to an extent, eg that may internally cache derived values, such 
> as their .WHICH, when the derived is first asked for rather than at 
> construction time, though this doesn't affect their actual value, 
> which stays immutable.  We wouldn't want to lose that ability.)
>
> Um, yes, so thank you all who assist in solving this problem.
>

Some sugar like "is frozen" on parameters?

Alternatively, "$new = snapshot $old" is interesting since it could be 
explicitly optimized for performance.

But your earlier question is a good one. How much can you depend on the 
(im)mutability info the compiler has? What about runtime?

On the other hand, how much of this is really needed? In other words, to 
what extent are people passing objects that they WANT to be volatile, 
versus the extent to which they are passing objects where volatility 
would be fatal? Should "is frozen" be the default behavior, with 
auto-cow part of the entry code unless overridden? Or is volatility a 
more useful norm, so that requiring a statement inside the block is the 
right "awareness" for something so weird?


=Austin

