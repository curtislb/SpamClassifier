From perl6-all-return-81144-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon May  7 04:46:41 2007
Return-Path: <perl6-all-return-81144-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l478keqD029296
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 7 May 2007 04:46:40 -0400
Received: (qmail 21926 invoked by uid 514); 7 May 2007 08:46:38 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 21921 invoked from network); 7 May 2007 08:46:38 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: domain of codermattie@gmail.com designates 64.233.166.180 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:date:from:to:subject:message-id:x-mailer:mime-version:content-type;
        b=l8ursHOGGvllu6xh8fNEwjzZrV37YwKIVgjMQeLA0nu2ERcQVeK7dq6wABgiOhFZqVe8bIWt1S7h8t8CiUwC/0ns/OaVUrcAwlefVbp6PXQupQa93qQ8SjKetqwn8yFUBq+3RORI8ywaWrtCiEP9Av+A5ybrm7BXDs9FcykdxFg=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:date:from:to:subject:message-id:x-mailer:mime-version:content-type;
        b=erljLbvWkOtHce6bVfj+I2VPynTMx1ogz//JHeQl2cG6+eYudAHIM2GAx6rBAxRMf+phuSHryrXrhIiII3//cgPiEJ/lEYFO+2wOlvjjuCaW5FiMXD0Q6gWhplt6cggzo5YpIhMq5SdZXKeI+v0WGC+bOVpVNwQRnBBGdq34ICU=
Date: Mon, 7 May 2007 01:24:32 -0700
From: Mike Mattie <codermattie@gmail.com>
To: parrot ML <perl6-internals@perl.org>
Subject: [PATCH] refactor Parrot_get_runtime_prefix, more simple,robust
Message-ID: <20070507012432.47db190e@reforged>
X-Mailer: Claws Mail 2.6.1 (GTK+ 2.10.9; i686-pc-linux-gnu)
Mime-Version: 1.0
Content-Type: multipart/signed; boundary=Sig_uYfrTylvJ8MFaC2Sh1VrwmU;
 protocol="application/pgp-signature"; micalg=PGP-SHA1
X-Virus-Checked: Checked
X-Virus-Checked: Checked
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS

--Sig_uYfrTylvJ8MFaC2Sh1VrwmU
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: quoted-printable

Hello,

I was looking at Parrot_get_runtime_prefix as an example of getting
environment variable values the parrot way. The function looked
over-complicated so I tried a refactor.

The first thing to notice about the function is that it is possible to
leak memory with a call. I did not find any leaks but in checking this=20
I noticed some API misfeature. This API is built to overload the return
value as either a STRING* or a char*.=20

Every use in the tree is for a STRING* value, except compilers/immc/main.c
where the char* value is used in a format string right before parrot
terminates.

<snip rev-18443 compilers/imcc/main.c>
            case OPT_RUNTIME_PREFIX:
                printf("%s\n", Parrot_get_runtime_prefix(interp, NULL));
                exit(0);
                break;
</snip>

The other user outside of library.c specifically requests a leak-able
char* and then creates a string out of it which is ignorant AFAICT=20
(is there a real reason for this ?)

<snip rev-18443 src/inter_misc.c>
        case RUNTIME_PREFIX:
            fullname_c =3D Parrot_get_runtime_prefix(interp, NULL);
            fullname =3D string_from_cstring(interp, fullname_c, 0);
            mem_sys_free(fullname_c);
            return fullname;
</snip>

This API function can be made alot simpler both use and implementation wise=
=20
by having it return a STRING* every time. The overloading can be easily
replaced by helper functions nesting a call to Parrot_get_runtime_prefix.
I chose the STRING* as it is more useful and robust value to return.

-char*
-Parrot_get_runtime_prefix(Interp *interp, STRING **prefix_str)

+STRING*
+Parrot_get_runtime_prefix (Interp *interp ) {

I am inlining the patch for discussion. It is based against
rev-18443 with a rebase of #41908 applied. If This API
change is acceptable I will rebase it against HEAD clean.

Segway: I mentioned this on #parrot, jisom created a patch that returns
        char* instead of STRING*.

It passed the test-suite functionally, I tweaked it a little to pass coding=
std
so it is not 100% verified. the Docs test is broken , I haven't played with=
 the
docs yet so they are still out of sync with this prototype of the patch.

--- HEAD/src/library.c	2007-05-06 17:58:47.000000000 -0700
+++ rev-18443/src/library.c	2007-05-07 01:10:27.000000000 -0700
@@ -300,7 +377,7 @@
     else
         paths =3D get_search_paths(interp, PARROT_LIB_PATH_INCLUDE);
=20
-    Parrot_get_runtime_prefix(interp, &prefix);
+    prefix =3D Parrot_get_runtime_prefix(interp);
     n =3D VTABLE_elements(interp, paths);
     for (i =3D 0; i < n; ++i) {
         path =3D VTABLE_get_string_keyed_int(interp, paths, i);
@@ -344,60 +425,90 @@
      */
     return string_to_cstring(interp, result);
 }
-/*
-
-=3Ditem C<char* Parrot_get_runtime_prefix(Interp *, STRING **prefix_str)>
=20
-If C<prefix_str> is not NULL, set it to the prefix, else return a malloced
-c-string for the runtime prefix.  Remember to free the string with
-C<string_cstring_free()>.
+static STRING*
+query_runtime_prefix ( Interp* interp ) {
=20
-=3Dcut
-
-*/
+    STRING* prefix;
=20
-char*
-Parrot_get_runtime_prefix(Interp *interp, STRING **prefix_str)
-{
-    STRING *s, *key;
-    PMC *config_hash;
     int free_it;
     char *env;
=20
     env =3D Parrot_getenv("PARROT_RUNTIME", &free_it);
+
     if (env) {
-        if (prefix_str) {
-            *prefix_str =3D string_from_cstring(interp, env, 0);
-            if (free_it)
-                free(env);
-            return NULL;
-        }
-        if (!free_it)
-            env =3D strdup(env);
-        return env;
+        prefix =3D string_from_cstring(interp, env, 0);
+        if (free_it)
+            free(env);
+
+        return prefix;
     }
=20
+    return NULL;
+}
+
+static STRING*
+default_runtime_prefix ( Interp* interp ) {
+
+    /* should this be a call to getcwd() ? */
+    const char *pwd =3D ".";
+
+    return const_string(interp, pwd);
+}
+
+/*
+
+=3Ditem C<STRING* Parrot_get_runtime_prefix(Interp * )>
+
+return the runtime prefix in the PMC string C<prefix>. The
+config hash is consulted first, then the environment variable
+PARROT_RUNTIME, and finally a hardcoded internal value is
+returned if that fails.
+=3Dcut
+
+*/
+
+STRING*
+Parrot_get_runtime_prefix (Interp *interp ) {
+
+    PMC *config_hash;
+
+    STRING *key, *can_fail; /* can_fail , for storing string pointers from
+                               functions that may fail to return a prefix =
value
+                      */
+
+    /* first look in the config hash for a user specified path */
+
     config_hash =3D VTABLE_get_pmc_keyed_int(interp, interp->iglobals,
             (INTVAL) IGLOBALS_CONFIG_HASH);
-    key =3D CONST_STRING(interp, "prefix");
-    if (!VTABLE_elements(interp, config_hash)) {
-        const char *pwd =3D ".";
-        char *ret;
-
-        if (prefix_str) {
-            *prefix_str =3D const_string(interp, pwd);
-            return NULL;
+
+    if (VTABLE_elements(interp, config_hash)) {
+        key =3D CONST_STRING(interp, "prefix");
+        can_fail =3D VTABLE_get_string_keyed_str(interp, config_hash, key);
+
+        if ( can_fail ) {
+            /*
+              TODO:
+              shouldn't we do some sanity here ?  , assuming this can be
+              set by random code/input we should see if it even exists.
+            */
+
+            return can_fail;
         }
-        ret =3D (char *)mem_sys_allocate(3);
-        strcpy(ret, pwd);
-        return ret;
-    }
-    s =3D VTABLE_get_string_keyed_str(interp, config_hash, key);
-    if (prefix_str) {
-        *prefix_str =3D s;
-        return NULL;
     }
-    return string_to_cstring(interp, s);
+
+    /*
+      fallback:
+
+      no value was found in the config hash so try a system query, if
+      that fails as well return the default.
+    */
+
+    can_fail =3D query_runtime_prefix(interp);
+
+    return (can_fail)
+        ? can_fail
+        : default_runtime_prefix(interp);
 }
=20
 /*
--- HEAD/include/parrot/library.h	2007-05-06 17:58:48.000000000 -0700
+++ rev-18443/include/parrot/library.h	2007-05-07 00:15:09.000000000 -0700
@@ -38,7 +38,7 @@
 PARROT_API STRING* Parrot_locate_runtime_file_str(Interp *, STRING *file_n=
ame,
         enum_runtime_ft);
=20
-PARROT_API char* Parrot_get_runtime_prefix(Interp *, STRING **prefix);
+PARROT_API STRING* Parrot_get_runtime_prefix(Interp *);
 void parrot_init_library_paths(Interp *);
 STRING * parrot_split_path_ext(Interp* , STRING *in,
         STRING **wo_ext, STRING **ext);
--- HEAD/compilers/imcc/main.c	2007-04-21 06:34:57.000000000 -0700
+++ rev-18443/compilers/imcc/main.c	2007-05-07 01:10:49.000000000 -0700
@@ -272,7 +273,8 @@
                 exit(EX_USAGE);
                 break;
             case OPT_RUNTIME_PREFIX:
-                printf("%s\n", Parrot_get_runtime_prefix(interp, NULL));
+                printf("%s\n", string_to_cstring(interp,
+                                                 Parrot_get_runtime_prefix=
(interp)) );
                 exit(0);
                 break;
             case 'V':
--- HEAD/src/inter_misc.c	2007-04-27 07:00:47.000000000 -0700
+++ rev-18443/src/inter_misc.c	2007-05-07 00:42:27.000000000 -0700
@@ -341,10 +342,7 @@
             return basename;
=20
         case RUNTIME_PREFIX:
-            fullname_c =3D Parrot_get_runtime_prefix(interp, NULL);
-            fullname =3D string_from_cstring(interp, fullname_c, 0);
-            mem_sys_free(fullname_c);
-            return fullname;
+            return Parrot_get_runtime_prefix( interp );
=20
         default:        /* or a warning only? */
             internal_exception(UNIMPLEMENTED,





--Sig_uYfrTylvJ8MFaC2Sh1VrwmU
Content-Type: application/pgp-signature; name=signature.asc
Content-Disposition: attachment; filename=signature.asc

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.6 (GNU/Linux)

iD8DBQFGPuJIdfRchrkBInkRAqgbAJ99BaILv/WqAeVuUVKRxWFDJ5RUowCfeIbk
J5TNqXrdHML+4uurZFltPW4=
=ZVT3
-----END PGP SIGNATURE-----

--Sig_uYfrTylvJ8MFaC2Sh1VrwmU--

