From perl6-all-return-80594-ktwarwic=speedy.uwaterloo.ca@perl.org  Sat Apr 14 18:42:18 2007
Return-Path: <perl6-all-return-80594-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3EMgH0I006228
	for <ktwarwic@speedy.uwaterloo.ca>; Sat, 14 Apr 2007 18:42:17 -0400
Received: (qmail 22308 invoked by uid 514); 14 Apr 2007 22:41:52 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 22301 invoked from network); 14 Apr 2007 22:41:52 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: domain of jkeen@verizon.net designates 206.46.252.44 as permitted sender)
Date: Sat, 14 Apr 2007 18:41:19 -0400
From: James Keenan <jkeen@verizon.net>
Subject: Configure.pl:  Question about block calling arrot::Configure::runstep()
To: Perl 6 Internals <perl6-internals@perl.org>
Message-id: <48EDDEC8-A931-4D79-ADC1-C8BC07CDDAC0@verizon.net>
MIME-version: 1.0 (Apple Message framework v752.2)
X-Mailer: Apple Mail (2.752.2)
Content-type: text/plain; charset=US-ASCII; delsp=yes; format=flowed
Content-transfer-encoding: 7bit
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-0.7 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME,DNS_FROM_RFC_ABUSE,DNS_FROM_RFC_POST,SPF_PASS
Status: O
Content-Length: 1780
Lines: 48

I am trying to determine the purpose of a certain block of code in  
Configure.pl.  In the most recent version in trunk, we find:

     if ( exists $args{step} ) {
         $conf->data()->slurp();
         $conf->runstep( $args{step} );
         print "\n";
         exit(0);
     } else {
         # Run the actual steps
         $conf->runsteps or exit(1);
     }

The 'else' block is what normally executes when you call 'perl  
Configure.pl'.  The 'if' block is what puzzles me.  Translating it,  
we say:

"If command-line option 'step' has been provided with a value such as  
'foo', read in the configuration data already found in % 
Parrot::Config::PConfig (that's what Parrot::Configure::Data::slurp()  
does), then run step 'foo' (presumably to add it to the configuration  
setup)."

My questions are:

1.  If you've already configured, why would you want to add another  
step before calling 'make'?

2.  Does anybody actually use Configure.pl in this way, and to what  
purpose?

3.  Even granting that this is functionality someone finds useful,  
wouldn't we be better off if we placed in a separate Perl script  
focused strictly on supplementing/overriding aspect of a current  
Parrot configuration?

After all, there are several functions called in Configure.pl's  
normal operation -- print_introduction(); Parrot::Configure::new();  
get_steps_list; print_conclusion() -- which you would probably *not*  
want or need to run if you were doing supplementary configuration  
because they've already been run during Configure.pl.

Since Parrot::Configure::runstep() -- as distinct from runsteps() and  
_runstep() -- appears only to be called during Configure.pl,  
answering these questions would help me in testing and refactoring.

Thank you very much.
kid51

