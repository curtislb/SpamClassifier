From beginners-return-92004-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu May 31 09:45:57 2007
Return-Path: <beginners-return-92004-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4VDjuhB028506
	for <ktwarwic@flax9.uwaterloo.ca>; Thu, 31 May 2007 09:45:56 -0400
Received: (qmail 22979 invoked by uid 514); 31 May 2007 13:45:44 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 22941 invoked from network); 31 May 2007 13:45:43 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 31 May 2007 13:45:43 -0000
Received: (qmail 7323 invoked by uid 225); 31 May 2007 13:45:41 -0000
Delivered-To: beginners@perl.org
Received: (qmail 7310 invoked by alias); 31 May 2007 13:45:39 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of chas.owens@gmail.com designates 209.85.146.181 as permitted sender)
Received: from wa-out-1112.google.com (HELO wa-out-1112.google.com) (209.85.146.181)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 31 May 2007 06:45:31 -0700
Received: by wa-out-1112.google.com with SMTP id m38so224491waf
        for <beginners@perl.org>; Thu, 31 May 2007 06:45:24 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=Os+3/MbRGu8Vyhd5DLldaKQ6S4v61uszvlScDE0tQTHEl1+isN3c63ACTLTV4ksLsaxdAGt+MJZdxfiUViuWLgr6vlha9HoyKAJov09yFYx/65jK8rxlyfvQpHnEQegcqMR3n1kAwKhfXcok6RgktTs8Fu0kCKedALMNvhcZZSA=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=nGmboJxyKYX1SPFev1U1BxKxnrkGgx2GXtWEslvDvxwWL6rh+h/qok4tNfV2+TvKrbR7MVvMabJR1mTbBigVoPoHJAJkMctR/NtvMHfvy1P1HTeUG79Pl+afaMx58Q/+a+Clz3Zyn5oKEGsSz1x/QJ2BST2sHzarhCneZxBb5rU=
Received: by 10.114.154.1 with SMTP id b1mr672752wae.1180619124217;
        Thu, 31 May 2007 06:45:24 -0700 (PDT)
Received: by 10.114.92.6 with HTTP; Thu, 31 May 2007 06:45:24 -0700 (PDT)
Message-ID: <58ce48dc0705310645n6bcd0159m7a70c9dcd070c969@mail.gmail.com>
Date: Thu, 31 May 2007 09:45:24 -0400
From: "Chas Owens" <chas.owens@gmail.com>
To: "Sharan Basappa" <sharan.basappa@gmail.com>
Subject: Re: did I get greedy quantifiers wrong ?
Cc: beginners@perl.org
In-Reply-To: <8a31202a0705310620m3456aef9h49a195452372ce3@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <8a31202a0705310302y1822ca58y9507522e3b9a262d@mail.gmail.com>
	 <58ce48dc0705310608j53a84e3blac77157bced59fa6@mail.gmail.com>
	 <8a31202a0705310620m3456aef9h49a195452372ce3@mail.gmail.com>

On 5/31/07, Sharan Basappa <sharan.basappa@gmail.com> wrote:
> Thanks Chas ..
> I was wondering about the first regex str =~ m/m(.*i)(.*pi)/;
> did not match all the way till mississip. In fact my initial understanding
> was that the regex would match mississippi leaving nothing for second
> regex. Can you throw some light on this ..
>
> On 5/31/07, Chas Owens <chas.owens@gmail.com> wrote:
> > On 5/31/07, Sharan Basappa <sharan.basappa@gmail.com> wrote:
> > snip
> > > $str =~ m/m(.*i?)(.*pi)/;
> > snip
> >
> > ? only means non-greedy when following a * or a +.  When it follows a
> > pattern it means optional.

Nope, because then the match will fail.  Greediness will not cause the
match to fail; it only affects how much of the string is matched.

#!/usr/bin/perl

use strict;
use warnings;

$_ = "abababab";

print "trying /(a.*b)/g\n";
my $i = 1;
while (/(a.*b)/g) {
        print "\t$i: $1\n";
        $i++;
}

print "trying /(a.*?b)/g\n";
$i = 1;
while (/(a.*?b)/g) {
        print "\t$i: $1\n";
        $i++;
}

print "trying /(a.+b)/g\n";
my $i = 1;
while (/(a.+b)/g) {
        print "\t$i: $1\n";
        $i++;
}

print "trying /(a.+?b)/g\n";
$i = 1;
while (/(a.+?b)/g) {
        print "\t$i: $1\n";
        $i++;
}

prints

trying /(a.*b)/g
        1: abababab
trying /(a.*?b)/g
        1: ab
        2: ab
        3: ab
        4: ab
trying /(a.+b)/g
        1: abababab
trying /(a.+?b)/g
        1: abab
        2: abab

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


