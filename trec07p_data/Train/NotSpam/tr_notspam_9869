From beginners-return-91616-ktwarwic=speedy.uwaterloo.ca@perl.org  Sun May 13 08:08:26 2007
Return-Path: <beginners-return-91616-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4DC8OqD007878
	for <ktwarwic@flax9.uwaterloo.ca>; Sun, 13 May 2007 08:08:24 -0400
Received: (qmail 1101 invoked by uid 514); 13 May 2007 12:08:17 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 1091 invoked from network); 13 May 2007 12:08:17 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 13 May 2007 12:08:17 -0000
Received: (qmail 22107 invoked by uid 225); 13 May 2007 12:08:16 -0000
Delivered-To: beginners@perl.org
Received: (qmail 22100 invoked by alias); 13 May 2007 12:08:16 -0000
X-Spam-Status: No, hits=-1.1 required=8.0
	tests=BAYES_05,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_TESTING,DK_SIGNED,DK_VERIFIED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
Received: from smtp101.plus.mail.re2.yahoo.com (HELO smtp101.plus.mail.re2.yahoo.com) (206.190.53.26)
    by la.mx.develooper.com (qpsmtpd/0.28) with SMTP; Sun, 13 May 2007 05:08:13 -0700
Received: (qmail 95193 invoked from network); 13 May 2007 12:08:09 -0000
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
  s=s1024; d=yahoo.com;
  h=Received:X-YMail-OSG:Message-ID:Date:From:User-Agent:MIME-Version:To:CC:Subject:References:In-Reply-To:Content-Type:Content-Transfer-Encoding;
  b=VjqdEkK7MGsV2uS5ioSoQpyyTAQhMENz9/XCkgYBvAOaoc1wr3kj/R/+kDMJlulDeH3ZA/iVrUKncAdEHDREqtWOi62AzFpzzhtlZ0gwB6HP/qskrEy98FfGpJE+ELI7BY7dJdCHTW3ZxX/5uttdY6Z5ty3PP/iRq97pg2A/Uuo=  ;
Received: from unknown (HELO ?127.0.0.1?) (theillien@76.21.182.124 with plain)
  by smtp101.plus.mail.re2.yahoo.com with SMTP; 13 May 2007 12:08:08 -0000
X-YMail-OSG: aq3j_2wVM1nqqp6ecnanE.UtjcRKNOb1C4KIpK2Xd_GJzHpv8HMT0hxRhl.QdKVPsQA7X.sN9uiNluHf1Ly0_ivjWMxb1L2MgOoWpSibtjz.d2sTpBqLW8irS5JLKgA0pQRBrXQ96lVTmw--
Message-ID: <4646FF98.60604@yahoo.com>
Date: Sun, 13 May 2007 08:07:52 -0400
From: Mathew <theillien@yahoo.com>
User-Agent: Thunderbird 2.0.0.0 (Windows/20070326)
MIME-Version: 1.0
To: Rob Dixon <rob.dixon@350.com>
CC: Perl Beginners <beginners@perl.org>
Subject: Re: Stuck on a hash referrence, kinda
References: <4032136.38521179040784191.JavaMail.root@store2a.brinkster.com> <4646C10A.3040906@yahoo.com> <4646FD35.3040207@350.com>
In-Reply-To: <4646FD35.3040207@350.com>
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit



Rob Dixon wrote:
> Mathew Snyder wrote:
>>
>> yaron@kahanovitch.com wrote:
>>>
>>> Mathew Snyder wrote:
>>>>
>>>> A subroutine I'm working on takes two hash references.  The hashes
>>>> are each
>>>> actually a HoH.
>>>>
>>>> timesheet(\%opsTotal, \%opsEnvTotal);
>>>>
>>>> The problem I'm having is that I need to look past the first hash
>>>> and into the
>>>> second for the existence of a particular key.  I'm not sure how to
>>>> go about
>>>> doing this.
>>>>
>>>> sub timesheet {
>>>>   my ($dept, $env) = @_;
>>>>
>>>> #This is where I need help.  'user' is in the second hash but I'm
>>>> not sure how
>>>> #to get past the first one.  Should I use a foreach and step through
>>>> each key?
>>>>   if (exists $dept->{user}) {
>>>>     open TIMESHEET,
>>>> ">/work_reports/user/ops_timesheet_weekof_$endDate.txt";
>>>>   }else{
>>>>     open TIMESHEET,
>>>> ">/work_reports/user/eng_timesheet_weekof_$endDate.txt";
>>>>   }
>>>>
>>>>   print TIMESHEET "Timesheet for $startDate to $endDate\n\n\n";
>>>>
>>>>   foreach my $environ (sort keys %$dept) {
>>>>     #Print the header for our data
>>>>     print TIMESHEET "$environ", "\n";
>>>>     printf TIMESHEET "%10s%8s\n", "User", "hh:mm";
>>>>     print TIMESHEET ("-" x 30);
>>>>     print TIMESHEET "\n";
>>>>     foreach my $name (sort keys %{ $dept->{$environ} }) {
>>>>       printf TIMESHEET "%10s%8s\n", "$name",
>>>> "$dept->{$environ}->{$name}";
>>>>     }
>>>>     printf TIMESHEET ("-" x 30);
>>>>     print  TIMESHEET "\n";
>>>>     printf TIMESHEET "%18s\n\n", "$env->{$environ}";
>>>>   }
>>>>   close TIMESHEET;
>>>> }
>>>
>>> I am not sure that I understand your problem.
>>> In General if you want to check the existence of the key "user" in
>>> the first hash, you can use the following
>>>  if ($dept and exists($dept->{user}){ ....}else{....}
>>>
>>> Hope that helps
>>
>> To make this even more tricky, if the user shows up in even one of the
>> second
>> hashes the whole %$dept hash is affected.
>>
>> We have $dept{customer}{user}
>>         $dept{customer}{user1}
>>         $dept{customer1}{user}
>>   $dept{customer1{user1}
>>   $dept{customer2}{user}
>>
>> So, even though user2 isn't found in either customer's or customer1's
>> hashes,
>> its existence in customer2's hash means that all work will be done on the
>> preceding two hashes as well.
> 
> Hi Mathew
> 
> (Please bottom-post your replies, so that extended threads can remain
> comprehensible.
> Thanks.)
> 
> I think you have a less-than optimal solution at present. You need to
> express the
> problem more clearly and, once that is done, a solution will present
> itself. You
> mention the user2 key, but there is no such key in your data and I am
> not at all
> sure what your criteria are.
> 
> Here's how I understand your data. In $dept you have a reference to a
> hash with a
> number of customer names as keys and further hash references as values.
> You need to
> check whether a particular user exists as a key to any of the secondary
> hashes. Am
> I close?
> 
> If you loop over all the values of the %$dept hash, you will be able to
> check
> whether the user exists in any of the secondary hashes, like this:
> 
>  my $user;
>  foreach my $data (values %$dept) {
>    $user++ if exists $data-{user};
>  }
> 
> and now you can write
> 
>  if ($user) {
>    :
>  }
> 
> is that close to what you need?
> 
> The foreach loop can be written more concisely as
> 
>  my $user = grep exists $_->{user}, values %$dept;
> 
> Please let us now how your problem deviates from this guess.
> 
> HTH,
> 
> Rob
> 

User2 was simply the example of who I would be looking for, not the name
of the hash.  Your solution looks like what I was needing.  However, it
occurred to me that I was taking a less than optimal approach.

The user I'm looking for is my boss who is VP of Operations.
Presumably, he would have worked on a trouble ticket (which this script
applies to) so I thought of looking for his username as the determining
factor on how to handle other parts of the script.  It is also
conceivable that he won't ever touch a ticket during the timeframe the
script will be applied to.

That said, it makes more sense to base the conditional decision on an
external control instead of an internal one.

Mathew



-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


