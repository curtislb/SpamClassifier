From perl6-all-return-81509-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon May 21 19:45:22 2007
Return-Path: <perl6-all-return-81509-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4LNjLqD005318
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 21 May 2007 19:45:22 -0400
Received: (qmail 6677 invoked by uid 514); 21 May 2007 23:45:17 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 6672 invoked from network); 21 May 2007 23:45:17 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-1.1 required=8.0
	tests=BAYES_05,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: domain of mark@glines.org designates 72.36.206.66 as permitted sender)
Date: Mon, 21 May 2007 16:44:39 -0700
From: Mark Glines <mark@glines.org>
To: James E Keenan <jkeen@verizon.net>
Cc: perl6-internals@perl.org, Will Coleda <will@coleda.com>
Subject: Re: POD Coverage  (was:  Parrot Project Management...)
Message-ID: <20070521164439.6a86c287@chirp>
In-Reply-To: <46522ADE.4020501@verizon.net>
References: <1091130C-4F4D-4A84-9F00-FB53528F5D35@coleda.com>
	<20070521160332.3fc41bba@chirp>
	<46522ADE.4020501@verizon.net>
Organization: Glines.org
X-Mailer: Claws Mail 2.9.0 (GTK+ 2.10.12; i686-pc-linux-gnu)
X-Useless-Header: yay!
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=1.8 required=8.0
	tests=BAYES_40,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,KARMA_CONNECT_NEGATIVE,SPF_HELO_PASS,SPF_PASS

On Mon, 21 May 2007 19:27:26 -0400
James E Keenan <jkeen@verizon.net> wrote:

> Mark Glines wrote:
> >
> > Think its worth adding a
> > codingstd test for POD coverage?
> > 
> > 
> 
> No.
> 
> Or perhaps:  No, not unless you want to start a big "philosophical" 
> argument about POD coverage.
> 
> I say this as someone who dissents from the prevailing wisdom about
> POD coverage as it relates to CPAN modules.  That's because the tests
> on CPAN that purport to rate the "kwalitee" of the POD coverage of
> CPAN distributions will only credit you if you write your POD in one 
> particular style.  If you happen to have written POD for one of your 
> distros before that standard was formulated, or if you happen to
> think that style doesn't suit your distro well, then you don't get
> credit and your "kwalitee" sinks.
> 
> There are distros for which I've written 40+ pages of documentation
> but which fail these "kwalitee" tests because of the way I structured
> the =head tags.
> 
> I happen to think that some of our coding standards amount to
> excessive nitpicking ... and when Perl::Critic is applied to some of
> the code I maintain, the results, IMHO, are demonstrably less
> readable code.  And that's for stuff we write in relatively well
> structured languages like Perl 5 and PIR.  We write POD in English;
> need I say more?
> 
> Finally, to add a test for POD coverage is just one more test which
> will fail often in 'make test' or 'make smoke' and yet say nothing
> about the quality of Parrot.
> 
> In, short:  No.

Ok.  Thanks for the feedback.  Lets see what I can do with it...

First.  Frankly, I don't care about the *style* of POD in use, just that
there *is* some.  "Well-formedness" for me comes down to parsability,
not style.  So Perl::Critic can GTFOMI.  :)  And there already is a POD
well-formedness test (t/doc/pod.t), so all the codingstd test I'm
proposing would do is make sure some pod exists, at least for
non-generated sources in POD-capable file formats.

I feel the same way you do about Test::Pod::Coverage; its the reason I
haven't added POD coverage tests to my own distributions.  It's quite
possible to document a module properly without having a separate =head
tag for each subroutine in it.

Second.  How do you feel about a codingstd test for this that is not run
during "make test" or "make smoke"?  The @coding_std_tests variable in
t/harness looks to me like a whitelist for which tests to run on
non-release builds... so if this test isn't part of the list, then
everyone is happy?  (Or have I misunderstood that code?)

If you still don't like it, I'll drop the subject :)

Mark

