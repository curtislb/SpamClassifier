From beginners-return-90947-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri Apr 20 00:30:29 2007
Return-Path: <beginners-return-90947-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3K4UR0I001358
	for <ktwarwic@speedy.uwaterloo.ca>; Fri, 20 Apr 2007 00:30:28 -0400
Received: (qmail 4174 invoked by uid 514); 20 Apr 2007 04:29:57 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 4165 invoked from network); 20 Apr 2007 04:29:56 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 20 Apr 2007 04:29:56 -0000
Received: (qmail 30489 invoked by uid 225); 20 Apr 2007 04:29:56 -0000
Delivered-To: beginners@perl.org
Received: (qmail 30484 invoked by alias); 20 Apr 2007 04:29:56 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of chas.owens@gmail.com designates 64.233.162.235 as permitted sender)
Received: from nz-out-0506.google.com (HELO nz-out-0506.google.com) (64.233.162.235)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 19 Apr 2007 21:29:53 -0700
Received: by nz-out-0506.google.com with SMTP id s1so610755nze
        for <beginners@perl.org>; Thu, 19 Apr 2007 21:29:49 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=UIIP6rcNEtEch8CvE/AbPxqZQh/7qLprT/RTS4f5KM7pXfkafSnjiWoZLuzAvdSou0jqZQV4qrCqJMePMAHtL0gnaaCk6sBdVbA88T7g0jk1JZ5AUb0wB/WBIhtIa1VHDLPsIMMMonWON4CxNu3YCls+l9OT0wLIJTmk7XvcjpU=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=HwiBuk3G2HnU9MS0vJC5psGBIXpz28bL3ZE0tNEgPKBXa292n3BG87Wp5RErgpsYGYA6h1pGmYa6cseY/wEYn55RS2MR9mn4gutlXt1/vcO6reSy93TJ4dVaMcA2XinheH38Juj6ROXUt5f//osxUcEOUh/ONrkne8z+c5ISkfA=
Received: by 10.114.130.1 with SMTP id c1mr1065871wad.1177043388608;
        Thu, 19 Apr 2007 21:29:48 -0700 (PDT)
Received: by 10.114.79.3 with HTTP; Thu, 19 Apr 2007 21:29:48 -0700 (PDT)
Message-ID: <58ce48dc0704192129r3112ddb8m62d05075b5dd966b@mail.gmail.com>
Date: Fri, 20 Apr 2007 00:29:48 -0400
From: "Chas Owens" <chas.owens@gmail.com>
To: "John W. Krahn" <krahnj@telus.net>
Subject: Re: Nested loop
Cc: "Perl Beginners" <beginners@perl.org>
In-Reply-To: <46279515.9080603@telus.net>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <ca5781c80704180957w72c92fbbq2e083368ed9339e9@mail.gmail.com>
	 <58ce48dc0704181057q79262a61q6d5e1370d8c99245@mail.gmail.com>
	 <46276441.7213.2471F368@Jenda.Krynicky.cz>
	 <58ce48dc0704190807i14627a5bh53a356b664ffdd9a@mail.gmail.com>
	 <46279515.9080603@telus.net>
Status: O
Content-Length: 3963
Lines: 145

On 4/19/07, John W. Krahn <krahnj@telus.net> wrote:
> Chas Owens wrote:
> > Yes, foreach was aliased to for for backwards compatibility,
>
> Huh?  Do you have something to back up that claim?

Well, perlsyn* says
       The "foreach" keyword is actually a synonym for the "for" keyword, so
       you can use "foreach" for readability or "for" for brevity.  (Or
       because the Bourne shell is more familiar to you than csh, so writing
       "for" comes more naturally.)

But Synopsis 4* says
       There is no foreach statement any more. It's always spelled for
in Perl 6,
       so it always takes a list as an argument

So, you can either start training yourself to say for instead of
foreach now or wait for culture shock down the road.

>
> > but, like
> > telnet and rsh, it should not be used in new code.
>
> Really?  I assume you mean the protocols and not the programs?

The protocols and the programs (unless you are using the telnet
program for manual testing of server protocols).

>
> >> I would myself use "for" for the C-style loops
> >
> > And this is why.  As long as people think "well, I have foreach which
> > is for iterating and for which is for C-style loops" they will
> > continue to write C-style loops.  C-style loops are bad.  They are
> > there for backwards compatibility.  I can't think of a single for loop
> > that isn't better written as a range based for loop or while loop. For
> > instance
> >
> > standard range based loop
> > for (my $i = 0; $i < 10; $i++) {}
> > for my $i (0 .. 9) {}
>
> How about:
>
> for ( my $i = 0; $i < 10; $i += 3 ) {}
>
> foreach my $i ( ? .. ? ) {}

for my $i (0 .. 3) {
   $i *= 3;
}

for my $i (map { $_ * 3 } 0 .. 3) {
        print "$i\n";
}

The bigger question is why is the end condition 10?  Did you intend to
include it the list?  Are you making an off by one error?  This is why
the C-style for loop is bad.

A better phrasing would be:

my @a = (0 .. 10);
for (my $i = 0; $i < @a; $i += 3) { func($a[$i])}

This is much harder to move away from the C-style for loop.  I also
can't think of the last time I needed to do it.

Hmm, the naive  implementation is not bad, it communicates the intent
a little better in my mind, but I don't like it.

my @a = (0 .. 10);
my $i = 0;
for my $elem (@a) {
        next if $i++ % 3;
        func($elem);
}

I think this solution communicates the intent best.

my @a = (0 .. 10);
my $i = 0;
for my $elem (grep {not $i++ % 3} @a) {
        func($elem);
}

In Perl 6 we will have better options.

I don't like this one, it seems too kludgey

for @a -> $elem, undef, undef { func($elem) }

This one is only a little better than the Perl 5 variant

for each(@a ; 0 .. *) -> $elem, $i {
    next if $i % 3;
    func($elem)
}


Of course, there is the C-style for loop in disguise

loop ($i = 0; $i < @a; $i += 3) { func($a[$i]) }


This looks the C-style for loop in disguise

for 0 .. $#a : by(3) -> $i { func($a[$i]) }

But with a little tweak I think it is the best of all

for @a[0 .. $#a : by(3)] -> $elem { func($elem) }

>
> > often $i winds up being used as an index which just makes me cringe.
> >
> > The infinite loop
> > for (;;) {}
> > while (1) {}
> >
> > The reason C programmers give for using for (;;) is that it generates
> > less overhead on their platform, but, at least with my tests*,
> > while(1) is more efficient in Perl.
>
> I ran your benchmark on my computer and for(;;) and while(1) ran at about the
> same speed.

Which still proves the point, for(;;) is no better than while (1) for
infinite loops.  In my opinion while is better since I will eventually
realize that this should not be an infinite loop.

my $continue = 1;
$SIG{__TERM__} = sub { $continue = 0 };
while ($continue} {
}

* http://perldoc.perl.org/perlsyn.html
* http://dev.perl.org/perl6/doc/design/syn/S04.html

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


