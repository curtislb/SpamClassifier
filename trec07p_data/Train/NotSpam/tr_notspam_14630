From beginners-return-91977-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed May 30 11:45:04 2007
Return-Path: <beginners-return-91977-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4UFj2hB015503
	for <ktwarwic@flax9.uwaterloo.ca>; Wed, 30 May 2007 11:45:03 -0400
Received: (qmail 29045 invoked by uid 514); 30 May 2007 15:44:51 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 29036 invoked from network); 30 May 2007 15:44:50 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 30 May 2007 15:44:50 -0000
Received: (qmail 5512 invoked by uid 225); 30 May 2007 15:44:50 -0000
Delivered-To: beginners@perl.org
Received: (qmail 5503 invoked by alias); 30 May 2007 15:44:50 -0000
X-Spam-Status: No, hits=-0.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,HTML_MESSAGE,KARMA_CONNECT_NEGATIVE,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of sharan.basappa@gmail.com designates 209.85.132.249 as permitted sender)
Received: from an-out-0708.google.com (HELO an-out-0708.google.com) (209.85.132.249)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Wed, 30 May 2007 08:44:02 -0700
Received: by an-out-0708.google.com with SMTP id c25so667496ana
        for <beginners@perl.org>; Wed, 30 May 2007 08:43:55 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=QfD6A+HgnSP4LhsoA0fK4RdvcLXKLWdXVvILm88gbvS13CmWxIa1gi8EREYBRs4Uv2tiPyg5aVGn9Rk2WEJ3LwkeNW5kbTNrh1+6iylaHG74jDq8HXS7L9ffMtEktdAUkxNXlKs2Iaxx0JOrm/j5l6hFilxE1jCBLqg5HOe+3Sk=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=r2YLXBK1v4vrvqPOJD2UwtXX35WzRlgDGuKsSo0RhL3HAOEV4bHKyVIfIaZ5CFj2EqvKsJl4YbM0hsb1Lr8Edxgcb3yk+VyeYtzphpDhpS6w0vYpUi2w+xE7kEPWsl3/YQv/ulQyFvRxYM4aoZy6K9IPLHYdTyk30U2COy5vtVw=
Received: by 10.142.101.17 with SMTP id y17mr292274wfb.1180539835252;
        Wed, 30 May 2007 08:43:55 -0700 (PDT)
Received: by 10.143.2.8 with HTTP; Wed, 30 May 2007 08:43:55 -0700 (PDT)
Message-ID: <8a31202a0705300843mddb0680j303774ce230ae147@mail.gmail.com>
Date: Wed, 30 May 2007 21:13:55 +0530
From: "Sharan Basappa" <sharan.basappa@gmail.com>
To: "Rob Dixon" <rob.dixon@350.com>
Subject: Re: zero width lookahead match
Cc: beginners@perl.org
In-Reply-To: <465D925F.30101@350.com>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_2613_16008850.1180539835200"
References: <8a31202a0705300457l38219d07s8a236d11af4e2db0@mail.gmail.com>
	 <465D925F.30101@350.com>

------=_Part_2613_16008850.1180539835200
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

Thanks Rob and Chas ..

On 5/30/07, Rob Dixon <rob.dixon@350.com> wrote:
>
> Sharan Basappa wrote:
> >
> > Hi All,
> >
> > I have some background working with scanners built from Flex. And I have
> > used lookahead capability of flex many a times. But I dont understand
> the
> > meaning of ZERO in zero lookahead match rule i.e. (?=pattern)
> >
> > For example, to capture overlapping 3 digit patterns from string $str =
> > 123456
> > I use the regex @store = $str =~ m/(?=(\d\d\d))/g;
> > So here the regex engine actually looks ahead by chars digits.
>
> As far as lookahead expressions are concerned, Perl functions identically
> to
> Flex. It is called zero-width lookahead because it matches a zero-width
> /position/ in the string instead of a sequence of characters. If I write
>
> '123456' =~ /\d\d\d(...)/
>
> then '456' will be captured as the first three characters were consumed by
> the
> preceding pattern. However if I write
>
> '123456' =~ /(?=\d\d\d)(...)/
>
> then '123' will be captured instead because the lookahead pattern has zero
> width.
>
> > The other question I have is - how does regex engine decide that it has
> to
> > move further its scanner by 1 character everytime since I get output 123
> > 234
> > 345 456
> > when I run this script ?
>
> The engine moves as far through your target string as it needs to to find
> a new
> match. If I write
>
> '1B3D5F' =~ /(?=(.\d.))/g;
>
> then the engine will find a match at only every second character, and if I
> use
> a much simpler zero-width match, just
>
> 'ABCDEF' =~ //g
>
> then the regex will match seven times - at the beginning and end and
> between
> every pair of characters - so the more complex zero-width match you have
> written
> will match at all of the those places as long as there are three digits
> following.
>
> HTH,
>
> Rob
>
>

------=_Part_2613_16008850.1180539835200--

