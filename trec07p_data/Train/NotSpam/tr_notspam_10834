From perl6-all-return-81413-ktwarwic=speedy.uwaterloo.ca@perl.org  Tue May 15 22:59:51 2007
Return-Path: <perl6-all-return-81413-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4G2xnqD013313
	for <ktwarwic@flax9.uwaterloo.ca>; Tue, 15 May 2007 22:59:49 -0400
Received: (qmail 15561 invoked by uid 514); 16 May 2007 02:59:45 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 15556 invoked from network); 16 May 2007 02:59:45 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-1.3 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,MISSING_HEADERS,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: domain of codermattie@gmail.com designates 64.233.162.236 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:date:from:cc:subject:message-id:in-reply-to:references:x-mailer:mime-version:content-type;
        b=kBgFQTAWLTq3e6VMZPLT6AIvncp8IJH2HQpg7FEZVW6veizXDsJ+SWpJIe7fdCj0T1aOI/ej6cYfhKM5uIuyrcXRh6gpbH/sVJQOs6n4zVwdHymC75femIrbyX4htGBD88puxGlJdEixrz4qJ0WDd0TUX3jbwHKeqBC6o/Z9mzI=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:date:from:cc:subject:message-id:in-reply-to:references:x-mailer:mime-version:content-type;
        b=YLbfbj3hzF6tW/9h444xRAETnBCjpPnkDFB3yo3d6X9lRrSNDJXSi2W1ZRw8z8ud6sWNHMCP6XrdGe4nFqeYTUxvo0L5JGdXniHcPYoCOIkme1eKn4WEzgKeh+ivthhbU9EluK+5gEx6CQHXewwcZ2qVcT/qRZkNUQi+h37KUFU=
Date: Tue, 15 May 2007 19:56:19 -0700
From: Mike Mattie <codermattie@gmail.com>
Cc: parrot ML <perl6-internals@perl.org>, Allison Randal <allison@perl.org>
Subject: Re: [RFC] extension guessing, functionally better loader behavior
 -> working install target
Message-ID: <20070515195619.3ee3261e@reforged>
In-Reply-To: <20070513224615.5f62e3ad@reforged>
References: <20070513224615.5f62e3ad@reforged>
X-Mailer: Claws Mail 2.6.1 (GTK+ 2.10.9; i686-pc-linux-gnu)
Mime-Version: 1.0
Content-Type: multipart/signed; boundary="Sig_ip1yOzeex/V7aRuTA7cgaAR";
 protocol="application/pgp-signature"; micalg=PGP-SHA1
X-Virus-Checked: Checked
X-Virus-Checked: Checked
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.7 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,KARMA_CONNECT_NEGATIVE,MISSING_HEADERS,SPF_PASS

--Sig_ip1yOzeex/V7aRuTA7cgaAR
Content-Type: multipart/mixed; boundary=MP_hnyM0qkKNyRzwar4Fd1MldR

--MP_hnyM0qkKNyRzwar4Fd1MldR
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline

On Sun, 13 May 2007 22:46:15 -0700
Mike Mattie <codermattie@gmail.com> wrote:

> Hello,
>=20

I figured anyone who actually makes it from top to bottom of the RFC might =
want to see what it
looks like in C code. Since I will be gone for a bit I am attaching my in-p=
rogress copy of
src/library.c . It is not even compiling AFAIK , but it is fairly close, an=
d has the design
fully sketched out.

I am also attaching foo.pl. It is a hack in the derogatory sense of the wor=
d, but if anyone
wants to play with the ideas in the RFC it will help. I use it to generate =
builtin-library-paths.c

library.paths is the input file for foo.pl

happy parrot hacking,

> Cheers,
> Mike Mattie - codermattie@gmail.com
>=20
>=20
>=20
>=20

--MP_hnyM0qkKNyRzwar4Fd1MldR
Content-Type: text/x-csrc; name=library.c
Content-Transfer-Encoding: quoted-printable
Content-Disposition: attachment; filename=library.c

/*
Copyright (C) 2004-2007, The Perl Foundation.
$Id: library.c 18482 2007-05-09 11:16:10Z paultcochrane $

=3Dhead1 NAME

src/library.c - Interface to Parrot's bytecode library

=3Dhead1 DESCRIPTION

This file contains a C function to access parrot's bytecode library functio=
ns.

=3Dhead2 Functions

=3Dover 4

=3Dcut

*/

#include <stdarg.h>

#include "parrot/parrot.h"
#include "parrot/library.h"

#include "library.str"


/* used internally by diagnostics , ASCII text string names for the loader.
 * TODO: internationalization. */
static const char* const loader_names[] =3D {
    'ARCH',
    'BYTECODE',
    'INCLUDE',
    'SRC'
};

/* create a loader table , indexed by the three loader paths enumerated
 * by enum_runtime_ft in parrot/include/library.h. Each namespace has
 * a path/extension search table for a shared object loader, a byte-code
 * loader, and a source-code loader.
 *
 * for a shared object loader this is a little wastefull, but the tables
 * are not duplicated. If a namespace does not define a path/extension
 * search table, the "parrot" table will be used. */

static PMC*
create_loader_table(Interp* interp)
{
    PMC *table;

    table =3D pmc_new(interp, enum_class_FixedPMCArray);
    VTABLE_set_integer_native(interp, table,
                              PARROT_RUNTIME_FT_SIZE );

    return table;
}

/* return an existing load-table , or create one and attach it
 * to the namespace. */
static PMC*
get_load_table_for_populate(Interp* interp,
                            PMC* lib_paths, STRING* ns)
{
    PMC *table;

    if ( VTABLE_exists_keyed_str(interp, lib_paths, ns) )
        return VTABLE_get_pmc_keyed_str(interp, lib_paths, ns );

    table =3D create_loader_table(interp);

    VTABLE_set_pmc_keyed_str(interp, lib_paths,
                             ns,
                             table);
    return table;
}

/* create a search space. Loaders will want to iterate through a
 * path space, and an extension space. These are enumerated
 * in enum_search_space. */

typedef enum {
    SEARCH_TABLE_PATH =3D 0,
    SEARCH_TABLE_EXT,
    SEARCH_TABLE_SIZE
} enum_search_space;

static PMC*
create_search_table(Interp* interp)
{
    PMC *table;

    table =3D pmc_new(interp, enum_class_FixedPMCArray);
    VTABLE_set_integer_native(interp, table, SEARCH_TABLE_SIZE);

    return table;
}

static PMC*
get_search_table_for_populate(Interp* interp,
                              PMC* load_table, int loader )
{
    PMC *table;

    if ( VTABLE_exists_keyed_int( interp, load_table, loader ) )
        return VTABLE_get_pmc_keyed_int(interp, load_table, loader );

    table =3D create_search_table(interp);
    VTABLE_set_pmc_keyed_int(interp, load_table,
                             loader,
                             table);

    return table;
}

/* A search space is a simple dynamic array, or list of
 * name varaiations (path or extension) to try. */

static PMC*
create_search_space(Interp* interp) {
    return pmc_new(interp, enum_class_ResizableStringArray);
}

static PMC*
get_search_space_for_populate(Interp* interp,
                              PMC* search_table , enum_search_space search_=
space)
{
    PMC *new_table;

    if ( VTABLE_exists_keyed_int( interp, search_table , search_space ) )
        return VTABLE_get_pmc_keyed_int(interp, search_table, search_space =
);

    new_table =3D create_search_space(interp);
    VTABLE_set_pmc_keyed_int(interp,
                             search_table, search_space , new_table );

    return new_table;
}

static void
populate_search_space(Interp* interp,
                      /* the loader table for the namespace */
                      PMC* load_table,
                      enum_runtime_ft loader,

                      /* search space index */
                      enum_search_space search_space,

                      /* the entry to add */
                      STRING* entry)
{
    PMC *search_table, *search_list;

    search_list =3D get_search_space_for_populate(interp,
                                                get_search_table_for_popula=
te(interp,
                                                                           =
   load_table,loader),
                                                search_space);

    VTABLE_push_string(interp, search_list, entry);
}

/* load_prefer is a toggle to prefer either the most low level form of a mo=
dule
 * (compiled) or the highest level form of a module.
 *
 * Users will typically want the compiled versions. This is also the perl5
 * behavior as well.
 *
 * Users wanting a more dynamic interaction can export PARROT_PREFER_SOURCE
 * to reverse the default behavior.
 *
 * FUTURE: If a value for PARROT_PREFER_SOURCE is honored it should be
 * a path spec of directories for which source will be loaded over compiled
 * objects.
 */

typedef enum {
    PREFER_COMPILE,
    PREFER_SOURCE
} enum_load_prefer;

static enum_load_prefer load_prefer =3D PREFER_COMPILE;

static int
query_load_prefer ( Interp* interp ) {
    int free_it;
    char *env;

    env =3D Parrot_getenv("PARROT_PREFER_SOURCE", &free_it);

    if (env) {
        if (free_it)
            mem_sys_free(env);

        return 1;
    }

    return 0;
}

static int
next_by_load_prefer (int current) {
    return current + ( PREFER_COMPILE =3D=3D load_prefer )
        ? 1
        : -1;
}


static int
bound_by_load_prefer(int *lower_bound, *upper_bound)
{
    int swap;

    if ( PREFER_COMPILE =3D=3D load_prefer ) {
        *lower_bound =3D 0;
        return;
    }

    *lower_bound =3D *upper_bound - 1;
    *upper_bound =3D -1;
}

/*

=3Ditem C<void parrot_init_library_paths(Interp *)>

 TODO: doc.

=3Dcut

*/

#include "builtin-loader-paths.c"

void
parrot_init_library_paths(Interp *interp)
{
    PMC *iglobals, *lib_paths;

    if( query_load_prefer(interp) )
        load_prefer =3D PREFER_SOURCE;

    /* create lib_paths, a fixed array of hashes.

       The array indexing is for the loader types. The elements of the
       array are a hash implementing a "interpreter" name-space.
     */

    lib_paths =3D pmc_new(interp, enum_class_Hash);

    populate_builtin_library_paths(interp, lib_paths);

    iglobals =3D interp->iglobals;
    VTABLE_set_pmc_keyed_int(interp, iglobals,
                             IGLOBALS_LIB_PATHS, lib_paths);
}

static STRING* load_trace; /* used to accumulate a trace of a load
                              for diagnostics & debugging */

#define TRACE_ENABLED ( NULL !=3D load_trace )
#define SET_TRACE( trace ) { load_trace =3D trace; }

static void
append_trace (Interp* interp, const char* const format, ... )  {

    STRING* format_string =3D string_from_cstring( format );
    va_list args;

    va_start(args, format);

    string_append(interp, load_trace, Parrot_sprintf_s(interp, format, args=
);

    va_end(args);
}

#define SEARCH_TRACE_PSTRING ( format , args... )\
{\
    if( NULL !=3D search_trace ) {\
        string_append(interp,load_trace,\
                      append_trace(interp,format, ## args ));\
    }\
}

#define SEARCH_TRACE_CSTRING ( format , args... )\
{\
    if ( NULL !=3D load_trace ) {\
        string_append(interp, load_trace,\
                      string_printf( format , ## args );\
    }\
}


static PMC* namespace_search_path(Interp *interp,
                                  STRING* hll,
                                  enum_runtime_ft loader,
                                  enum_search_space search_space)
{
    PMC *iglobals, *lib_paths, *loader_table, *search_table;

    iglobals =3D interp->iglobals;
    lib_paths =3D VTABLE_get_pmc_keyed_int(interp, iglobals, IGLOBALS_LIB_P=
ATHS);

    /* first do the namespace lookup to find the loader table */

    if ( ! VTABLE_exists_keyed_str(interp, lib_paths, hll) )
        return NULL;

    loader_table =3D VTABLE_get_pmc_keyed_str(interp, lib_paths, hll );

    /* second look for a entry matching the loader desired */
    if ( ! VTABLE_exists_keyed_int(interp, loader_table, loader) )
        return NULL;

    search_table =3D VTABLE_get_pmc_keyed_int(interp, loader_table, loader =
);

    /* check for the the PATH or EXT search table */
    if ( ! VTABLE_exists_keyed_int(interp, search_table, search_space) )
        return NULL;

    return VTABLE_get_pmc_keyed_int(interp, search_table, search_space );
}

/* implement search space lookup , with a hard-coded default namespace
 * for fallback
 */
static PMC*
get_search_space(Interp *interp,
                 STRING* hll,
                 enum_runtime_ft loader,
                 enum_search_space search_space)
{
    PMC *table;

    if ( NULL =3D=3D hll ) goto fallback;

    table =3D namespace_search_path(interp, hll, loader, search_space );

    if ( NULL =3D=3D table ) {
      fallback:
        hll =3D CONST_STRING(interp, "parrot" );
        table =3D namespace_search_path(interp, hll, loader, search_space);
    }

    return table;
}

#include "path.c"

static STRING*
verify_load_path(Interp *interp, STRING* path) {
    STRING *final;

    final =3D string_copy(interp, path);

#ifdef DEBUG_LIB_LOADER
    printf("path is \"%s\"\n",
           string_to_cstring(interp, final ));
#endif

    final =3D parrot_path_platform_localize(interp, final );

    if (Parrot_stat_info_intval(interp, final , STAT_EXISTS)) {
        return final;
    }

    return NULL;
}

/*
 * find the best format for the module
 */

static STRING*
try_extensions( Interp *interp, PMC* search_space , STRING* path )
{
    STRING *with_ext, *result, *ext;

    int i,n;

    /*
     * first try the path without guessing to ensure compatibility with
     * existing code.
     */

    with_ext =3D string_copy(interp, path);
    if ( (result =3D verify_load_path(interp, with_ext)) )
        return result;

    n =3D VTABLE_elements(interp, search_space);
    bound_by_load_prefer(&i, &n);

    while( i !=3D n ) {
        with_ext =3D string_copy(interp, path);
        with_ext =3D string_append(interp,
                                 with_ext, VTABLE_get_string_keyed_int(inte=
rp, search_space, i));

        if ( (result =3D verify_load_path(interp, with_ext)) )
            return result;

        i =3D next_by_load_prefer(i);
    }

    return NULL;
}

/* try_path: implements search-rule 1
 *
 * First try a path as formed, then perform extension guessing.
 */
static STRING*
try_path(interp, PMC* ext_srch_space , STRING* path ) {
    STRING* result =3D NULL;

    if ( result =3D verify_load_path(interp, path) )
        return result;

    return ( NULL =3D=3D ext_srch_space )
        ? NULL
        : try_extensions(interp, ext_src_space, path);
}


/*

=3Ditem C<char* Parrot_locate_runtime_file(Interp *,
                                         const char *object_name,
                                         STRING *hll
                                         enum_runtime_ft *loader
                                         STRING* trace)>

Parrot_locate_runtime_str searches the filesystem for object files
containing code of some sort. This function is required by several
opcodes/components and is designed with parrot's unusual flexiblity in
mind.

object_name : the name of the object to load. It can be simply a name,
              path, or absolute path.

hll         : The hll argument is the key to the HLL name-space. The
              default namespace is used if the namespace does not exist
              or is null.

              The default name-space is "parrot".

loader      : a bit-mask selecting loaders to be included in the search.
              This arguement is passed by reference. When a matching file
              is found the value of loader is reset to the flag for the
              loader under which it was found.

              loader is not modified unless a matching file is found.

trace       : given non-null string a trace of the search will be appended.
              This allows higher level API's to capture detailed diagnostics
              when the search fails. This is useful for all parties.

The return value is:

  *  a string containing the path to the objects preferred form, or NULL if=
 not found.

  * localized with parrot_platform_path_localize

      *  all path seperators are coverted to the platform's value (ie Win32)

      *  a hidden 0 char is appended making it suitable for direct use in C=
 API calls,
         an artifact of the previous implementation.

Search behavior:

code objects can have several formats, some of which will be stored on
disk. This routine searches for the preferred format of an object.
Preferred is either lowest form (compiled), or highest form (source).

The given search rules apply at each step in the search order. The
search order is executed per loader. The loader mask is also traversed
in preferred the order.

rule 1: parrot will always try the object_name as given before adding
        extensions. The set of extensions tried is loader specific.

Search order:

     1. Absolute paths (return or fail)

     2. Search the paths joined with get_runtime_prefix

     3. joined with get_runtime_prefix

     4. as given

     Exception 1. absolute paths in the path list are not prefixed

     Exception 2. If the loader mask is zero: step two of the search order
                  will be skipped. extensions are skipped since there
                  is no loader information available.

The two modals for the search are the runtime_prefix and preferred
order.

SEE ALSO: Parrot_get_runtime_prefix, query_load_prefer , F<include/parrot/l=
ibrary.h>

current parrot behavior can be achieved by passing NULL as the hll
argument, and a loader mask of:

  PARROT_RUNTIME_FT_BYTECODE &
  PARROT_RUNTIME_FT_INCLUDE &
  PARROT_RUNTIME_FT_SOURCE

for parrot bytecode, and PARROT_RUNTIME_FT_ARCH for platform shared
objects.

Implementation Notes:

The implementation of the search behavior is tagged in this file.
rules            :  grep search-rule x
search order     :  grep search-order x
search exception :  grep search-rule x

The search lists for both paths and extensions are dynamic arrays. In
the extension search space it is assumed that the lowest index
corresponds to the lowest form, and that the array is sorted
accordingly.

TODO: the extension , which is actually the stage of interpretation contain=
ed
      by the format is returned in the extension of the file. This should be
      returned as a optimization hint to heuristics that do the real
      determination of what's in a file , ( example: use v6; or shebang inv=
ocations )

TODO: instead of a string that is checked by stat() , a handle should be
      returned instead to close the classic access() race. Additional
      flags are needed for that such as NO_TTY and other basic cross-platfo=
rm
      security open() masks. <-- huge warning.

      (This should be relative to a loader , higher level forms may
       have looser security constraints)

TODO: OS IO/VM hinting. some loaders could benefit from IO hinting such as
      mapped/streamed, use-once etc. depends on returning a handle and open
      flags.

=3Dcut

*/

/* compute a bit-flag from a index of the loader bits. Need to check endian=
 issues */

static int
ft_index_to_mask (int index ) {
    return 1 << index;
}

/* we have a multi-value return. Ensure that code does not forget to
 * set one of the expected returns by encapsulating return value
 * construction in a macro */

#define return_if_found ( path , for_loader ) if( path ) { *loader =3D for_=
loader ; return path }

STRING*
Parrot_locate_runtime_file_str(Interp *interp,
                               STRING *object_name,
                               STRING *hll,
                               enum_runtime_ft *loader,
                               STRING* trace)
{
    STRING *prefix, *full_name;
    int l_idx, l_bound;

    PMC *path_srch_space, *ext_search;

    /* set the static trace variable, NULL to disable or a string for the
       diagnostics data. */
    SET_TRACE( trace );
    SEARCH_TRACE_PSTRING( "looking up path for object: %s\n" , object_name =
);

    /* get the value of PARROT_RUNTIME if any, a constant for the paths bel=
ow */
    prefix =3D Parrot_get_runtime_prefix(interp);
    if( TRACE_ENABLED
        && prefix
        && string_length(interp, prefix)) append_trace(interp, "prefix is s=
et as %s\n",prefix);

    /* If it is an absolute path try it now. If it fails skip the rest
       of the search for this loader */
    if ( !*loader )
        SEARCH_TRACE_CSTRING( "all loaders disabled, path search disabled\n=
" );

        if ( !parrot_path_is_abs(interp, object_name) ) {
            full_name =3D try_path(interp, NULL, path_concat(interp, prefix=
, object_name));
            return_if_found( full_name , 0 );
        }

        full_name =3D try_path(interp, NULL, object_name);
        return_if_found( full_name , 0 );

        return NULL;
    }

    l_bound =3D PARROT_RUNTIME_FT_SIZE;
    bound_by_load_prefer(&l_idx, &l_bound);

    while( l_idx !=3D l_bound ) {
        int p_idx, p_bound;

        /* ingore loaders not in the mask */
        if (0 =3D=3D (ft_index_to_mask(l_idx) & *loader)) {

            l_idx =3D next_by_load_prefer(l_idx);
            continue;
        }

        SEARCH_TRACE_CSTRING( "looking in paths for loader %s\n", loader_na=
mes[l_idx] );

        /* we should always get a search space unless the "parrot" search
           space is broken in the tree */

        path_srch_space =3D get_search_space(interp, hll, *loader , SEARCH_=
TABLE_PATH );
        ext_srch_space  =3D get_search_space(interp, hll, *loader , SEARCH_=
TABLE_EXT );

        assert(path_srch_space);
        assert(ext_srch_space);

        /* If it is an absolute path try it now. If it fails skip the rest
         of the search for this loader */

        if (parrot_path_is_abs(interp, object_name)) {
            full_name =3D try_path(interp, ext_src_space, object_name);
            return_if_found( full_name , ft_index_to_mask(l_idx) );

            l_idx =3D next_by_load_prefer(l_idx);
            continue;
        }

        /* now iterate through the paths , incorperating the value
         * of PARROT_RUNTIME as well */

        p_bound =3D VTABLE_elements(interp, path_srch_space);
        bound_by_load_prefer(&p_idx, &p_bound);

        while( p_idx !=3D p_bound ) {
            STRING *path =3D VTABLE_get_string_keyed_int(interp, path, p_id=
x);

            /* search-exception 1 */
            full_name =3D ( prefix
                          && string_length(interp, prefix)
                          && !parrot_path_is_abs(interp,path))
                ? parrot_path_concat(interp, prefix , path)
                : string_copy(interp, path);

            /* search-order 2 */
            full_name =3D try_path(interp, ext_srch_space,
                                 parrot_path_append(interp, full_name , obj=
ect_name));
            return_if_found( full_name , ft_index_to_mask(l_idx) );

            p_idx =3D next_by_load_prefer(p_idx);
        }

        /* search-order 3 */
        if ( prefix
             && string_length(interp, prefix) ) {
            full_name =3D try_path(interp, ext_srch_space,
                                 parrot_path_concat(interp, prefix , object=
_name));
            return_if_found( full_name , ft_index_to_mask(l_idx) );
        }

        /* search-order 4 */
        full_name =3D try_path(interp, ext_srch_space, object_name);
        return_if_found( full_name , ft_index_to_mask(l_idx) );

        l_idx =3D next_by_load_prefer(l_idx);
    }

    return NULL;
}

static STRING*
query_runtime_prefix ( Interp* interp ) {

    STRING* prefix;

    int free_it;
    char *env;

    env =3D Parrot_getenv("PARROT_RUNTIME", &free_it);

    if (env) {
        prefix =3D string_from_cstring(interp, env, 0);
        if (free_it)
            mem_sys_free(env);

        return prefix;
    }

    return NULL;
}

/*

=3Ditem C<STRING* Parrot_get_runtime_prefix(Interp * )>

return the runtime prefix in the PMC string C<prefix>. The
config hash is used first if given, then the value of the
environment variable PARROT_RUNTIME. If neither are found
NULL is returned.
=3Dcut

*/

STRING*
Parrot_get_runtime_prefix (Interp *interp ) {

    PMC *config_hash;

    STRING *key, *can_fail; /* can_fail , for storing string pointers from
                               functions that may fail to return a prefix v=
alue
                      */

    /* first look in the config hash for a user specified path */

    config_hash =3D VTABLE_get_pmc_keyed_int(interp, interp->iglobals,
            (INTVAL) IGLOBALS_CONFIG_HASH);

    if (VTABLE_elements(interp, config_hash)) {
        key =3D CONST_STRING(interp, "prefix");
        can_fail =3D VTABLE_get_string_keyed_str(interp, config_hash, key);

        if ( can_fail ) {
            /*
              TODO:
              shouldn't we do some sanity here ?  , assuming this can be
              set by random code/input we should see if it even exists.
            */

            return can_fail;
        }
    }

    /*
      fallback:

      no value was found in the config hash so try a system query, if
      that fails as well return the default.
    */

    return query_runtime_prefix(interp);
}

/*

=3Dback

=3Dhead1 SEE ALSO

F<include/parrot/library.h>

=3Dcut

*/


/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=3D4:
 */

--MP_hnyM0qkKNyRzwar4Fd1MldR
Content-Type: application/x-perl; name=foo.pl
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename=foo.pl

IyEvdXNyL2Jpbi9lbnYgcGVybAoKdXNlIEVuZ2xpc2g7CgpvdXIgJGludGVycDsgICAgICAgIyBj
dXJyZW50IGludGVycHJldGVyCm91ciAkbG9hZGVyOyAgICAgICAjIGN1cnJlbnQgbG9hZGVyCgok
bWF0Y2hfYmxhbmsgICA9IHFyIC9eXHMqJC9vOwokbWF0Y2hfY29tbWVudCA9IHFyL15ccyojL287
CgokbWF0Y2hfaW50ZXJwICA9IHFyL1xbKFx3KylcXS9vOwokbWF0Y2hfbG9hZGVyICA9IHFyL15c
cyogbG9hZGVyIFxzKyAoXFMrKSBccyogJC94bzsKJG1hdGNoX2ZzcGF0aCAgPSBxci9eXHMqIChp
bnN0YWxsfGJ1aWxkKSBccysgKFxTKykgXHMqICQveG87CiRtYXRjaF9waGFzZSAgID0gcXIvXlxz
KiAoXHcrKSBccysgY29tcGlsZSBccysgKFx3KykgXHMqICQveG87CgpteSAlbG9hZGVycyA9ICgK
ICBhcmNoICAgICA9PiAnUEFSUk9UX1JVTlRJTUVfRlRfQVJDSCcsCiAgYnl0ZWNvZGUgPT4gJ1BB
UlJPVF9SVU5USU1FX0ZUX0JZVEVDT0RFJywKICBzb3VyY2UgICA9PiAnUEFSUk9UX1JVTlRJTUVf
RlRfU09VUkNFJywKKTsKCnByaW50IFNURE9VVCA8PEJBU0VfVE9QOwovKiBhdXRvLWdlbmVyYXRl
ZCBieSAkUFJPR1JBTV9OQU1FLiBkbyBub3QgbW9kaWZ5IHRoaXMgZmlsZSBkaXJlY3RseSBvciBj
aGFuZ2VzCiAqIHdpbGwgYmUgbG9zdCBvbiB0aGUgbmV4dCByZS1idWlsZC4KICovCgpzdGF0aWMg
dm9pZApwb3B1bGF0ZV9idWlsdGluX2xpYnJhcnlfcGF0aHMoIEludGVycCogaW50ZXJwLCBQTUMq
IGxpYl9wYXRocyApIHsKICAgIFNUUklORyAqbnMsICplbnRyeTsKICAgIFBNQyAqbG9hZGVyX3Rh
YmxlOwoKQkFTRV9UT1AKCgpzdWIgc3RhcnRfbmV3X25hbWVzcGFjZSB7CiAgbXkgJGludGVycCA9
IHNoaWZ0KCk7CgogIHByaW50IFNUREVSUiAiJFBST0dSQU1fTkFNRTogdHJhbnNsYXRpbmcgcGF0
aHMgZm9yOiAkaW50ZXJwXG4iOwoKICBwcmludCBTVERPVVQgPDxORVdfSU5URVJQOwoKICAgIC8q
IHN0YXJ0aW5nIG5hbWVzcGFjZSAkaW50ZXJwICovCgogICAgbnMgPSBDT05TVF9TVFJJTkcoaW50
ZXJwLCAiJGludGVycCIpOwogICAgbG9hZGVyX3RhYmxlID0gZ2V0X2xvYWRfdGFibGVfZm9yX3Bv
cHVsYXRlKGludGVycCwgbGliX3BhdGhzLCBucyApOwoKTkVXX0lOVEVSUAp9CgpzdWIgYWRkX3Nl
YXJjaF9lbnRyeSB7CiAgbXkgKCAkc2VhcmNoX3NwYWNlICwgJGVudHJ5ICkgPSBAXzsKICBwcmlu
dCBTVERPVVQgPDxBRERfRU5UUlk7CgogICAgZW50cnkgPSBDT05TVF9TVFJJTkcoaW50ZXJwLCAi
JGVudHJ5Iik7CiAgICBwb3B1bGF0ZV9zZWFyY2hfdGFibGUoaW50ZXJwLCBsb2FkZXJfdGFibGUs
ICRsb2FkZXIsICRzZWFyY2hfc3BhY2UsIGVudHJ5ICk7CgpBRERfRU5UUlkKfQoKbXkgJGxpbmUg
PSAxOwoKd2hpbGUgKDxTVERJTj4pIHsKICBuZXh0IGlmICggLyRtYXRjaF9ibGFuay8gfHwgLyRt
YXRjaF9jb21tZW50LyApOwoKICBpZiAoIC8kbWF0Y2hfaW50ZXJwLyApIHsKICAgIG15ICggJGlu
dGVycCApID0gLyRtYXRjaF9pbnRlcnAvOwogICAgc3RhcnRfbmV3X25hbWVzcGFjZSggJGludGVy
cCApOwogICAgbmV4dDsKICB9CgogIGlmICggLyRtYXRjaF9sb2FkZXIvICkgewogICAgb3VyICgg
JGxvYWRlciApID0gLyRtYXRjaF9sb2FkZXIvOwoKICAgIHVubGVzcyAoIGV4aXN0cyAkbG9hZGVy
c3sgJGxvYWRlciB9ICkgewogICAgICBwcmludCAibGluZSAjJGxpbmUgaW52YWxpZCBsb2FkZXIg
JGxvYWRlciwgdmFsaWQgdmFsdWVzIGFyZTogIiwKICAgICAgICAgICAgam9pbignfCcsIGtleXMo
ICVsb2FkZXIgKSksICJcbiI7CgogICAgfQoKICAgICRsb2FkZXIgPSAkbG9hZGVyc3sgJGxvYWRl
ciB9OwogICAgbmV4dDsKICB9CgogIGlmICggLyRtYXRjaF9mc3BhdGgvICkgewogICAgbXkgKCB1
bmRlZiAsICRlbnRyeSApID0gLyRtYXRjaF9mc3BhdGgvOwogICAgYWRkX3NlYXJjaF9lbnRyeSgg
J1NFQVJDSF9UQUJMRV9QQVRIJyAsICRlbnRyeSApOwogICAgbmV4dDsKICB9CgogIGlmICggLyRt
YXRjaF9waGFzZS8gKSB7CiAgICBteSAoIHVuZGVmICwgJHBoYXNlICkgPSAvJG1hdGNoX3BoYXNl
LzsKICAgIGFkZF9zZWFyY2hfZW50cnkoICdTRUFSQ0hfVEFCTEVfRVhUJyAsICIuJHBoYXNlIiAp
OwogICAgbmV4dDsKICB9CgogIHByaW50IFNUREVSUiAic2tpcHBlZCBsaW5lICMkbGluZSwgZWl0
aGVyIG5vdCByZWNvZ25pemVkIG9yIGltcGxlbWVudGVkXG4iOwp9CmNvbnRpbnVlIHsKICAkbGlu
ZSsrOwp9CgpwcmludCBTVERPVVQgIn1cbiI7Cg==

--MP_hnyM0qkKNyRzwar4Fd1MldR
Content-Type: application/octet-stream; name=library.paths
Content-Transfer-Encoding: base64
Content-Disposition: attachment; filename=library.paths

W3BhcnJvdF0KCiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiMgc2hhcmVkIG9iamVjdHMKIy0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0K
CmxvYWRlciBhcmNoCgppbnN0YWxsIHJ1bnRpbWUvcGFycm90L2R5bmV4dC8KYnVpbGQgbGliL3Bh
cnJvdC9keW5leHQvCgpkbG9wZW4gbG9hZCBzbwoKIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIyBieXRlY29kZSBv
YmplY3RzCiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpsb2FkZXIgYnl0ZWNvZGUKCmluc3RhbGwgcnVudGltZS9w
YXJyb3QvaW5jbHVkZS8KYnVpbGQgICBsaWIvcGFycm90L2luY2x1ZGUvCgppbnN0YWxsIHJ1bnRp
bWUvcGFycm90L2xpYnJhcnkvCmJ1aWxkICAgbGliL3BhcnJvdC9saWJyYXJ5LwoKaW5zdGFsbCBy
dW50aW1lL3BhcnJvdC8KYnVpbGQgICBsaWIvcGFycm90LwoKcGJjIGxvYWQgcGJjCgojLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLQojIGluY2x1ZGUgb2JqZWN0cwojLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKbG9hZGVyIGluY2x1ZGUK
Cmluc3RhbGwgcnVudGltZS9wYXJyb3QvaW5jbHVkZS8KYnVpbGQgbGliL3BhcnJvdC9pbmNsdWRl
LwoKaW5zdGFsbCBydW50aW1lL3BhcnJvdC9saWJyYXJ5LwpidWlsZCBsaWIvcGFycm90L2xpYnJh
cnkvCgppbnN0YWxsIHJ1bnRpbWUvcGFycm90LwpidWlsZCBsaWIvcGFycm90LwoKcGFzbSBsb2Fk
IHBhc20KCiMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tCiMgc291cmNlIG9iamVjdHMKIy0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmxv
YWRlciBzb3VyY2UKCmluc3RhbGwgcnVudGltZS9wYXJyb3QvaW5jbHVkZS8KYnVpbGQgbGliL3Bh
cnJvdC9pbmNsdWRlLwoKaW5zdGFsbCBydW50aW1lL3BhcnJvdC9saWJyYXJ5LwpidWlsZCBsaWIv
cGFycm90L2xpYnJhcnkvCgppbnN0YWxsIHJ1bnRpbWUvcGFycm90LwpidWlsZCBsaWIvcGFycm90
LwoKcGlyIGxvYWQgcGlyCg==

--MP_hnyM0qkKNyRzwar4Fd1MldR--

--Sig_ip1yOzeex/V7aRuTA7cgaAR
Content-Type: application/pgp-signature; name=signature.asc
Content-Disposition: attachment; filename=signature.asc

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.6 (GNU/Linux)

iD8DBQFGSnLYdfRchrkBInkRAivfAJ4hVM6KyRPd60yswl8+do3Z5cudbQCff3Pm
aOt5b1Lq5Lct0zR2/YmDxHY=
=RhJ6
-----END PGP SIGNATURE-----

--Sig_ip1yOzeex/V7aRuTA7cgaAR--

