From perl6-all-return-80452-ktwarwic=speedy.uwaterloo.ca@perl.org  Tue Apr 10 03:06:11 2007
Return-Path: <perl6-all-return-80452-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3A76A0I025665
	for <ktwarwic@speedy.uwaterloo.ca>; Tue, 10 Apr 2007 03:06:10 -0400
Received: (qmail 11424 invoked by uid 514); 10 Apr 2007 07:05:43 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 11419 invoked from network); 10 Apr 2007 07:05:42 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: neutral (x1.develooper.com: local policy)
X-Virus-Scanned: by both ClamAV and Kaspersky at http://aliencamel.com/
Message-ID: <461B3751.2020802@perl.org>
Date: Tue, 10 Apr 2007 00:05:53 -0700
From: Allison Randal <allison@perl.org>
User-Agent: Thunderbird 1.5.0.10 (Macintosh/20070221)
MIME-Version: 1.0
To: Klaas-Jan Stol <parrotcode@gmail.com>
CC: Perl 6 Internals <perl6-internals@perl.org>
Subject: Re: Minor notes/suggestions on PDD15
References: <46167CF3.2030404@gmail.com>
In-Reply-To: <46167CF3.2030404@gmail.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME
Status: O
Content-Length: 2072
Lines: 63

Klaas-Jan Stol wrote:
> hi,
> 
> Some suggestions for PDD15:
> 
> 1.
> reading PDD15, I noticed that some methods/ops are named using an 
> underscore to separate words, others don't, for instance:
> * get_class (but also "getclass" is used in the examples)
> * newclass
> 
> IMO, it'd be nice to be consistent, and stick to 1 style. (My personal 
> preference is to leave out the underscore)

The get_ standard entered with namespaces, and was itself a modification 
of the find_ standard from the earlier opcodes for dealing with globals 
and lexicals. For methods, I'd say the underscores are standard. For 
opcoess, it's debatable whether underscores or no underscores is 
standard at this point. I made a note to review it when I get to the 
Opcodes PDD.

> 2.
> Another thing; operations such as find_method return a NULL PMC on 
> failure. It might be nice to have it configurable for the user so s/he 
> can choose whether an exception will be thrown, or a NULL PMC is 
> returned. (IIRC, this can already be done for some ops, it'd be nice to 
> set it for all ops that may return a NULL PMC).
> 
> (as a detail: in PIR this might be represented by a pragma, like: 
> ".pragma exceptions 1")

This is the same question we have for I/O, and really for large parts of 
Parrot. I've temporarily held off on this decision until the new 
exceptions PDD is implemented (widespread exceptions really aren't 
practical with the current exceptions implementation).

> 3.
> The syntactic sugar for the op:
> 
> callmethodsupercc "foo"
> 
> could well be: super."foo"()
> 
> but you I guess you have thought  of that yourselves already :-)

Yeah, that could work. A pseudo-variable like 'self' in every method. Or,

   self.super."foo"()

> 4.
> Likewise, syntactic sugar for:
> callmethodnextcc "foo"
> 
> (assuming object "obj")
> Could be: obj."foo".next() (or maybe: obj."foo"().next, so there's a 
> little bit more emphasis as it looks stranger)

Also a good candidate. Or, to only modify PIR syntax in one spot,

   self.next."foo"()

Great thoughts, thanks!
Allison

