From perl6-all-return-81130-ktwarwic=speedy.uwaterloo.ca@perl.org  Sun May  6 10:42:37 2007
Return-Path: <perl6-all-return-81130-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l46EgZqD019811
	for <ktwarwic@flax9.uwaterloo.ca>; Sun, 6 May 2007 10:42:36 -0400
Received: (qmail 11260 invoked by uid 514); 6 May 2007 14:42:33 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 11255 invoked from network); 6 May 2007 14:42:33 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: neutral (x1.develooper.com: local policy)
From: Leopold Toetsch <lt@toetsch.at>
To: perl6-internals@perl.org
Subject: Re: mmx/sse copy functions (was: Puzzling structure in <parrot/stacks.h>)
Date: Sun, 6 May 2007 16:33:38 +0200
User-Agent: KMail/1.9.1
Cc: pancake <pancake@youterm.com>
References: <Pine.LNX.4.62.0704261514050.20693@fractal.phys.lafayette.edu> <200704262244.05667.lt@toetsch.at> <20070506123212.62c6758e.pancake@youterm.com>
In-Reply-To: <20070506123212.62c6758e.pancake@youterm.com>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200705061633.38482.lt@toetsch.at>
X-Scan-Signature: 9d02a3267670e8bb77f537b38fda5a39
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=1.6 required=8.0
	tests=BAYES_05,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,KARMA_CONNECT_NEGATIVE,SPF_NEUTRAL

Am Sonntag, 6. Mai 2007 12:32 schrieb pancake:

[ no TOFU please ]

> I think that the right way to handle paddings for memory alignment
> is using the pack(1) pragma directive to make everything fit on 1
> byte and ensure by code that what we do is correct (instead of
> relaying this task to the compiler).

This is usually not a good idea, as unaligned pointer or integer/long/double 
access is usually slower with many CPUs - if it even succeeds.

> We can pack to 4 or so...some compilers (aka gcc) returns some
> nasty sizes when measuring..(not necessary aligned to 4).

You didn't get the problem probably. The mmx/sse copy operations need 8-byte 
[1] aligned start and end addresses for copying. If the addresses are not 
aligned, you'll get a bus error.
Please note that this alignment is only needed for the memory pointer and for 
nothing else in that stucture.

leo

[1] there are 16-byte versions too and also some, which work with unaligned 
memory

