From samba-technical-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org  Fri Apr 20 08:58:28 2007
Return-Path: <samba-technical-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org>
Received: from lists.samba.org (mail.samba.org [66.70.73.150])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l3KCwR0I006154
	for <ktwarwic@speedy.uwaterloo.ca>; Fri, 20 Apr 2007 08:58:28 -0400
Received: from dp.samba.org (localhost [127.0.0.1])
	by lists.samba.org (Postfix) with ESMTP id 544F9163990
	for <ktwarwic@speedy.uwaterloo.ca>; Fri, 20 Apr 2007 12:58:03 +0000 (GMT)
X-Spam-Checker-Version: SpamAssassin 3.1.7 (2006-10-05) on dp.samba.org
X-Spam-Level: 
X-Spam-Status: No, score=0.1 required=3.8 tests=AWL,BAYES_00,RCVD_IN_DSBL 
	autolearn=no version=3.1.7
X-Original-To: samba-technical@lists.samba.org
Delivered-To: samba-technical@lists.samba.org
Received: from mtagate1.uk.ibm.com (mtagate1.uk.ibm.com [195.212.29.134])
	by lists.samba.org (Postfix) with ESMTP id 0835A162AEF
	for <samba-technical@lists.samba.org>;
	Fri, 20 Apr 2007 12:57:12 +0000 (GMT)
Received: from d06nrmr1407.portsmouth.uk.ibm.com
	(d06nrmr1407.portsmouth.uk.ibm.com [9.149.38.185])
	by mtagate1.uk.ibm.com (8.13.8/8.13.8) with ESMTP id l3KCvC34121506
	for <samba-technical@lists.samba.org>; Fri, 20 Apr 2007 12:57:12 GMT
Received: from d06av01.portsmouth.uk.ibm.com (d06av01.portsmouth.uk.ibm.com
	[9.149.37.212])
	by d06nrmr1407.portsmouth.uk.ibm.com (8.13.8/8.13.8/NCO v8.3) with
	ESMTP id l3KCvCsw2793546
	for <samba-technical@lists.samba.org>; Fri, 20 Apr 2007 13:57:12 +0100
Received: from d06av01.portsmouth.uk.ibm.com (loopback [127.0.0.1])
	by d06av01.portsmouth.uk.ibm.com (8.12.11.20060308/8.13.3) with ESMTP
	id l3KCvBpZ025298
	for <samba-technical@lists.samba.org>; Fri, 20 Apr 2007 13:57:12 +0100
Received: from dyn-9-155-41-190.mainz.de.ibm.com
	(dyn-9-155-41-190.mainz.de.ibm.com [9.155.41.190])
	by d06av01.portsmouth.uk.ibm.com (8.12.11.20060308/8.12.11) with ESMTP
	id l3KCvBsO025283; Fri, 20 Apr 2007 13:57:11 +0100
From: Peter Somogyi <psomogyi@gamax.hu>
Organization: Gamax Kft
To: tridgell@au1.ibm.com
Date: Fri, 20 Apr 2007 14:56:26 +0200
User-Agent: KMail/1.9.5
MIME-Version: 1.0
Content-Type: Multipart/Mixed;
  boundary="Boundary-00=_6hLKGeyhMFwZgB3"
Message-Id: <200704201456.26224.psomogyi@gamax.hu>
Cc: samba-technical@lists.samba.org, ronniesahlberg@gmail.com
Subject: ctdb update
X-BeenThere: samba-technical@lists.samba.org
X-Mailman-Version: 2.1.5
Precedence: list
Reply-To: psomogyi@gamax.hu
List-Id: "Discussions on Samba internals. For general questions please
	subscribe to the list samba@samba.org"
	<samba-technical.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/listinfo/samba-technical>, 
	<mailto:samba-technical-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/archive/samba-technical>
List-Post: <mailto:samba-technical@lists.samba.org>
List-Help: <mailto:samba-technical-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-technical>,
	<mailto:samba-technical-request@lists.samba.org?subject=subscribe>
Sender: samba-technical-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Errors-To: samba-technical-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Status: O
Content-Length: 6989
Lines: 271

--Boundary-00=_6hLKGeyhMFwZgB3
Content-Type: text/plain;
  charset="windows-1250"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

Hi Tridge,

My bzr send plugin doesn't work nowadays so I report it here as well.
I've made infiniband part working again. Unfortunately, it needs your 
attention as well since it was necessary to change your code.

Changes:
- ctdb/ib minor bugfixes (error case)
- make ctdb capable of alternative connection (like ib) again, solved the fork 
problem
- do_debug memory overwrite fix (occured using ibwrapper_test with wrong ip 
address given), see my prev. mail to Volker (we can revert this in case 
Volker rejects it - but anyway, this little change just helps, it won't hurt)

Please merge my branch.
Thank you in advance.

Peter

--Boundary-00=_6hLKGeyhMFwZgB3
Content-Type: text/x-diff; charset="windows-1250"; name="diff20070420_1.diff"
Content-Transfer-Encoding: 7bit
Content-Disposition: attachment;
	filename="diff20070420_1.diff"

=== modified file 'common/ctdb.c'
--- common/ctdb.c	2007-04-19 06:27:56 +0000
+++ common/ctdb.c	2007-04-20 12:00:11 +0000
@@ -31,22 +31,45 @@
 */
 int ctdb_set_transport(struct ctdb_context *ctdb, const char *transport)
 {
+	ctdb->transport = talloc_strdup(ctdb, transport);
+	return 0;
+}
+
+int ctdb_init_transport(struct ctdb_context *ctdb)
+{
+	int	i;
 	int ctdb_tcp_init(struct ctdb_context *ctdb);
+	int	transport_found = 0;
 #ifdef USE_INFINIBAND
 	int ctdb_ibw_init(struct ctdb_context *ctdb);
 #endif /* USE_INFINIBAND */
 
-	if (strcmp(transport, "tcp") == 0) {
-		return ctdb_tcp_init(ctdb);
+	if (strcmp(ctdb->transport, "tcp") == 0) {
+		transport_found = 1;
+		if (ctdb_tcp_init(ctdb))
+			return -1;
 	}
 #ifdef USE_INFINIBAND
-	if (strcmp(transport, "ib") == 0) {
-		return ctdb_ibw_init(ctdb);
+	else if (strcmp(ctdb->transport, "ib") == 0) {
+		transport_found = 1;
+		if (ctdb_ibw_init(ctdb))
+			return -1;
 	}
 #endif /* USE_INFINIBAND */
 
-	ctdb_set_error(ctdb, "Unknown transport '%s'\n", transport);
-	return -1;
+	if (!transport_found) {
+		ctdb_set_error(ctdb, "Unknown transport '%s'\n", ctdb->transport);
+		return -1;
+	}
+
+	for(i=0; i<ctdb->num_nodes; i++) {
+		if (ctdb->methods->add_node(ctdb->nodes[i]) != 0) {
+			DEBUG(0, ("methods->add_node failed at %d\n", i));
+			return -1;
+		}
+	}
+
+	return 0;
 }
 
 /*
@@ -116,11 +139,6 @@
 	   will change! */
 	node->vnn = ctdb->num_nodes;
 
-	if (ctdb->methods->add_node(node) != 0) {
-		talloc_free(node);
-		return -1;
-	}
-
 	if (ctdb_same_address(&ctdb->address, &node->address)) {
 		ctdb->vnn = node->vnn;
 	}

=== modified file 'common/ctdb_client.c'
--- common/ctdb_client.c	2007-04-19 06:27:56 +0000
+++ common/ctdb_client.c	2007-04-20 12:11:55 +0000
@@ -373,7 +373,10 @@
 
 	/* if the domain socket is not yet open, open it */
 	if (ctdb->daemon.sd==-1) {
-		ux_socket_connect(ctdb);
+		if (ux_socket_connect(ctdb)) {
+			DEBUG(0, ("ux_socket_connect failed\n"));
+			return -1;
+		}
 	}
 
 	ZERO_STRUCT(c);

=== modified file 'common/ctdb_daemon.c'
--- common/ctdb_daemon.c	2007-04-19 06:27:56 +0000
+++ common/ctdb_daemon.c	2007-04-20 12:23:51 +0000
@@ -44,6 +44,11 @@
 
 static void ctdb_main_loop(struct ctdb_context *ctdb)
 {
+	/* we are the dispatcher process now, so start the protocol going */
+	if (ctdb_init_transport(ctdb)) {
+		exit(1);
+	}
+
 	ctdb->methods->start(ctdb);
 
 	/* go into a wait loop to allow other nodes to complete */
@@ -594,6 +599,12 @@
 		close(fd[0]);
 		close(ctdb->daemon.sd);
 		ctdb->daemon.sd = -1;
+
+		/* Added because of ctdb->methods->allocate_pkt calls */
+		/* TODO: clean */
+		int ctdb_tcp_init(struct ctdb_context *ctdb);
+		ctdb_tcp_init(ctdb);
+
 		return 0;
 	}
 

=== modified file 'ib/ibwrapper.c'
--- ib/ibwrapper.c	2007-02-26 10:59:20 +0000
+++ ib/ibwrapper.c	2007-04-20 11:31:57 +0000
@@ -557,17 +557,17 @@
 	return;
 error:
 	if (event!=NULL && (rc=rdma_ack_cm_event(event))) {
-		sprintf(ibw_lasterr, "rdma_ack_cm_event failed with %d\n", rc);
-		goto error;
+		DEBUG(0, ("rdma_ack_cm_event failed with %d\n", rc));
 	}
 
 	DEBUG(0, ("cm event handler: %s", ibw_lasterr));
 
 	if (cma_id!=pctx->cm_id) {
 		conn = talloc_get_type(cma_id->context, struct ibw_conn);
-		if (conn)
+		if (conn) {
 			conn->state = IBWC_ERROR;
-		pctx->connstate_func(NULL, conn);
+			pctx->connstate_func(NULL, conn);
+		}
 	} else {
 		ctx->state = IBWS_ERROR;
 		pctx->connstate_func(ctx, NULL);

=== modified file 'include/ctdb.h'
--- include/ctdb.h	2007-04-19 06:27:56 +0000
+++ include/ctdb.h	2007-04-19 16:25:10 +0000
@@ -71,6 +71,12 @@
 int ctdb_set_transport(struct ctdb_context *ctdb, const char *transport);
 
 /*
+  initialize the chosen transport
+  do this in the process where it is going to be used
+ */
+int ctdb_init_transport(struct ctdb_context *ctdb);
+
+/*
   set the directory for the local databases
 */
 int ctdb_set_tdb_dir(struct ctdb_context *ctdb, const char *dir);

=== modified file 'include/ctdb_private.h'
--- include/ctdb_private.h	2007-04-19 07:43:27 +0000
+++ include/ctdb_private.h	2007-04-20 12:14:02 +0000
@@ -120,6 +120,7 @@
 	struct ctdb_address address;
 	const char *name;
 	const char *db_directory;
+	char *transport;
 	uint32_t vnn; /* our own vnn */
 	uint32_t num_nodes;
 	uint32_t num_connected;
@@ -363,6 +364,11 @@
 int ctdbd_call_recv(struct ctdb_call_state *state, struct ctdb_call *call);
 
 /*
+  allocate a packet for sending via queue
+*/
+void *ctdb_queue_allocate_pkt(TALLOC_CTX *mem_ctx, size_t size);
+
+/*
   queue a packet for sending
 */
 int ctdb_queue_send(struct ctdb_queue *queue, uint8_t *data, uint32_t length);

=== modified file 'lib/util/debug.c'
--- lib/util/debug.c	2007-04-17 15:59:39 +0000
+++ lib/util/debug.c	2007-04-20 11:34:36 +0000
@@ -22,6 +22,22 @@
 #include "system/time.h"
 #include <unistd.h>
 
+static int vasprintf2(char **ptr, const char *format, va_list ap)
+{
+    int ret;
+    va_list tmp_ap;
+
+    va_copy(tmp_ap, ap);
+    ret = vsnprintf(NULL, 0, format, tmp_ap);
+    if (ret <= 0) return ret;
+
+    (*ptr) = (char *)malloc(ret+1);
+    if (!*ptr) return -1;
+    ret = vsnprintf(*ptr, ret+1, format, ap);
+
+    return ret;
+}
+
 void do_debug(const char *format, ...)
 {
 	struct timeval tm;
@@ -29,7 +45,7 @@
 	char *s = NULL;
 
 	va_start(ap, format);
-	vasprintf(&s, format, ap);
+	vasprintf2(&s, format, ap);
 	va_end(ap);
 
 	gettimeofday(&tm, NULL);

=== modified file 'tests/ctdb_bench.c'
--- tests/ctdb_bench.c	2007-04-19 02:43:19 +0000
+++ tests/ctdb_bench.c	2007-04-19 16:25:10 +0000
@@ -204,7 +204,8 @@
 	/* start the protocol running */
 	ret = ctdb_start(ctdb);
 
-	ctdb_set_message_handler(ctdb, 0, ring_message_handler,&msg_count);
+	if (ctdb_set_message_handler(ctdb, 0, ring_message_handler,&msg_count))
+		goto error;
 
 	/* wait until all nodes are connected (should not be needed
 	   outside of test code) */
@@ -212,6 +213,7 @@
 
 	bench_ring(ctdb, ev);
        
+error:
 	/* shut it down */
 	ctdb_shutdown(ctdb);
 


--Boundary-00=_6hLKGeyhMFwZgB3--

