From beginners-return-92103-ktwarwic=speedy.uwaterloo.ca@perl.org  Sat Jun  2 10:27:38 2007
Return-Path: <beginners-return-92103-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l52ERahB024378
	for <ktwarwic@flax9.uwaterloo.ca>; Sat, 2 Jun 2007 10:27:37 -0400
Received: (qmail 19793 invoked by uid 514); 2 Jun 2007 14:27:26 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 19783 invoked from network); 2 Jun 2007 14:27:25 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 2 Jun 2007 14:27:25 -0000
Received: (qmail 8752 invoked by uid 225); 2 Jun 2007 14:27:25 -0000
Delivered-To: beginners@perl.org
Received: (qmail 8745 invoked by alias); 2 Jun 2007 14:27:24 -0000
X-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of chas.owens@gmail.com designates 209.85.146.182 as permitted sender)
Received: from wa-out-1112.google.com (HELO wa-out-1112.google.com) (209.85.146.182)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Sat, 02 Jun 2007 07:26:25 -0700
Received: by wa-out-1112.google.com with SMTP id m38so1111360waf
        for <beginners@perl.org>; Sat, 02 Jun 2007 07:25:51 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=ABlN5MrJmNXpbqY3aibKxCUYB/Ta+F0XuiHUp6xN+2WaTka1IhT134i8SC3gIzjHQWJ896DJLEB02kEYm6iEl1hMgvGp87pdctqAbVIkXVZPMB/gfVRAkUNAkOUnA1ZWjrG0swLdDlwW05XQUrhjo6exls9tCpmNfIKAQzO9Ns4=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=iPAhvwhE1+Ru3t2dfmdtn8GpMuaURrjEyxDsUflEavZH/poiU1V2S8bMQI1UTUbvqVWMwwjwv3AU6Zm5Zj4hD6TrgBLDBLQ0wUEbrs3zUPOeO8gr5bZFfO9cRzrFhcTUp9fTbWGEtB/9Albk3Xw+aUTzXzZGibUz0ajuXTHH+/k=
Received: by 10.115.91.2 with SMTP id t2mr2852944wal.1180794350887;
        Sat, 02 Jun 2007 07:25:50 -0700 (PDT)
Received: by 10.114.79.3 with HTTP; Sat, 2 Jun 2007 07:25:50 -0700 (PDT)
Message-ID: <58ce48dc0706020725m7b73de86yf31c0e7defdc81cf@mail.gmail.com>
Date: Sat, 2 Jun 2007 10:25:50 -0400
From: "Chas Owens" <chas.owens@gmail.com>
To: "Andrej Kastrin" <andrej.kastrin@siol.net>
Subject: Re: Equal keys in hash
Cc: "beginners perl" <beginners@perl.org>
In-Reply-To: <46616260.1010000@siol.net>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <46616260.1010000@siol.net>

On 6/2/07, Andrej Kastrin <andrej.kastrin@siol.net> wrote:
> Deal all,
>
> if the key already exists in the hash, then its value is overwritten.
> So, if I have the following structure of the input file
>
> A foo
> A faa
> A hoo
> B foo
> B aaa
> C bbb
>
> what is the procedure of choice to store all key-value pairs into the
> hash and print it out?
>
> Thanks in advance for any suggestion.
>
> Best, Andrej

It sounds like you are looking for what is called a HoA (hash of
arrays).  it is  a complex data structure built on top of a hash using
array references.  All of that sounds more complicated than it is.
What follows is the relevant section of perldoc perldsc.  You will
probably want to read the whole doc since it contains lots of good
info.  If you have any questions, please ask again.

HASHES OF ARRAYS
       Declaration of a HASH OF ARRAYS

        %HoA = (
               flintstones        => [ "fred", "barney" ],
               jetsons            => [ "george", "jane", "elroy" ],
               simpsons           => [ "homer", "marge", "bart" ],
             );

       Generation of a HASH OF ARRAYS

        # reading from file
        # flintstones: fred barney wilma dino
        while ( <> ) {
            next unless s/^(.*?):\s*//;
            $HoA{$1} = [ split ];
        }

        # reading from file; more temps
        # flintstones: fred barney wilma dino
        while ( $line = <> ) {
            ($who, $rest) = split /:\s*/, $line, 2;
            @fields = split ' ', $rest;
            $HoA{$who} = [ @fields ];
        }

        # calling a function that returns a list
        for $group ( "simpsons", "jetsons", "flintstones" ) {
            $HoA{$group} = [ get_family($group) ];
        }

        # likewise, but using temps
        for $group ( "simpsons", "jetsons", "flintstones" ) {
            @members = get_family($group);
            $HoA{$group} = [ @members ];
        }

        # append new members to an existing family
        push @{ $HoA{"flintstones"} }, "wilma", "betty";

       Access and Printing of a HASH OF ARRAYS


        # one element
        $HoA{flintstones}[0] = "Fred";

        # another element
        $HoA{simpsons}[1] =~ s/(\w)/\u$1/;

        # print the whole thing
        foreach $family ( keys %HoA ) {
            print "$family: @{ $HoA{$family} }\n"
        }

        # print the whole thing with indices
        foreach $family ( keys %HoA ) {
            print "family: ";
            foreach $i ( 0 .. $#{ $HoA{$family} } ) {
                print " $i = $HoA{$family}[$i]";
            }
            print "\n";
        }

        # print the whole thing sorted by number of members
        foreach $family ( sort { @{$HoA{$b}} <=> @{$HoA{$a}} } keys %HoA ) {
            print "$family: @{ $HoA{$family} }\n"
        }

        # print the whole thing sorted by number of members and name
        foreach $family ( sort {
                                   @{$HoA{$b}} <=> @{$HoA{$a}}
                                               ||
                                           $a cmp $b
                   } keys %HoA )
        {
            print "$family: ", join(", ", sort @{ $HoA{$family} }), "\n";
        }

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


