From beginners-return-90932-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu Apr 19 12:14:26 2007
Return-Path: <beginners-return-90932-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3JGEO0I026665
	for <ktwarwic@speedy.uwaterloo.ca>; Thu, 19 Apr 2007 12:14:25 -0400
Received: (qmail 14091 invoked by uid 514); 19 Apr 2007 16:13:54 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 14082 invoked from network); 19 Apr 2007 16:13:54 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 19 Apr 2007 16:13:54 -0000
Received: (qmail 10719 invoked by uid 225); 19 Apr 2007 16:13:54 -0000
Delivered-To: beginners@perl.org
Received: (qmail 10712 invoked by alias); 19 Apr 2007 16:13:53 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of krahnj@telus.net designates 199.185.220.222 as permitted sender)
Received: from outbound03.telus.net (HELO defout.telus.net) (199.185.220.222)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 19 Apr 2007 09:13:18 -0700
Received: from priv-edtnaa06.telusplanet.net ([154.20.156.154])
          by priv-edtnes86.telusplanet.net
          (InterMail vM.7.08.02.00 201-2186-121-20061213) with ESMTP
          id <20070419161310.MCIV14242.priv-edtnes86.telusplanet.net@priv-edtnaa06.telusplanet.net>
          for <beginners@perl.org>; Thu, 19 Apr 2007 10:13:10 -0600
Received: from [154.20.156.154] (d154-20-156-154.bchsia.telus.net [154.20.156.154])
	by priv-edtnaa06.telusplanet.net (BorderWare MXtreme Infinity Mail Firewall) with ESMTP id 69CAVRJX4K
	for <beginners@perl.org>; Thu, 19 Apr 2007 10:13:10 -0600 (MDT)
Message-ID: <46279515.9080603@telus.net>
Date: Thu, 19 Apr 2007 09:13:09 -0700
From: "John W. Krahn" <krahnj@telus.net>
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.7.13) Gecko/20060411
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: Perl Beginners <beginners@perl.org>
Subject: Re: Nested loop
References: <ca5781c80704180957w72c92fbbq2e083368ed9339e9@mail.gmail.com>	 <58ce48dc0704181057q79262a61q6d5e1370d8c99245@mail.gmail.com>	 <46276441.7213.2471F368@Jenda.Krynicky.cz> <58ce48dc0704190807i14627a5bh53a356b664ffdd9a@mail.gmail.com>
In-Reply-To: <58ce48dc0704190807i14627a5bh53a356b664ffdd9a@mail.gmail.com>
X-Enigmail-Version: 0.90.1.0
X-Enigmail-Supports: pgp-inline, pgp-mime
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Status: O
Content-Length: 2934
Lines: 109

Chas Owens wrote:
> On 4/19/07, Jenda Krynicky <Jenda@krynicky.cz> wrote:
>> From: "Chas Owens" <chas.owens@gmail.com>
> snip
>> > foreach is dead, long live for.
>>
>> William is dead, long live Bill?
>>
>> foreach and for are two names for the same thing and just as you can
>> call someone both William and Bill you can use foreach and for
>> interchangeably.
>>
>> foreach(my $i = 0; $i < $whatever; $i++)
>> for(my $i = 0; $i < $whatever; $i++)
>>
>> for my $x (@array)
>> foreach my $x (@array)
>>
>> for (@array)
>> foreach (@array)
>>
>> No difference to the computer. Use whichever reads best!
> 
> Yes, foreach was aliased to for for backwards compatibility,

Huh?  Do you have something to back up that claim?

> but, like
> telnet and rsh, it should not be used in new code.

Really?  I assume you mean the protocols and not the programs?

>> I would myself use "for" for the C-style loops
> 
> And this is why.  As long as people think "well, I have foreach which
> is for iterating and for which is for C-style loops" they will
> continue to write C-style loops.  C-style loops are bad.  They are
> there for backwards compatibility.  I can't think of a single for loop
> that isn't better written as a range based for loop or while loop. For
> instance
> 
> standard range based loop
> for (my $i = 0; $i < 10; $i++) {}
> for my $i (0 .. 9) {}

How about:

for ( my $i = 0; $i < 10; $i += 3 ) {}

foreach my $i ( ? .. ? ) {}

> often $i winds up being used as an index which just makes me cringe.
> 
> The infinite loop
> for (;;) {}
> while (1) {}
> 
> The reason C programmers give for using for (;;) is that it generates
> less overhead on their platform, but, at least with my tests*,
> while(1) is more efficient in Perl.

I ran your benchmark on my computer and for(;;) and while(1) ran at about the
same speed.

$ perl -le'
use Benchmark;

my %subs = (
       for   => sub { my $i; for (;;) { last if $i++ > 1_000 } },
       while => sub { my $i; while (1) { last if $i++ > 1_000 } },
       bare  => sub { my $i; { last if $i++ > 1_000; redo }  },
);

Benchmark::cmpthese(-10, \%subs);
'
        Rate  bare   for while
bare  4471/s    --  -15%  -15%
for   5253/s   17%    --   -0%
while 5268/s   18%    0%    --

$ perl -le'
use Benchmark;

my %subs = (
       for   => q{ my $i; for (;;) { last if $i++ > 1_000 } },
       while => q{ my $i; while (1) { last if $i++ > 1_000 } },
       bare  => q{ my $i; { last if $i++ > 1_000; redo }  },
);

Benchmark::cmpthese(-10, \%subs);
'
        Rate  bare while   for
bare  4445/s    --  -15%  -15%
while 5219/s   17%    --   -0%
for   5233/s   18%    0%    --




John
-- 
Perl isn't a toolbox, but a small machine shop where you can special-order
certain sorts of tools at low cost and in short order.       -- Larry Wall

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


