From beginners-return-91981-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed May 30 12:36:54 2007
Return-Path: <beginners-return-91981-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4UGarhB016059
	for <ktwarwic@flax9.uwaterloo.ca>; Wed, 30 May 2007 12:36:53 -0400
Received: (qmail 3008 invoked by uid 514); 30 May 2007 16:36:36 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 2999 invoked from network); 30 May 2007 16:36:35 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 30 May 2007 16:36:35 -0000
Received: (qmail 791 invoked by uid 225); 30 May 2007 16:36:35 -0000
Delivered-To: beginners@perl.org
Received: (qmail 782 invoked by alias); 30 May 2007 16:36:34 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of chas.owens@gmail.com designates 64.233.162.234 as permitted sender)
Received: from nz-out-0506.google.com (HELO nz-out-0506.google.com) (64.233.162.234)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Wed, 30 May 2007 09:35:38 -0700
Received: by nz-out-0506.google.com with SMTP id x7so2184394nzc
        for <beginners@perl.org>; Wed, 30 May 2007 09:35:34 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=K4I2NgR61KElP0l2jBWclzxF6AW8SqyGJMkdSiovQ6gAfUC9ECzAVjngViflgzKTa1nWkrtQNiePxlby3BzWTjWvAt3jww3k8DdDX7MV5az7WNXYlESjWAdTEF+bDibC4khL5mecvgYznoQ0jaAXrIH+Osw0Ac2gMamkIfZgd+g=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=ePonFleTNSyvWn+8dShcqWU/lmwoz1Is5BO/qnQNeuoby/uQBjT0BB4nzca+JphbKfoVHqeod+2R7Exk74urzrBi23yhhPOf3kKWv49zhasMjEtWw0HcGqNlRJ6ZdDTPxrHKD/raBKZEs/qSiQGf31AziFR1z6abbpN6hK9PUtw=
Received: by 10.114.107.19 with SMTP id f19mr4044442wac.1180542933412;
        Wed, 30 May 2007 09:35:33 -0700 (PDT)
Received: by 10.114.92.6 with HTTP; Wed, 30 May 2007 09:35:33 -0700 (PDT)
Message-ID: <58ce48dc0705300935q31c78052rf0d1afdfe20c27bd@mail.gmail.com>
Date: Wed, 30 May 2007 12:35:33 -0400
From: "Chas Owens" <chas.owens@gmail.com>
To: "Paul Lalli" <mritty@gmail.com>
Subject: Re: zero width lookahead match
Cc: beginners@perl.org, perl-beginners@moderators.isc.org
In-Reply-To: <1180540434.503238.232510@m36g2000hse.googlegroups.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <8a31202a0705300457l38219d07s8a236d11af4e2db0@mail.gmail.com>
	 <58ce48dc0705300612xb0d46b5q55771654d4223fc0@mail.gmail.com>
	 <8a31202a0705300623w18766a6fud2b2b749cd766652@mail.gmail.com>
	 <58ce48dc0705300702n2dfdd105w296166224c28bbbf@mail.gmail.com>
	 <1180540434.503238.232510@m36g2000hse.googlegroups.com>

On 30 May 2007 08:53:54 -0700, Paul Lalli <mritty@gmail.com> wrote:
snip
> I got confused by this too.  I think Sharan's question comes down to
> "why isn't this an infinite loop?"  That is, why does pos() move ahead
> one character when it matches 0 characters?  This is not limited to
> look-ahead assertions.  The behavior can be seen in other constructs
> as well.  For example:
>
> $ perl -wle'
> $string = "abc";
> while ($string =~ /(.*?)/g) {
>   print pos($string), ": ", $1;
> }
> '
> 0:
> 1: a
> 1:
> 2: b
> 2:
> 3: c
> 3:

Because /.*?/ matches nothing as well as a, b, and c.  So it matches
nothing, then a, then nothing, then b, then nothing, then c. then
nothing.

>
> It appears that Perl is actually dividing the string up into
> "characters" and "slots between character", and allowing pos() to move
> to each of them in sequence.  So at the beginning, it's at the slot
> before the first character, and it can successfully match 0
> characters.  Then pos() moves to the first character, and the fewest
> characters it can find is that one character, so $1 gets 'a'.  Then it
> moves to the slot between 'a' and 'b'.  Etc.

Yes, otherwise \b wouldn't work very well.

perldoc perlre
    A word boundary ("\b") is a spot between two characters that has a "\w"
    on one side of it and a "\W" on the other side of it (in either order),
    counting the imaginary characters off the beginning and end of the string
    as matching a "\W".

snip
> Here's another, that doesn't allow any characters to be matched:
> $ perl -wle'
> $string = "abc";
> while ($string =~ /(.{0})/g) {
>   print pos($string), ": ", $1;
> }
> '
> 0:
> 1:
> 2:
> 3:
>
> Would the above be an accurate description of what's happening?  And
> if so, is this behavior documented anywhere?  I couldn't find it in a
> cursory examanation of either perlop or perlre...
snip

You are matching the nothing between the characters.

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


