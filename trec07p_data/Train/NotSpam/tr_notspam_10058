From beginners-return-91629-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon May 14 07:51:13 2007
Return-Path: <beginners-return-91629-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4EBpBqD020519
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 14 May 2007 07:51:12 -0400
Received: (qmail 20408 invoked by uid 514); 14 May 2007 11:51:03 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 20399 invoked from network); 14 May 2007 11:51:02 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 14 May 2007 11:51:02 -0000
Received: (qmail 5423 invoked by uid 225); 14 May 2007 11:51:02 -0000
Delivered-To: beginners@perl.org
Received: (qmail 5418 invoked by alias); 14 May 2007 11:51:02 -0000
X-Spam-Status: No, hits=-1.9 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: local policy)
Received: from smtp.njpservices.co.uk (HELO smtp.njpservices.co.uk) (84.45.106.4)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Mon, 14 May 2007 04:50:54 -0700
Received: from [85.92.185.134] (85-92-185-134.eurisp.net [85.92.185.134] (may be forged))
	by smtp.njpservices.co.uk (8.10.2/8.10.2) with ESMTP id l4EBofa26492;
	Mon, 14 May 2007 12:50:42 +0100
Message-ID: <46484D17.2060108@350.com>
Date: Mon, 14 May 2007 12:50:47 +0100
From: Rob Dixon <rob.dixon@350.com>
User-Agent: Thunderbird 1.5.0.10 (Windows/20070221)
MIME-Version: 1.0
To: Perl Beginners <beginners@perl.org>
CC: Mathew Snyder <theillien@yahoo.com>
Subject: Re: Can't sort error out; strict refs
References: <46482C23.6010203@yahoo.com>
In-Reply-To: <46482C23.6010203@yahoo.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit

Mathew Snyder wrote:
>
> I'm passing two hash references into a subroutine.  One hash is in the format of
> $dept{$env}{$user}.  This contains an amount of time spent by each user on a
> customer ($env).  The second hash is in the format of
> $ticCount{$env}{$user}{$ticID}.  This contains a running count of how many times
> a user worked on ticket '$ticID' which belongs to customer '$env'.  I won't be
> using that number though.  What I need is the number of tickets worked on so I
> simply use 'scalar keys' on this hash.
> 
> The problem I'm encountering though, is that I'm passing the hashes into my
> subroutine as references.  When I get to the statement that gets the key count I
> get an error: "Can't use string ("2") as a HASH ref while "strict refs" in use
> at user_timesheet.pl line 63."  Presumably, 2 is the number of keys at
> $ticCount{$env}{$user}{$ticID}.
> 
> sub average {
> 
>   my ($users, $count) = @_;
>   my %userAvg;
> 
>   foreach my $env (keys %$count) {
>     foreach my $user (keys %{ $count->{$env} }) {
>       foreach my $ticID (keys %{ $count->{$env}->{$user} }) {
> 
>         my $ticCount = scalar keys %{$count->{$env}->{$user}->{$ticID}};
> 
>         my @meantemp;
>         my @meantime;
>         my @endtime;
> 
>         my $temp     = $users->{$env}->{$user};
>         @meantemp    = split /\./, ($temp / $ticCount);
> 
>         # If the time divided by the number of tickets has a decimal
>         # value round up if that value is greater than
>         # 0.5.  This will give an even number of minutes to figure
>         # out the mean time with.
>         if ($meantemp[1]) {
>           if ($meantemp[1] >= 5) {
>             $meantemp[0]++;
>           }
>         }
>         @meantime  = split /\./, ($meantemp[0] / 60);
>         $endtime[0]  = $meantime[0];
>         $endtime[1]  = $meantemp[0] % 60;
>         $userAvg{$env}{$user} = sprintf '%d:%02d', @endtime[0,1];
>       }
>     }
>   }
> 
>   return %userAvg;
> }
> 
> I've run this in the debugger and when I get to the line which assigns $ticCount
> I try to print it out and it's just blank.  If I keep hitting enter it just
> returns to a blank line.  I get the error when I continue to the next line with 'c'.

Hi Mathew

First of all, you can replace

  $count->{$env}->{$user}->{$ticID}

with

  $count->{$env}{$user}{$ticID}

and Perl will infer the indirection. It makes for neater code.

The reason for your problem is that you've gone too far down in the hash structure. You
said that $count->{$env}{$user}{$ticID} is a "count of how many times a user worked on
[a] ticket", in this case 2. so you're then trying to do

  my $ticCount = scalar keys %{2};

which is failing.

Finally, you can round more efficiently by using int(x + 0.5). I suggest something
like this (untested):

  sub average {

    my ($users, $count) = @_;
    my %userAvg;

    foreach my $env (keys %$count) {
      foreach my $user (keys %{ $count->{$env} }) {

          my $ticCount = scalar keys %{$count->{$env}{$user}};

          my $time = $users->{$env}{$user};
          my $meantime = int($time / $ticCount + 0.5);

          $userAvg{$env}{$user} = sprintf '%d:%02d',
              int($meantime / 60), $meantime % 60;
      }
    }

    return %userAvg;
  }

HTH,

Rob

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


