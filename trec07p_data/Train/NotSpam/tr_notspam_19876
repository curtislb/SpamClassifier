From beginners-return-92494-ktwarwic=speedy.uwaterloo.ca@perl.org  Sat Jun 16 18:05:35 2007
Return-Path: <beginners-return-92494-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5GM5YL9019979
	for <ktwarwic@flax9.uwaterloo.ca>; Sat, 16 Jun 2007 18:05:34 -0400
Received: (qmail 29617 invoked by uid 514); 16 Jun 2007 22:05:28 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 29608 invoked from network); 16 Jun 2007 22:05:28 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 16 Jun 2007 22:05:28 -0000
Received: (qmail 20228 invoked by uid 225); 16 Jun 2007 22:05:27 -0000
Delivered-To: beginners@perl.org
Received: (qmail 20215 invoked by alias); 16 Jun 2007 22:05:27 -0000
X-Spam-Status: No, hits=-0.2 required=8.0
	tests=BAYES_40,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of tom.phoenix@gmail.com designates 66.249.82.237 as permitted sender)
Received: from wx-out-0506.google.com (HELO wx-out-0506.google.com) (66.249.82.237)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Sat, 16 Jun 2007 15:05:24 -0700
Received: by wx-out-0506.google.com with SMTP id r21so1316774wxc
        for <beginners@perl.org>; Sat, 16 Jun 2007 15:05:19 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:sender:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=s68jMM4W7A+Tt3XTl2y6y9uJkNAGBY0g+4vjOmYwuzHvnpdJAz/o/x2iQJECnsduwcvMavgsWtHn1daYw4FsSn1vbQNYSKV5q68FAMTd+ezpe06A559waU+rJZRKdsrBo8um8cgzWSJd8OZunI/PLPVfdkk1cA+x7tR/e14Evn8=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:sender:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=fr9QAdFROcJDVRTB9AquwTlyOkzN/lF3WF/3xJSZ2B8TRUVjaGmM5MaxdPD0HraqyGG4Uot+G7d6Z79ecGa+bBKOZNQ0s5sX/msH/ChyiVTUi8HEeqgx4p9BjRA06ImS+KDZWhrjbodZwYQo7tM38wgMX2aYMPEmYfROLUPcv/A=
Received: by 10.90.35.15 with SMTP id i15mr3293748agi.1182031519484;
        Sat, 16 Jun 2007 15:05:19 -0700 (PDT)
Received: by 10.90.116.9 with HTTP; Sat, 16 Jun 2007 15:05:19 -0700 (PDT)
Message-ID: <31086b240706161505t79df4bbcl32e9a16f69073d08@mail.gmail.com>
Date: Sat, 16 Jun 2007 15:05:19 -0700
From: "Tom Phoenix" <tom@stonehenge.com>
Sender: tom.phoenix@gmail.com
To: "Tom Allison" <tom@tacocat.net>
Subject: Re: character encoding & regex
Cc: "beginners perl" <beginners@perl.org>
In-Reply-To: <46743A15.3030206@tacocat.net>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <46743A15.3030206@tacocat.net>
X-Google-Sender-Auth: b2f470580dada074

On 6/16/07, Tom Allison <tom@tacocat.net> wrote:

> I'm trying to do some regular expression on strings in email. They could be
> encoded to something.  But I can't tell because I don't have a utf8 unicode
> xterm window that will show me anything.  At best I get ?????a??  and other
> trash like that.  I think this is typical for ascii text renderings of two-bit
> characters.

But, I think what you're saying is, you want to be able to tell
whether today's ?????a?? is the same mystery word that looked like
?????a?? in yesterday's mail, right? That is, you still won't know
what it is, but at least you'll be able to say you saw it again.

> I found something that SpamAssassin uses to convert all this "goo" into a
> repeatable set of characters (which is all I'm really after) by running
> something that looks like this:
>
> sub _quote_bytea {
>      my ($str) = @_;
>      my $buf = "";
>      foreach my $char (split(//,$str)) {
>          my $oct = sprintf ("%lo", ord($char));
>          if (length( $oct ) < 2 ) { $oct = '0' . $oct; }
>          if (length( $oct ) < 3 ) { $oct = '0' . $oct; }
>          $buf .= '\\\\\\\\' . $oct;
>      }
>      return $buf;
> }

So that's somebody else's code, not yours? Does that code have any
comments that explain what it's doing? What does "_quote_bytea" mean?

That looks to me like it's replacing each character with four
backslashes and at least three octal digits. The two ifs are confusing
me. Do you know about leading zeroes in sprintf formats?

  my $oct = sprintf ("%03lo", ord($char));  # maybe?

  my $buf = join "",
    map sprintf("\\\\\\\\%03lo", ord($_)),
    split //, $str;              # ???

  $str =~ s{(.)}{ sprintf "\\\\\\\\%03lo", ord($1) }seg;   #???

But it sounds to me as if you don't want that particular string; you
want any function that gives you a lossless, repeatable coding of your
input string, but unlike the input string, the desired result is
composed only of printable characters. Yes? And presumably,
compactness and readability are also desirable features of the encoded
string.

  # Encode everything except the "normal" ASCII
  # characters. Normal includes newline and space, but no other
  # inkless characters. Normal does not include backslash.
  ###UNPORTABLE### Newline character is machine-dependent
  $str =~ s{([^\n\x20-\x5b\x5d-\x7e])}{ sprintf "\\{%x}", ord($1) }seg;

By now, I'm sure I must have sufficiently misunderstood either the
task or Perl's abilities to accomplish it, so I'll leave it at this.
Hope this helps!

--Tom Phoenix
Stonehenge Perl Training

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


