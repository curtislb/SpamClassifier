From perl6-all-return-81112-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri May  4 11:22:23 2007
Return-Path: <perl6-all-return-81112-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l44FMMqD016867
	for <ktwarwic@flax9.uwaterloo.ca>; Fri, 4 May 2007 11:22:22 -0400
Received: (qmail 25629 invoked by uid 514); 4 May 2007 15:22:20 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 25607 invoked from network); 4 May 2007 15:22:20 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DKIM_SIGNED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: domain of alek.storm@gmail.com designates 209.85.134.184 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=sybos/2gdJCXJcSF9A7Q68FMcbkPDVSPOPNHxgyABtiUGkRe6MLBilwOVgWdxCSUJCGsgwxejPhCgt5oHtOlRR8Mb37PppFWXWvBhu7iFekpZQLrj1ZTaT7Eg+Os91aILbWjpBdDE7Qrfe3jgkYUtwk2t+EaNgzVzmrFuOxpDP4=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=QMMr2i1lpBOMoPnV+v/40k9MNFOcQKZeXa/qOOgL1qFIJTPSiLG4Y//HczujjZmhZ6HlMv+mFZL1ZOOlpfaPQzggZWuzMKsE2xP5w8fuReLhQhzbWw0CHGmv2OYuRRmDD9dMMr5dH+F5xipJuoiWryJhkn+jQEBkKBU7uQcNF8g=
Message-ID: <189adbd0705040821p308721a9u8060e430972dab6b@mail.gmail.com>
Date: Fri, 4 May 2007 10:21:53 -0500
From: "Alek Storm" <alek.storm@gmail.com>
To: "Allison Randal" <allison@perl.org>
Subject: Re: [perl #42865] [BUG] There's no way to set a vtable function with a Sub at runtime
Cc: perl6-internals@perl.org
In-Reply-To: <463AAA34.4050705@perl.org>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_25991_22385983.1178292113138"
References: <RT-Ticket-42865@perl.org>
	 <B6A75271-9DC2-4769-9084-9001D6313798@diephouse.com>
	 <rt-3.6.HEAD-15879-1178151032-48.42865-72-0@perl.org>
	 <189adbd0705031947l41c48a2cq143a7301b20899cf@mail.gmail.com>
	 <463AAA34.4050705@perl.org>
X-Virus-Checked: Checked
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,HTML_MESSAGE,SPF_PASS

------=_Part_25991_22385983.1178292113138
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

On 5/3/07, Allison Randal <allison@perl.org> wrote:

> Alek Storm wrote:
> > I'm almost done with the PDD15 implementation of vtable overriding.  It
> > adds
> > the 'add_vtable_method' PCCMETHOD to Class, but also adds methods to the
> > vtable in 'add_method', if they have the :vtable pragma set, like the
> old
> > object system.  I kept this capability for compatibility, but I'd love
> to
> > remove it, along with the :vtable pragma.  I'm very against adding a new
> > opcode, since this is exactly what PCCMETHODs, and, eventually, PMC
> roles
> > are designed for, though the sentiment is the same.
>
> Take a step back and explain your motivations for adding
> 'add_vtable_method'?
>
> The :vtable pragma is necessary for defining a .sub as an overridden
> vtable function in PIR code. If you had a replacement in mind, run it by
> the list and we'll discuss it, but we can't just eliminate the feature.


I assumed it would be discussed when I submitted the patch.  This ticket
just came up first, that's all.  If we decide to add 'add_vtable_method',
then the :vtable pragma becomes redundant.  In fact, the only reason we need
the :method pragma is because it modifies the sub's parameters (if it
didn't, we could eliminate :method and just call 'add_method' on the class).

> I can see potentially see adding an 'add_vtable' vtable function, parallel
to add_method, add_attribute, etc.

So you are in favor of it?
Matt Diephouse (via RT) wrote:
> After the recent decoupling of vtable functions from methods (with the
> addition of the :vtable pragma), why would you want to re-couple them?
> I see the two as distinct features, each with their own uses.
> Sometimes there's shared behavior, but there ought to be the ability
> to have them behave differently.

Ditto.  Just because we can squeeze two separate features into 'add_method'
doesn't mean we should.  After all, Allison said before that having vtable
methods that aren't visible as normal methods is the most common usage, and
the current spec requires an extra parameter to do that.  Having
'add_method' and 'add_vtable_method' does not.


> > How PMCs interact with vtable methods in PIR is dependent on the object
> > system used.  The default (PDD15) object system utilizes vtable
> overriding,
> > but other object systems have different semantics.  This means, while
> PIR
> > code can wrap PMCs in their own object system, we can't make all PMCs
> > object-aware.
>
> Why would other object systems not use vtable overriding? Vtable
> overriding is a Parrot feature, it's the way high-level classes
> implement their interactions with the virtual machine at a low level.
> Different object systems having different semantics doesn't change the
> fact that they implement those semantics using a combination of vtable
> functions and methods.


Vtable overriding at the C level is a Parrot feature.  Vtable overriding at
the PIR level is a feature of Parrot's default object system.  If someone
decides not to inherit from Object and Class, they don't get PIR vtable
overriding.  We're using roles for PMCs, not inheritance, so all a PMC has
to do is act like an Object, not necessarily be one.  This means they either
implement their vtable methods in C, or provide their own mechanism for
vtable overriding, and then define them in PIR.  If they choose not to do
it, that's their choice.



> > If you want to override vtable methods for built-in PMCs
> > such
> > as Integer, you need to implement PMC subclassing for PDD15 ;)
>
> Which is part of the spec.


Yup.  I was just pointing out that it doesn't work yet, in case that was
what he was looking for.

-- 
Alek Storm

------=_Part_25991_22385983.1178292113138--

