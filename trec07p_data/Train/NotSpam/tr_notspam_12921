From perl6-all-return-81557-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed May 23 18:19:53 2007
Return-Path: <perl6-all-return-81557-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4NMJqqD030495
	for <ktwarwic@flax9.uwaterloo.ca>; Wed, 23 May 2007 18:19:53 -0400
Received: (qmail 10152 invoked by uid 514); 23 May 2007 22:19:48 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 10147 invoked from network); 23 May 2007 22:19:48 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-0.2 required=8.0
	tests=BAYES_40,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: moderator for perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: neutral (x1.develooper.com: local policy)
Message-ID: <20070523174617.32701.qmail@lists.develooper.com>
To: perl6-language@perl.org
Date: Wed, 23 May 2007 19:46:09 +0200
From: gabriele renzi <surrender_it@rc.europe.yahoo-eu1.akadns.net>
User-Agent: Thunderbird 1.5.0.10 (Windows/20070221)
MIME-Version: 1.0
Subject: "cached" trait specs
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Posted-By: 83.187.214.254
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.5 required=8.0
	tests=BAYES_40,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL

Hi everyone,

A small request about the cached trait for functions that makes them 
memoized: would it be possible to make it parametric?

I think it would be nice to have at least one variant

  sub foo is cached(max=>$size)

caching just the first $size results.
Maybe it could also be useful to have a default size of the cache 
instead of letting it grow indefinitely? I can easily imagine RAMs 
suffering because someone used "is cached" in a bad place :)

Also it would be quite useful, I think, to have another variant:
  sub foo is cached(using => $mapping)

this way people could implement their own caching policies easily, i.e. 
FIFO buffer, most used, most expensive and so on. Or reload on-disk 
caches from run to run, and even the other suggestion could be 
implemented easily in terms of this.

On the other hand, if the cached trait had a %.mapping attribute 
possible we could do this withouth making cached parametric, I mean:

  sub foo is cached {...}
  &foo.mapping = $my_mapping


but I think the other way it would be more clear.

