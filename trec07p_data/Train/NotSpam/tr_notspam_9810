From beginners-return-91600-ktwarwic=speedy.uwaterloo.ca@perl.org  Sat May 12 19:17:00 2007
Return-Path: <beginners-return-91600-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4CNGwqD021143
	for <ktwarwic@flax9.uwaterloo.ca>; Sat, 12 May 2007 19:16:59 -0400
Received: (qmail 15500 invoked by uid 514); 12 May 2007 23:16:50 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 15487 invoked from network); 12 May 2007 23:16:50 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 12 May 2007 23:16:50 -0000
Received: (qmail 6500 invoked by uid 225); 12 May 2007 23:16:50 -0000
Delivered-To: beginners@perl.org
Received: (qmail 6492 invoked by alias); 12 May 2007 23:16:49 -0000
X-Spam-Status: No, hits=-0.2 required=8.0
	tests=BAYES_40,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
Received: from pearl.ibctech.ca (HELO pearl.ibctech.ca) (208.70.104.210)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Sat, 12 May 2007 16:16:41 -0700
Received: (qmail 92622 invoked by uid 1002); 12 May 2007 23:16:37 -0000
Received: from iaccounts@ibctech.ca by pearl.ibctech.ca by uid 89 with qmail-scanner-1.22 
 (spamassassin: 2.64.  Clear:RC:1(208.70.107.100):. 
 Processed in 15.11265 secs); 12 May 2007 23:16:36 -0000
Received: from unknown (HELO ?192.168.1.210?) (steve@ibctech.ca@208.70.107.100)
  by pearl.ibctech.ca with (DHE-RSA-AES256-SHA encrypted) SMTP; 12 May 2007 23:16:21 -0000
Message-ID: <46464ACF.6090001@ibctech.ca>
Date: Sat, 12 May 2007 19:16:31 -0400
From: Steve Bertrand <iaccounts@ibctech.ca>
User-Agent: Thunderbird 2.0.0.0 (Windows/20070326)
MIME-Version: 1.0
To: beginners@perl.org
Subject: Re: $1 $2 var confusion
References: <4645CD59.3020508@ibctech.ca> <4645D9A7.1050905@earthlink.net> <46460B04.4040100@telus.net>
In-Reply-To: <46460B04.4040100@telus.net>
X-Enigmail-Version: 0.95.0
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit

John W. Krahn wrote:
> Mumia W. wrote:
>> That happens because the match variables ($1, $2, ...) are only changed
>> when a regular expression matches; otherwise, they are left alone.
>>
>> In the first case, "$2 !~ /domain\.com/" succeeds but does not capture
>> anything, so the numbered match variables are unset.
>>
>> Your situation reinforces the rule that you should always test if the
>> match succeeded before you attempt to use the match variables:
>>
>>     my $email = 'steveb@domain.com';
>>     my @f = (undef, $email =~ /(.*)\@(.*)/);
> 
> Why did you put undef in there?  It serves no useful purpose other than making
> the code harder to understand for beginners.

Wow...powerful statement.

To be honest, I got what I needed before I really payed attention to the
above part as per Rob and Tom's replies, but after re-reading, I agree.

In the above, do I assume correctly (without time to test for myself)
that 'undef' in this case undefines any instance of $1? (or $N for that
matter)?

> 
>       my @f = $email =~ /(.*)\@(.*)/;
> 
> 
>>     (@f > 1) && ($f[2] =~ /domain\.com/ ?
>>         print "$f[1]\n" : print "var 2 is bad\n" );
>>
>> The test "@f > 1" is my way of testing if the match succeeded.
> 
> The rvalue conditional operator should use the returned value:

Honestly, I hate to say I'm a beginner, but relative to others here I
won't beg otherwise. Without having to spend time reading the ?: method
(which I never use as of yet anyway), here is how I would do it now, so
I would understand it, and so would my staff who are not programmers
whatsoever, and who may have to understand it lest I get hit by a bus. I
include comments as I would if a non programmer would have to read it:

# Get the username portion, and the domain portion that we
# must verify from the input the user types in

my ($username, $domain) = split (/\@/, $email);
{... do verification}


Now that I've started a controversy, can I ask if the following method
is correct and accepted practice if I only care about the username portion?

I use the following example often instead of split()ing, and then
breaking apart an array. Note this is a simple example, it's more handy
for me in circumstances where I may be fed an array with numerous slices:

my $username = (split (/\@/, $email))[0];

Again, I have to say that the speed of the feedback was great today :)
Rob, I appreciate your input, and Tom, I don't know if you helped
Randall write the books, but it's especially exciting to see yourself
and the author of several books I own and have read active on the list.

Steve

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


