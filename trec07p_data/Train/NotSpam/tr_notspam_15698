From perl6-all-return-81755-ktwarwic=speedy.uwaterloo.ca@perl.org  Sat Jun  2 18:28:12 2007
Return-Path: <perl6-all-return-81755-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l52MSBhB028696
	for <ktwarwic@flax9.uwaterloo.ca>; Sat, 2 Jun 2007 18:28:11 -0400
Received: (qmail 21285 invoked by uid 514); 2 Jun 2007 22:28:05 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 21280 invoked from network); 2 Jun 2007 22:28:04 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: neutral (x1.develooper.com: local policy)
Delivered-To: perlmail-parrot-porters@onion.perl.org
Delivered-To: parrot-porters@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="5D0rHnTdWA"
Content-Transfer-Encoding: 7bit
Message-ID: <18017.60987.268362.815963@rgrjr.dyndns.org>
Date: Sat, 2 Jun 2007 18:24:59 -0400
From: Bob Rogers <rogers-perl6@rgrjr.dyndns.org>
To: parrot-porters@perl.org
Subject: BigInt bitwise_and, anyone?
X-Mailer: VM 7.19 under Emacs 22.1.50.1
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.5 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,FH_HOST_EQ_D_D_D_D,RCVD_IN_PBL,RCVD_IN_SORBS_DUL,RDNS_DYNAMIC,SPF_PASS
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-1.9 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL

--5D0rHnTdWA
Content-Type: text/plain; charset=us-ascii
Content-Description: message body text
Content-Disposition: inline
Content-Transfer-Encoding: 7bit

   I started hacking this because I thought I needed it, but that turned
out not to be true.  Should I finish it (it still needs tests), or is
there some reason to hold off?

					-- Bob Rogers
					   http://rgrjr.dyndns.org/



--5D0rHnTdWA
Content-Type: text/plain
Content-Description: 
Content-Disposition: inline;
	filename="bignum-bitwise-and-1.patch"
Content-Transfer-Encoding: 7bit

* src/pmc/bigint.pmc:
   + (bigint_bitwise_and_bigint_bigint, bigint_bitwise_and_bigint_int):
     Bigint support for bitwise_and methods.
   + (bitwise_and, bitwise_and_int, i_bitwise_and, i_bitwise_and_int): 
     Methods that extend the C<band> op to bigints.

Diffs between last version checked in and current workfile(s):

Index: src/pmc/bigint.pmc
===================================================================
--- src/pmc/bigint.pmc	(revision 18749)
+++ src/pmc/bigint.pmc	(working copy)
@@ -285,7 +285,31 @@
     else
         mpz_mul_2exp(BN(dest), BN(self), -value);
 }
+static void
+bigint_bitwise_and_bigint_bigint(Interp *interp, PMC* self,
+                                 PMC* value, PMC *dest)
+{
+    mpz_and(BN(dest), BN(self), BN(value));
+}
+static void
+bigint_bitwise_and_bigint_int(Interp *interp, PMC* self,
+                              INTVAL value, PMC *dest)
+/* This is is trickier than the BigInt/BigInt case, since we need to (a) produce
+ * a BigInt version of value, and (b) morph the result back to Integer.
+ */
+{
+    mpz_t value_bn, result;
+    long iresult;
 
+    mpz_init(value_bn);
+    mpz_set_si(value_bn, value);
+    mpz_init(result);
+    mpz_and(result, BN(self), value_bn);
+    iresult = mpz_get_si(result);
+    VTABLE_morph(interp, dest, enum_class_Integer);
+    VTABLE_set_integer_native(interp, dest, iresult);
+}
+
 #else /* ifdef PARROT_HAS_GMP */
 
 static void
@@ -488,6 +512,21 @@
     real_exception(interp, NULL, E_LibraryNotLoadedError,
         "no bigint lib loaded");
 }
+static void
+bigint_bitwise_and_bigint_bigint(Interp *interp, PMC* self,
+                                 PMC* value, PMC *dest)
+{
+    real_exception(interp, NULL, E_LibraryNotLoadedError,
+                   "no bigint lib loaded");
+}
+static void
+bigint_bitwise_and_bigint_int(Interp *interp, PMC* self,
+                              INTVAL value, PMC *dest)
+
+{
+    real_exception(interp, NULL, E_LibraryNotLoadedError,
+                   "no bigint lib loaded");
+}
 #endif /* ifdef PARROT_HAS_GMP */
 
 pmclass BigInt {
@@ -1309,6 +1348,68 @@
         bigint_bitwise_shr_bigint_int(INTERP, SELF, value, SELF);
     }
 
+/*
+
+=item C<PMC* bitwise_and(PMC *value, PMC *dest)>
+
+=item C<PMC* bitwise_and_int(INTVAL value, PMC *dest)>
+
+Returns in C<*dest> the bitwise AND of the BigInt by C<*value>.
+
+=item C<void i_bitwise_and(PMC *value)>
+
+=item C<void i_bitwise_and_int(INTVAL value)>
+
+Inplace bitwise AND.
+
+=cut
+
+*/
+
+    PMC* bitwise_and(PMC* value, PMC* dest) {
+MMD_BigInt: {
+            if (dest)
+                VTABLE_morph(interp, dest, SELF->vtable->base_type);
+            else
+                dest = pmc_new(INTERP, SELF->vtable->base_type);
+            bigint_bitwise_and_bigint_bigint(INTERP, SELF, value, dest);
+            return dest;
+        }
+MMD_Integer: {
+            if (! dest)
+                dest = pmc_new(INTERP, SELF->vtable->base_type);
+            bigint_bitwise_and_bigint_int(INTERP, SELF, PMC_int_val(value), dest);
+            return dest;
+         }
+MMD_DEFAULT: {
+            real_exception(INTERP, NULL, E_NotImplementedError, "unimp band");
+            return dest;
+         }
+    }
+
+    PMC* bitwise_and_int(INTVAL value, PMC* dest) {
+        if (! dest)
+            dest = pmc_new(INTERP, SELF->vtable->base_type);
+        bigint_bitwise_and_bigint_int(INTERP, SELF, value, dest);
+        return dest;
+    }
+
+    void i_bitwise_and(PMC* value) {
+MMD_BigInt: {
+            bigint_bitwise_and_bigint_bigint(INTERP, SELF, value, SELF);
+        }
+MMD_Integer: {
+            bigint_bitwise_and_bigint_int(INTERP, SELF, PMC_int_val(value), SELF);
+        }
+MMD_DEFAULT: {
+            real_exception(INTERP, NULL, E_NotImplementedError, "unimp band");
+        }
+    }
+
+    void i_bitwise_and_int(INTVAL value) {
+        bigint_bitwise_and_bigint_int(INTERP, SELF, value, SELF);
+    }
+
 }
 
 /*

End of diffs.

--5D0rHnTdWA--

