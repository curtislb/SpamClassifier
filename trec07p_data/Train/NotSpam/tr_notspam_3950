From perl6-all-return-80774-ktwarwic=speedy.uwaterloo.ca@perl.org  Sun Apr 22 05:57:34 2007
Return-Path: <perl6-all-return-80774-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3M9vX0I018541
	for <ktwarwic@speedy.uwaterloo.ca>; Sun, 22 Apr 2007 05:57:33 -0400
Received: (qmail 29561 invoked by uid 514); 22 Apr 2007 09:57:05 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 29556 invoked from network); 22 Apr 2007 09:57:04 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: neutral (x1.develooper.com: local policy)
From: Leopold Toetsch <lt@toetsch.at>
To: Patrick Rutkowski <rutski89@gmail.com>
Subject: Re: I Don't Understand The Context Allocation/Destruction Code
Date: Sun, 22 Apr 2007 11:56:33 +0200
User-Agent: KMail/1.9.1
Cc: Joshua Isom <jrisom@gmail.com>, chromatic <chromatic@wgz.org>,
   perl6-internals@perl.org
References: <200704211824.18554.chromatic@wgz.org> <ef04c7728061e200914c84b6cbbc987a@gmail.com> <C77C50D7-1F2A-4D33-8489-253E9A5659A2@gmail.com>
In-Reply-To: <C77C50D7-1F2A-4D33-8489-253E9A5659A2@gmail.com>
MIME-Version: 1.0
Content-Type: text/plain;
  charset="iso-8859-1"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200704221156.34317.lt@toetsch.at>
X-Scan-Signature: 3a7e6ba65ed1447382f83a0be8fe4f3a
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME
Status: O
Content-Length: 1701
Lines: 48

Am Sonntag, 22. April 2007 09:11 schrieb Patrick Rutkowski:
> I think Leo would be the best person to go to for an explanation,
> especially if you plan to dramatically rework the code. 

> >> This is where I start not to understand.  Why reg_alloc + 7?  Why
> >> shift left
> >> and right by 3?
> >
> > I'm not sure if it is actually doing anything that needs to be that
> > complicated to code that way.  It could be able to be written as:
> >
> >     const int slot = (reg_alloc + 7) / 8; /* divide by eight for
> > some reason and round up on remainder */
> >     reg_alloc = slot * 8; /* reg_alloc is now evenly divisible by 8 */

Sure. It's just rounding up to the next multpile of 8.

> > ...  Now, slot is multiplied by sizeof(void*) later on,
> > which may be why it's divided by eight in the first place.

The rounding up happens to reduce the size of the free_list array. 

> > The n = slot + 1 I find a little odd, because the number is already
> > rounded up, so it's rounding up and then adding an extra place of
> > memory.

This is for the extension of the free_list.

> >> I do understand the purpose of the resizing code, but not how slot
> >> relates to
> >> it:
> >>
> >>     if (slot >= interp->ctx_mem.n_free_slots) {

Well, if slot is beyond the end of the list, it's resized.

> > The *(void **) has been confusing me for a long time. 

The free list per size (i.e. one slot) is a linked list of pointers.

> >> I'd like to find a simpler scheme, if it's possible.  Otherwise,
> >> I'd like to
> >> figure out what's going on so we can at least explain it somehow.

Why? This is all rather straight-forward and can be found in any memory 
allocator e.g. ins smallobjects.

leo

