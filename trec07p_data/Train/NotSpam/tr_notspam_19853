From perl6-all-return-82014-ktwarwic=speedy.uwaterloo.ca@perl.org  Sat Jun 16 16:06:34 2007
Return-Path: <perl6-all-return-82014-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5GK6XL9019061
	for <ktwarwic@flax9.uwaterloo.ca>; Sat, 16 Jun 2007 16:06:33 -0400
Received: (qmail 1192 invoked by uid 514); 16 Jun 2007 20:06:30 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 1187 invoked from network); 16 Jun 2007 20:06:30 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: domain of dataweaver@gmail.com designates 64.233.162.226 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=l0s1q3b+fZZGNbPaNC5bACj9T/YG+vjChJ5Oj34ruCKTuw6Yci6P0hwosTc18bwITyWyWHPTeNpmZJ4jh9/m961n+/RHmYDyxj6cK1QpsBpdLU21CQ1/fhwiuvu9152lG1eVwSk5XgPPB4DisrS1pOHdJ44JNx5Rgb+e23jYR/8=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=AHdeTnYNUEGm1vXEwS9WAoenGA+5cIrSvUX7uiEZXPreUtLoT3DmzbMhrOPlj0ZAKFt5AwoCdLg6X7K/Zsrw/UIoysa4fbJN8q6zIsLRwtTn9iwXnNheZqvgHcyWiKTQWknQEUJQX4/sC5xxsO5hxoOKh/IYbGiiXi1YE1vLje4=
Message-ID: <ef30550b0706161306g1f7fe8d6g57185b764cfdcbca@mail.gmail.com>
Date: Sat, 16 Jun 2007 13:06:09 -0700
From: "Jonathan Lang" <dataweaver@gmail.com>
To: "brian d foy" <brian.d.foy@gmail.com>
Subject: Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn
Cc: perl6-language@perl.org
In-Reply-To: <160620070823046479%brian.d.foy@gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <20070613205525.7ECA0CB9B8@x12.develooper.com>
	 <ef30550b0706131429o34838a6es6704e8ec73851b49@mail.gmail.com>
	 <467073C4.6020708@conway.org>
	 <ef30550b0706140749w6c6290e9qc164901b578a8d5b@mail.gmail.com>
	 <832f158a0706141722o5f68cf09l724d4f4520ee146@mail.gmail.com>
	 <150620070756055824%brian.d.foy@gmail.com>
	 <4673C546.5060806@conway.org>
	 <160620070823046479%brian.d.foy@gmail.com>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS

brian d foy wrote:
> > Whereas the rule you have to teach under the Integration model is:
>
> We don't teach any rule under this model, and it's been fine for over a
> decade :)
>
> When we do teach the current Pod, the simple rule is that Pod starts:
>
>    * when Perl is expecting a new statement
>    * there is a =something at the beginning of the line
>
> Which is considerably simpler than the long rule list you used to say
> the same thing (which seems a bit of FUD, honestly).

Agreed about the parenthetical.  From my perspective, the proponents
of the Separation Model are overstating the difficulties inherent to
the Integration model.  That said:

By the rule you give above, Pod Sections cannot be embedded in the
middle of statements.  For example, given:

  if
  a = 5
  {
    say "ouch!"
  }

you couldn't insert a Pod Section between the first and second lines,
or between the second and third lines.   From a guy-in-the-trenches
perspective, this isn't a problem; interrupting an instruction
mid-stream in order to talk about it is very bad form.  Still, it's a
restriction that Damian's Separation model lacks.

> >  > So, if this is the case, how will a new Perl 6 user debug a program
> >  > failure when part of their program mysteriously disappears because
> >  > they just happened to have =begin at the beginning of a line?
> >
> > The same way they debug it when part of their program mysteriously
> > disappears because they just happened to have # at the beginning of a
> > line:
>
> > Except, of course, the Pod mysteriously vanishing will be considerably
> > easier to debug, because ALL lines starting with =begin vanish, whereas
> > only some lines beginning with # do.
>
> That's not really the case. The # only affects one line, and a pound in
> a literal string doesn't start a comment. People grok single line
> comments very well.

With the advent of block comments, this isn't as true as it used to
be.  In fact, I expect that some people will have to take a moment to
wrap their heads around the notion that you ignore everything that
follows the closing bracket on the last line of the block quote.  That
said, I don't expect there to be much of a learning curve here.

Still, it may be worth it to state that a line that starts with '#'
followed by a closing bracket is _not_ commented out (although said
character sequence should be stripped out of the line).  Less
cognitive dissonance that way.

> The start of a Pod comment now affects its line and the ones following
> it.

...also not much in the way of a learning curve; in fact, I expect
that people will grok Pod Sections more readily than they will grok
block comments as currently written.

> Well, easy to use Pod with other languages until they try to use the
> assignment operator at the beginning of the line, or a = in a literal
> string at the beginning of a line.

...or you're dealing with a language that assigns special meaning to
lines that begin with '='.

You are not going to be able to make Pod completely orthogonal to the
code that it's embedded in.  You can come close (and IMHO you come
_very_ close with the Separation model that you're discussing), but
there will always be some sort of constraint placed on the code into
which you're embedding Pod.

> There are other things to consider, and to me it looks like this design
> decision isn't based on what's easier for the Perl 6 programmer but
> what's easier for the implementors. It's not that I don't understand
> both sides, I just disagree about where the complexity should be.

Thank you, Brian.  That's exactly the sense that I've been getting
from the explanations being given.

Which is not to say that there isn't a time and place when ease of
implementation should trump ease of programming; taking an extreme
example, being able to write a program that consists of the single
line:

  attend my every wish

is the ultimate in terms of ease of programming; it's also impossible
to implement, barring the invention of mind-reading hardware and
sapient artificial intelligence software.  If a small increase in the
programmer's learning curve is the price that must be paid to achieve
a massive reduction in the implementor's workload, it may very well be
worthwhile to foist some of the complexity onto the programmer.

The question is whether or not this is one of those cases.

-- 
Jonathan "Dataweaver" Lang

