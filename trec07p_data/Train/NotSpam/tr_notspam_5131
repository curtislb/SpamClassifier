From r-help-bounces@stat.math.ethz.ch  Wed Apr 25 23:53:33 2007
Return-Path: <r-help-bounces@stat.math.ethz.ch>
Received: from hypatia.math.ethz.ch (hypatia.math.ethz.ch [129.132.145.15])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l3Q3rV6w007449
	for <ktwarwic@speedy.uwaterloo.ca>; Wed, 25 Apr 2007 23:53:32 -0400
Received: from hypatia.math.ethz.ch (hypatia [129.132.145.15])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l3Q3qLes017425;
	Thu, 26 Apr 2007 05:52:48 +0200
X-Spam-Checker-Version: SpamAssassin 3.1.8 (2007-02-13) on hypatia.math.ethz.ch
X-Spam-Level: 
X-Spam-Status: No, score=-0.7 required=5.0 tests=AWL,
	BAYES_50 autolearn=no version=3.1.8
Received: from emailgw02.pnl.gov (emailgw02.pnl.gov [192.101.109.34])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l3Q3q2bm017372
	for <r-help@stat.math.ethz.ch>; Thu, 26 Apr 2007 05:52:02 +0200
Received: from emailbh01.pnl.gov ([130.20.128.90])
	by emailgw02.pnl.gov with ESMTP; 25 Apr 2007 20:52:01 -0700
X-Possible-Spoof: True
X-IronPort-AV: i="4.14,452,1170662400"; 
	d="scan'208"; a="18940519:sNHT28779226"
Received: from EMAIL02.pnl.gov ([130.20.128.220]) by emailbh01.pnl.gov with
	Microsoft SMTPSVC(6.0.3790.1830); Wed, 25 Apr 2007 20:52:01 -0700
X-MimeOLE: Produced By Microsoft Exchange V6.5
Content-class: urn:content-classes:message
MIME-Version: 1.0
Date: Wed, 25 Apr 2007 20:52:00 -0700
Message-ID: <F807B6FD7E7BE144A22B8A449CDAD93401220F0F@EMAIL02.pnl.gov>
In-Reply-To: <eb555e660704251523j42db09e5s9930f87e3ec4612c@mail.gmail.com>
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
Thread-Topic: [R] levelplot and unequal cell sizes
Thread-Index: AceHiEvwK8ZZe7EGQKaSKfDzE5UWTwALNOGw
References: <F807B6FD7E7BE144A22B8A449CDAD93401220F05@EMAIL02.pnl.gov>
	<f8e6ff050704250931m114e8528t67b88f329b5f5aeb@mail.gmail.com>
	<F807B6FD7E7BE144A22B8A449CDAD93401220F06@EMAIL02.pnl.gov>
	<eb555e660704251523j42db09e5s9930f87e3ec4612c@mail.gmail.com>
From: "Waichler, Scott R" <Scott.Waichler@pnl.gov>
To: "Deepayan Sarkar" <deepayan.sarkar@gmail.com>
X-OriginalArrivalTime: 26 Apr 2007 03:52:01.0355 (UTC)
	FILETIME=[3EF771B0:01C787B6]
X-Virus-Scanned: by amavisd-new at stat.math.ethz.ch
X-MIME-Autoconverted: from quoted-printable to 8bit by hypatia.math.ethz.ch id
	l3Q3q2bm017372
Cc: r-help@stat.math.ethz.ch
Subject: Re: [R] levelplot and unequal cell sizes
X-BeenThere: r-help@stat.math.ethz.ch
X-Mailman-Version: 2.1.9
Precedence: list
List-Id: "Main R Mailing List: Primary help" <r-help.stat.math.ethz.ch>
List-Unsubscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=unsubscribe>
List-Archive: <https://stat.ethz.ch/pipermail/r-help>
List-Post: <mailto:r-help@stat.math.ethz.ch>
List-Help: <mailto:r-help-request@stat.math.ethz.ch?subject=help>
List-Subscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: r-help-bounces@stat.math.ethz.ch
Errors-To: r-help-bounces@stat.math.ethz.ch
Status: O
Content-Length: 3114
Lines: 77

> You are right, panel.levelplot is indeed assuming that the 
> boundaries are between consecutive midpoints. There is no 
> built in way around that; there simply isn't enough 
> information available to the panel function.
> 
> The cleanest solution, in principle, is to write your own 
> panel function that ends up calling panel.polygon or grid.polygon.
> panel.levelplot is a good starting point (the only tricky 
> part is getting the colors right, almost everything else you 
> can get rid of).
> Maybe Hadley will have a simpler solution.
> 
> Here's a possible implementation using a panel function:
> 
> 
> my.panel.levelplot <-
>     function (x, y, z, subscripts, at = pretty(z),
>               col.regions = regions$col, ...,
>               w, h)
> {
>     regions <- trellis.par.get("regions")
>     numcol <- length(at) - 1
>     numcol.r <- length(col.regions)
>     col.regions <- if (numcol.r <= numcol)
>         rep(col.regions, length = numcol)
>     else col.regions[floor(1+(1:numcol-1) * (numcol.r-1)/(numcol-1))]
>     zcol <- findInterval(z, at, rightmost.closed = TRUE)
>     x <- as.numeric(x[subscripts])
>     y <- as.numeric(y[subscripts])
>     z <- as.numeric(z[subscripts])
>     w <- as.numeric(w[subscripts])
>     h <- as.numeric(h[subscripts])
>     zcol <- as.numeric(zcol[subscripts])
>     print(data.frame(z, x.node, y.node, w.node, h.node, 
> col.regions[zcol]))
>     panel.rect(x = x, y = y, width = w, height = h,
>                col = col.regions[zcol], ...) }

Deepayan, thanks so much for this solution.  It's great for my needs and
will allow me to keep using my existing lattice "infrastructure."  I
never would have arrived at using findInterval() and panel.rect() on my
own.  Users might find my slight modification below for handling NA
values useful.  It also hides the cell borders:


PANEL.LEVELPLOT1 <-
    function (x, y, z, subscripts, at = pretty(z),
              col.regions = regions$col, ...,
              w, h) {
    regions <- trellis.par.get("regions")
    numcol <- length(at) - 1
    numcol.r <- length(col.regions)
    col.regions <- if (numcol.r <= numcol)
        rep(col.regions, length = numcol)
    else col.regions[floor(1+(1:numcol-1) * (numcol.r-1)/(numcol-1))]
    zcol <- findInterval(z, at, rightmost.closed = TRUE)
    x <- as.numeric(x[subscripts])
    y <- as.numeric(y[subscripts])
    z <- as.numeric(z[subscripts])
    w <- as.numeric(w[subscripts])
    h <- as.numeric(h[subscripts])
    zcol <- as.numeric(zcol[subscripts])
    these.colors <- ifelse(!is.na(zcol), col.regions[zcol],
"transparent")  # my addition  :)
#    print(data.frame(z.vec, x.vec, y.vec, w.vec, h.vec, these.colors))
    panel.rect(x = x, y = y, width = w, height = h,
               col = these.colors, border=NA,...)
}  # end PANEL.LEVELPLOT1()

Regards,
Scott Waichler

______________________________________________
R-help@stat.math.ethz.ch mailing list
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.

