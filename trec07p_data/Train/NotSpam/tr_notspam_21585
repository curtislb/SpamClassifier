From perl6-all-return-82242-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri Jun 22 09:39:39 2007
Return-Path: <perl6-all-return-82242-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5MDdcL9006838
	for <ktwarwic@flax9.uwaterloo.ca>; Fri, 22 Jun 2007 09:39:38 -0400
Received: (qmail 7260 invoked by uid 514); 22 Jun 2007 13:39:34 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 7254 invoked from network); 22 Jun 2007 13:39:34 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: domain of thoughtstream@gmail.com designates 209.85.146.183 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:reply-to:user-agent:mime-version:to:subject:references:in-reply-to:content-type:content-transfer-encoding:sender;
        b=lRn3JZpNWkp94/apQwfDk3TSUy8cgMaamun9WH+Yk2iutQBxMCQUIK7OCYh29MBoqaNOKKd9TLUoguhUvhkq5x6JhrZ1aYkq+2/qSXDbXPXkQFv+SyEszstFmIBrtH53+roc9m5JqZsFr6NVhAjv6MV59qAi3zN4JPi2+BjPPZI=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:reply-to:user-agent:mime-version:to:subject:references:in-reply-to:content-type:content-transfer-encoding:sender;
        b=XwCBXRLcMMJ1iOqeAn0Oii1z/BHkPIFE0kzrctHZtkdVhUkEnm+bDAZlqj0thyWC6hD+5yqQY1y8uZGHtDPhrhOKaFk8JRAHPxiPgF44+O65zhdFvHoGWZzJk+sN/tOzGveeu/z/B6sn8frWlt3xUAQ9hUs2Q1dUurY5MqgZqck=
Message-ID: <467BD0F7.1010802@conway.org>
Date: Fri, 22 Jun 2007 23:39:03 +1000
From: Damian Conway <damian@conway.org>
Reply-To: damian@conway.org
User-Agent: Thunderbird 2.0.0.4 (Macintosh/20070604)
MIME-Version: 1.0
To: "perl6-language@perl.org" <perl6-language@perl.org>
Subject: Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn
References: <ef30550b0706131429o34838a6es6704e8ec73851b49@mail.gmail.com> <467073C4.6020708@conway.org> <20070614082341.GU31918@earth.overmeer.net> <832f158a0706141717j7accfb36w92bf3a2ed7a8e115@mail.gmail.com> <20070615075949.GR31918@earth.overmeer.net> <20070616090944.GG6900@stripey.com> <20070616103358.GB10601@earth.overmeer.net> <20070621180226.GK6900@stripey.com> <20070622084840.GJ16156@earth.overmeer.net> <832f158a0706220202p1baf8880ub10797003905e2be@mail.gmail.com> <20070622093655.GL16156@earth.overmeer.net>
In-Reply-To: <20070622093655.GL16156@earth.overmeer.net>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Sender: Damian Conway <thoughtstream@gmail.com>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS

Mark Overmeer wrote:

 >> Would the following syntax suffice?
 >>
 >>    method isValidPostalCode(str $postalcode) returns bool {...}
 >>    =PURPOSE  Check weather the postal code confirms to the standards
 >>    =ARG $postalcode
 >>        a string with blanks trimmed.
 >>    =RETURN
 >>        the string is not cleaned-up.
 >>
 >> Because you can already do precisely that in the current design of Pod 6.
 >
 > This is syntactically what can be done with the current design,
 > but is semantically very different.

I don't think so. It's all just mark-up, no matter what the specific
syntax looks like. The semantics are provided by the behaviour of the tools 
that parse and interpret that mark-up. If the tools treat:

       =ARG $postalcode
           a string with blanks trimmed.

the same as they treat:

       `$postalcode: a string with blanks trimmed.

then semantically the two are exactly the same.


 > Besides the point that I do not really like the YELLING all the time,

So you create a Pod module that defines "quieter" user-defined block names, 
and write:

       =use OOdoc:ver<6.0.0>

       method isValidPostalCode(str $postalcode) returns bool {...}
       =Purpose  Check weather the postal code confirms to the standards
       =Arg $postalcode
           a string with blanks trimmed.
       =Return
           the string is not cleaned-up.


 > You gave the hint that comments are also in the parse tree.

They can be. Better still, the (raw) Pod can also be kept in the parse 
tree...since, like comments, the Perl parser still has to recognize it, even 
when it's focusing on extracting Perl.


 > So, that is sufficient for me:

And for others too, I hope.

Defining Perl 6 and Pod 6 independently opens up so many options for
building documentation tools:

     * As you've observed, you can build them on top of the Perl 6
       parser, using any mark-up syntax that will fit in a comment;

     * And, as I've indicated, you can build them on top of
       the Pod parser, using the standard Pod syntax;

     * Or you can build them on top of the Perl 6 parser, but using the
       standard Pod syntax...by parsing Pod from within the appropriate
       nodes of the Perl AST using the Pod parser;

     * Or you can build them on top of the Pod parser, using the standard
       Pod syntax, by parsing any code-bearing "ambient" nodes within the
       Pod DOM using the Perl 6 parser;

     * Or you can even build them by using *both* parsers at once and
       then walking the two resulting hierarchical representations (AST
       and DOM) in parallel, since Perl 6 has very good support for such
       concurrent tree traversals.

I don't believe any one of those alternatives will prove to be *the*
universal best approach for implementing all documentation tools, but I
do believe that having all those alternatives will make it as easy as
possible for us to collectively create the best tools for the each of
the many approaches to documentation that the Perl community is
ultimately going to want to support.

And that's what keeping Perl 6 and Pod 6 separate buys you: choice,
options, alternatives, the possibility of creating very different styles
of documentation for very different styles of programming. And for
different kinds of programmer: for the Busy Documentor, tools that
extract documentation automatically from code; for the Exacting
Documentor, a structural mark-up that allows precise manual control over
what's documented...and how; for the Pragmatic Documentor, tools that
allow structural mark-up and automatic extraction to be sensibly mixed.

And therefore I see the very fact that you don't like my design of Pod 6
as a strong argument in *favour* of that design, since that design aims
to provide the necessary syntactic extensibility and the essential
building blocks (parser, DOM, module support) required for the
proponents of each individual documentation philosophy to create a
mark-up system and supporting tools best suited to their specific needs
and objectives.

Damian

