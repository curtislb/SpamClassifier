From r-help-bounces@stat.math.ethz.ch  Fri May 11 13:13:35 2007
Return-Path: <r-help-bounces@stat.math.ethz.ch>
Received: from hypatia.math.ethz.ch (hypatia.math.ethz.ch [129.132.145.15])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l4BHDYqD025764
	for <ktwarwic@flax9.uwaterloo.ca>; Fri, 11 May 2007 13:13:35 -0400
Received: from hypatia.math.ethz.ch (hypatia [129.132.145.15])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l4BHD9uE006049;
	Fri, 11 May 2007 19:13:17 +0200
X-Spam-Checker-Version: SpamAssassin 3.1.8 (2007-02-13) on hypatia.math.ethz.ch
X-Spam-Level: 
X-Spam-Status: No, score=-0.3 required=5.0 tests=AWL, BAYES_20,
	SPF_HELO_PASS autolearn=no version=3.1.8
Received: from mout.perfora.net (mout.perfora.net [74.208.4.195])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l4BHD1qA005650
	for <r-help@r-project.org>; Fri, 11 May 2007 19:13:01 +0200
Received: from [71.39.177.44] (helo=[192.168.118.73])
	by mrelay.perfora.net (node=mrus1) with ESMTP (Nemesis),
	id 0MKpCa-1HmYfl2f5D-0001Zu; Fri, 11 May 2007 13:13:00 -0400
Message-ID: <4644A414.9070407@acm.org>
Date: Fri, 11 May 2007 11:12:52 -0600
From: Tony Plate <tplate@acm.org>
User-Agent: Thunderbird 1.5.0.10 (Windows/20070221)
MIME-Version: 1.0
To: Prof Brian Ripley <ripley@stats.ox.ac.uk>
References: <463F9AFA.4070103@acm.org>
	<Pine.LNX.4.64.0705080613020.31042@gannet.stats.ox.ac.uk>
In-Reply-To: <Pine.LNX.4.64.0705080613020.31042@gannet.stats.ox.ac.uk>
X-Provags-ID: V01U2FsdGVkX19QXRHKl0/am9OJOPPBVbjeRIHOFNF6F/Cq7rY
	YpZ5Jo022IVTOr9LdPR3yOxcGISb8jTVOOQ+ZTMVpfmWkvnSwZ
	ybQiFu620UuZQGGE7oZdA==
X-Virus-Scanned: by amavisd-new at stat.math.ethz.ch
Cc: r-help@r-project.org, Tony Plate <tplate@acm.org>
Subject: Re: [R] getting informative error messages
X-BeenThere: r-help@stat.math.ethz.ch
X-Mailman-Version: 2.1.9
Precedence: list
List-Id: "Main R Mailing List: Primary help" <r-help.stat.math.ethz.ch>
List-Unsubscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=unsubscribe>
List-Archive: <https://stat.ethz.ch/pipermail/r-help>
List-Post: <mailto:r-help@stat.math.ethz.ch>
List-Help: <mailto:r-help-request@stat.math.ethz.ch?subject=help>
List-Subscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: r-help-bounces@stat.math.ethz.ch
Errors-To: r-help-bounces@stat.math.ethz.ch

Prof Brian Ripley wrote:
> It is not clear to me what you want here.

I just wanted to be able to quickly find the expression in which an 
error occurred when it was inside a lengthy function.  I now know that 
'debug()' can help with this (debug() allows me to easily step through 
the function and see where the error occurs.)

> Errors are tagged by a 'call', and f(1:3) is the innermost 'call' (special 
> primitives do not set a context and so do not count if you consider '[' 
> to be a function).

Thanks for the explanation.  I suspected that it had something to do 
with primitive functions, but was unable to confirm that by searching.

> 
> The message could tell you what the type was, but it does not and we have 
> lost the pool of active contributors we once had to submit tested patches 
> for things like that.

What is required to test patches for things like this?  Is there 
anything written up on that anywhere?  I've not been able to clearly 
discern what the desired output of 'make check' is -- there seem to be 
reported differences that don't actually matter, but I didn't see a fast 
and easy way of distinguishing those from the ones that do matter.  I 
did look in R-exts, and on developer.r-project.org but was unable to 
find clear guidance there either.

-- Tony Plate
> 
> 
> On Mon, 7 May 2007, Tony Plate wrote:
> 
>> Certain errors seem to generate messages that are less informative than
>> most -- they just tell you which function an error happened in, but
>> don't indicate which line or expression the error occurred in.
>>
>> Here's a toy example:
>>
>>> f <- function(x) {a <- 1; y <- x[list(1:3)]; b <- 2; return(y)}
>>> options(error=NULL)
>>> f(1:3)
>> Error in f(1:3) : invalid subscript type
>>> traceback()
>> 1: f(1:3)
>> In this function, it's clear that the error is in subscripting 'x', but
>> it's not always so immediately obvious in lengthier functions.
>>
>> Is there anything I can do to get a more informative error message in
>> this type of situation?  I couldn't find any help in the section
>> "Debugging R Code" in "R-exts" (or anything at all relevant in "R-intro").
>>
>> (Different values for options(error=...) and different formatting of the
>> function made no difference.)
>>
>> -- Tony Plate
>>
>>> sessionInfo()
>> R version 2.5.0 (2007-04-23)
>> i386-pc-mingw32
>>
>> locale:
>> LC_COLLATE=English_United States.1252;LC_CTYPE=English_United
>> States.1252;LC_MONETARY=English_United
>> States.1252;LC_NUMERIC=C;LC_TIME=English_United States.1252
>>
>> attached base packages:
>> [1] "stats"     "graphics"  "grDevices" "utils"     "datasets"  "methods"
>> [7] "base"
>>
>> other attached packages:
>> tap.misc
>>    "1.0"
>> ______________________________________________
>> R-help@stat.math.ethz.ch mailing list
>> https://stat.ethz.ch/mailman/listinfo/r-help
>> PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
>> and provide commented, minimal, self-contained, reproducible code.
>>
>

______________________________________________
R-help@stat.math.ethz.ch mailing list
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.

