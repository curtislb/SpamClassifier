From sugar-bounces@laptop.org  Tue May  8 10:43:25 2007
Return-Path: <sugar-bounces@laptop.org>
Received: from pedal.laptop.org (pedal.laptop.org [18.85.2.148])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l48EhPqD016293
	for <ktwarwic@speedy.uwaterloo.ca>; Tue, 8 May 2007 10:43:25 -0400
Received: from pedal.laptop.org (localhost [127.0.0.1])
	by pedal.laptop.org (Postfix) with ESMTP id 0E9994F691;
	Tue,  8 May 2007 10:43:13 -0400 (EDT)
X-Original-To: sugar@laptop.org
Delivered-To: sugar@laptop.org
Received: from spam.laptop.org (spam.laptop.org [18.85.46.23])
	by pedal.laptop.org (Postfix) with ESMTP id 9A6BC4F691
	for <sugar@laptop.org>; Tue,  8 May 2007 10:43:11 -0400 (EDT)
X-ASG-Debug-ID: 1178635399-56f900150000-3Xmyjt
X-Barracuda-URL: http://18.85.46.23:8000/cgi-bin/mark.cgi
X-Barracuda-Connect: dhansak.collabora.co.uk[195.10.223.134]
X-Barracuda-Start-Time: 1178635399
X-Barracuda-Encrypted: DHE-RSA-AES256-SHA
Received: from dhansak.collabora.co.uk (dhansak.collabora.co.uk
	[195.10.223.134])
	(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by spam.laptop.org (Spam Firewall) with ESMTP id DA34C91CE
	for <sugar@laptop.org>; Tue,  8 May 2007 10:43:19 -0400 (EDT)
Received: by dhansak.collabora.co.uk (Postfix, from userid 1014)
	id 6CFC430AF605; Tue,  8 May 2007 15:43:18 +0100 (BST)
Date: Tue, 8 May 2007 15:43:09 +0100
From: Simon McVittie <simon.mcvittie@collabora.co.uk>
To: sugar@laptop.org
X-ASG-Orig-Subj: [patch][connect-activity] Integrate with Presence Service
Message-ID: <20070508144309.GA23969@celebrin.pseudorandom.co.uk>
References: <20070504181622.GA28811@celebrin.pseudorandom.co.uk>
	<20070508102740.GQ5306@mild.rhydd.org>
	<20070508114400.GA5325@celebrin.pseudorandom.co.uk>
	<20070508120635.GA7062@celebrin.pseudorandom.co.uk>
MIME-Version: 1.0
In-Reply-To: <20070508120635.GA7062@celebrin.pseudorandom.co.uk>
User-Agent: Mutt/1.5.13 (2006-08-11)
X-Barracuda-Bayes: INNOCENT GLOBAL 0.0000 1.0000 -2.0210
X-Barracuda-Virus-Scanned: by Barracuda Spam Firewall at laptop.org
X-Barracuda-Spam-Score: -2.02
X-Barracuda-Spam-Status: No, SCORE=-2.02 using global scores of TAG_LEVEL=3.5
	QUARANTINE_LEVEL=1000.0 KILL_LEVEL=5.5 tests=
X-Barracuda-Spam-Report: Code version 3.1, rules version 3.1.16372
	Rule breakdown below
	pts rule name              description
	---- ----------------------
	--------------------------------------------------
Subject: [sugar] [patch][connect-activity] Integrate with Presence Service
X-BeenThere: sugar@laptop.org
X-Mailman-Version: 2.1.9
Precedence: list
List-Id: "Discussion of OLPC design,
	desktop platform and user experience" <sugar.laptop.org>
List-Unsubscribe: <http://mailman.laptop.org/mailman/listinfo/sugar>,
	<mailto:sugar-request@laptop.org?subject=unsubscribe>
List-Archive: <http://mailman.laptop.org/pipermail/sugar>
List-Post: <mailto:sugar@laptop.org>
List-Help: <mailto:sugar-request@laptop.org?subject=help>
List-Subscribe: <http://mailman.laptop.org/mailman/listinfo/sugar>,
	<mailto:sugar-request@laptop.org?subject=subscribe>
Content-Type: multipart/mixed; boundary="===============6636077842237694168=="
Mime-version: 1.0
Sender: sugar-bounces@laptop.org
Errors-To: sugar-bounces@laptop.org


--===============6636077842237694168==
Content-Type: multipart/signed; micalg=pgp-sha1;
	protocol="application/pgp-signature"; boundary="hHWLQfXTYDoKhP50"
Content-Disposition: inline


--hHWLQfXTYDoKhP50
Content-Type: multipart/mixed; boundary="MGYHOYXEY6WxJCY8"
Content-Disposition: inline


--MGYHOYXEY6WxJCY8
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline

Some more patches to the Connect activity. These make it a proper shared
activity.

--MGYHOYXEY6WxJCY8
Content-Type: text/x-diff; charset=us-ascii
Content-Disposition: attachment; filename="0007-gtkui.py-take-responsibility-for-linking-up-the-GLi.patch"
Content-Transfer-Encoding: quoted-printable

=46rom 684f3be93e064d6cd014e41d00df89b8c0092911 Mon Sep 17 00:00:00 2001
=46rom: Simon McVittie <simon.mcvittie@collabora.co.uk>
Date: Tue, 8 May 2007 15:12:12 +0100
Subject: [PATCH] gtkui.py: take responsibility for linking up the GLib main=
 loop to dbus-python

---
 gtkui.py |    3 ++-
 1 files changed, 2 insertions(+), 1 deletions(-)

diff --git a/gtkui.py b/gtkui.py
index 8dd6edd..9711099 100644
--- a/gtkui.py
+++ b/gtkui.py
@@ -3,6 +3,7 @@ import sys
 import logging
=20
 import dbus
+from dbus.mainloop.glib import DBusGMainLoop
 import gtk
 import telepathy
=20
@@ -92,5 +93,5 @@ def main():
         pass
=20
 if __name__ =3D=3D '__main__':
+    dbus_main_loop =3D DBusGMainLoop(set_as_default=3DTrue)
     main()
-
--=20
1.5.1.3


--MGYHOYXEY6WxJCY8
Content-Type: text/x-diff; charset=us-ascii
Content-Disposition: attachment; filename="0008-client.py-Clean-up-some-unused-code.-Move-responsib.patch"
Content-Transfer-Encoding: quoted-printable

=46rom ff890fe93a52fffc6df3b2d954d1959518c655ba Mon Sep 17 00:00:00 2001
=46rom: Simon McVittie <simon.mcvittie@collabora.co.uk>
Date: Tue, 8 May 2007 15:14:51 +0100
Subject: [PATCH] client.py: Clean up some unused code. Move responsibility =
for participant tracking into ConnectGame

---
 client.py |   33 +++------------------------------
 1 files changed, 3 insertions(+), 30 deletions(-)

diff --git a/client.py b/client.py
index 8496481..f625e61 100644
--- a/client.py
+++ b/client.py
@@ -25,20 +25,8 @@ PATH =3D "/org/freedesktop/Telepathy/Tube/Connect"
=20
 ROOM =3D "test@conference.olpc.collabora.co.uk"
=20
-dbus_main_loop =3D DBusGMainLoop(set_as_default=3DTrue)
-
-logging.basicConfig()
 _logger =3D logging.getLogger('connect-activity.client')
=20
-def print_dbus_message(msg):
-    print 'got %s' % (msg.__class__.__name__)
-    print '  sender: %r' % msg.get_sender()
-    print '  destination: %r' % msg.get_destination()
-    print '  path: %r' % msg.get_path()
-    print '  interface %r' % msg.get_interface()
-    print '  member %r' % msg.get_member()
-    print '  args: %r' % msg.get_args_list()
-
 def redraw(grid):
     """Utility function to force a redraw of a Gtk widget."""
     grid.window.invalidate_rect(grid.get_allocation(), False)
@@ -56,6 +44,9 @@ class ConnectGame(Object):
     def participant_change_cb(self, added, removed):
         # Initiator is player 1, other player is player 2.
=20
+        _logger.debug('adding participants: %r', added)
+        _logger.debug('removing participants: %r', removed)
+
         if self.player_id is None:
             if self.initiator =3D=3D self.tube.self_handle:
                 self.player_id =3D 1
@@ -154,9 +145,6 @@ class ConnectClient:
         self.conn =3D conn
         self.grid =3D grid
         self.game =3D None
-        self.tubes_self_handle =3D 0
-        self.pending_calls =3D {}
-        self.player_id =3D 0
=20
         event_widget.connect('key-press-event', self.key_press_cb)
=20
@@ -185,15 +173,11 @@ class ConnectClient:
         current, lp, rp =3D map(lambda x: map(int, x),
             text_chan[CHANNEL_INTERFACE_GROUP].GetAllMembers())
         print 'activity members: %r, %r, %r' % (current, lp, rp)
-        self.tubes_self_handle =3D text_chan[
-            CHANNEL_INTERFACE_GROUP].GetSelfHandle()
         tubes_chan =3D self.conn.request_channel(
             CHANNEL_TYPE_TUBES, HANDLE_TYPE_ROOM, handle,
             True)
         tubes_chan[CHANNEL_TYPE_TUBES].connect_to_signal('NewTube',
             self.new_tube_cb)
-        tubes_chan[CHANNEL_TYPE_TUBES].connect_to_signal('DBusNamesChanged=
',
-            self.dbus_names_changed_cb)
         # XXX: this is racy. When we have the Presence Service's
         # initiator/inviter semantics, we won't have this issue though
         tube =3D self.find_tube(tubes_chan)
@@ -213,17 +197,6 @@ class ConnectClient:
                 SERVICE, {})
             print 'found no tube; created tube %d' % id
=20
-    def dbus_names_changed_cb(self, tube_id, added, removed):
-        print 'names changed:'
-
-        if added:
-            added =3D tuple([(int(x[0]), str(x[1])) for x in added])
-            print '  added: %r' % added
-
-        if removed:
-            removed =3D tuple([int(x) for x in removed])
-            print '  removed: %r' % removed
-
     def find_tube(self, chan):
         "Find a D-Bus tube in a tubes channel that provides our service."
=20
--=20
1.5.1.3


--MGYHOYXEY6WxJCY8
Content-Type: text/x-diff; charset=us-ascii
Content-Disposition: attachment; filename="0009-activity.py-Hook-into-Presence-Service-rather-than.patch"
Content-Transfer-Encoding: quoted-printable

=46rom 099ca5a15aec89ba439abd44028840eac21dd233 Mon Sep 17 00:00:00 2001
=46rom: Simon McVittie <simon.mcvittie@collabora.co.uk>
Date: Tue, 8 May 2007 15:29:51 +0100
Subject: [PATCH] activity.py: Hook into Presence Service rather than using =
ConnectClient

---
 activity.py |  133 +++++++++++++++++++++++++++++++++++++++++++++++++++++++=
+--
 1 files changed, 128 insertions(+), 5 deletions(-)

diff --git a/activity.py b/activity.py
index 57fa836..dc2ca60 100644
--- a/activity.py
+++ b/activity.py
@@ -1,27 +1,150 @@
+import logging
+from gettext import gettext as _
=20
 import dbus
+import gtk
 import hippo
 import telepathy
+import telepathy.client
=20
-from sugar.activity.activity import Activity
+from sugar.activity.activity import Activity, ActivityToolbox
 from sugar.presence import presenceservice
+import sugar.logger
=20
 import gridwidget
 import client
+# will eventually be imported from telepathy.tubes or something
+from tubeconn import TubeConnection
+
+
+logger =3D logging.getLogger('connect-activity')
+
=20
 class ConnectActivity(Activity):
     def __init__(self, handle):
         Activity.__init__(self, handle)
=20
-        widget =3D gridwidget.GridWidget()
-        self.set_canvas(widget)
+        logger.debug('Starting Connect activity...')
+
+        self.set_title(_('Connect Activity'))
+
+        self.grid =3D gridwidget.GridWidget()
+        self.set_canvas(self.grid)
         self.show_all()
=20
         pservice =3D presenceservice.get_instance()
=20
         bus =3D dbus.Bus()
         name, path =3D pservice.get_preferred_connection()
-        conn =3D telepathy.client.Connection(name, path)
+        self.conn =3D telepathy.client.Connection(name, path)
+
+        self.game =3D None
+
+        toolbox =3D ActivityToolbox(self)
+        self.set_toolbox(toolbox)
+        toolbox.show()
+
+        self.connect('shared', self._shared_cb)
+
+        if self._shared_activity:
+            self.connect('joined', self._joined_cb)
+            if self.get_shared():
+                # oh, OK, we've already joined
+                self._joined_cb()
+
+        self.connect('key-press-event', self.key_press_cb)
+
+    def key_press_cb(self, widget, event):
+        if event.keyval in (gtk.keysyms.Escape, gtk.keysyms.q):
+            gtk.main_quit()
+
+        if self.game is not None:
+            self.game.key_press_event(widget, event)
+
+    def _shared_cb(self, activity):
+        logger.debug('My Connect activity was shared')
+        self._setup()
+
+        logger.debug('This is my activity: making a tube...')
+        id =3D self.tubes_chan[telepathy.CHANNEL_TYPE_TUBES].OfferTube(
+            telepathy.TUBE_TYPE_DBUS, client.SERVICE, {})
+
+    # FIXME: presence service should be tubes-aware and give us more help
+    # with this
+    def _setup(self):
+        pservice =3D presenceservice.get_instance()
+        # There are too many things called Activity.
+        ps_activity =3D pservice.get_activity(self.get_id())
+        bus_name, conn_path, channel_paths =3D ps_activity.get_channels()
+
+        # Work out what our room is called and whether we have Tubes alrea=
dy
+        room =3D None
+        tubes_chan =3D None
+        text_chan =3D None
+        for channel_path in channel_paths:
+            channel =3D telepathy.client.Channel(bus_name, channel_path)
+            htype, handle =3D channel.GetHandle()
+            if htype =3D=3D telepathy.HANDLE_TYPE_ROOM:
+                logger.debug('Found our room: it has handle#%d "%s"',
+                    handle, self.conn.InspectHandles(htype, [handle])[0])
+                room =3D handle
+                ctype =3D channel.GetChannelType()
+                if ctype =3D=3D telepathy.CHANNEL_TYPE_TUBES:
+                    logger.debug('Found our Tubes channel at %s', channel_=
path)
+                    tubes_chan =3D channel
+                elif ctype =3D=3D telepathy.CHANNEL_TYPE_TEXT:
+                    logger.debug('Found our Text channel at %s', channel_p=
ath)
+                    text_chan =3D channel
+
+        if room is None:
+            logger.error("Presence service didn't create a room")
+            return
+        if text_chan is None:
+            logger.error("Presence service didn't create a text channel")
+            return
+
+        # Make sure we have a Tubes channel - PS doesn't yet provide one
+        if tubes_chan is None:
+            logger.debug("Didn't find our Tubes channel, requesting one...=
")
+            tubes_chan =3D self.conn.request_channel(telepathy.CHANNEL_TYP=
E_TUBES,
+                telepathy.HANDLE_TYPE_ROOM, room, True)
+
+        self.tubes_chan =3D tubes_chan
+        self.text_chan =3D text_chan
+
+        tubes_chan[telepathy.CHANNEL_TYPE_TUBES].connect_to_signal('NewTub=
e',
+            self._new_tube_cb)
+
+    def _list_tubes_reply_cb(self, tubes):
+        for tube_info in tubes:
+            self._new_tube_cb(*tube_info)
+
+    def _list_tubes_error_cb(self, e):
+        logger.error('ListTubes() failed: %s', e)
+
+    def _joined_cb(self, activity):
+        if self.game is not None:
+            return
+
+        logger.debug('Joined an existing Connect game')
+        self._setup()
+
+        logger.debug('This is not my activity: waiting for a tube...')
+        self.tubes_chan[telepathy.CHANNEL_TYPE_TUBES].ListTubes(
+            reply_handler=3Dself._list_tubes_reply_cb,
+            error_handler=3Dself._list_tubes_error_cb)
+
+    def _new_tube_cb(self, id, initiator, type, service, params, state):
+        logger.debug('New tube: ID=3D%d initator=3D%d type=3D%d service=3D=
%s '
+                     'params=3D%r state=3D%d', id, initiator, type, servic=
e,
+                     params, state)
=20
-        client.ConnectClient(conn, self, widget)
+        if (self.game is None and type =3D=3D telepathy.TUBE_TYPE_DBUS and
+            service =3D=3D client.SERVICE):
+            if state =3D=3D telepathy.TUBE_STATE_LOCAL_PENDING:
+                self.tubes_chan[telepathy.CHANNEL_TYPE_TUBES].AcceptTube(i=
d)
=20
+            tube_conn =3D TubeConnection(self.conn,
+                self.tubes_chan[telepathy.CHANNEL_TYPE_TUBES],
+                id, group_iface=3Dself.text_chan[telepathy.CHANNEL_INTERFA=
CE_GROUP])
+            self.game =3D client.ConnectGame(tube_conn, self.grid, initiat=
or)
--=20
1.5.1.3


--MGYHOYXEY6WxJCY8
Content-Type: text/x-diff; charset=us-ascii
Content-Disposition: attachment; filename="0010-Move-ConnectGame-to-its-own-file-game.py-activity-n.patch"
Content-Transfer-Encoding: quoted-printable

=46rom 00d4df40086977506778b7c966ee612d934d71b6 Mon Sep 17 00:00:00 2001
=46rom: Simon McVittie <simon.mcvittie@collabora.co.uk>
Date: Tue, 8 May 2007 15:39:50 +0100
Subject: [PATCH] Move ConnectGame to its own file game.py; activity no long=
er uses client.py
(it's only still here for the benefit of gtkui)
---
 activity.py |    8 ++--
 client.py   |  122 +-------------------------------------------------------
 game.py     |  129 +++++++++++++++++++++++++++++++++++++++++++++++++++++++=
++++
 3 files changed, 134 insertions(+), 125 deletions(-)
 create mode 100644 game.py

diff --git a/activity.py b/activity.py
index dc2ca60..b786dbe 100644
--- a/activity.py
+++ b/activity.py
@@ -12,7 +12,7 @@ from sugar.presence import presenceservice
 import sugar.logger
=20
 import gridwidget
-import client
+from game import ConnectGame, SERVICE
 # will eventually be imported from telepathy.tubes or something
 from tubeconn import TubeConnection
=20
@@ -67,7 +67,7 @@ class ConnectActivity(Activity):
=20
         logger.debug('This is my activity: making a tube...')
         id =3D self.tubes_chan[telepathy.CHANNEL_TYPE_TUBES].OfferTube(
-            telepathy.TUBE_TYPE_DBUS, client.SERVICE, {})
+            telepathy.TUBE_TYPE_DBUS, SERVICE, {})
=20
     # FIXME: presence service should be tubes-aware and give us more help
     # with this
@@ -140,11 +140,11 @@ class ConnectActivity(Activity):
                      params, state)
=20
         if (self.game is None and type =3D=3D telepathy.TUBE_TYPE_DBUS and
-            service =3D=3D client.SERVICE):
+            service =3D=3D SERVICE):
             if state =3D=3D telepathy.TUBE_STATE_LOCAL_PENDING:
                 self.tubes_chan[telepathy.CHANNEL_TYPE_TUBES].AcceptTube(i=
d)
=20
             tube_conn =3D TubeConnection(self.conn,
                 self.tubes_chan[telepathy.CHANNEL_TYPE_TUBES],
                 id, group_iface=3Dself.text_chan[telepathy.CHANNEL_INTERFA=
CE_GROUP])
-            self.game =3D client.ConnectGame(tube_conn, self.grid, initiat=
or)
+            self.game =3D ConnectGame(tube_conn, self.grid, initiator)
diff --git a/client.py b/client.py
index f625e61..710e078 100644
--- a/client.py
+++ b/client.py
@@ -1,12 +1,8 @@
 import logging
-import pprint
=20
 import gtk
 import telepathy
=20
-from dbus import Interface
-from dbus.mainloop.glib import DBusGMainLoop
-from dbus.service import Object, method, signal
=20
 from telepathy.interfaces import CHANNEL_TYPE_TUBES, \
         CHANNEL_TYPE_TEXT, CONN_INTERFACE, CHANNEL_INTERFACE_GROUP
@@ -14,131 +10,15 @@ from telepathy.constants import TUBE_TYPE_DBUS, \
         TUBE_STATE_LOCAL_PENDING, TUBE_STATE_REMOTE_PENDING, TUBE_STATE_OP=
EN, \
         CONNECTION_STATUS_CONNECTED, HANDLE_TYPE_ROOM
=20
+from game import ConnectGame, SERVICE
 # will eventually be imported from telepathy.tubes or something
 from tubeconn import TubeConnection
=20
=20
-# XXX: I'm not convinced this is in the right namespace
-SERVICE =3D "org.freedesktop.Telepathy.Tube.Connect"
-IFACE =3D SERVICE
-PATH =3D "/org/freedesktop/Telepathy/Tube/Connect"
-
 ROOM =3D "test@conference.olpc.collabora.co.uk"
=20
 _logger =3D logging.getLogger('connect-activity.client')
=20
-def redraw(grid):
-    """Utility function to force a redraw of a Gtk widget."""
-    grid.window.invalidate_rect(grid.get_allocation(), False)
-
-class ConnectGame(Object):
-    def __init__(self, tube, grid, initiator):
-        super(ConnectGame, self).__init__(tube, PATH)
-        self.tube =3D tube
-        self.grid =3D grid
-        self.initiator =3D initiator
-        self.player_id =3D None
-
-        self.tube.watch_participants(self.participant_change_cb)
-
-    def participant_change_cb(self, added, removed):
-        # Initiator is player 1, other player is player 2.
-
-        _logger.debug('adding participants: %r', added)
-        _logger.debug('removing participants: %r', removed)
-
-        if self.player_id is None:
-            if self.initiator =3D=3D self.tube.self_handle:
-                self.player_id =3D 1
-            else:
-                opponent =3D self.tube.get_object(
-                    self.tube.participants[self.initiator], PATH)
-                self.opponent =3D Interface(opponent, IFACE)
-                self.opponent.Hello(reply_handler=3Dself.hello_cb,
-                    error_handler=3Dself.error_cb)
-                self.player_id =3D 2
-            self.tube.add_signal_receiver(self.insert_cb, 'Insert', IFACE,
-                path=3DPATH, sender_keyword=3D'sender')
-
-        print 'intiator: %d' % self.initiator
-        print 'self: %d' % self.tube.self_handle
-        print 'player ID: %d' % self.player_id
-
-    def hello_cb(self, success):
-        self.opponent.GetGrid(reply_handler=3Dself.get_grid_cb,
-            error_handler=3Dself.error_cb)
-
-    def get_grid_cb(self, grid):
-        self.grid.grid =3D grid
-        redraw(self.grid)
-
-    def error_cb(self, e):
-        _logger.error('Error connecting to opponent:\n%s', e)
-
-    @method(dbus_interface=3DIFACE, in_signature=3D'', out_signature=3D'b')
-    def Hello(self):
-        self.grid.selected_column =3D 3
-        redraw(self.grid)
-        # XXX: return player ID too, to allow for swapping who goes first =
in
-        # for second and later games
-        return True
-
-    @method(dbus_interface=3DIFACE, in_signature=3D'', out_signature=3D'aa=
n')
-    def GetGrid(self):
-        return self.grid.grid
-
-    @signal(dbus_interface=3DIFACE, signature=3D'n')
-    def Insert(self, column):
-        assert column >=3D 0
-        assert column < 7
-
-    def insert_cb(self, column, sender=3DNone):
-        _logger.debug('Insert(%d) from %s', column, sender)
-
-        if sender =3D=3D self.tube.participants[self.tube.self_handle]:
-            _logger.debug('Ignoring Insert signal from myself: %d', column)
-            return
-
-        if self.grid.insert(column, self.get_active_player()):
-            if self.get_active_player() =3D=3D self.player_id:
-                _logger.debug('It\'s my turn now')
-                # This should always be the case for 2 players, as we only=
 get
-                # this signal when the other player plays.
-                self.grid.selected_column =3D 3
-            redraw(self.grid)
-
-    def get_active_player(self):
-        count =3D {}
-
-        for row in self.grid.grid:
-            for player in row:
-                if player !=3D 0:
-                    count[player] =3D count.get(player, 0) + 1
-
-        if count.get(1, 0) > count.get(2, 0):
-            return 2
-        else:
-            return 1
-
-    def key_press_event(self, widget, event):
-        if self.grid.selected_column is None:
-            return
-
-        if event.keyval in (gtk.keysyms.Left,):
-            if self.grid.selected_column > 0:
-                self.grid.selected_column -=3D 1
-                redraw(self.grid)
-        elif event.keyval in (gtk.keysyms.Right,):
-            if self.grid.selected_column < 6:
-                self.grid.selected_column +=3D 1
-                redraw(self.grid)
-        elif event.keyval in (gtk.keysyms.Down, gtk.keysyms.space):
-            if self.grid.insert(self.grid.selected_column, self.player_id):
-                _logger.debug('Inserting at %d', self.grid.selected_column)
-                redraw(self.grid)
-                self.Insert(self.grid.selected_column)
-                self.grid.selected_column =3D None
-
=20
 class ConnectClient:
     def __init__(self, conn, event_widget, grid):
diff --git a/game.py b/game.py
new file mode 100644
index 0000000..3ed9e36
--- /dev/null
+++ b/game.py
@@ -0,0 +1,129 @@
+import logging
+
+import gtk
+
+from dbus import Interface
+from dbus.service import Object, method, signal
+
+
+# XXX: I'm not convinced this is in the right namespace
+SERVICE =3D "org.freedesktop.Telepathy.Tube.Connect"
+IFACE =3D SERVICE
+PATH =3D "/org/freedesktop/Telepathy/Tube/Connect"
+
+
+_logger =3D logging.getLogger('connect-activity.game')
+
+
+def redraw(grid):
+    """Utility function to force a redraw of a Gtk widget."""
+    grid.window.invalidate_rect(grid.get_allocation(), False)
+
+
+class ConnectGame(Object):
+    def __init__(self, tube, grid, initiator):
+        super(ConnectGame, self).__init__(tube, PATH)
+        self.tube =3D tube
+        self.grid =3D grid
+        self.initiator =3D initiator
+        self.player_id =3D None
+
+        self.tube.watch_participants(self.participant_change_cb)
+
+    def participant_change_cb(self, added, removed):
+        # Initiator is player 1, other player is player 2.
+
+        _logger.debug('adding participants: %r', added)
+        _logger.debug('removing participants: %r', removed)
+
+        if self.player_id is None:
+            if self.initiator =3D=3D self.tube.self_handle:
+                self.player_id =3D 1
+            else:
+                opponent =3D self.tube.get_object(
+                    self.tube.participants[self.initiator], PATH)
+                self.opponent =3D Interface(opponent, IFACE)
+                self.opponent.Hello(reply_handler=3Dself.hello_cb,
+                    error_handler=3Dself.error_cb)
+                self.player_id =3D 2
+            self.tube.add_signal_receiver(self.insert_cb, 'Insert', IFACE,
+                path=3DPATH, sender_keyword=3D'sender')
+
+        print 'intiator: %d' % self.initiator
+        print 'self: %d' % self.tube.self_handle
+        print 'player ID: %d' % self.player_id
+
+    def hello_cb(self, success):
+        self.opponent.GetGrid(reply_handler=3Dself.get_grid_cb,
+            error_handler=3Dself.error_cb)
+
+    def get_grid_cb(self, grid):
+        self.grid.grid =3D grid
+        redraw(self.grid)
+
+    def error_cb(self, e):
+        _logger.error('Error connecting to opponent:\n%s', e)
+
+    @method(dbus_interface=3DIFACE, in_signature=3D'', out_signature=3D'b')
+    def Hello(self):
+        self.grid.selected_column =3D 3
+        redraw(self.grid)
+        # XXX: return player ID too, to allow for swapping who goes first =
in
+        # for second and later games
+        return True
+
+    @method(dbus_interface=3DIFACE, in_signature=3D'', out_signature=3D'aa=
n')
+    def GetGrid(self):
+        return self.grid.grid
+
+    @signal(dbus_interface=3DIFACE, signature=3D'n')
+    def Insert(self, column):
+        assert column >=3D 0
+        assert column < 7
+
+    def insert_cb(self, column, sender=3DNone):
+        _logger.debug('Insert(%d) from %s', column, sender)
+
+        if sender =3D=3D self.tube.participants[self.tube.self_handle]:
+            _logger.debug('Ignoring Insert signal from myself: %d', column)
+            return
+
+        if self.grid.insert(column, self.get_active_player()):
+            if self.get_active_player() =3D=3D self.player_id:
+                _logger.debug('It\'s my turn now')
+                # This should always be the case for 2 players, as we only=
 get
+                # this signal when the other player plays.
+                self.grid.selected_column =3D 3
+            redraw(self.grid)
+
+    def get_active_player(self):
+        count =3D {}
+
+        for row in self.grid.grid:
+            for player in row:
+                if player !=3D 0:
+                    count[player] =3D count.get(player, 0) + 1
+
+        if count.get(1, 0) > count.get(2, 0):
+            return 2
+        else:
+            return 1
+
+    def key_press_event(self, widget, event):
+        if self.grid.selected_column is None:
+            return
+
+        if event.keyval in (gtk.keysyms.Left,):
+            if self.grid.selected_column > 0:
+                self.grid.selected_column -=3D 1
+                redraw(self.grid)
+        elif event.keyval in (gtk.keysyms.Right,):
+            if self.grid.selected_column < 6:
+                self.grid.selected_column +=3D 1
+                redraw(self.grid)
+        elif event.keyval in (gtk.keysyms.Down, gtk.keysyms.space):
+            if self.grid.insert(self.grid.selected_column, self.player_id):
+                _logger.debug('Inserting at %d', self.grid.selected_column)
+                redraw(self.grid)
+                self.Insert(self.grid.selected_column)
+                self.grid.selected_column =3D None
--=20
1.5.1.3


--MGYHOYXEY6WxJCY8--

--hHWLQfXTYDoKhP50
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: Digital signature
Content-Disposition: inline

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.6 (GNU/Linux)
Comment: OpenPGP key: http://www.pseudorandom.co.uk/2003/contact/ or pgp.net

iD8DBQFGQIx9WSc8zVUw7HYRAnHuAJ9GwEMs6SFUHxKXvY/9FmcV8XK+wgCgmDgy
bP3LRAu5AI5XweYSJeeeiwM=
=JjoE
-----END PGP SIGNATURE-----

--hHWLQfXTYDoKhP50--

--===============6636077842237694168==
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

_______________________________________________
Sugar mailing list
Sugar@laptop.org
http://mailman.laptop.org/mailman/listinfo/sugar

--===============6636077842237694168==--

