From perl6-all-return-81087-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu May  3 22:48:41 2007
Return-Path: <perl6-all-return-81087-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l442meqD010330
	for <ktwarwic@flax9.uwaterloo.ca>; Thu, 3 May 2007 22:48:40 -0400
Received: (qmail 18143 invoked by uid 514); 4 May 2007 02:48:37 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 18138 invoked from network); 4 May 2007 02:48:37 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DKIM_SIGNED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: domain of alek.storm@gmail.com designates 66.249.92.170 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=ZzxachqI2IlDkoCkBr//vBta/F4zAffhOupI2Icm1ZhKNi2gapdQn+MoJhSWFex5yR2ctplKr64noTgfDL9aa3My8JloTlW563ZV/cwWB0BTPG5Tv+Q6s7rPMWaCOO6xgKeJ2QASYF0iS712amJkI4mkI5jdoC1xX/pLh7KTnKs=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=ko9Cmr4mUebkNj6wJKVb9sP1SkZMoHM8unv/ZY6UA14x8cEgoXVPYs23Z9CYK4G6ThRoS/uC90jYgFkBuG1CSPJWYLvj6/ZVEz2799sEGUNfB3s8y++oOFjtO/ZBEeMnTpymopBjy679ZjsJ/zDGyF3e8ddJWt94Ut0ZvT3BYHs=
Message-ID: <189adbd0705031947l41c48a2cq143a7301b20899cf@mail.gmail.com>
Date: Thu, 3 May 2007 21:47:07 -0500
From: "Alek Storm" <alek.storm@gmail.com>
To: perl6-internals@perl.org
Subject: Re: [perl #42865] [BUG] There's no way to set a vtable function with a Sub at runtime
Cc: bugs-bitbucket@netlabs.develooper.com
In-Reply-To: <rt-3.6.HEAD-15879-1178151032-48.42865-72-0@perl.org>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_21018_15351715.1178246827032"
References: <RT-Ticket-42865@perl.org>
	 <B6A75271-9DC2-4769-9084-9001D6313798@diephouse.com>
	 <rt-3.6.HEAD-15879-1178151032-48.42865-72-0@perl.org>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,HTML_MESSAGE,SPF_PASS

------=_Part_21018_15351715.1178246827032
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

On 5/2/07, via RT Matt Diephouse <parrotbug-followup@parrotcode.org > wrote:
>
> There's no real way to set a vtable function at runtime. It's
> possible to use the PIR compiler to eval a new function, but there's
> no way to take an existing sub and add it as a vtable function[1].
>
> Before :vtable, this operation simply meant adding the sub to the new
> namespace under the right name. But since that's going away, we need
> a new way to do things.
>
> I suspect we need some sort of set_vtable opcode.
>
>     set_vtable ['Foo'; 'Bar'], 'get_string', $P0


I'm almost done with the PDD15 implementation of vtable overriding.  It adds
the 'add_vtable_method' PCCMETHOD to Class, but also adds methods to the
vtable in 'add_method', if they have the :vtable pragma set, like the old
object system.  I kept this capability for compatibility, but I'd love to
remove it, along with the :vtable pragma.  I'm very against adding a new
opcode, since this is exactly what PCCMETHODs, and, eventually, PMC roles
are designed for, though the sentiment is the same.


> Maybe there should be set_root_vtable and set_hll_vtable variants to
> go along with to match the set_*global opcodes.
>
> I'm not sure how this should interact with PMCs or whether there
> should be get_*vtable opcodes. It should be easy enough to return a
> Bound_NCI PMC if the user requests a vtable function from a PMC.


How PMCs interact with vtable methods in PIR is dependent on the object
system used.  The default (PDD15) object system utilizes vtable overriding,
but other object systems have different semantics.  This means, while PIR
code can wrap PMCs in their own object system, we can't make all PMCs
object-aware.  If you want to override vtable methods for built-in PMCs such
as Integer, you need to implement PMC subclassing for PDD15 ;)

-- 
Alek Storm

------=_Part_21018_15351715.1178246827032--

