From beginners-return-91992-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu May 31 05:18:59 2007
Return-Path: <beginners-return-91992-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4V9IwhB026035
	for <ktwarwic@flax9.uwaterloo.ca>; Thu, 31 May 2007 05:18:59 -0400
Received: (qmail 3596 invoked by uid 514); 31 May 2007 09:18:48 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 3587 invoked from network); 31 May 2007 09:18:48 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 31 May 2007 09:18:48 -0000
Received: (qmail 3165 invoked by uid 225); 31 May 2007 09:18:48 -0000
Delivered-To: beginners@perl.org
Received: (qmail 3160 invoked by alias); 31 May 2007 09:18:47 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,HTML_MESSAGE,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of dunric29a@gmail.com designates 64.233.166.177 as permitted sender)
Received: from py-out-1112.google.com (HELO py-out-1112.google.com) (64.233.166.177)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 31 May 2007 02:18:05 -0700
Received: by py-out-1112.google.com with SMTP id f47so193240pye
        for <beginners@perl.org>; Thu, 31 May 2007 02:18:00 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=bUnhCQusTs3RGqHT8tG00iNNx15WKKBcqjERXomp7uqmBuvS6zfptYfHhlHX57ogaVFXkQK6x3xyKDBQTc1UyIG0nZQJLqixwAOGo+CuQYPqmQ7g7F+Bn+sEBEwKAKnWeb8iCCqMTR8A+6Vgdc43NFDvD+nbkYMOI/t60jwSArU=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=esZDgA9TM+cPdXWJU83Hx5Vl1KUzdBrVrADOfIULZx5HlDBICKZ1jC3Ls2f5OTzsgCEn0S9tpdibwpIAhkS+X2+oT7Lt15c0B9m/0Ve6v2T8l3H0IP/Eqw1LipVCpvy1RQ5KgrGz4v2SeDkv7x8e/+bj223rQi2H3kYIh8wU1SQ=
Received: by 10.64.10.2 with SMTP id 2mr615337qbj.1180603080657;
        Thu, 31 May 2007 02:18:00 -0700 (PDT)
Received: by 10.67.101.9 with HTTP; Thu, 31 May 2007 02:18:00 -0700 (PDT)
Message-ID: <ecf3c6dc0705310218s450bb4f3ja1f9236ad6600898@mail.gmail.com>
Date: Thu, 31 May 2007 11:18:00 +0200
From: "David Unric" <dunric29a@gmail.com>
To: "Chas Owens" <chas.owens@gmail.com>
Subject: Re: Arrow dereference operator question
Cc: beginners@perl.org
In-Reply-To: <58ce48dc0705310013y44bc92a6j9bed592b384d4ce1@mail.gmail.com>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_1787_25817834.1180603080572"
References: <ecf3c6dc0705301143w211ec8dfpef3d4bdeb7d4b0dd@mail.gmail.com>
	 <ecf3c6dc0705302355v96c7b41vf94b050f0b70eaaa@mail.gmail.com>
	 <58ce48dc0705310013y44bc92a6j9bed592b384d4ce1@mail.gmail.com>

------=_Part_1787_25817834.1180603080572
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

I did suspected it would have something to do with the difference between
array and list contexts.
Your analysis seems to be correct.

Thank you for solving this puzzle :)

Regards

On 5/31/07, Chas Owens <chas.owens@gmail.com> wrote:
>
> On 5/31/07, David Unric <dunric29a@gmail.com> wrote:
> > Based on perlref documentation arrow operator between brackets
> subscripts
> > may be omitted so the following code is valid:
> >
> > @array = ( [1, 2], [3, 4] );
> > $element = $array[0][0];    #  shorthand for  $element = $array[0]->[0]
> >
> >
> > Could somebody explain why it causes syntax error when the above rule is
> > applied to returned value of a subroutine ?
> >
> > sub mysub {
> >     @array = ( [1, 2], [3, 4] );
> >
> >     return @array;
> > }
> >
> > $element = (&mysub)[0][0];   # $elem = (&mysub)[0]->[0] is valid
> > ------------------------------
> > syntax error at testarr.pl line 7, near "]["
> >
>
> My best guess is that the problem here is that (mysub())* is a list
> not an array.  Lists are not multidimensional.  Try
>
> my $element = ([1, 2], [3, 4])[0][0];
>
> Notice how it gets the same error?
>
> The simple solution is to use the arrow, or have the sub return an
> arrayref.  Here are some ways to do it:
>
> #!/usr/bin/perl
>
> use strict;
> use warnings;
>
> sub list {
>         my @array = ( [1, 2], [3, 4] );
>         return @array;
> }
>
> sub aref {
>         my @array = ( [1, 2], [3, 4] );
>         return \@array;
> }
>
> print (
>         (list())[0]->[0], "\n",
>         "${[list()]}[0][1]\n",
>         "${aref()}[1][0]\n",
>         (aref())->[1][1], "\n"
> );
>
>
>
> * don't use &mysub unless you know why you are doing it, use mysub()
> instead
>

------=_Part_1787_25817834.1180603080572--

