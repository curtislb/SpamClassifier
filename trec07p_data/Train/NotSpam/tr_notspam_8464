From sugar-bounces@laptop.org  Tue May  8 08:06:50 2007
Return-Path: <sugar-bounces@laptop.org>
Received: from pedal.laptop.org (pedal.laptop.org [18.85.2.148])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l48C6nqD014680
	for <ktwarwic@speedy.uwaterloo.ca>; Tue, 8 May 2007 08:06:49 -0400
Received: from pedal.laptop.org (localhost [127.0.0.1])
	by pedal.laptop.org (Postfix) with ESMTP id A8CA84F695;
	Tue,  8 May 2007 08:06:37 -0400 (EDT)
X-Original-To: sugar@laptop.org
Delivered-To: sugar@laptop.org
Received: from spam.laptop.org (spam.laptop.org [18.85.46.23])
	by pedal.laptop.org (Postfix) with ESMTP id D89684F695
	for <sugar@laptop.org>; Tue,  8 May 2007 08:06:36 -0400 (EDT)
X-ASG-Debug-ID: 1178626005-386700150000-3Xmyjt
X-Barracuda-URL: http://18.85.46.23:8000/cgi-bin/mark.cgi
X-Barracuda-Connect: dhansak.collabora.co.uk[195.10.223.134]
X-Barracuda-Start-Time: 1178626005
X-Barracuda-Encrypted: DHE-RSA-AES256-SHA
Received: from dhansak.collabora.co.uk (dhansak.collabora.co.uk
	[195.10.223.134])
	(using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by spam.laptop.org (Spam Firewall) with ESMTP id A5FB691C1
	for <sugar@laptop.org>; Tue,  8 May 2007 08:06:45 -0400 (EDT)
Received: by dhansak.collabora.co.uk (Postfix, from userid 1014)
	id B49A930AF605; Tue,  8 May 2007 13:06:44 +0100 (BST)
Date: Tue, 8 May 2007 13:06:35 +0100
From: Simon McVittie <simon.mcvittie@collabora.co.uk>
To: sugar@laptop.org
X-ASG-Orig-Subj: Re: [sugar] [patch][connect-activity] Add Tubes connection
	helper
Message-ID: <20070508120635.GA7062@celebrin.pseudorandom.co.uk>
References: <20070504181622.GA28811@celebrin.pseudorandom.co.uk>
	<20070508102740.GQ5306@mild.rhydd.org>
	<20070508114400.GA5325@celebrin.pseudorandom.co.uk>
MIME-Version: 1.0
In-Reply-To: <20070508114400.GA5325@celebrin.pseudorandom.co.uk>
User-Agent: Mutt/1.5.13 (2006-08-11)
X-Barracuda-Bayes: INNOCENT GLOBAL 0.0000 1.0000 -2.0210
X-Barracuda-Virus-Scanned: by Barracuda Spam Firewall at laptop.org
X-Barracuda-Spam-Score: -0.97
X-Barracuda-Spam-Status: No, SCORE=-0.97 using global scores of TAG_LEVEL=3.5
	QUARANTINE_LEVEL=1000.0 KILL_LEVEL=5.5 tests=BSF_RULE_7582B
X-Barracuda-Spam-Report: Code version 3.1, rules version 3.1.16363
	Rule breakdown below
	pts rule name              description
	---- ----------------------
	--------------------------------------------------
	1.05 BSF_RULE_7582B         BODY: Custom Rule 7582B
Subject: Re: [sugar] [patch][connect-activity] Add Tubes connection helper
X-BeenThere: sugar@laptop.org
X-Mailman-Version: 2.1.9
Precedence: list
List-Id: "Discussion of OLPC design,
	desktop platform and user experience" <sugar.laptop.org>
List-Unsubscribe: <http://mailman.laptop.org/mailman/listinfo/sugar>,
	<mailto:sugar-request@laptop.org?subject=unsubscribe>
List-Archive: <http://mailman.laptop.org/pipermail/sugar>
List-Post: <mailto:sugar@laptop.org>
List-Help: <mailto:sugar-request@laptop.org?subject=help>
List-Subscribe: <http://mailman.laptop.org/mailman/listinfo/sugar>,
	<mailto:sugar-request@laptop.org?subject=subscribe>
Content-Type: multipart/mixed; boundary="===============1946068952546746331=="
Mime-version: 1.0
Sender: sugar-bounces@laptop.org
Errors-To: sugar-bounces@laptop.org


--===============1946068952546746331==
Content-Type: multipart/signed; micalg=pgp-sha1;
	protocol="application/pgp-signature"; boundary="QTprm0S8XgL7H0Dt"
Content-Disposition: inline


--QTprm0S8XgL7H0Dt
Content-Type: multipart/mixed; boundary="azLHFNyN32YCQGCU"
Content-Disposition: inline


--azLHFNyN32YCQGCU
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline

More patches for review: these add a TubesConnection helper, which I'll
eventually move into telepathy-python.

Simon

--azLHFNyN32YCQGCU
Content-Type: text/x-diff; charset=us-ascii
Content-Disposition: attachment; filename="0004-gtkui.py-Configure-logging-to-show-all-messages.patch"
Content-Transfer-Encoding: quoted-printable

=46rom 3aba4b1d28757591795f07284474082acddde242 Mon Sep 17 00:00:00 2001
=46rom: Simon McVittie <simon.mcvittie@collabora.co.uk>
Date: Mon, 7 May 2007 14:54:57 +0100
Subject: [PATCH] gtkui.py: Configure logging to show all messages

---
 gtkui.py |    6 ++++++
 1 files changed, 6 insertions(+), 0 deletions(-)

diff --git a/gtkui.py b/gtkui.py
index 27e950a..8dd6edd 100644
--- a/gtkui.py
+++ b/gtkui.py
@@ -1,5 +1,6 @@
=20
 import sys
+import logging
=20
 import dbus
 import gtk
@@ -8,6 +9,11 @@ import telepathy
 import gridwidget
 import client
=20
+
+logging.basicConfig()
+logging.getLogger().setLevel(1)
+
+
 def decode(x, sig):
     # XXX: dbus-python ought to do most of the work for this
     if sig =3D=3D 'b':
--=20
1.5.1.3


--azLHFNyN32YCQGCU
Content-Type: text/x-diff; charset=us-ascii
Content-Disposition: attachment; filename="0005-tubeconn.py-Add-a-prototype-Tubes-connection-helper.patch"
Content-Transfer-Encoding: quoted-printable

=46rom 56c8ceeb2c9e0d4ab938d57df30c4b814fb490f6 Mon Sep 17 00:00:00 2001
=46rom: Simon McVittie <simon.mcvittie@collabora.co.uk>
Date: Mon, 7 May 2007 14:56:01 +0100
Subject: [PATCH] tubeconn.py: Add a prototype Tubes connection helper, for =
eventual inclusion in telepathy-python

---
 tubeconn.py |  104 +++++++++++++++++++++++++++++++++++++++++++++++++++++++=
++++
 1 files changed, 104 insertions(+), 0 deletions(-)
 create mode 100644 tubeconn.py

diff --git a/tubeconn.py b/tubeconn.py
new file mode 100644
index 0000000..0b65056
--- /dev/null
+++ b/tubeconn.py
@@ -0,0 +1,104 @@
+# This should eventually land in telepathy-python, so has the same license:
+
+# Copyright (C) 2007 Collabora Ltd. <http://www.collabora.co.uk/>
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU Lesser General Public License as published
+# by the Free Software Foundation; either version 2.1 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Lesser General Public License for more details.
+#
+# You should have received a copy of the GNU Lesser General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+
+
+__all__ =3D ('TubeConnection',)
+__docformat__ =3D 'reStructuredText'
+
+
+import logging
+try:
+    set()
+except NameError:
+    from sets import Set as set
+
+from dbus import Array
+from dbus.connection import Connection
+
+
+logger =3D logging.getLogger('telepathy.tubeconn')
+
+
+class TubeConnection(Connection):
+
+    def __new__(cls, conn, tubes_iface, tube_id, address=3DNone,
+                group_iface=3DNone, mainloop=3DNone):
+        if address is None:
+            address =3D tubes_iface.GetDBusServerAddress(tube_id)
+        self =3D super(TubeConnection, cls).__new__(cls, address,
+                                                  mainloop=3Dmainloop)
+
+        self._tubes_iface =3D tubes_iface
+        self.tube_id =3D tube_id
+        self.participants =3D {}
+        self._mapping_watches =3D []
+
+        if group_iface is None:
+            method =3D conn.GetSelfHandle
+        else:
+            method =3D group_iface.GetSelfHandle
+        method(reply_handler=3Dself._on_get_self_handle_reply,
+               error_handler=3Dself._on_get_self_handle_error)
+
+        return self
+
+    def _on_get_self_handle_reply(self, handle):
+        self.self_handle =3D handle
+        self._tubes_iface.GetDBusNames(self.tube_id,
+                reply_handler=3Dself._on_get_dbus_names_reply,
+                error_handler=3Dself._on_get_dbus_names_error)
+        match =3D self._tubes_iface.connect_to_signal('DBusNamesChanged',
+                self._on_dbus_names_changed)
+        self._dbus_names_changed_match =3D match
+
+    def _on_get_self_handle_error(self, e):
+        logging.basicConfig()
+        logger.error('GetSelfHandle failed: %s', e)
+
+    def close(self):
+        self._dbus_names_changed_match.remove()
+        super(TubeConnection, self).close()
+
+    def _on_get_dbus_names_reply(self, names):
+        self._on_dbus_names_changed(self.tube_id, names, ())
+
+    def _on_get_dbus_names_error(self, e):
+        logging.basicConfig()
+        logger.error('GetDBusNames failed: %s', e)
+
+    def _on_dbus_names_changed(self, tube_id, added, removed):
+        if tube_id =3D=3D self.tube_id:
+            for handle, bus_name in added:
+                if handle =3D=3D self.self_handle:
+                    # I've just joined - set my unique name
+                    self.set_unique_name(bus_name)
+                self.participants[handle] =3D bus_name
+            for handle in removed:
+                self.participants.pop(handle, None)
+            for callback in self._mapping_watches:
+                callback(added, removed)
+
+    def watch_participants(self, callback):
+        self._mapping_watches.append(callback)
+        if self.participants:
+            # GetDBusNames already returned: fake a participant add event
+            # immediately
+            added =3D []
+            for k, v in self.participants.iteritems():
+                added.append((k, v))
+            callback(added, [])
--=20
1.5.1.3


--azLHFNyN32YCQGCU
Content-Type: text/x-diff; charset=us-ascii
Content-Disposition: attachment; filename="0006-client.py-Use-TubeConnection.-Move-all-game-code-to.patch"
Content-Transfer-Encoding: quoted-printable

=46rom 38ef3e74e2ad624507f7a767e523bfe802b302e5 Mon Sep 17 00:00:00 2001
=46rom: Simon McVittie <simon.mcvittie@collabora.co.uk>
Date: Mon, 7 May 2007 14:57:19 +0100
Subject: [PATCH] client.py: Use TubeConnection. Move all game code to Conne=
ctGame

---
 client.py |  106 +++++++++++++++++++++++++++++++++------------------------=
----
 1 files changed, 57 insertions(+), 49 deletions(-)

diff --git a/client.py b/client.py
index 9f9cfa0..8496481 100644
--- a/client.py
+++ b/client.py
@@ -5,7 +5,6 @@ import gtk
 import telepathy
=20
 from dbus import Interface
-from dbus.connection import Connection
 from dbus.mainloop.glib import DBusGMainLoop
 from dbus.service import Object, method, signal
=20
@@ -15,6 +14,9 @@ from telepathy.constants import TUBE_TYPE_DBUS, \
         TUBE_STATE_LOCAL_PENDING, TUBE_STATE_REMOTE_PENDING, TUBE_STATE_OP=
EN, \
         CONNECTION_STATUS_CONNECTED, HANDLE_TYPE_ROOM
=20
+# will eventually be imported from telepathy.tubes or something
+from tubeconn import TubeConnection
+
=20
 # XXX: I'm not convinced this is in the right namespace
 SERVICE =3D "org.freedesktop.Telepathy.Tube.Connect"
@@ -42,31 +44,33 @@ def redraw(grid):
     grid.window.invalidate_rect(grid.get_allocation(), False)
=20
 class ConnectGame(Object):
-    def __init__(self, tube, grid, self_handle, initiator, dbus_names):
+    def __init__(self, tube, grid, initiator):
         super(ConnectGame, self).__init__(tube, PATH)
         self.tube =3D tube
         self.grid =3D grid
+        self.initiator =3D initiator
+        self.player_id =3D None
=20
-        # Initiator is player 1, other player is player 2.
+        self.tube.watch_participants(self.participant_change_cb)
=20
-        self.self_handle =3D self_handle
-        self.initiator =3D initiator
+    def participant_change_cb(self, added, removed):
+        # Initiator is player 1, other player is player 2.
=20
-        if initiator =3D=3D self_handle:
-            self.player_id =3D 1
-        else:
-            opponent =3D self.tube.get_object(dbus_names[initiator], PATH)
-            self.opponent =3D Interface(opponent, IFACE)
-            self.opponent.Hello(reply_handler=3Dself.hello_cb,
-                error_handler=3Dself.error_cb)
-            self.player_id =3D 2
-
-        # XXX: care about signal sender
-        self.tube.add_signal_receiver(self.insert_cb, 'Insert', IFACE,
-            path=3DPATH)
-
-        print 'intiator: %d' % initiator
-        print 'self: %d' % self.self_handle
+        if self.player_id is None:
+            if self.initiator =3D=3D self.tube.self_handle:
+                self.player_id =3D 1
+            else:
+                opponent =3D self.tube.get_object(
+                    self.tube.participants[self.initiator], PATH)
+                self.opponent =3D Interface(opponent, IFACE)
+                self.opponent.Hello(reply_handler=3Dself.hello_cb,
+                    error_handler=3Dself.error_cb)
+                self.player_id =3D 2
+            self.tube.add_signal_receiver(self.insert_cb, 'Insert', IFACE,
+                path=3DPATH, sender_keyword=3D'sender')
+
+        print 'intiator: %d' % self.initiator
+        print 'self: %d' % self.tube.self_handle
         print 'player ID: %d' % self.player_id
=20
     def hello_cb(self, success):
@@ -97,11 +101,16 @@ class ConnectGame(Object):
         assert column >=3D 0
         assert column < 7
=20
-    def insert_cb(self, column):
-        #print 'Insert: %r' % args
+    def insert_cb(self, column, sender=3DNone):
+        _logger.debug('Insert(%d) from %s', column, sender)
+
+        if sender =3D=3D self.tube.participants[self.tube.self_handle]:
+            _logger.debug('Ignoring Insert signal from myself: %d', column)
+            return
=20
         if self.grid.insert(column, self.get_active_player()):
             if self.get_active_player() =3D=3D self.player_id:
+                _logger.debug('It\'s my turn now')
                 # This should always be the case for 2 players, as we only=
 get
                 # this signal when the other player plays.
                 self.grid.selected_column =3D 3
@@ -120,6 +129,25 @@ class ConnectGame(Object):
         else:
             return 1
=20
+    def key_press_event(self, widget, event):
+        if self.grid.selected_column is None:
+            return
+
+        if event.keyval in (gtk.keysyms.Left,):
+            if self.grid.selected_column > 0:
+                self.grid.selected_column -=3D 1
+                redraw(self.grid)
+        elif event.keyval in (gtk.keysyms.Right,):
+            if self.grid.selected_column < 6:
+                self.grid.selected_column +=3D 1
+                redraw(self.grid)
+        elif event.keyval in (gtk.keysyms.Down, gtk.keysyms.space):
+            if self.grid.insert(self.grid.selected_column, self.player_id):
+                _logger.debug('Inserting at %d', self.grid.selected_column)
+                redraw(self.grid)
+                self.Insert(self.grid.selected_column)
+                self.grid.selected_column =3D None
+
=20
 class ConnectClient:
     def __init__(self, conn, event_widget, grid):
@@ -142,22 +170,8 @@ class ConnectClient:
         if event.keyval in (gtk.keysyms.Escape, gtk.keysyms.q):
             gtk.main_quit()
=20
-        if self.grid.selected_column is None:
-            return
-
-        if event.keyval in (gtk.keysyms.Left,):
-            if self.grid.selected_column > 0:
-                self.grid.selected_column -=3D 1
-                redraw(self.grid)
-        elif event.keyval in (gtk.keysyms.Right,):
-            if self.grid.selected_column < 6:
-                self.grid.selected_column +=3D 1
-                redraw(self.grid)
-        elif event.keyval in (gtk.keysyms.Down, gtk.keysyms.space):
-            if self.grid.insert(self.grid.selected_column, self.player_id):
-                redraw(self.grid)
-                self.game.Insert(self.grid.selected_column)
-                self.grid.selected_column =3D None
+        if self.game is not None:
+            self.game.key_press_event(widget, event)
=20
     def status_changed_cb(self, status, reason):
         if status =3D=3D CONNECTION_STATUS_CONNECTED:
@@ -180,8 +194,8 @@ class ConnectClient:
             self.new_tube_cb)
         tubes_chan[CHANNEL_TYPE_TUBES].connect_to_signal('DBusNamesChanged=
',
             self.dbus_names_changed_cb)
-        # XXX: this is racy
-        # XXX: try all tubes and use the first one where Hello () -> True
+        # XXX: this is racy. When we have the Presence Service's
+        # initiator/inviter semantics, we won't have this issue though
         tube =3D self.find_tube(tubes_chan)
         self.text_chan =3D text_chan
         self.tubes_chan =3D tubes_chan
@@ -222,17 +236,11 @@ class ConnectClient:
=20
     def use_tube(self, id, initiator):
         print 'using tube %d' % id
-        addr =3D self.tubes_chan[CHANNEL_TYPE_TUBES].GetDBusServerAddress(=
id)
-        assert addr
-        self.dbus_names =3D dict(
-            self.tubes_chan[CHANNEL_TYPE_TUBES].GetDBusNames(id))
-        print 'names:', pprint.pformat(list(self.dbus_names))
-        assert self.tubes_self_handle in self.dbus_names
=20
-        conn =3D Connection(addr)
+        conn =3D TubeConnection(self.conn, self.tubes_chan[CHANNEL_TYPE_TU=
BES],
+            id, group_iface=3Dself.text_chan[CHANNEL_INTERFACE_GROUP])
=20
-        self.game =3D ConnectGame(conn, self.grid, self.tubes_self_handle,
-            initiator, self.dbus_names)
+        self.game =3D ConnectGame(conn, self.grid, initiator)
=20
     def new_tube_cb(self, id, initiator, type, service, parameters, state):
         print 'new tube: %r' % (
--=20
1.5.1.3


--azLHFNyN32YCQGCU--

--QTprm0S8XgL7H0Dt
Content-Type: application/pgp-signature; name="signature.asc"
Content-Description: Digital signature
Content-Disposition: inline

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.6 (GNU/Linux)
Comment: OpenPGP key: http://www.pseudorandom.co.uk/2003/contact/ or pgp.net

iD8DBQFGQGfLWSc8zVUw7HYRAuJLAJ9Ia7cCM4+Unv8fQuSgBX/O+BbSfACdHhUd
jNhZyZIYTE6G6mnzUrnR45A=
=YiyN
-----END PGP SIGNATURE-----

--QTprm0S8XgL7H0Dt--

--===============1946068952546746331==
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

_______________________________________________
Sugar mailing list
Sugar@laptop.org
http://mailman.laptop.org/mailman/listinfo/sugar

--===============1946068952546746331==--

