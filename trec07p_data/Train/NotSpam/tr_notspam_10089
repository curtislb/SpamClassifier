From beginners-return-91631-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon May 14 09:11:24 2007
Return-Path: <beginners-return-91631-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4EDBNqD022124
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 14 May 2007 09:11:24 -0400
Received: (qmail 19552 invoked by uid 514); 14 May 2007 13:11:10 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 19543 invoked from network); 14 May 2007 13:11:08 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 14 May 2007 13:11:08 -0000
Received: (qmail 1850 invoked by uid 225); 14 May 2007 13:11:08 -0000
Delivered-To: beginners@perl.org
Received: (qmail 1841 invoked by alias); 14 May 2007 13:11:07 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of chas.owens@gmail.com designates 209.85.132.242 as permitted sender)
Received: from an-out-0708.google.com (HELO an-out-0708.google.com) (209.85.132.242)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Mon, 14 May 2007 06:09:58 -0700
Received: by an-out-0708.google.com with SMTP id d40so446949and
        for <beginners@perl.org>; Mon, 14 May 2007 06:09:53 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=qieP3RJ1EEiMJMnlsqfRUsy5/SyiqJAowvxFlmaP+ZLhEPBMylMvsZtiS9/ncdlkIdSwJvyA6c3ULg422KJE3JtrlRIXCLkt/Eucsacwa5X6xRcC5HYqKRo+JhMbt2Y9939dF2r20o3uL+zfkTrGFrUxr0br29cacoMDw2xZowY=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=XUuLIsoR9vfQ1Ye7DlzaTgjtnExoz/qbvyR/jzAEbWKN4I8Yn+p7xUAjaET13sLgdnUKohjrckyzR/gkdzSX5lSk4yaSlyyd1rHpFiezJ+58r+BHR08ECR0hPYWBiB1+v9ebAPbLiXsVL2FebxFfCr97QdGQ1bRk26jSmufIiFg=
Received: by 10.114.156.1 with SMTP id d1mr994767wae.1179148193306;
        Mon, 14 May 2007 06:09:53 -0700 (PDT)
Received: by 10.114.79.3 with HTTP; Mon, 14 May 2007 06:09:53 -0700 (PDT)
Message-ID: <58ce48dc0705140609o49f3f835v26920194476db1a9@mail.gmail.com>
Date: Mon, 14 May 2007 09:09:53 -0400
From: "Chas Owens" <chas.owens@gmail.com>
To: tannhauser <tannhauser@nerdshack.com>
Subject: Re: Variables not replaced
Cc: beginners@perl.org
In-Reply-To: <20070514095152.GA27075@blacksun>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <20070514095152.GA27075@blacksun>

On 5/14/07, tannhauser <tannhauser@nerdshack.com> wrote:
snip
> My problem:
> I also want to replace quotions, depending whether they are at the beginning or
> the end of a word. For example "tick" should become ``tick''. Annoyingly, my script just
> gives me ``$1ic$1''. Any ideas?
snip

The problem here is that the replace part of s/// is for all effective
purposes a double quoted string.  Double quoted strings do allow
interpolation when they are seen as literals, but not on each use.
And this is a good thing (tm), can you imagine how confusing it would
be if you had to deal with a situtation like this:

my $doc = "the unknown amount of dollars is represented by \$x";
print $doc, "\n";

The interpreter would try to interpolate $x into $doc and since it
doesn't exist you would get an error.  You would have to do what the
poor shell programmers do and include as many backslashes as necessary
to get it to the right value when it was used.  But enough about what
isn't the case.

It also isn't as easy as tacking on an e option since that just brings
us full circle with the interpolated string problem, but tacking on an
e option and calling eval on the string does the trick; however, it
looks like you have over generalized the problem and are just making
work for yourself and the interpreter.  In addition, if you are
reading through the file line-by-line you will miss situations like
this

"foo foo bar
bar baz baz"

And of course you may need to deal with escaped quotes

"foo \"bar\" baz"

I would suggest you de-generalize your code some and take a look at
Conway's Text::Balanced*.

#!/usr/bin/perl
use strict;
use warnings;

my $search  = qr{"([^"]+?)"};
my $replace = q(qq{``$1"});

my $value = qq("foo bar baz");

print "$value\n";
$value =~ s/$search/eval $replace/ge;
print "$value\n";

* http://search.cpan.org/~dconway/Text-Balanced-v2.0.0/lib/Text/Balanced.pm

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


