From perl6-all-return-81891-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon Jun 11 04:11:44 2007
Return-Path: <perl6-all-return-81891-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5B8BhL9011815
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 11 Jun 2007 04:11:43 -0400
Received: (qmail 23158 invoked by uid 514); 11 Jun 2007 08:11:42 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 23153 invoked from network); 11 Jun 2007 08:11:41 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=1.4 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,PLING_QUERY,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: moderator for perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: neutral (x1.develooper.com: 63.251.223.186 is neither permitted nor denied by domain of scifigeeknz@gmail.com)
To: perl6-language@perl.org
MBOX-Line: From news@google.com Mon Jun 11 01:43:51 2007
Delivered-To: colobus-nntpmod@lists.develooper.com
Delivered-To: news-moderator-perl.perl6.language@perl.org
Received-SPF: neutral (x1.develooper.com: 130.59.1.10 is neither permitted nor denied by domain of news@google.com)
From: NeonGraal <scifigeeknz@gmail.com>
Subject: Re: Generalizing ?? !!
Date: Mon, 11 Jun 2007 01:43:40 -0000
Organization: http://groups.google.com
Lines: 62
Message-ID: <1181526220.269316.18810@a26g2000pre.googlegroups.com>
References: <ef30550b0706101410l44485919m472e675a700a1daf@mail.gmail.com>
NNTP-Posting-Host: 203.9.176.65
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
X-Trace: posting.google.com 1181526220 11190 127.0.0.1 (11 Jun 2007 01:43:40 GMT)
X-Complaints-To: groups-abuse@google.com
NNTP-Posting-Date: Mon, 11 Jun 2007 01:43:40 +0000 (UTC)
In-Reply-To: <ef30550b0706101410l44485919m472e675a700a1daf@mail.gmail.com>
User-Agent: G2/1.0
X-HTTP-UserAgent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.4) Gecko/20070515 Firefox/2.0.0.4,gzip(gfe),gzip(gfe)
X-HTTP-Via: 1.1 DNZCHHISA04
Complaints-To: groups-abuse@google.com
Injection-Info: a26g2000pre.googlegroups.com; posting-host=203.9.176.65;
   posting-account=j9ePcgsAAABX_axjw4PQCTCPUeBwxp7_
X-Posted-By: 63.251.223.186
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=2.1 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,PLING_QUERY,SPF_NEUTRAL
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=2.1 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,PLING_QUERY,SPF_NEUTRAL

On Jun 11, 9:10 am, datawea...@gmail.com (Jonathan Lang) wrote:
> Rereading A03, I ran across the original reasoning behind why Perl 5's
> '?:' trinary operator became '?? ::' first, and then '?? !!'.  Three
> reasons were given:
>
> * the '?' and ':' tokens are far too broadly useful to be gobbled up
> by the trinary operator.
>
> * the doubled symbols bring to mind the short-circuiting operators
> (e.g., '&&' and '||'), suggesting a similar short-circuiting behavior
> here.
>
> * the '!!' brings to mind "evaluate this when the condition fails".
>
> IMHO, the first point was always more about the ':' than it was about
> the '?'; if you were to replace ':' with '!', I suspect that this
> concern would largely go away.  That is, I don't see any infix:<?> or
> infix:<!> operators in the current draft.  A case could be made that a
> trinary '... ? ... ! ...' operator could work within the current state
> of things without conflict.  Also, the whitespace disambiguation rules
> that were later implemented go a long way to resolving the original
> problem of ':' trying to do too much.
>
> That said, the latter two points are still valid.  '... ? ... : ...'
> might be perfectly workable; but so is '... ?? ... !! ...'.
>
> However, there still may be room for improvement.  Consider the
> following possibility:
>
> Instead of being a single, inflexible trinary operator, break this
> into a pair of binary operators: infix:<??> and infix:<!!>.  Each can
> be used on its own, returning the right side if the condition
> evaluates as expected (i.e., true for ?? and false for !!), and
> otherwise returns 'undef'.  A variation of chaining associativity gets
> used, with the "chaining rule" being '$v1 op1 $v2 // $v1 op2 $v3'
> instead of '$v1 op1 $v2 && $v2 op2 $v3', as is the case for comparison
> chaining.  So all of the following would be valid syntax:
>
>   $test ?? $a !! $b  # true: $a; false: $b
>   $test !! $a ?? $b  # true: $b; false: $a
>   $test ?? $a       # true: $a; false: undef
>   $test !! $b       # true: undef; false: $a
>
> I suggest this mainly because it's potentially more extensible than
> the current model.  I could see someone devising a "fuzzy logic"
> module which could allow for such things as:
>
>   $test ?? $a !! $b maybe $c likely $d unlikely $e
>
> --
> Jonathan "Dataweaver" Lang

Surely if you defined !! to return "undef but true" and both operators
to be left associative then it all works.

 1==0 ?? "True" !! "False" -> (undef) !! "False" which seems right to
me.

 1==1 !! "False" ?? "True" -> (undef but true) ?? "True" also good.

TTFN, Struan

