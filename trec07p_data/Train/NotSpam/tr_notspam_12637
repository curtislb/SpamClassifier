From samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org  Tue May 22 17:05:29 2007
Return-Path: <samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org>
Received: from lists.samba.org (mail.samba.org [66.70.73.150])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l4ML5TqD017039
	for <ktwarwic@speedy.uwaterloo.ca>; Tue, 22 May 2007 17:05:29 -0400
Received: from dp.samba.org (localhost [127.0.0.1])
	by lists.samba.org (Postfix) with ESMTP id 7A45816385A
	for <ktwarwic@speedy.uwaterloo.ca>; Tue, 22 May 2007 21:05:25 +0000 (GMT)
X-Spam-Checker-Version: SpamAssassin 3.1.7 (2006-10-05) on dp.samba.org
X-Spam-Level: 
X-Spam-Status: No, score=-0.2 required=3.8 tests=AWL,BAYES_00,NO_REAL_NAME,
	NO_RELAYS,RCVD_IN_DSBL autolearn=no version=3.1.7
X-Original-To: samba-cvs@samba.org
Delivered-To: samba-cvs@samba.org
Received: by lists.samba.org (Postfix, from userid 1017)
	id 7D23B162AE0; Tue, 22 May 2007 21:04:56 +0000 (GMT)
To: samba-cvs@samba.org
From: obnox@samba.org
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Message-Id: <20070522210456.7D23B162AE0@lists.samba.org>
Date: Tue, 22 May 2007 21:04:56 +0000 (GMT)
Subject: svn commit: samba r23081 - in branches/SAMBA_3_0/source/rpc_client:
	.
X-BeenThere: samba-cvs@lists.samba.org
X-Mailman-Version: 2.1.5
Precedence: list
Reply-To: samba-technical@lists.samba.org
List-Id: Samba CVS and subversion commit messages <samba-cvs.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/archive/samba-cvs>
List-Post: <mailto:samba-cvs@lists.samba.org>
List-Help: <mailto:samba-cvs-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=subscribe>
Sender: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Errors-To: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org

Author: obnox
Date: 2007-05-22 21:04:56 +0000 (Tue, 22 May 2007)
New Revision: 23081

WebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23081

Log:
Reorder the lsa_lookup_sids functions so that the order makes more sense... 


Modified:
   branches/SAMBA_3_0/source/rpc_client/cli_lsarpc.c


Changeset:
Modified: branches/SAMBA_3_0/source/rpc_client/cli_lsarpc.c
===================================================================
--- branches/SAMBA_3_0/source/rpc_client/cli_lsarpc.c	2007-05-22 20:20:01 UTC (rev 23080)
+++ branches/SAMBA_3_0/source/rpc_client/cli_lsarpc.c	2007-05-22 21:04:56 UTC (rev 23081)
@@ -214,8 +214,8 @@
 			}
 
 		} else {
-			(names)[i] = NULL;
-			(domains)[i] = NULL;
+			(names)[i] = "";
+			(domains)[i] = "";
 			(types)[i] = SID_NAME_UNKNOWN;
 		}
 	}
@@ -225,6 +225,117 @@
 	return result;
 }
 
+/* Lookup a list of sids 
+ *
+ * do it the right way: there is a limit (of 20480 for w2k3) entries
+ * returned by this call. when the sids list contains more entries,
+ * empty lists are returned. This version of lsa_lookup_sids passes
+ * the list of sids in hunks of LOOKUP_SIDS_HUNK_SIZE to the lsa call. */
+
+/* This constant defines the limit of how many sids to look up
+ * in one call (maximum). the limit from the server side is
+ * at 20480 for win2k3, but we keep it at a save 1000 for now. */
+#define LOOKUP_SIDS_HUNK_SIZE 1000
+
+NTSTATUS rpccli_lsa_lookup_sids_all(struct rpc_pipe_client *cli,
+				    TALLOC_CTX *mem_ctx,
+				    POLICY_HND *pol, 
+				    int num_sids,
+				    const DOM_SID *sids, 
+				    char ***domains,
+				    char ***names,
+				    enum lsa_SidType **types)
+{
+	NTSTATUS result = NT_STATUS_OK;
+	int sids_left = 0;
+	int sids_processed = 0;
+	const DOM_SID *hunk_sids = sids;
+	char **hunk_domains = NULL;
+	char **hunk_names = NULL;
+	enum lsa_SidType *hunk_types = NULL;
+
+	if (num_sids) {
+		if (!((*domains) = TALLOC_ARRAY(mem_ctx, char *, num_sids))) {
+			DEBUG(0, ("rpccli_lsa_lookup_sids_all(): out of memory\n"));
+			result = NT_STATUS_NO_MEMORY;
+			goto done;
+		}
+
+		if (!((*names) = TALLOC_ARRAY(mem_ctx, char *, num_sids))) {
+			DEBUG(0, ("rpccli_lsa_lookup_sids_all(): out of memory\n"));
+			result = NT_STATUS_NO_MEMORY;
+			goto done;
+		}
+
+		if (!((*types) = TALLOC_ARRAY(mem_ctx, enum lsa_SidType, num_sids))) {
+			DEBUG(0, ("rpccli_lsa_lookup_sids_all(): out of memory\n"));
+			result = NT_STATUS_NO_MEMORY;
+			goto done;
+		}
+	} else {
+		(*domains) = NULL;
+		(*names) = NULL;
+		(*types) = NULL;
+	}
+	
+	sids_left = num_sids;
+	hunk_domains = *domains;
+	hunk_names = *names;
+	hunk_types = *types;
+
+	while (sids_left > 0) {
+		int hunk_num_sids;
+		NTSTATUS hunk_result = NT_STATUS_OK;
+
+		hunk_num_sids = ((sids_left > LOOKUP_SIDS_HUNK_SIZE) 
+				? LOOKUP_SIDS_HUNK_SIZE 
+				: sids_left);
+
+		DEBUG(10, ("rpccli_lsa_lookup_sids_all: processing items "
+			   "%d -- %d of %d.\n", 
+			   sids_processed, 
+			   sids_processed + hunk_num_sids - 1,
+			   num_sids));
+
+		hunk_result = rpccli_lsa_lookup_sids_noalloc(cli,
+							     mem_ctx,
+							     pol,
+							     hunk_num_sids, 
+							     hunk_sids,
+							     hunk_domains,
+							     hunk_names,
+							     hunk_types);
+
+		if (!NT_STATUS_IS_OK(hunk_result) &&
+		    !NT_STATUS_EQUAL(hunk_result, STATUS_SOME_UNMAPPED) &&
+		    !NT_STATUS_EQUAL(hunk_result, NT_STATUS_NONE_MAPPED)) 
+		{
+			/* An actual error occured */
+			goto done;
+		}
+
+		/* adapt overall result */
+		if (( NT_STATUS_IS_OK(result) && 
+		     !NT_STATUS_IS_OK(hunk_result)) 
+		    ||
+		    ( NT_STATUS_EQUAL(result, NT_STATUS_NONE_MAPPED) &&
+		     !NT_STATUS_EQUAL(hunk_result, NT_STATUS_NONE_MAPPED)))
+		{
+			result = STATUS_SOME_UNMAPPED;
+		}
+
+		sids_left -= hunk_num_sids;
+		sids_processed += hunk_num_sids; /* only used in DEBUG */
+		hunk_sids += hunk_num_sids;
+		hunk_domains += hunk_num_sids;
+		hunk_names += hunk_num_sids;
+		hunk_types += hunk_num_sids;
+	}
+
+done:
+	return result;
+}
+
 /** Lookup a list of sids */
 
 NTSTATUS rpccli_lsa_lookup_sids(struct rpc_pipe_client *cli,
@@ -336,117 +447,6 @@
 	return result;
 }
 
-/* Lookup a list of sids 
- *
- * do it the right way: there is a limit (of 20480 for w2k3) entries
- * returned by this call. when the sids list contains more entries,
- * empty lists are returned. This version of lsa_lookup_sids passes
- * the list of sids in hunks of LOOKUP_SIDS_HUNK_SIZE to the lsa call. */
-
-/* This constant defines the limit of how many sids to look up
- * in one call (maximum). the limit from the server side is
- * at 20480 for win2k3, but we keep it at a save 1000 for now. */
-#define LOOKUP_SIDS_HUNK_SIZE 1000
-
-NTSTATUS rpccli_lsa_lookup_sids_all(struct rpc_pipe_client *cli,
-				    TALLOC_CTX *mem_ctx,
-				    POLICY_HND *pol, 
-				    int num_sids,
-				    const DOM_SID *sids, 
-				    char ***domains,
-				    char ***names,
-				    enum lsa_SidType **types)
-{
-	NTSTATUS result = NT_STATUS_OK;
-	int sids_left = 0;
-	int sids_processed = 0;
-	const DOM_SID *hunk_sids = sids;
-	char **hunk_domains = NULL;
-	char **hunk_names = NULL;
-	enum lsa_SidType *hunk_types = NULL;
-
-	if (num_sids) {
-		if (!((*domains) = TALLOC_ARRAY(mem_ctx, char *, num_sids))) {
-			DEBUG(0, ("rpccli_lsa_lookup_sids_all(): out of memory\n"));
-			result = NT_STATUS_NO_MEMORY;
-			goto done;
-		}
-
-		if (!((*names) = TALLOC_ARRAY(mem_ctx, char *, num_sids))) {
-			DEBUG(0, ("rpccli_lsa_lookup_sids_all(): out of memory\n"));
-			result = NT_STATUS_NO_MEMORY;
-			goto done;
-		}
-
-		if (!((*types) = TALLOC_ARRAY(mem_ctx, enum lsa_SidType, num_sids))) {
-			DEBUG(0, ("rpccli_lsa_lookup_sids_all(): out of memory\n"));
-			result = NT_STATUS_NO_MEMORY;
-			goto done;
-		}
-	} else {
-		(*domains) = NULL;
-		(*names) = NULL;
-		(*types) = NULL;
-	}
-	
-	sids_left = num_sids;
-	hunk_domains = *domains;
-	hunk_names = *names;
-	hunk_types = *types;
-
-	while (sids_left > 0) {
-		int hunk_num_sids;
-		NTSTATUS hunk_result = NT_STATUS_OK;
-
-		hunk_num_sids = ((sids_left > LOOKUP_SIDS_HUNK_SIZE) 
-				? LOOKUP_SIDS_HUNK_SIZE 
-				: sids_left);
-
-		DEBUG(10, ("rpccli_lsa_lookup_sids_all: processing items "
-			   "%d -- %d of %d.\n", 
-			   sids_processed, 
-			   sids_processed + hunk_num_sids - 1,
-			   num_sids));
-
-		hunk_result = rpccli_lsa_lookup_sids_noalloc(cli,
-							     mem_ctx,
-							     pol,
-							     hunk_num_sids, 
-							     hunk_sids,
-							     hunk_domains,
-							     hunk_names,
-							     hunk_types);
-
-		if (!NT_STATUS_IS_OK(hunk_result) &&
-		    !NT_STATUS_EQUAL(hunk_result, STATUS_SOME_UNMAPPED) &&
-		    !NT_STATUS_EQUAL(hunk_result, NT_STATUS_NONE_MAPPED)) 
-		{
-			/* An actual error occured */
-			goto done;
-		}
-
-		/* adapt overall result */
-		if (( NT_STATUS_IS_OK(result) && 
-		     !NT_STATUS_IS_OK(hunk_result)) 
-		    ||
-		    ( NT_STATUS_EQUAL(result, NT_STATUS_NONE_MAPPED) &&
-		     !NT_STATUS_EQUAL(hunk_result, NT_STATUS_NONE_MAPPED)))
-		{
-			result = STATUS_SOME_UNMAPPED;
-		}
-
-		sids_left -= hunk_num_sids;
-		sids_processed += hunk_num_sids; /* only used in DEBUG */
-		hunk_sids += hunk_num_sids;
-		hunk_domains += hunk_num_sids;
-		hunk_names += hunk_num_sids;
-		hunk_types += hunk_num_sids;
-	}
-
-done:
-	return result;
-}
-
 /** Lookup a list of names */
 
 NTSTATUS rpccli_lsa_lookup_names(struct rpc_pipe_client *cli,

