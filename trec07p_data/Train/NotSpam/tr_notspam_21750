From perl6-all-return-82255-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri Jun 22 19:32:56 2007
Return-Path: <perl6-all-return-82255-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5MNWtL9011055
	for <ktwarwic@flax9.uwaterloo.ca>; Fri, 22 Jun 2007 19:32:56 -0400
Received: (qmail 27663 invoked by uid 514); 22 Jun 2007 16:57:35 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 27658 invoked from network); 22 Jun 2007 16:57:35 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: neutral (x1.develooper.com: local policy)
Delivered-To: perlmail-parrot-porters@onion.perl.org
Delivered-To: parrot-porters@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
Date: Fri, 22 Jun 2007 11:36:28 -0500
From: "Patrick R. Michaud" <pmichaud@pobox.com>
To: Mark Glines <mark@glines.org>
Cc: chromatic <chromatic@wgz.org>, Nicholas Clark <nick@ccl4.org>,
   parrot-porters@perl.org
Subject: Re: [svn:parrot] r19231 - trunk/languages/perl6/src/pmc
Message-ID: <20070622163627.GB11714@host.pmichaud.com>
References: <20070621190535.61B17CB9E1@x12.develooper.com> <200706212308.25363.chromatic@wgz.org> <20070622090732.GN20876@plum.flirble.org> <200811071428.40407.chromatic@wgz.org> <20070622093040.1fb41cda@chirp>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20070622093040.1fb41cda@chirp>
User-Agent: Mutt/1.4.2.1i
X-AntiAbuse: This header was added to track abuse, please include it with any abuse report
X-AntiAbuse: Primary Hostname - host.pmichaud.com
X-AntiAbuse: Original Domain - perl.org
X-AntiAbuse: Originator/Caller UID/GID - [32003 505] / [47 12]
X-AntiAbuse: Sender Address Domain - host.pmichaud.com
X-Source: 
X-Source-Args: 
X-Source-Dir: 
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-1.9 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL

On Fri, Jun 22, 2007 at 09:30:40AM -0700, Mark Glines wrote:
> On Fri, 7 Nov 2008 15:28:40 -0700
> chromatic <chromatic@wgz.org> wrote:
> > On Friday 22 June 2007 02:07:32 Nicholas Clark wrote:
> > > I think that you need something like this
> > > /* concatenating with "" ensures that only literal strings are
> > > accepted as argument */ #define STR_WITH_LEN(s)  (s ""),
> > > (sizeof(s)-1)
> > >
> > > /* STR_WITH_LEN() shortcuts */
> > > #define newSVpvs(str) Perl_newSVpvn(aTHX_ STR_WITH_LEN(str))
> > 
> > I'm not sure that's what I was asking.
> > 
> > string_from_cstring()'s third parameter can be either the length of
> > the string or zero.  If it's zero, the function will call strlen() to
> > get the string's length.
> 
> It uses sizeof, not strlen.  So, it pushes the calculation to
> compile-time, so you only have to do it once, and never at runtime.
> 
> Also, using sizeof() will fix some cases that strlen() doesn't handle
> correctly, specifically, strings containing explicit null characters.
> src/objects.c has a few examples of that.  string_to_cstring(interp,
> "\0", 0) will get the size wrong, but string_to_cstring_literal(interp,
> "\0") will get it right.  So I don't really see a good excuse for not
> using it everywhere.

I think you mean "string_from_cstring_literal", not 
"string_to_cstring_literal".  At least I _hope_ that's 
what you mean.  :-)

Also, out of curiosity, do we really need "cstring" in the name?
How about simply...?

    string_from_literal(interp, "Foo")

(I'm not opposed to leaving 'cstring' in the name if it's important
to somehow make it clear that the literal is a cstring literal, I'm
just asking the question.)

Pm

