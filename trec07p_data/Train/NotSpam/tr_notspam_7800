From beginners-return-91353-ktwarwic=speedy.uwaterloo.ca@perl.org  Sat May  5 00:44:01 2007
Return-Path: <beginners-return-91353-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l454hxqD023725
	for <ktwarwic@flax9.uwaterloo.ca>; Sat, 5 May 2007 00:43:59 -0400
Received: (qmail 24236 invoked by uid 514); 5 May 2007 04:43:52 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 24225 invoked from network); 5 May 2007 04:43:52 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 5 May 2007 04:43:52 -0000
Received: (qmail 1289 invoked by uid 225); 5 May 2007 04:43:51 -0000
Delivered-To: beginners@perl.org
Received: (qmail 1282 invoked by alias); 5 May 2007 04:43:51 -0000
X-Spam-Status: No, hits=0.4 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,DK_POLICY_TESTING,FORGED_YAHOO_RCVD,SPF_NEUTRAL
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: local policy)
Received: from office.servervault.com (HELO mail1.dulles.sv.int) (216.12.128.136)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Fri, 04 May 2007 21:43:44 -0700
Received: from [192.168.4.103] ([192.168.4.103]) by mail1.dulles.sv.int with Microsoft SMTPSVC(6.0.3790.1830);
	 Sat, 5 May 2007 00:43:38 -0400
Message-ID: <463C0B58.9050600@yahoo.com>
Date: Sat, 05 May 2007 00:43:04 -0400
From: Mathew Snyder <theillien@yahoo.com>
User-Agent: Thunderbird 1.5.0.10 (X11/20060911)
MIME-Version: 1.0
To: "John W. Krahn" <krahnj@telus.net>
CC: Perl Beginners <beginners@perl.org>
Subject: Re: Text Formatters
References: <463B1AC6.1020903@yahoo.com> <463B2810.9040801@telus.net>
In-Reply-To: <463B2810.9040801@telus.net>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
X-OriginalArrivalTime: 05 May 2007 04:43:38.0021 (UTC) FILETIME=[F270ED50:01C78ECF]
X-Virus-Checked: Checked

John W. Krahn wrote:
> Mathew Snyder wrote:
>> Question regarding the text formatting modules out there.  I've found three on
>> CPAN that seem to have the functionality that I'm looking for but I don't know
>> which would best suit my needs.  The three are Text::Format, Text::Wrapper and
>> Text::Autoformat.
>>
>> I have a script which populates and email with data that gets laid out in the
>> following manner:
>>
>> customer_name
>>  Ticket ID                      Subject                     hh:mm
>> -----------------------------------------------------------------
>>     ######  Random Ticket Subject Line                      ##:##
>>
>> However, the subject length is not a constant.  It can be quite short (maybe a
>> few characters long) to much longer than the alloted space I've given using
>> 'printf'.  So, I'd like to be able to do things like wrap the text at a certain
>> length so that it might look something like this:
>>
>> customer_name
>>  Ticket ID                      Subject                     hh:mm
>> -----------------------------------------------------------------
>>     ######  Random Ticket Subject Line Which Might End Up   ##:##
>>             Longer Than The Allocated Space Using printf
>>     ######  Next Random Ticket Subject Line                 ##:##
>>
>> Of the three formatting options I've found, which might be my best bet to handle
>> something of this nature.  Also, after deciding which is the better option, how
>> would I go about printing the data out?  Can I populate variables with
>> pre-formatted text or would I perhaps do something with a printf command that
>> uses a call to one of the formatting methods?
>>
>> Any help would be appreciated.
> 
> $ perl -e'
> my $customer_name = "customer_name";
> my @records = (
>     [ 1234, "Random Ticket Subject Line Which Might End Up Longer Than The
> Allocated Space Using printf", "12:50" ],
>     [ 1235, "Next Random Ticket Subject Line", "12:53" ],
>     );
> 
> 
> my ( $ticket, $subject, $time );
> 
> format STDOUT_TOP =
> @<<<<<<<<<<<<<<
> $customer_name
>  Ticket ID                      Subject                     hh:mm
> -----------------------------------------------------------------
> .
> format STDOUT =
>     @#####  ^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<   @>>>>
>     $ticket, $subject, $time
> ~~          ^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
>             $subject
> .
> 
> for my $record ( @records ) {
>     ( $ticket, $subject, $time ) = @$record;
>     write;
>     }
> '
> customer_name
>  Ticket ID                      Subject                     hh:mm
> -----------------------------------------------------------------
>       1234  Random Ticket Subject Line Which Might End Up   12:50
>             Longer Than The Allocated Space Using printf
>       1235  Next Random Ticket Subject Line                 12:53
> 
> 
> 
> 
> John

Thanks for enlightening me about 'format'

I've run your example code from the command line and got exactly the results you
did (not that I'd expect to get anything different ;) ).  I then attempted to
incorporate the idea into my script:

foreach my $user (keys %tikNums) {
        open TIMESHEET, ">/work_reports/ticketlists_$endDate/ticketlist_$user.txt";
        print TIMESHEET "List of tickets worked on by $user during week ending
$endDate", "\n\n";
        foreach my $env (sort keys %{ $tikNums{$user} }){
                #Print the header for our data
                print TIMESHEET $env . "\n";
                printf TIMESHEET "%10s%10s\n", "Ticket ID","hh:mm";
                print TIMESHEET ("-" x 20);
                print TIMESHEET "\n";
                foreach my $id (sort keys %{ $tikNums{$user}{$env} }) {
                        format STDOUT_TOP =
                                @<<<<<<<<<<<<<<<<<<<<
                                $env
                                  Ticket ID                         Subject
                    hh:mm

-------------------------------------------------------------------------
                        .
                        format STDOUT =
                                    @######
^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  @>>:>>
                                        $id, $tikSubj{$id},
$tikNums{$user}{$env}{$id}
                                ~~
^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
                                     $tikSubj{$id}
                }
                write TIMESHEET;
                print TIMESHEET "\n";
        }
        close TIMESHEET;
}

However, when I run the script I get the following error:
Format not terminated at ./ticket_lists.pl line 128, at end of line
syntax error at ./ticket_lists.pl line 128, at EOF
Execution of ./ticket_lists.pl aborted due to compilation errors.

Line 128 only contains my 'exit;' statement.  I've got the periods where they
belong but can't figure out why it would tell me the format hasn't been terminated.

Any insight will be appreciated.

Mathew

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


