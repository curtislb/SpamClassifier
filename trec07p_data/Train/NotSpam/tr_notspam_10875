From perl6-all-return-81418-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed May 16 04:27:06 2007
Return-Path: <perl6-all-return-81418-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4G8R3qD016262
	for <ktwarwic@flax9.uwaterloo.ca>; Wed, 16 May 2007 04:27:04 -0400
Received: (qmail 18254 invoked by uid 514); 16 May 2007 08:26:59 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 18249 invoked from network); 16 May 2007 08:26:59 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-0.2 required=8.0
	tests=BAYES_40,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: domain of codermattie@gmail.com designates 64.233.184.228 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:date:from:to:cc:subject:message-id:in-reply-to:references:x-mailer:mime-version:content-type;
        b=mX6mY4DaJHFjppULFCM0NuAjSFcJZ4wV1syRFms4biLG6KI+hlowknyUHuoox8X56pKGFBbpVXssulWMl2owHELqQOKgi98+yikvEM3ZH1hZkau7Zjqx0lVFdd4ZzJCob+yc7YItXSZYYOp/ls+YrJFbm7EAn8+O+GopwaIGMlc=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:date:from:to:cc:subject:message-id:in-reply-to:references:x-mailer:mime-version:content-type;
        b=aeff1GY4/O2OwyZOiyHWBDCRWGXASPZdZMMLZjZR0ITgMeN6dcurRzWWWA3mLE/6BpjI7ezHOs0+8hzSXxhkUgbnEdtn3rXe3rrYNJlIiKHCYHASKz4Mq6NcQiOxn4b8lU1+mZmSNlnem6d2U1KlKYjYCs1hxBO87Uk7zbA1SwQ=
Date: Wed, 16 May 2007 01:25:41 -0700
From: Mike Mattie <codermattie@gmail.com>
To: parrot ML <perl6-internals@perl.org>
Cc: Allison Randal <allison@perl.org>
Subject: Re: [RFC] extension guessing, functionally better loader behavior
 -> working install target
Message-ID: <20070516012541.702caa77@reforged>
In-Reply-To: <20070513224615.5f62e3ad@reforged>
References: <20070513224615.5f62e3ad@reforged>
X-Mailer: Claws Mail 2.6.1 (GTK+ 2.10.9; i686-pc-linux-gnu)
Mime-Version: 1.0
Content-Type: multipart/signed; boundary="Sig_hH4K/e4LJpl=9/nbtg7DT3R";
 protocol="application/pgp-signature"; micalg=PGP-SHA1
X-Virus-Checked: Checked
X-Virus-Checked: Checked
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS

--Sig_hH4K/e4LJpl=9/nbtg7DT3R
Content-Type: multipart/mixed; boundary="MP_ux610Fd/3=qvuKZL1LpXiK5"

--MP_ux610Fd/3=qvuKZL1LpXiK5
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline

On Sun, 13 May 2007 22:46:15 -0700
Mike Mattie <codermattie@gmail.com> wrote:

> Hello,
>=20

[snip]

Here is a revised version of library.c . still not at the compile stage but=
 I think that the
implementation is now verifiable to the search algorithm by review. This is=
 pretty close to what
I would call a final on the level of algorithms, and abstractions. Still ab=
out half the
file to self review and assert check.

my current version is a little over >200 lines longer than the HEAD impleme=
ntation before
the path utilities are hoisted, and the path table is enumerated else-where.

This is more of a shift of current/future complexity towards a single imple=
mentation=20
point than a bulk addition of complexity; when the enhanced diagnostics,=20
new functionality (HLL name-spaces), API insulation etc is considered. At l=
east I
think so :)=20
=20
Some of the unorthodox commenting styles are for my own review of the code.=
 I plan
on sanitizing those from the file before RT time.

wc -l {HEAD,mine}/src/library.c
  564 HEAD/src/library.c
  781 mine/src/library.c

> Cheers,
> Mike Mattie - codermattie@gmail.com
>=20
>=20
>=20
>=20

--MP_ux610Fd/3=qvuKZL1LpXiK5
Content-Type: text/x-csrc; name=library.c
Content-Transfer-Encoding: quoted-printable
Content-Disposition: attachment; filename=library.c

/*
Copyright (C) 2004-2007, The Perl Foundation.
$Id: library.c 18482 2007-05-09 11:16:10Z paultcochrane $

=3Dhead1 NAME

src/library.c - Interface to Parrot's bytecode library

=3Dhead1 DESCRIPTION

This file contains a C function to access parrot's bytecode library functio=
ns.

=3Dhead2 Functions

=3Dover 4

=3Dcut

*/

#include <stdarg.h>
#include <assert.h>

#include "parrot/parrot.h"
#include "parrot/warnings.h"
#include "parrot/library.h"
#include "parrot/path.h"

#include "library.str"


/* used internally by diagnostics , ASCII text string names for the loader.
 * TODO: internationalization. */
static const char* const loader_names[] =3D {
    'ARCH',
    'BYTECODE',
    'INCLUDE',
    'SRC'
};

/* create a loader table , indexed by the three loader paths enumerated
 * by enum_runtime_ft in parrot/include/library.h. Each namespace has
 * a path/extension search table for a shared object loader, a byte-code
 * loader, and a source-code loader.
 *
 * for a shared object loader this is a little wastefull, but the tables
 * are not duplicated. If a namespace does not define a path/extension
 * search table, the "parrot" table will be used. */

static PMC*
create_loader_table(Interp* interp)
{
    PMC *table;

    table =3D pmc_new(interp, enum_class_FixedPMCArray);
    VTABLE_set_integer_native(interp, table,
                              PARROT_RUNTIME_FT_SIZE );

    return table;
}

/* return an existing load-table , or create one and attach it
 * to the namespace. */
static PMC*
get_load_table_for_populate(Interp* interp,
                            PMC* lib_paths, STRING* ns)
{
    PMC *table;

    if ( VTABLE_exists_keyed_str(interp, lib_paths, ns) )
        return VTABLE_get_pmc_keyed_str(interp, lib_paths, ns );

    table =3D create_loader_table(interp);

    VTABLE_set_pmc_keyed_str(interp, lib_paths,
                             ns,
                             table);
    return table;
}

/* create a search space. Loaders will want to iterate through a
 * path space, and an extension space. These are enumerated
 * in enum_search_space. */

typedef enum {
    SEARCH_TABLE_PATH =3D 0,
    SEARCH_TABLE_EXT,
    SEARCH_TABLE_SIZE
} enum_search_space;

static PMC*
create_search_table(Interp* interp)
{
    PMC *table;

    table =3D pmc_new(interp, enum_class_FixedPMCArray);
    VTABLE_set_integer_native(interp, table, SEARCH_TABLE_SIZE);

    return table;
}

static PMC*
get_search_table_for_populate(Interp* interp,
                              PMC* load_table, int loader )
{
    PMC *table;

    if ( VTABLE_exists_keyed_int( interp, load_table, loader ) )
        return VTABLE_get_pmc_keyed_int(interp, load_table, loader );

    table =3D create_search_table(interp);
    VTABLE_set_pmc_keyed_int(interp, load_table,
                             loader,
                             table);

    return table;
}

/* A search space is a simple dynamic array, or list of
 * name varaiations (path or extension) to try. */

static PMC*
create_search_space(Interp* interp) {
    return pmc_new(interp, enum_class_ResizableStringArray);
}

static PMC*
get_search_space_for_populate(Interp* interp,
                              PMC* search_table , enum_search_space search_=
space)
{
    PMC *new_table;

    if ( VTABLE_exists_keyed_int( interp, search_table , search_space ) )
        return VTABLE_get_pmc_keyed_int(interp, search_table, search_space =
);

    new_table =3D create_search_space(interp);
    VTABLE_set_pmc_keyed_int(interp,
                             search_table, search_space , new_table );

    return new_table;
}

static void
populate_search_space(Interp* interp,
                      /* the loader table for the namespace */
                      PMC* load_table,
                      enum_runtime_ft loader,

                      /* search space index */
                      enum_search_space search_space,

                      /* the entry to add */
                      STRING* entry)
{
    PMC *search_table, *search_list;

    search_list =3D get_search_space_for_populate(interp,
                                                get_search_table_for_popula=
te(interp,
                                                                           =
   load_table,loader),
                                                search_space);

    VTABLE_push_string(interp, search_list, entry);
}

/* load_prefer is a toggle to prefer either the most low level form of a mo=
dule
 * (compiled) or the highest level form of a module.
 *
 * Users will typically want the compiled versions. This is also the perl5
 * behavior as well.
 *
 * Users wanting a more dynamic interaction can export PARROT_PREFER_SOURCE
 * to reverse the default behavior.
 *
 * FUTURE: If a value for PARROT_PREFER_SOURCE is honored it should be
 * a path spec of directories for which source will be loaded over compiled
 * objects.
 */

typedef enum {
    PREFER_COMPILE,
    PREFER_SOURCE
} enum_load_prefer;

static enum_load_prefer load_prefer =3D PREFER_COMPILE;

static int
query_load_prefer ( Interp* interp ) {
    int free_it;
    char *env;

    env =3D Parrot_getenv("PARROT_PREFER_SOURCE", &free_it);

    if (env) {
        if (free_it)
            mem_sys_free(env);

        return 1;
    }

    return 0;
}

static int
next_by_load_prefer (int current) {
    return current + ( PREFER_COMPILE =3D=3D load_prefer )
        ? 1
        : -1;
}


static int
bound_by_load_prefer(int *lower_bound, *upper_bound)
{
    int swap;

    if ( PREFER_COMPILE =3D=3D load_prefer ) {
        *lower_bound =3D 0;
        return;
    }

    *lower_bound =3D *upper_bound - 1;
    *upper_bound =3D -1;
}

/*

=3Ditem C<void parrot_init_library_paths(Interp *)>

 TODO: doc.

=3Dcut

*/

#include "builtin-loader-paths.c"

void
parrot_init_library_paths(Interp *interp)
{
    PMC *iglobals, *lib_paths;

    if( query_load_prefer(interp) )
        load_prefer =3D PREFER_SOURCE;

    /* create lib_paths, a fixed array of hashes.

       The array indexing is for the loader types. The elements of the
       array are a hash implementing a "interpreter" name-space.
     */

    lib_paths =3D pmc_new(interp, enum_class_Hash);

    populate_builtin_library_paths(interp, lib_paths);

    iglobals =3D interp->iglobals;
    VTABLE_set_pmc_keyed_int(interp, iglobals,
                             IGLOBALS_LIB_PATHS, lib_paths);
}

static STRING* load_trace; /* used to accumulate a trace of a load
                              for diagnostics & debugging */

#define TRACE_ENABLED \( NULL !=3D load_trace \)
#define SET_TRACE( trace ) { load_trace =3D trace; }

static void
append_trace (Interp* interp, const char* const format, ... )  {

    STRING* format_string =3D string_from_cstring( format );
    va_list args;

    va_start(args, format);

    string_append(interp, load_trace, Parrot_sprintf_s(interp, format, args=
);

    va_end(args);
}

#define SEARCH_TRACE_PSTRING ( format , args... )\
{\
    if( NULL !=3D search_trace ) {\
        string_append(interp,load_trace,\
                      append_trace(interp,format, ## args ));\
    }\
}

#define SEARCH_TRACE_CSTRING ( format , args... )\
{\
    if ( NULL !=3D load_trace ) {\
        string_append(interp, load_trace,\
                      string_printf( format , ## args );\
    }\
}


static PMC* namespace_search_path(Interp *interp,
                                  STRING* hll,
                                  enum_runtime_ft loader,
                                  enum_search_space search_space)
{
    PMC *iglobals, *lib_paths, *loader_table, *search_table, *list;

    iglobals =3D interp->iglobals;
    lib_paths =3D VTABLE_get_pmc_keyed_int(interp, iglobals, IGLOBALS_LIB_P=
ATHS);

    /* first do the namespace lookup to find the loader table */

    if ( ! VTABLE_exists_keyed_str(interp, lib_paths, hll) )
        return NULL;

    loader_table =3D VTABLE_get_pmc_keyed_str(interp, lib_paths, hll );

    /* FixedPmc: look for a entry matching the loader desired */
    if ( ! VTABLE_exists_keyed_int(interp, loader_table, loader) )
        return NULL;

    search_table =3D VTABLE_get_pmc_keyed_int(interp, loader_table, loader =
);

    /* FixedPmc: check for the the PATH or EXT search table */
    if ( ! VTABLE_exists_keyed_int(interp, search_table, search_space) )
        return NULL;

    list =3D VTABLE_get_pmc_keyed_int(interp, search_table, search_space );
    return ( VTABLE_elements(interp, list) )
        ? list
        : NULL;
}

/* implement search space lookup , with a hard-coded default namespace
 * for fallback
 */
static PMC*
get_search_space(Interp *interp,
                 STRING* hll,
                 enum_runtime_ft loader,
                 enum_search_space search_space)
{
    PMC *table;

    if ( NULL =3D=3D hll ) goto fallback;

    table =3D namespace_search_path(interp, hll, loader, search_space );

    if ( NULL =3D=3D table ) {
      fallback:
        hll =3D CONST_STRING(interp, "parrot" );
        table =3D namespace_search_path(interp, hll, loader, search_space);
    }

    return table;
}

static PMC*                             /* can be NULL */
path_concat_permutations( STRING *path, PMC *search_space ) {
/* implements search-rule 1 */

    PMC* perm =3D pmc_new(interp, enum_class_ResizableStringArray);
    int i,n;

    VTABLE_push_string(interp, perm, path);

    if( !ext_search_space )
        return perm;

    n =3D VTABLE_elements(interp, search_space);
    bound_by_load_prefer(&i, &n);

    while( i !=3D n ) {
        VTABLE_push_string(interp, perm,
                           string_concat(interp, path ,
                                         VTABLE_get_string_keyed_int(interp=
, search_space, i)));
        i =3D next_by_load_prefer(i);
    }

    return perm;
}

/* fs_lookup: use stat() to see if the path exists. return a platform
 * localized path if it exists, false if not. This makes the search behavior
 * first match, best by order. */

static STRING*
fs_lookup(Interp *interp, STRING* path) {
    STRING *final;
    final =3D parrot_path_platform_localize(interp, string_copy(interp, pat=
h));

    if (Parrot_stat_info_intval(interp, final , STAT_EXISTS)) {

#ifdef DEBUG_LIBRARY_LOCATE
        TRACE_PSTRING( "found %s\n" , final );
#endif

        return final;
    }

    return NULL;
}

static STRING*
fs_lookup_with_prefix(Interp* interp, STRING *path, *prefix ) {
/* implements search-rule 3 , search-rule 4 */

    STRING* result;

    if ( prefix ) {
        result =3D fs_lookup(interp, parrot_path_concat(interp, prefix , pa=
th));
        if (result)
            return result;
    }

    return fs_lookup( interp, path );
}

static STRING*                                     /* can be NULL */
fs_search_with_prefix( interp, PMC *search_space , STRING* prefix ) {
    int i,n;
    STRING* result;

    assert(search_space);

    for( i =3D 0 ; i < n ; i++ ) {
        result =3D fs_lookup_with_prefix(interp,
                                       VTABLE_get_string_keyed_int(interp, =
search_space, i ),
                                       prefix);
        if (result)
            return result;
    }

    return NULL;
}

/*

=3Ditem C<char* Parrot_locate_runtime_file(Interp *,
                                         const char *object_name,
                                         STRING *hll
                                         enum_runtime_ft *loader
                                         STRING* trace)>

Parrot_locate_runtime_str searches the filesystem for object files
containing code of some sort. This function is required by several
opcodes/components and is designed with parrot's unusual flexiblity in
mind.

object_name : the name of the object to load. It can be simply a name,
              path, or absolute path.

hll         : The hll argument is the key to the HLL name-space. The
              default namespace is used if the namespace does not exist
              or is null.

              The default name-space is "parrot".

loader      : a bit-mask selecting loaders to be included in the search.
              This arguement is passed by reference. When a matching file
              is found the value of loader is reset to the flag for the
              loader under which it was found.

              loader is not modified unless a matching file is found.

trace       : given non-null string a trace of the search will be appended.
              This allows higher level API's to capture detailed diagnostics
              when the search fails. This is useful for all parties.

The return value is:

  *  a string containing the path to the objects preferred form, or NULL if=
 not found.

  * localized with parrot_platform_path_localize

      *  all path seperators are coverted to the platform's value (ie Win32)

      *  a hidden 0 char is appended making it suitable for direct use in C=
 API calls,
         an artifact of the previous implementation.

Search behavior:

code objects can have several formats, some of which will be stored on
disk. This routine searches for the preferred format of an object.
Preferred is either lowest form (compiled), or highest form (source).

The given search rules apply at each step in the search order. The
search order is executed per loader. The loader mask is also traversed
in preferred the order.

rule 1: parrot will always try the object_name as given before adding
        extensions. The set of extensions tried is loader specific.

Search order:

     1. Absolute paths (abort on fail)

     2. Search the paths joined with get_runtime_prefix

     3. joined with get_runtime_prefix

     4. as given

     Exception 1. absolute paths in the path list are not prefixed

     Exception 2. If the loader mask is zero: step two of the search order
                  will be skipped. extensions are skipped since there
                  is no loader information available.

The two modals for the search are the runtime_prefix and preferred
order.

SEE ALSO: Parrot_get_runtime_prefix, query_load_prefer , F<include/parrot/l=
ibrary.h>

current parrot behavior can be achieved by passing NULL as the hll
argument, and a loader mask of:

  PARROT_RUNTIME_FT_BYTECODE &
  PARROT_RUNTIME_FT_INCLUDE &
  PARROT_RUNTIME_FT_SOURCE

for parrot bytecode, and PARROT_RUNTIME_FT_ARCH for platform shared
objects.

Implementation Notes:

The implementation of the search behavior is tagged in this file.
rules            :  grep search-rule x
search order     :  grep search-order x
search exception :  grep search-rule x

Is it theoretically possible that the tags could be overlayed onto a
call graph of this function and implementation can be verified to be
faithful to search behavior with static analysis ? Practically could
this be possible with execution paths restricted by coverage analysis ?

The search lists for both paths and extensions are dynamic arrays. In
the extension search space it is assumed that the lowest index
corresponds to the lowest form, and that the array is sorted
accordingly.

TODO: the extension , which is actually the stage of interpretation contain=
ed
      by the format is returned in the extension of the file. This should be
      returned as a optimization hint to heuristics that do the real
      determination of what's in a file , ( example: use v6; or shebang inv=
ocations )

TODO: instead of a string that is checked by stat() , a handle should be
      returned instead to close the classic access() race. Additional
      flags are needed for that such as NO_TTY and other basic cross-platfo=
rm
      security open() masks. <-- huge warning.

      (This should be relative to a loader , higher level forms may
       have looser security constraints)

TODO: OS IO/VM hinting. some loaders could benefit from IO hinting such as
      mapped/streamed, use-once etc. depends on returning a handle and open
      flags.

=3Dcut

*/

/* compute a bit-flag from a index of the loader bits. Need to check endian=
 issues */

static int
ft_index_to_mask (int index ) {
    return 1 << index;
}

/* we have a multi-value return. Ensure that code does not forget to
 * set one of the expected returns by encapsulating return value
 * construction in a macro */

#define return_if_found ( path , for_loader ) if( path ) { *loader =3D for_=
loader ; return path }

STRING*
Parrot_locate_runtime_file_str(Interp *interp,
                               STRING *object_name,
                               STRING *hll,
                               enum_runtime_ft *loader,
                               STRING* trace)
{
    STRING *prefix, *file;
    int l_idx, l_bound;

    /* set the static trace variable, NULL to disable or a string for the
       diagnostics data. */
    SET_TRACE( trace );
    SEARCH_TRACE_PSTRING( "looking up path for object: %s\n" , object_name =
);

    /* get the value of PARROT_RUNTIME if any, a constant for the paths bel=
ow */
    prefix =3D Parrot_get_runtime_prefix(interp);
    if( TRACE_ENABLED
        && prefix
        && string_length(interp, prefix)) append_trace(interp, "prefix is s=
et as %s\n",prefix);

    if ( !*loader ) {
        /* search-exception 2
         *
         * If it is an absolute path try it now. If it fails skip the rest
         * of the search for this loader */

        SEARCH_TRACE_CSTRING( "all loaders disabled, path search disabled\n=
" );

        file =3D fs_lookup_with_prefix(interp,
                                     object_name,
                                     ( !parrot_path_is_abs(interp, object_n=
ame) ? prefix : NULL  ));

        return_if_found( file , 0 );
        return NULL;
    }

    l_bound =3D PARROT_RUNTIME_FT_SIZE;
    bound_by_load_prefer(&l_idx, &l_bound);

    while( l_idx !=3D l_bound ) {
        PMC *object_search_space, *path_search_space;
        int i, n;

        /* ingore loaders not in the mask */
        if (0 =3D=3D (ft_index_to_mask(l_idx) & *loader)) {

            l_idx =3D next_by_load_prefer(l_idx);
            continue;
        }

        SEARCH_TRACE_CSTRING( "looking for objects loadable by %s\n", loade=
r_names[l_idx] );

        object_search_space  =3D path_concat_permutations(interp,
                                                        object_name,
                                                        get_search_space(in=
terp,
                                                                         hl=
l,
                                                                         *l=
oader ,
                                                                         SE=
ARCH_TABLE_EXT ));
        if ( TRACE_ENABLED ) {
            n =3D VTABLE_elements(interp, object_search_space);
            for( i =3D 0 ; i < n ; i++ )
                SEARCH_TRACE_PSTRING( "object  %s,\n" ,
                                      VTABLE_get_string_keyed_int(interp,
                                                                  object_se=
arch_space, i ));
        }

        /* If it is an absolute path try it now. If it fails skip the rest
         of the search for this loader */

        if (parrot_path_is_abs(interp, object_name)) {
          no_paths_available:
            /* search-order 3 , search-order 4 */


            file =3D fs_search_with_prefix(interp, object_search_space, NUL=
L);
            return_if_found( file , ft_index_to_mask(l_idx) );

            l_idx =3D next_by_load_prefer(l_idx);
            continue;
        }

        /* we should always get a path search space unless the "parrot" sea=
rch
         * space is broken in the tree. An extension table is not required.=
 */

        path_search_space =3D get_search_space(interp, hll, *loader , SEARC=
H_TABLE_PATH );
        if ( !path_search_space ) {
            Parrot_warn(interp,PARROT_WARNINGS_UNDEF_FLAG,
                        "the parrot search paths are undefined including th=
ose built-in to parrot !\n");
            goto no_paths_available;
        }

        /* now iterate through the paths,
         * incorperating the value of PARROT_RUNTIME as well */

        n =3D VTABLE_elements(interp, path_search_space);

        for( i =3D 0; i < n ; i++ ) {
            STRING *path =3D VTABLE_get_string_keyed_int(interp, path_searc=
h_space, i);
            SEARCH_TRACE_PSTRING( "looking in path: %s\n" , path );

            if ( prefix
                 && string_length(interp, prefix)
                 && !parrot_path_is_abs(interp,path)) {
                /* search-exception 1 */

                path =3D parrot_path_concat(interp, prefix , path);
            }

            file =3D fs_search_with_prefix(interp, object_search_space, pat=
h);
            return_if_found( file , ft_index_to_mask(l_idx) );
            /* search-order 2 */
        }

        l_idx =3D next_by_load_prefer(l_idx);
    }

    return NULL;
}

static STRING*
query_runtime_prefix ( Interp* interp ) {

    STRING* prefix;

    int free_it;
    char *env;

    env =3D Parrot_getenv("PARROT_RUNTIME", &free_it);

    if (env) {
        prefix =3D string_from_cstring(interp, env, 0);
        if (free_it)
            mem_sys_free(env);

        return prefix;
    }

    return NULL;
}

/*

=3Ditem C<STRING* Parrot_get_runtime_prefix(Interp * )>

return the runtime prefix in the PMC string C<prefix>. The
config hash is used first if given, then the value of the
environment variable PARROT_RUNTIME. If neither are found
NULL is returned.
=3Dcut

*/

STRING*
Parrot_get_runtime_prefix (Interp *interp ) {

    PMC *config_hash;

    STRING *key, *can_fail; /* can_fail , for storing string pointers from
                               functions that may fail to return a prefix v=
alue
                      */

    /* first look in the config hash for a user specified path */

    config_hash =3D VTABLE_get_pmc_keyed_int(interp, interp->iglobals,
            (INTVAL) IGLOBALS_CONFIG_HASH);

    if (VTABLE_elements(interp, config_hash)) {
        key =3D CONST_STRING(interp, "prefix");
        can_fail =3D VTABLE_get_string_keyed_str(interp, config_hash, key);

        if ( can_fail ) {
            /*
              TODO:
              shouldn't we do some sanity here ?  , assuming this can be
              set by random code/input we should see if it even exists.
            */

            return can_fail;
        }
    }

    /*
      fallback:

      no value was found in the config hash so try a system query, if
      that fails as well return the default.
    */

    return query_runtime_prefix(interp);
}

/*

=3Dback

=3Dhead1 SEE ALSO

F<include/parrot/library.h>

=3Dcut

*/


/*
 * Local variables:
 *   c-file-style: "parrot"
 * End:
 * vim: expandtab shiftwidth=3D4:
 */

--MP_ux610Fd/3=qvuKZL1LpXiK5--

--Sig_hH4K/e4LJpl=9/nbtg7DT3R
Content-Type: application/pgp-signature; name=signature.asc
Content-Disposition: attachment; filename=signature.asc

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.6 (GNU/Linux)

iD8DBQFGSsAMdfRchrkBInkRAuiZAJ0aNhnUZMRTyxxjaAusKiAJJZqdngCfUBe3
/fYwhIe9VKqxvi31GKIfTQk=
=IYRB
-----END PGP SIGNATURE-----

--Sig_hH4K/e4LJpl=9/nbtg7DT3R--

