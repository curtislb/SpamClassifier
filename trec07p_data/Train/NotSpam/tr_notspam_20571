From perl6-all-return-82100-ktwarwic=speedy.uwaterloo.ca@perl.org  Tue Jun 19 12:19:12 2007
Return-Path: <perl6-all-return-82100-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5JGJBL9031438
	for <ktwarwic@flax9.uwaterloo.ca>; Tue, 19 Jun 2007 12:19:11 -0400
Received: (qmail 7397 invoked by uid 514); 19 Jun 2007 16:19:08 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 7385 invoked from network); 19 Jun 2007 16:19:07 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=1.4 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,PLING_QUERY,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: domain of bailey.charles@gmail.com designates 66.249.92.171 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=PaMZirgGikWx+Y3ksuw8sRw1EQCyiUDDLU8lFfpjq6tIdBX9NSik/uqYZCBX/VQam6wz50LJx2L6clmAeYYLFhpHlojSMmvSXawIFbwKM9Q9sXt0kXk8GhxxGI3mbjoVaSf7ak6iW9PRiIblLUSjLOTQkdeITGfVEa+jt3lr5RM=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=QFMNel5X7e9uH/xYFW4g/D7DK1UNACSObCzhpSGZskntGxBKAODZXcmu4ST00dDPRFMTKzXNb0m9qNFOw+CqTWixamDJlzriBtbDMJimXuwzPkb7hzM0w007h6JaJ54gxc4aBk7uScPHYGVsfgUS0KFlleQAVnEHs3l3hu8nzPQ=
Message-ID: <b78749dd0706190850h3a25ecb0h98e862e19c65c105@mail.gmail.com>
Date: Tue, 19 Jun 2007 11:50:35 -0400
From: "Charles Bailey" <bailey.charles@gmail.com>
To: p6l <perl6-language@perl.org>
Subject: Re: Generalizing ?? !!
In-Reply-To: <20070614002232.GA19857@wall.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <061120072038.14824.466DB2B7000D3E23000039E822058844849D0E0909070DD20ED2059D0E03@comcast.net>
	 <ef30550b0706111403y50d449c0q5fa79c580f92c4c7@mail.gmail.com>
	 <7ca3f0160706111412u61a1a869xec62472e9cca113f@mail.gmail.com>
	 <b78749dd0706131408r4768e54as75b3f71fd40d458b@mail.gmail.com>
	 <20070614002232.GA19857@wall.org>
X-Virus-Checked: Checked
X-Virus-Checked: Checked
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=1.4 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,PLING_QUERY,SPF_PASS

[ Sorry to fall off the net for several days . . .]

On 6/13/07, Larry Wall <larry@wall.org> wrote:
> On Wed, Jun 13, 2007 at 05:08:34PM -0400, Charles Bailey wrote:
> : I'm concerned that the relevant precedent isn't just Perl5.  The ?: spelling
> : of the ternary is pretty deeply embedded in programming languages -- I'm
> : hard pressed to think of a widely used language in the past 10-15 years that
> : spells it differently (though that may say more about my experience than the
> : universe of "widely used" languages).
>
> It's really just the C-based languages.  Lots of popular languages don't
> even give you a conditional operator, and seem to get by okay without it.

Granted, but that's 8 of the top 10 languages on the current TIOBE list.
Lies, damned lies, and statistics . . .

> That had to be one of the main design considerations for Perl 1, but now
> we've got the "design capital" to fix some things.  The Perl 6 mandate
> is not universal compatibility (which Perl 5 still represents in a
> way), but the chance to fix everything that needs fixing.  And this
> one of the things I think C got wrong.  Perl 6 is looking more for

You may well be right here -- you're certainly more qualified than I
in language building -- but this line of reasoning leaves me with
something of an uneasy feeling.  I'm not sure Perl6 has all that much
of what I'll call "practical design capital", by which I mean ability
to change practice by making new ideas common usage.  I'm
distinguishing that from what I'll call "formal design capital" -- the
ability to change practice by having good ideas to which people will
listen -- of which I think Perl6 has a good amount.

I think this distinction can be important for several reasons, not the
least of which is that they may antagonize one another.  I'd argue
that Perl's FDC arises from its current widespread acceptance, showing
that many people think it currently implements "good" solutions to
some of the problems they need to solve, and from the respect given to
~~@Larry, because they've implemented those solutions, discussed them
intelligently, and are in general good people.  This sort of capital
works best for big ideas, whether by putting them out for discussion
(read: persuasion), or by implementing them in a new language.

OTOH, I'd argue that PDC is more of a transient phenomenon, and arises
from the comfort users have with the language, whether it's that it
"feels natural" overall, or that they recall being able to accomplish
some necessary task(s) easily or elegantly.  In some respects, it's
the net-equivalent of "what have you done for me lately?"  I think
Perl 6 has less of a reserve here, partly because of its long
gestation, partly because of its informal reputation as a small step
up from APL in readability (cue the JAPH culture), and partly because
of its reputation for being disorganized and unsecure.  (As an aside,
let me take pains to emphasize -- this being email -- that I am not
arguing that these claims are true, not that, to the extent they're
true they're Perl's fault.  Nonetheless, they exist,  in the minds of
potential users, and of the managers/vendors/spinners that specify
what language choices are allowed.)  I also think that one wins or
loses in this arena as often due to the little things -- whether
something is easy and intuitive -- as to the big things -- whether
something is possible and clean.

Why do I belabor the obvious so?  Because I think the discussion about
the ternary operator, like several others recently on these lists,
might be conflating the two, and might be missing an opportunity
thereby.  In some cases, Perl6 will want to be the language on a
hilltop, beckoning others to follow into the land of elegance and
orthogonality.  But there's also something to be said for ingratiating
and subverting.  That, in turn, implies that there will be cases where
it's better to make a suboptimal choice in a small matter -- not
sacrificing major principles, and not jumping through hoops inside the
box to save the user two keystrokes, but inculturating in order to
better be able to make the really important points.

Whether ?: is a better choice in this respect than ??!! is perhaps a
matter of taste, and I'm not going to argue that either is the
Platonic spelling of the ternary operator.  As best I can articulate
it, I think I'm arguing for a more explicit balance of "better" with
"comfortable" in making these choices.

I don't mean by any of this to devalue the extensive community input
into the early stages of Perl6 design.  If anything, I may be
undervaluing it, since it occurred during a time when RL required that
I essentally drop out of the Perl community, and I missed much of the
detail.  I also don't mean to ignore the ongoing input via these
lists, and I'm sure several other channels.  It's also true that at
some point, to get a working result, The Cabal has to make design
decisions whether or not The Masses have come to consensus.  That can
be hard for both sides, because any self-respecting Cabal has good
communication internally, and exchange with the rest of the world can
sometimes (actually|appear to) fall off.

> semantic and pragmatic compatibility than syntactic compatibility.
> We won't have to teach anyone the *idea* of a conditional operator,
> just send them off to look for the green bikeshed.

To follow this metaphor, I think that outside the real disciples,
Perl6 will get N bikesheds, for some small value of N, before a user
wanders off to another locale where she doesn't need to consult the
map so often.

> Certainly, all other things being equal (give or take), we'll go
> for something familiar.  And I'll say we even put a thumb on the
> scales in favor of what Perl 5 programmers expect, now and again.
> But sometimes it's still right to break something, and reduce the
> level of compatibility concern down to just making sure they get
> a good error message if they fall into old habits.  In that case
> it means making something different enough that the old one can be
> recognized and dealt with.  At some point you put the new wine into
> new wine skins and throw the old ones out.

Absolutely.  And Perl6 provides a singularity where it's possible to
get a bunch of new wine skins into service.  But where the old
wineskins still hold, er, wine, we might think twice about using the
newfangled double-stitched skins.

Ironically, specific error messages will probably cut both ways.  It's
nice to be told what the likely error is, but some subset of readers
will respond, "If you knew what I meant, just do it!"

> It's not really that common, compared to, say, assignment, which you'll note
> we've pretty much left untouched, except for relaxing the requirement for
> parens on the right side of list assignment.

Yep.  For that matter, if I had to pick one change in this area that'd
have maximum impact, I'd say a good assign-if-uninitialized idiom
would be way ahead of an if-then-else idiom.

> : <paranoia>There's also the less important social problem that Perl6 has
> : already spent a lot of goodwill in its long gestation.  I think it can be
> : earned back by doing things well, because they've been thought through
> : carefully, but the language will be viewed with some initial skepticism.
>
> I would like to think that "doing things well" is exactly the approach

Of course.  Again, the medium may be garbling things here, or it may
just be my lousy writing.  I'm certain that everyone in the discussion
is trying to do things well, and that @Larry's version of well is
pretty good.  Hence Rule 1 works most of the time.  But it's nice to
have Rule 2 around, too.

> we're taking.  We're not optimizing for the past, but for the future.
> This might rehuffmanization of everything might influence more
> generations of computer language than we can possibly imagine.

It could (I hope).  But I also want to be careful we're not building Esperanto.

> Certainly.  The main problem is not so much that ? is ambiguous,
> but that the : is.  It's somewhat ambiguous with labels
> (though arguably those don't generally occur in the same context).
> The killer is that it's formally ambiguous with the colon that is
> used to indicate the list of an unparenthesized method call (in either
> direct or indirect form).  That colon occurs where an infix is expected.
> It's also ambiguous with adverbs, which can occur in that position
> when modifying a preceding operator, as in 1..100:by(3).  The fact that
> ?: tends to be used as one term in an expression means that things tend
> to be written compactly without spacing, which amplifies that ambiguity.

ObTopic: I'm readily convinced that the special-casing needed to get
the : in ?: right wouldn't be worth it, on balance.

> On the plus side, the fact that it's the : and not the ? that is most
> problematic means that (unless the user adds their own infix:<?>) it's
> pretty easy to recognize the old usage and give a good error message at
> compile time.  And I think that's all that's really necessary here.
> It's the differences that silently produce an unexpected result
> that we'll really need to worry about in terms of user satisfaction
> and FAQ minimization.  That's also why there's no infix:<.>, so at

Concur that it's the larger issue.  Respectfully dissent (if it's at
all what you meant) that pointing out the error of using a borrowed
idiom is as much as is needed.  It may be the best we can do, but I
like to think of it more as caving in to necessity than as meeting my
goal.

> These are the everyday worries of a language designer.  Well, me anyway...

I appreciate your taking the time to discuss this.  To the extent that
my comments weigh heavily, feel free to sprinkle smilies as needed, or
just junk the whole thing.  Otherwise, thanks for letting me take my
turn as Chicken Little.

-- 
Regards,
Charles Bailey
Lists: bailey _dot_ charles _at_ gmail _dot_ com
Other: bailey _at_ newman _dot_ upenn _dot_ edu

