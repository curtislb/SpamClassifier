From samba-technical-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org  Tue Jun 12 10:17:43 2007
Return-Path: <samba-technical-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org>
Received: from lists.samba.org (mail.samba.org [66.70.73.150])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l5CEHgL9027233
	for <ktwarwic@speedy.uwaterloo.ca>; Tue, 12 Jun 2007 10:17:43 -0400
Received: from dp.samba.org (localhost [127.0.0.1])
	by lists.samba.org (Postfix) with ESMTP id 31889162C3B
	for <ktwarwic@speedy.uwaterloo.ca>; Tue, 12 Jun 2007 14:17:42 +0000 (GMT)
X-Spam-Checker-Version: SpamAssassin 3.1.7 (2006-10-05) on dp.samba.org
X-Spam-Level: 
X-Spam-Status: No, score=-3.0 required=3.8 tests=ALL_TRUSTED,AWL,BAYES_00 
	autolearn=ham version=3.1.7
X-Original-To: samba-technical@lists.samba.org
Delivered-To: samba-technical@lists.samba.org
Received: from localhost6.localdomain6 (localhost [127.0.0.1])
	by lists.samba.org (Postfix) with ESMTP id 0B448162AD3
	for <samba-technical@lists.samba.org>;
	Tue, 12 Jun 2007 14:16:36 +0000 (GMT)
From: Kai Blin <kai@samba.org>
To: samba-technical@lists.samba.org
Date: Tue, 12 Jun 2007 16:15:01 +0200
User-Agent: KMail/1.9.6
Organization: Samba Team
MIME-Version: 1.0
Content-Type: multipart/signed; boundary="nextPart1836331.kTcxp0J0QZ";
	protocol="application/pgp-signature"; micalg=pgp-sha1
Content-Transfer-Encoding: 7bit
Message-Id: <200706121615.07141.kai@samba.org>
Subject: [Samba4][PATCH] Move nsstest to nsswitch/
X-BeenThere: samba-technical@lists.samba.org
X-Mailman-Version: 2.1.5
Precedence: list
List-Id: "Discussions on Samba internals. For general questions please
	subscribe to the list samba@samba.org"
	<samba-technical.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/listinfo/samba-technical>, 
	<mailto:samba-technical-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/archive/samba-technical>
List-Post: <mailto:samba-technical@lists.samba.org>
List-Help: <mailto:samba-technical-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-technical>,
	<mailto:samba-technical-request@lists.samba.org?subject=subscribe>
Sender: samba-technical-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Errors-To: samba-technical-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org

--nextPart1836331.kTcxp0J0QZ
Content-Type: multipart/mixed;
  boundary="Boundary-01=_mpqbG7kCIa7kfpV"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

--Boundary-01=_mpqbG7kCIa7kfpV
Content-Type: text/plain;
  charset="us-ascii"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: inline

As per metze's suggestion, move the nsstest files from torture/ to nsswitch=
/.

The diff looks a bit weird. I blame svn mv for this. svn st looks ok.

[kai@blackjack source]$ svn st
A  +   nsswitch/nsstest.m4
A  +   nsswitch/nsstest.c
A  +   nsswitch/nsstest.h
M      nsswitch/config.mk
M      configure.ac
D      torture/nsstest.m4
M      torture/config.mk
D      torture/nsstest.c
D      torture/nsstest.h

Cheers,
Kai

=2D-=20
Kai Blin
WorldForge developer  http://www.worldforge.org/
Wine developer        http://wiki.winehq.org/KaiBlin
Samba team member     http://us1.samba.org/samba/team/
=2D-
Will code for cotton.

--Boundary-01=_mpqbG7kCIa7kfpV
Content-Type: text/x-diff;
  charset="us-ascii";
  name="2007061201.diff"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: attachment;
	filename="2007061201.diff"

Index: nsswitch/nsstest.c
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
=2D-- nsswitch/nsstest.c	(revision 23402)
+++ nsswitch/nsstest.c	(working copy)
@@ -20,7 +20,7 @@
=20
 #include "includes.h"
=20
=2D#include "torture/nsstest.h"
+#include "nsswitch/nsstest.h"
=20
 static const char *so_path =3D "/lib/libnss_winbind.so";
 static const char *nss_name =3D "winbind";
Index: nsswitch/config.mk
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
=2D-- nsswitch/config.mk	(revision 23402)
+++ nsswitch/config.mk	(working copy)
@@ -3,3 +3,15 @@
 SO_VERSION =3D 0
 DESCRIPTION =3D Client library for communicating with winbind
 OBJ_FILES =3D wb_common.o
+
+#################################
+# Start BINARY nsstest
+[BINARY::nsstest]
+INSTALLDIR =3D BINDIR
+OBJ_FILES =3D \
+		nsstest.o
+PRIVATE_DEPENDENCIES =3D \
+		LIBSAMBA-UTIL \
+		LIBREPLACE_EXT
+# End BINARY nsstest
+#################################
Index: configure.ac
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
=2D-- configure.ac	(revision 23403)
+++ configure.ac	(working copy)
@@ -25,7 +25,7 @@
 m4_include(lib/popt/samba.m4)
 m4_include(lib/charset/config.m4)
 m4_include(lib/socket/config.m4)
=2Dm4_include(torture/nsstest.m4)
+m4_include(nsswitch/nsstest.m4)
=20
 #SMB_EXT_LIB_FROM_PKGCONFIG(LIBTALLOC, talloc >=3D 1.0,
 #			   [samba_cv_internal_talloc=3Dno],
Index: torture/nsstest.m4
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
=2D-- torture/nsstest.m4	(revision 23402)
+++ torture/nsstest.m4	(working copy)
@@ -1,9 +0,0 @@
=2Dcase "$host_os" in
=2D	*linux*)=20
=2D		SMB_ENABLE(nsstest,YES)
=2D	;;
=2D	*)
=2D		SMB_ENABLE(nsstest,NO)
=2D	;;
=2Desac
=2D
Index: torture/config.mk
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
=2D-- torture/config.mk	(revision 23403)
+++ torture/config.mk	(working copy)
@@ -358,18 +358,6 @@
 # End BINARY locktest
 #################################
=20
=2D#################################
=2D# Start BINARY nsstest
=2D[BINARY::nsstest]
=2DINSTALLDIR =3D BINDIR
=2DOBJ_FILES =3D \
=2D		nsstest.o
=2DPRIVATE_DEPENDENCIES =3D \
=2D		LIBSAMBA-UTIL \
=2D		LIBREPLACE_EXT
=2D# End BINARY nsstest
=2D#################################
=2D
 GCOV_FLAGS =3D -ftest-coverage -fprofile-arcs
 GCOV_LIBS =3D -lgcov
=20
Index: torture/nsstest.c
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
=2D-- torture/nsstest.c	(revision 23402)
+++ torture/nsstest.c	(working copy)
@@ -1,412 +0,0 @@
=2D/*=20
=2D   Unix SMB/CIFS implementation.
=2D   nss tester for winbindd
=2D   Copyright (C) Andrew Tridgell 2001
=2D  =20
=2D   This program is free software; you can redistribute it and/or modify
=2D   it under the terms of the GNU General Public License as published by
=2D   the Free Software Foundation; either version 2 of the License, or
=2D   (at your option) any later version.
=2D  =20
=2D   This program is distributed in the hope that it will be useful,
=2D   but WITHOUT ANY WARRANTY; without even the implied warranty of
=2D   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
=2D   GNU General Public License for more details.
=2D  =20
=2D   You should have received a copy of the GNU General Public License
=2D   along with this program; if not, write to the Free Software
=2D   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
=2D*/
=2D
=2D#include "includes.h"
=2D
=2D#include "torture/nsstest.h"
=2D
=2Dstatic const char *so_path =3D "/lib/libnss_winbind.so";
=2Dstatic const char *nss_name =3D "winbind";
=2Dstatic int nss_errno;
=2Dstatic NSS_STATUS last_error;
=2Dstatic int total_errors;
=2D
=2Dstatic void *find_fn(const char *name)
=2D{
=2D	char s[1024];
=2D	static void *h;
=2D	void *res;
=2D
=2D	snprintf(s,sizeof(s), "_nss_%s_%s", nss_name, name);
=2D
=2D	if (!h) {
=2D		h =3D dlopen(so_path, RTLD_LAZY);
=2D	}
=2D	if (!h) {
=2D		printf("Can't open shared library %s\n", so_path);
=2D		exit(1);
=2D	}
=2D	res =3D dlsym(h, s);
=2D	if (!res) {
=2D		printf("Can't find function %s\n", s);
=2D		return NULL;
=2D	}
=2D	return res;
=2D}
=2D
=2Dstatic void report_nss_error(const char *who, NSS_STATUS status)
=2D{
=2D	last_error =3D status;
=2D	total_errors++;
=2D	printf("ERROR %s: NSS_STATUS=3D%d  %d (nss_errno=3D%d)\n",=20
=2D	       who, status, NSS_STATUS_SUCCESS, nss_errno);
=2D}
=2D
=2Dstatic struct passwd *nss_getpwent(void)
=2D{
=2D	NSS_STATUS (*_nss_getpwent_r)(struct passwd *, char *,=20
=2D				      size_t , int *) =3D find_fn("getpwent_r");
=2D	static struct passwd pwd;
=2D	static char buf[1000];
=2D	NSS_STATUS status;
=2D
=2D	status =3D _nss_getpwent_r(&pwd, buf, sizeof(buf), &nss_errno);
=2D	if (status =3D=3D NSS_STATUS_NOTFOUND) {
=2D		return NULL;
=2D	}
=2D	if (status !=3D NSS_STATUS_SUCCESS) {
=2D		report_nss_error("getpwent", status);
=2D		return NULL;
=2D	}
=2D	return &pwd;
=2D}
=2D
=2Dstatic struct passwd *nss_getpwnam(const char *name)
=2D{
=2D	NSS_STATUS (*_nss_getpwnam_r)(const char *, struct passwd *, char *,=20
=2D				      size_t , int *) =3D find_fn("getpwnam_r");
=2D	static struct passwd pwd;
=2D	static char buf[1000];
=2D	NSS_STATUS status;
=2D=09
=2D	status =3D _nss_getpwnam_r(name, &pwd, buf, sizeof(buf), &nss_errno);
=2D	if (status =3D=3D NSS_STATUS_NOTFOUND) {
=2D		return NULL;
=2D	}
=2D	if (status !=3D NSS_STATUS_SUCCESS) {
=2D		report_nss_error("getpwnam", status);
=2D		return NULL;
=2D	}
=2D	return &pwd;
=2D}
=2D
=2Dstatic struct passwd *nss_getpwuid(uid_t uid)
=2D{
=2D	NSS_STATUS (*_nss_getpwuid_r)(uid_t , struct passwd *, char *,=20
=2D				      size_t , int *) =3D find_fn("getpwuid_r");
=2D	static struct passwd pwd;
=2D	static char buf[1000];
=2D	NSS_STATUS status;
=2D=09
=2D	status =3D _nss_getpwuid_r(uid, &pwd, buf, sizeof(buf), &nss_errno);
=2D	if (status =3D=3D NSS_STATUS_NOTFOUND) {
=2D		return NULL;
=2D	}
=2D	if (status !=3D NSS_STATUS_SUCCESS) {
=2D		report_nss_error("getpwuid", status);
=2D		return NULL;
=2D	}
=2D	return &pwd;
=2D}
=2D
=2Dstatic void nss_setpwent(void)
=2D{
=2D	NSS_STATUS (*_nss_setpwent)(void) =3D find_fn("setpwent");
=2D	NSS_STATUS status;
=2D	status =3D _nss_setpwent();
=2D	if (status !=3D NSS_STATUS_SUCCESS) {
=2D		report_nss_error("setpwent", status);
=2D	}
=2D}
=2D
=2Dstatic void nss_endpwent(void)
=2D{
=2D	NSS_STATUS (*_nss_endpwent)(void) =3D find_fn("endpwent");
=2D	NSS_STATUS status;
=2D	status =3D _nss_endpwent();
=2D	if (status !=3D NSS_STATUS_SUCCESS) {
=2D		report_nss_error("endpwent", status);
=2D	}
=2D}
=2D
=2D
=2Dstatic struct group *nss_getgrent(void)
=2D{
=2D	NSS_STATUS (*_nss_getgrent_r)(struct group *, char *,=20
=2D				      size_t , int *) =3D find_fn("getgrent_r");
=2D	static struct group grp;
=2D	static char *buf;
=2D	static int buflen =3D 1024;
=2D	NSS_STATUS status;
=2D
=2D	if (!buf) buf =3D malloc(buflen);
=2D
=2Dagain:=09
=2D	status =3D _nss_getgrent_r(&grp, buf, buflen, &nss_errno);
=2D	if (status =3D=3D NSS_STATUS_TRYAGAIN) {
=2D		buflen *=3D 2;
=2D		buf =3D realloc(buf, buflen);
=2D		goto again;
=2D	}
=2D	if (status =3D=3D NSS_STATUS_NOTFOUND) {
=2D		return NULL;
=2D	}
=2D	if (status !=3D NSS_STATUS_SUCCESS) {
=2D		report_nss_error("getgrent", status);
=2D		return NULL;
=2D	}
=2D	return &grp;
=2D}
=2D
=2Dstatic struct group *nss_getgrnam(const char *name)
=2D{
=2D	NSS_STATUS (*_nss_getgrnam_r)(const char *, struct group *, char *,=20
=2D				      size_t , int *) =3D find_fn("getgrnam_r");
=2D	static struct group grp;
=2D	static char *buf;
=2D	static int buflen =3D 1000;
=2D	NSS_STATUS status;
=2D
=2D	if (!buf) buf =3D malloc(buflen);
=2Dagain:=09
=2D	status =3D _nss_getgrnam_r(name, &grp, buf, buflen, &nss_errno);
=2D	if (status =3D=3D NSS_STATUS_TRYAGAIN) {
=2D		buflen *=3D 2;
=2D		buf =3D realloc(buf, buflen);
=2D		goto again;
=2D	}
=2D	if (status =3D=3D NSS_STATUS_NOTFOUND) {
=2D		return NULL;
=2D	}
=2D	if (status !=3D NSS_STATUS_SUCCESS) {
=2D		report_nss_error("getgrnam", status);
=2D		return NULL;
=2D	}
=2D	return &grp;
=2D}
=2D
=2Dstatic struct group *nss_getgrgid(gid_t gid)
=2D{
=2D	NSS_STATUS (*_nss_getgrgid_r)(gid_t , struct group *, char *,=20
=2D				      size_t , int *) =3D find_fn("getgrgid_r");
=2D	static struct group grp;
=2D	static char *buf;
=2D	static int buflen =3D 1000;
=2D	NSS_STATUS status;
=2D=09
=2D	if (!buf) buf =3D malloc(buflen);
=2Dagain:=09
=2D	status =3D _nss_getgrgid_r(gid, &grp, buf, buflen, &nss_errno);
=2D	if (status =3D=3D NSS_STATUS_TRYAGAIN) {
=2D		buflen *=3D 2;
=2D		buf =3D realloc(buf, buflen);
=2D		goto again;
=2D	}
=2D	if (status =3D=3D NSS_STATUS_NOTFOUND) {
=2D		return NULL;
=2D	}
=2D	if (status !=3D NSS_STATUS_SUCCESS) {
=2D		report_nss_error("getgrgid", status);
=2D		return NULL;
=2D	}
=2D	return &grp;
=2D}
=2D
=2Dstatic void nss_setgrent(void)
=2D{
=2D	NSS_STATUS (*_nss_setgrent)(void) =3D find_fn("setgrent");
=2D	NSS_STATUS status;
=2D	status =3D _nss_setgrent();
=2D	if (status !=3D NSS_STATUS_SUCCESS) {
=2D		report_nss_error("setgrent", status);
=2D	}
=2D}
=2D
=2Dstatic void nss_endgrent(void)
=2D{
=2D	NSS_STATUS (*_nss_endgrent)(void) =3D find_fn("endgrent");
=2D	NSS_STATUS status;
=2D	status =3D _nss_endgrent();
=2D	if (status !=3D NSS_STATUS_SUCCESS) {
=2D		report_nss_error("endgrent", status);
=2D	}
=2D}
=2D
=2Dstatic int nss_initgroups(char *user, gid_t group, gid_t **groups, long =
int *start, long int *size)
=2D{
=2D	NSS_STATUS (*_nss_initgroups)(char *, gid_t , long int *,
=2D				      long int *, gid_t **, long int , int *) =3D=20
=2D		find_fn("initgroups_dyn");
=2D	NSS_STATUS status;
=2D
=2D	if (!_nss_initgroups) return NSS_STATUS_UNAVAIL;
=2D
=2D	status =3D _nss_initgroups(user, group, start, size, groups, 0, &nss_er=
rno);
=2D	if (status !=3D NSS_STATUS_SUCCESS) {
=2D		report_nss_error("initgroups", status);
=2D	}
=2D	return status;
=2D}
=2D
=2Dstatic void print_passwd(struct passwd *pwd)
=2D{
=2D	printf("%s:%s:%d:%d:%s:%s:%s\n",=20
=2D	       pwd->pw_name,
=2D	       pwd->pw_passwd,
=2D	       pwd->pw_uid,
=2D	       pwd->pw_gid,
=2D	       pwd->pw_gecos,
=2D	       pwd->pw_dir,
=2D	       pwd->pw_shell);
=2D}
=2D
=2Dstatic void print_group(struct group *grp)
=2D{
=2D	int i;
=2D	printf("%s:%s:%d: ",=20
=2D	       grp->gr_name,
=2D	       grp->gr_passwd,
=2D	       grp->gr_gid);
=2D=09
=2D	if (!grp->gr_mem[0]) {
=2D		printf("\n");
=2D		return;
=2D	}
=2D=09
=2D	for (i=3D0; grp->gr_mem[i+1]; i++) {
=2D		printf("%s, ", grp->gr_mem[i]);
=2D	}
=2D	printf("%s\n", grp->gr_mem[i]);
=2D}
=2D
=2Dstatic void nss_test_initgroups(char *name, gid_t gid)
=2D{
=2D	long int size =3D 16;
=2D	long int start =3D 1;
=2D	gid_t *groups =3D NULL;
=2D	int i;
=2D	NSS_STATUS status;
=2D
=2D	groups =3D (gid_t *)malloc_array_p(gid_t, size);
=2D	groups[0] =3D gid;
=2D
=2D	status =3D nss_initgroups(name, gid, &groups, &start, &size);
=2D	if (status =3D=3D NSS_STATUS_UNAVAIL) {
=2D		printf("No initgroups fn\n");
=2D		return;
=2D	}
=2D
=2D	for (i=3D0; i<start-1; i++) {
=2D		printf("%d, ", groups[i]);
=2D	}
=2D	printf("%d\n", groups[i]);
=2D}
=2D
=2D
=2Dstatic void nss_test_users(void)
=2D{
=2D	struct passwd *pwd;
=2D
=2D	nss_setpwent();
=2D	/* loop over all users */
=2D	while ((pwd =3D nss_getpwent())) {
=2D		printf("Testing user %s\n", pwd->pw_name);
=2D		printf("getpwent:   "); print_passwd(pwd);
=2D		pwd =3D nss_getpwuid(pwd->pw_uid);
=2D		if (!pwd) {
=2D			total_errors++;
=2D			printf("ERROR: can't getpwuid\n");
=2D			continue;
=2D		}
=2D		printf("getpwuid:   "); print_passwd(pwd);
=2D		pwd =3D nss_getpwnam(pwd->pw_name);
=2D		if (!pwd) {
=2D			total_errors++;
=2D			printf("ERROR: can't getpwnam\n");
=2D			continue;
=2D		}
=2D		printf("getpwnam:   "); print_passwd(pwd);
=2D		printf("initgroups: "); nss_test_initgroups(pwd->pw_name, pwd->pw_gid);
=2D		printf("\n");
=2D	}
=2D	nss_endpwent();
=2D}
=2D
=2Dstatic void nss_test_groups(void)
=2D{
=2D	struct group *grp;
=2D
=2D	nss_setgrent();
=2D	/* loop over all groups */
=2D	while ((grp =3D nss_getgrent())) {
=2D		printf("Testing group %s\n", grp->gr_name);
=2D		printf("getgrent: "); print_group(grp);
=2D		grp =3D nss_getgrnam(grp->gr_name);
=2D		if (!grp) {
=2D			total_errors++;
=2D			printf("ERROR: can't getgrnam\n");
=2D			continue;
=2D		}
=2D		printf("getgrnam: "); print_group(grp);
=2D		grp =3D nss_getgrgid(grp->gr_gid);
=2D		if (!grp) {
=2D			total_errors++;
=2D			printf("ERROR: can't getgrgid\n");
=2D			continue;
=2D		}
=2D		printf("getgrgid: "); print_group(grp);
=2D		printf("\n");
=2D	}
=2D	nss_endgrent();
=2D}
=2D
=2Dstatic void nss_test_errors(void)
=2D{
=2D	struct passwd *pwd;
=2D	struct group *grp;
=2D
=2D	pwd =3D getpwnam("nosuchname");
=2D	if (pwd || last_error !=3D NSS_STATUS_NOTFOUND) {
=2D		total_errors++;
=2D		printf("ERROR Non existant user gave error %d\n", last_error);
=2D	}
=2D
=2D	pwd =3D getpwuid(0xFFF0);
=2D	if (pwd || last_error !=3D NSS_STATUS_NOTFOUND) {
=2D		total_errors++;
=2D		printf("ERROR Non existant uid gave error %d\n", last_error);
=2D	}
=2D
=2D	grp =3D getgrnam("nosuchgroup");
=2D	if (grp || last_error !=3D NSS_STATUS_NOTFOUND) {
=2D		total_errors++;
=2D		printf("ERROR Non existant group gave error %d\n", last_error);
=2D	}
=2D
=2D	grp =3D getgrgid(0xFFF0);
=2D	if (grp || last_error !=3D NSS_STATUS_NOTFOUND) {
=2D		total_errors++;
=2D		printf("ERROR Non existant gid gave error %d\n", last_error);
=2D	}
=2D}
=2D
=2D int main(int argc, char *argv[])
=2D{=09
=2D	if (argc > 1) so_path =3D argv[1];
=2D	if (argc > 2) nss_name =3D argv[2];
=2D
=2D	nss_test_users();
=2D	nss_test_groups();
=2D	nss_test_errors();
=2D
=2D	printf("total_errors=3D%d\n", total_errors);
=2D
=2D	return total_errors;
=2D}
Index: torture/nsstest.h
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D
=2D-- torture/nsstest.h	(revision 23402)
+++ torture/nsstest.h	(working copy)
@@ -1,116 +0,0 @@
=2D/*=20
=2D   Unix SMB/CIFS implementation.
=2D   nss includes for the nss tester
=2D   Copyright (C) Kai Blin 2007
=2D  =20
=2D   This program is free software; you can redistribute it and/or modify
=2D   it under the terms of the GNU General Public License as published by
=2D   the Free Software Foundation; either version 2 of the License, or
=2D   (at your option) any later version.
=2D  =20
=2D   This program is distributed in the hope that it will be useful,
=2D   but WITHOUT ANY WARRANTY; without even the implied warranty of
=2D   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
=2D   GNU General Public License for more details.
=2D  =20
=2D   You should have received a copy of the GNU General Public License
=2D   along with this program; if not, write to the Free Software
=2D   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
=2D*/
=2D
=2D#ifndef _NSSTEST_H
=2D#define _NSSTEST_H
=2D
=2D#include <pwd.h>
=2D#include <grp.h>
=2D
=2D#ifdef HAVE_NSS_COMMON_H
=2D
=2D/*=20
=2D * Sun Solaris
=2D */
=2D
=2D#include <nss_common.h>
=2D#include <nss_dbdefs.h>
=2D#include <nsswitch.h>
=2D
=2Dtypedef nss_status_t NSS_STATUS;
=2D
=2D#define NSS_STATUS_SUCCESS     NSS_SUCCESS
=2D#define NSS_STATUS_NOTFOUND    NSS_NOTFOUND
=2D#define NSS_STATUS_UNAVAIL     NSS_UNAVAIL
=2D#define NSS_STATUS_TRYAGAIN    NSS_TRYAGAIN
=2D
=2D#elif HAVE_NSS_H
=2D
=2D/*
=2D * Linux (glibc)
=2D */
=2D
=2D#include <nss.h>
=2Dtypedef enum nss_status NSS_STATUS;
=2D
=2D#elif HAVE_NS_API_H
=2D
=2D/*
=2D * SGI IRIX
=2D */
=2D
=2D#ifdef DATUM
=2D#define _DATUM_DEFINED
=2D#endif
=2D
=2D#include <ns_api.h>
=2D
=2Dtypedef enum
=2D{
=2D	NSS_STATUS_SUCCESS=3DNS_SUCCESS,
=2D		NSS_STATUS_NOTFOUND=3DNS_NOTFOUND,
=2D		NSS_STATUS_UNAVAIL=3DNS_UNAVAIL,
=2D		NSS_STATUS_TRYAGAIN=3DNS_TRYAGAIN
=2D} NSS_STATUS;
=2D
=2D#define NSD_MEM_STATIC 0
=2D#define NSD_MEM_VOLATILE 1
=2D#define NSD_MEM_DYNAMIC 2
=2D
=2D#elif defined(HPUX) && defined(HAVE_NSSWITCH_H)
=2D
=2D/* HP-UX 11 */
=2D
=2D#include <nsswitch.h>
=2D
=2D#define NSS_STATUS_SUCCESS     NSS_SUCCESS
=2D#define NSS_STATUS_NOTFOUND    NSS_NOTFOUND
=2D#define NSS_STATUS_UNAVAIL     NSS_UNAVAIL
=2D#define NSS_STATUS_TRYAGAIN    NSS_TRYAGAIN
=2D
=2D#ifdef HAVE_SYNCH_H
=2D#include <synch.h>
=2D#endif
=2D#ifdef HAVE_PTHREAD_H
=2D#include <pthread.h>
=2D#endif
=2D
=2Dtypedef enum {
=2D	NSS_SUCCESS,
=2D	NSS_NOTFOUND,
=2D	NSS_UNAVAIL,
=2D	NSS_TRYAGAIN
=2D} nss_status_t;
=2D
=2Dtypedef nss_status_t NSS_STATUS;
=2D
=2D#else /* Nothing's defined. Neither solaris nor gnu nor sun nor hp */
=2D
=2Dtypedef enum
=2D{
=2D	NSS_STATUS_SUCCESS=3D0,
=2D	NSS_STATUS_NOTFOUND=3D1,
=2D	NSS_STATUS_UNAVAIL=3D2,
=2D	NSS_STATUS_TRYAGAIN=3D3
=2D} NSS_STATUS;
=2D
=2D#endif
=2D
=2D#endif /* _NSSTEST_H */

--Boundary-01=_mpqbG7kCIa7kfpV--

--nextPart1836331.kTcxp0J0QZ
Content-Type: application/pgp-signature

-----BEGIN PGP SIGNATURE-----
Version: GnuPG v1.4.7 (GNU/Linux)

iD8DBQBGbqpmEKXX/bF2FpQRAit4AJ0RId3DvyOEeoM/8bmSMJMC6tpkwQCgprj/
JFVoQbcpN18XuKED3dBpdo4=
=itrp
-----END PGP SIGNATURE-----

--nextPart1836331.kTcxp0J0QZ--

