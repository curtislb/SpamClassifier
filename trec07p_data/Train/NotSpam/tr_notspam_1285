From samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org  Thu Apr 12 21:01:41 2007
Return-Path: <samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org>
Received: from lists.samba.org (mail.samba.org [66.70.73.150])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l3D11f0I004375
	for <ktwarwic@speedy.uwaterloo.ca>; Thu, 12 Apr 2007 21:01:41 -0400
Received: from dp.samba.org (localhost [127.0.0.1])
	by lists.samba.org (Postfix) with ESMTP id 38121162C1E
	for <ktwarwic@speedy.uwaterloo.ca>; Fri, 13 Apr 2007 01:01:17 +0000 (GMT)
X-Spam-Checker-Version: SpamAssassin 3.1.7 (2006-10-05) on dp.samba.org
X-Spam-Level: 
X-Spam-Status: No, score=0.2 required=3.8 tests=AWL,BAYES_00,NO_REAL_NAME,
	NO_RELAYS,RCVD_IN_DSBL autolearn=no version=3.1.7
X-Original-To: samba-cvs@samba.org
Delivered-To: samba-cvs@samba.org
Received: by lists.samba.org (Postfix, from userid 549)
	id 3271E162AD2; Fri, 13 Apr 2007 01:00:45 +0000 (GMT)
To: samba-cvs@samba.org
From: jra@samba.org
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Message-Id: <20070413010045.3271E162AD2@lists.samba.org>
Date: Fri, 13 Apr 2007 01:00:45 +0000 (GMT)
Subject: svn commit: samba r22206 - in branches/SAMBA_3_0/source/nsswitch: .
X-BeenThere: samba-cvs@lists.samba.org
X-Mailman-Version: 2.1.5
Precedence: list
Reply-To: samba-technical@lists.samba.org
List-Id: Samba CVS and subversion commit messages <samba-cvs.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/archive/samba-cvs>
List-Post: <mailto:samba-cvs@lists.samba.org>
List-Help: <mailto:samba-cvs-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=subscribe>
Sender: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Errors-To: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Status: O
Content-Length: 5082
Lines: 244

Author: jra
Date: 2007-04-13 01:00:44 +0000 (Fri, 13 Apr 2007)
New Revision: 22206

WebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22206

Log:
Added boilerplate to be filled in for other validation functions.
Jeremy.

Modified:
   branches/SAMBA_3_0/source/nsswitch/winbindd_cache.c


Changeset:
Modified: branches/SAMBA_3_0/source/nsswitch/winbindd_cache.c
===================================================================
--- branches/SAMBA_3_0/source/nsswitch/winbindd_cache.c	2007-04-13 00:39:06 UTC (rev 22205)
+++ branches/SAMBA_3_0/source/nsswitch/winbindd_cache.c	2007-04-13 01:00:44 UTC (rev 22206)
@@ -2730,61 +2730,224 @@
 
 static int validate_loc_pol(TALLOC_CTX *mem_ctx, const char *keystr, TDB_DATA dbuf)
 {
+	struct cache_entry *centry = create_centry_validate(keystr, dbuf);
+
+	if (!centry) {
+		return 1;
+	}
+
+	(void)centry_nttime(centry);
+	(void)centry_nttime(centry);
+	(void)centry_uint16(centry);
+
+	centry_free(centry);
+
+	if (bad_cache_entry) {
+		return 1;
+	}
+	DEBUG(10,("validate_loc_pol: %s ok\n", keystr));
 	return 0;
 }
 
 static int validate_pwd_pol(TALLOC_CTX *mem_ctx, const char *keystr, TDB_DATA dbuf)
 {
+	struct cache_entry *centry = create_centry_validate(keystr, dbuf);
+
+	if (!centry) {
+		return 1;
+	}
+
+	/* FIXME - fill in details here... */
+
+	centry_free(centry);
+
+	if (bad_cache_entry) {
+		return 1;
+	}
+	DEBUG(10,("validate_pwd_pol: %s ok\n", keystr));
 	return 0;
 }
 
 static int validate_cred(TALLOC_CTX *mem_ctx, const char *keystr, TDB_DATA dbuf)
 {
+	struct cache_entry *centry = create_centry_validate(keystr, dbuf);
+
+	if (!centry) {
+		return 1;
+	}
+
+	/* FIXME - fill in details here... */
+
+	centry_free(centry);
+
+	if (bad_cache_entry) {
+		return 1;
+	}
+	DEBUG(10,("validate_cred: %s ok\n", keystr));
 	return 0;
 }
 
 static int validate_ul(TALLOC_CTX *mem_ctx, const char *keystr, TDB_DATA dbuf)
 {
+	struct cache_entry *centry = create_centry_validate(keystr, dbuf);
+
+	if (!centry) {
+		return 1;
+	}
+
+	/* FIXME - fill in details here... */
+
+	centry_free(centry);
+
+	if (bad_cache_entry) {
+		return 1;
+	}
+	DEBUG(10,("validate_ul: %s ok\n", keystr));
 	return 0;
 }
 
 static int validate_gl(TALLOC_CTX *mem_ctx, const char *keystr, TDB_DATA dbuf)
 {
+	struct cache_entry *centry = create_centry_validate(keystr, dbuf);
+
+	if (!centry) {
+		return 1;
+	}
+
+	/* FIXME - fill in details here... */
+
+	centry_free(centry);
+
+	if (bad_cache_entry) {
+		return 1;
+	}
+	DEBUG(10,("validate_gl: %s ok\n", keystr));
 	return 0;
 }
 
 static int validate_ug(TALLOC_CTX *mem_ctx, const char *keystr, TDB_DATA dbuf)
 {
+	struct cache_entry *centry = create_centry_validate(keystr, dbuf);
+
+	if (!centry) {
+		return 1;
+	}
+
+	/* FIXME - fill in details here... */
+
+	centry_free(centry);
+
+	if (bad_cache_entry) {
+		return 1;
+	}
+	DEBUG(10,("validate_ug: %s ok\n", keystr));
 	return 0;
 }
 
 static int validate_ua(TALLOC_CTX *mem_ctx, const char *keystr, TDB_DATA dbuf)
 {
+	struct cache_entry *centry = create_centry_validate(keystr, dbuf);
+
+	if (!centry) {
+		return 1;
+	}
+
+	/* FIXME - fill in details here... */
+
+	centry_free(centry);
+
+	if (bad_cache_entry) {
+		return 1;
+	}
+	DEBUG(10,("validate_ua: %s ok\n", keystr));
 	return 0;
 }
 
 static int validate_gm(TALLOC_CTX *mem_ctx, const char *keystr, TDB_DATA dbuf)
 {
+	struct cache_entry *centry = create_centry_validate(keystr, dbuf);
+
+	if (!centry) {
+		return 1;
+	}
+
+	/* FIXME - fill in details here... */
+
+	centry_free(centry);
+
+	if (bad_cache_entry) {
+		return 1;
+	}
+	DEBUG(10,("validate_gm: %s ok\n", keystr));
 	return 0;
 }
 
 static int validate_dr(TALLOC_CTX *mem_ctx, const char *keystr, TDB_DATA dbuf)
 {
+	struct cache_entry *centry = create_centry_validate(keystr, dbuf);
+
+	if (!centry) {
+		return 1;
+	}
+
+	/* FIXME - fill in details here... */
+
+	centry_free(centry);
+
+	if (bad_cache_entry) {
+		return 1;
+	}
+	DEBUG(10,("validate_dr: %s ok\n", keystr));
 	return 0;
 }
 
 static int validate_de(TALLOC_CTX *mem_ctx, const char *keystr, TDB_DATA dbuf)
 {
+	struct cache_entry *centry = create_centry_validate(keystr, dbuf);
+
+	if (!centry) {
+		return 1;
+	}
+
+	/* FIXME - fill in details here... */
+
+	centry_free(centry);
+
+	if (bad_cache_entry) {
+		return 1;
+	}
+	DEBUG(10,("validate_de: %s ok\n", keystr));
 	return 0;
 }
 
 static int validate_trustdoms(TALLOC_CTX *mem_ctx, const char *keystr, TDB_DATA dbuf)
 {
+	struct cache_entry *centry = create_centry_validate(keystr, dbuf);
+
+	if (!centry) {
+		return 1;
+	}
+
+	/* FIXME - fill in details here... */
+
+	centry_free(centry);
+
+	if (bad_cache_entry) {
+		return 1;
+	}
+	DEBUG(10,("validate_trustdoms: %s ok\n", keystr));
 	return 0;
 }
 
 static int validate_offline(TALLOC_CTX *mem_ctx, const char *keystr, TDB_DATA dbuf)
 {
+	if (dbuf.dsize != 4) {
+		DEBUG(0,("validate_offline: Corrupt cache for key %s (len %u != 4) ?\n",
+				keystr, (unsigned int)dbuf.dsize ));
+		bad_cache_entry = True;
+		return 1;
+	}
+	DEBUG(10,("validate_offline: %s ok\n", keystr));
 	return 0;
 }
 

