From perl6-all-return-81746-ktwarwic=speedy.uwaterloo.ca@perl.org  Sat Jun  2 09:03:29 2007
Return-Path: <perl6-all-return-81746-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l52D3RhB023300
	for <ktwarwic@flax9.uwaterloo.ca>; Sat, 2 Jun 2007 09:03:28 -0400
Received: (qmail 30343 invoked by uid 514); 2 Jun 2007 13:03:20 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 30325 invoked from network); 2 Jun 2007 13:03:20 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
Subject: [perl #43107] t/tools/pmc2cutils/05-gen_c:  Warnings being thrown in testing of Parrot::Pmc2c::Pmc2cMain 
From: "James Keenan via RT" <parrotbug-followup@parrotcode.org>
Reply-To: parrotbug-followup@parrotcode.org
In-Reply-To: <rt-3.6.HEAD-1668-1180752400-725.43107-15-0@perl.org>
References: <RT-Ticket-43107@perl.org> <parrotbug_0.6.1_20809_1180741032@li11-226> <rt-3.6.HEAD-1668-1180741566-713.43107-72-0@perl.org> <18016.55714.879912.186306@rgrjr.dyndns.org> <rt-3.6.HEAD-1668-1180752400-725.43107-15-0@perl.org>
Message-ID: <rt-3.6.HEAD-1668-1180786359-1971.43107-15-0@perl.org>
X-RT-Loop-Prevention: perl
RT-Ticket: perl #43107
Managed-by: RT 3.6.HEAD (http://www.bestpractical.com/rt/)
RT-Originator: jkeen@verizon.net
Cc: perl6-internals@perl.org
To: "OtherRecipients of perl Ticket #43107": ;
MIME-Version: 1.0
X-RT-Original-Encoding: utf-8
Content-type: multipart/mixed; boundary="----------=_1180786361-1668-50"
Date: Sat, 02 Jun 2007 05:12:41 -0700
X-Virus-Checked: Checked
X-Virus-Checked: Checked
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,SPF_PASS

------------=_1180786361-1668-50
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit

On Fri Jun 01 19:46:40 2007, rgrjr wrote:
> This is from the "Small tweak to Pmc2c.pm" I posted on 19-May and
> committed as r18646 on 26-May.  Note that lib/Parrot/Pmc2c.pm is not
> actually doing anything different now, it's just telling you that none
> of the code for these methods is being used in the generated C file.
> So
> they are certainly not being tested now, and possibly haven't been for
> a
> while.

When the expected behavior of a block of code is to throw warnings, then tests should be 
written to make sure those warnings are, in fact, being thrown.  We can do this in our Perl 5-
based tests by using Parrot::IO::Capture::Mini to capture the warnings, then using 
Test::More::like() to determine if we got the warnings we expected.  In r18763 I took this 
approach and applied the following patch to t/tools/pmc2cutils/05-gen_c.t.

Should lib/Parrot/Pmc2c.pm be revised to eliminate those warnings, then the tests I just 
wrote will fail and will have to be revised.  But that will be a good thing, because the 
warnings will have been cleared up.


------------=_1180786361-1668-50
Content-Type: text/plain; charset="ascii"; name="05-gen_c.t.patch.txt"
Content-Disposition: inline; filename="05-gen_c.t.patch.txt"
Content-Transfer-Encoding: 7bit
RT-Attachment: 43107/261538/114321

Index: t/tools/pmc2cutils/05-gen_c.t
===================================================================
--- t/tools/pmc2cutils/05-gen_c.t	(revision 18762)
+++ t/tools/pmc2cutils/05-gen_c.t	(working copy)
@@ -19,12 +19,14 @@
     }
     unshift @INC, qq{$topdir/lib};
 }
-use Test::More tests => 68;
+use Test::More tests => 74;
+use Carp;
 use File::Basename;
 use File::Copy;
 use FindBin;
 use Data::Dumper;
 use_ok('Parrot::Pmc2c::Pmc2cMain');
+use_ok('Parrot::IO::Capture::Mini');
 use_ok('Cwd');
 use_ok( 'File::Temp', qw| tempdir | );
 
@@ -35,6 +37,9 @@
 my $cwd = cwd();
 
 my @include_orig = ( qq{$main::topdir}, qq{$main::topdir/src/pmc}, );
+my ( $tie, $msg, @lines );
+my $warnpattern =
+    qr/get_bool_keyed_int.*elements_keyed_int.*set_bool_keyed_int.*is_equal_str/s;
 
 # basic test:  @args holds default.pmc
 {
@@ -71,9 +76,21 @@
     ok( $self->dump_pmc(), "dump_pmc succeeded" );
     ok( -f qq{$temppmcdir/default.dump}, "default.dump created as expected" );
 
-    $rv = $self->gen_c();
-    ok( $rv, "gen_c completed successfully; args:  default.pmc" );
+    {
+        $tie = tie *STDERR, "Parrot::IO::Capture::Mini"
+            or croak "Unable to tie";
+        $rv = $self->gen_c();
+        @lines = $tie->READLINE;
+        untie *STDERR or croak "Unable to untie";
+        ok( $rv, "gen_c completed successfully; args:  default.pmc" );
+        $msg = join("\n", @lines);
+        like( $msg, 
+            $warnpattern,
+            "Warnings from Parrot::Pmc2c re 4 unknown methods have been captured"
+        );
+    }
 
+
     ok( chdir $cwd, "changed back to original directory" );
 }
 
@@ -113,8 +130,19 @@
     ok( -f qq{$temppmcdir/default.dump}, "default.dump created as expected" );
     ok( -f qq{$temppmcdir/array.dump},   "array.dump created as expected" );
 
-    $rv = $self->gen_c();
-    ok( $rv, "gen_c completed successfully; args:  default.pmc and array.pmc" );
+    {
+        $tie = tie *STDERR, "Parrot::IO::Capture::Mini"
+            or croak "Unable to tie";
+        $rv = $self->gen_c();
+        @lines = $tie->READLINE;
+        untie *STDERR or croak "Unable to untie";
+        ok( $rv, "gen_c completed successfully; args:  default.pmc and array.pmc" );
+        $msg = join("\n", @lines);
+        like( $msg, 
+            $warnpattern,
+            "Warnings from Parrot::Pmc2c re 4 unknown methods have been captured"
+        );
+    }
 
     ok( chdir $cwd, "changed back to original directory" );
 }
@@ -155,15 +183,26 @@
     ok( $self->dump_pmc(), "dump_pmc succeeded" );
     ok( -f qq{$temppmcdir/default.dump}, "default.dump created as expected" );
 
-    my ( $fh, $msg, $rv );
     {
-        my $currfh = select($fh);
-        open( $fh, '>', \$msg ) or die "Unable to open handle: $!";
-        $rv = $self->gen_c();
-        select($currfh);
+        $tie = tie *STDERR, "Parrot::IO::Capture::Mini"
+            or croak "Unable to tie";
+        my ( $fh, $dmsg, $rv );
+        {
+            my $currfh = select($fh);
+            open( $fh, '>', \$dmsg ) or die "Unable to open handle: $!";
+            $rv = $self->gen_c();
+            select($currfh);
+        }
+        @lines = $tie->READLINE;
+        untie *STDERR or croak "Unable to untie";
+        ok( $rv, "gen_c completed successfully; args:  default.pmc" );
+        like( $dmsg, qr{src/pmc/default\.pmc}, "debug option worked" );
+        $msg = join("\n", @lines);
+        like( $msg, 
+            $warnpattern,
+            "Warnings from Parrot::Pmc2c re 4 unknown methods have been captured"
+        );
     }
-    ok( $rv, "gen_c completed successfully; args:  default.pmc" );
-    like( $msg, qr{src/pmc/default\.pmc}, "debug option worked" );
 
     ok( chdir $cwd, "changed back to original directory" );
 }
@@ -199,33 +238,44 @@
     );
     isa_ok( $self, q{Parrot::Pmc2c::Pmc2cMain} );
 
-    my ( $fh, $msg, $rv );
+    my ( $fh, $dmsg, $rv );
     {
         my $currfh = select($fh);
-        open( $fh, '>', \$msg ) or die "Unable to open handle: $!";
+        open( $fh, '>', \$dmsg ) or die "Unable to open handle: $!";
         $dump_file = $self->dump_vtable("$main::topdir/vtable.tbl");
         select($currfh);
     }
     ok( -e $dump_file, "dump_vtable created vtable.dump" );
-    like( $msg, qr{^Writing}, "verbose option worked" );
+    like( $dmsg, qr{^Writing}, "verbose option worked" );
 
     {
         my $currfh = select($fh);
-        open( $fh, '>', \$msg ) or die "Unable to open handle: $!";
+        open( $fh, '>', \$dmsg ) or die "Unable to open handle: $!";
         ok( $self->dump_pmc(), "dump_pmc succeeded" );
         select($currfh);
     }
     ok( -f qq{$temppmcdir/default.dump}, "default.dump created as expected" );
-    like( $msg, qr{^Reading}, "verbose option worked" );
+    like( $dmsg, qr{^Reading}, "verbose option worked" );
 
     {
-        my $currfh = select($fh);
-        open( $fh, '>', \$msg ) or die "Unable to open handle: $!";
-        $rv = $self->gen_c();
-        select($currfh);
+        $tie = tie *STDERR, "Parrot::IO::Capture::Mini"
+            or croak "Unable to tie";
+        {
+            my $currfh = select($fh);
+            open( $fh, '>', \$dmsg ) or die "Unable to open handle: $!";
+            $rv = $self->gen_c();
+            select($currfh);
+        }
+        @lines = $tie->READLINE;
+        untie *STDERR or croak "Unable to untie";
+        ok( $rv, "gen_c completed successfully; args:  default.pmc" );
+        like( $dmsg, qr{src/pmc/default\.pmc}, "debug option worked" );
+        $msg = join("\n", @lines);
+        like( $msg, 
+            $warnpattern,
+            "Warnings from Parrot::Pmc2c re 4 unknown methods have been captured"
+        );
     }
-    ok( $rv, "gen_c completed successfully; args:  default.pmc" );
-    like( $msg, qr{src/pmc/default\.pmc}, "debug option worked" );
 
     ok( chdir $cwd, "changed back to original directory" );
 }
@@ -310,8 +360,19 @@
     ok( -f qq{$temppmcdir/default.dump}, "default.dump created as expected" );
     ok( -f qq{$temppmcdir/class.dump},   "class.dump created as expected" );
 
-    $rv = $self->gen_c();
-    ok( $rv, "gen_c completed successfully; args:  default.pmc and class.pmc" );
+    {
+        $tie = tie *STDERR, "Parrot::IO::Capture::Mini"
+            or croak "Unable to tie";
+        $rv = $self->gen_c();
+        @lines = $tie->READLINE;
+        untie *STDERR or croak "Unable to untie";
+        ok( $rv, "gen_c completed successfully; args:  default.pmc and class.pmc" );
+        $msg = join("\n", @lines);
+        like( $msg, 
+            $warnpattern,
+            "Warnings from Parrot::Pmc2c re 4 unknown methods have been captured"
+        );
+    }
 
     ok( chdir $cwd, "changed back to original directory" );
 }

------------=_1180786361-1668-50--

