From beginners-return-91615-ktwarwic=speedy.uwaterloo.ca@perl.org  Sun May 13 07:58:01 2007
Return-Path: <beginners-return-91615-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4DBw0qD007781
	for <ktwarwic@flax9.uwaterloo.ca>; Sun, 13 May 2007 07:58:00 -0400
Received: (qmail 29834 invoked by uid 514); 13 May 2007 11:57:53 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 29823 invoked from network); 13 May 2007 11:57:52 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 13 May 2007 11:57:52 -0000
Received: (qmail 19434 invoked by uid 225); 13 May 2007 11:57:52 -0000
Delivered-To: beginners@perl.org
Received: (qmail 19426 invoked by alias); 13 May 2007 11:57:52 -0000
X-Spam-Status: No, hits=-0.1 required=8.0
	tests=BAYES_20,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: local policy)
Received: from smtp.fast4.net (HELO smtp.njpservices.co.uk) (84.45.106.4)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Sun, 13 May 2007 04:57:49 -0700
Received: from [85.92.185.134] (85-92-185-134.eurisp.net [85.92.185.134] (may be forged))
	by smtp.njpservices.co.uk (8.10.2/8.10.2) with ESMTP id l4DBvca30935;
	Sun, 13 May 2007 12:57:38 +0100
Message-ID: <4646FD35.3040207@350.com>
Date: Sun, 13 May 2007 12:57:41 +0100
From: Rob Dixon <rob.dixon@350.com>
User-Agent: Thunderbird 1.5.0.10 (Windows/20070221)
MIME-Version: 1.0
To: Perl Beginners <beginners@perl.org>
CC: Mathew Snyder <theillien@yahoo.com>
Subject: Re: Stuck on a hash referrence, kinda
References: <4032136.38521179040784191.JavaMail.root@store2a.brinkster.com> <4646C10A.3040906@yahoo.com>
In-Reply-To: <4646C10A.3040906@yahoo.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit

Mathew Snyder wrote:
> 
> yaron@kahanovitch.com wrote:
>>
>> Mathew Snyder wrote:
>>>
>>> A subroutine I'm working on takes two hash references.  The hashes are each
>>> actually a HoH.
>>>
>>> timesheet(\%opsTotal, \%opsEnvTotal);
>>>
>>> The problem I'm having is that I need to look past the first hash and into the
>>> second for the existence of a particular key.  I'm not sure how to go about
>>> doing this.
>>>
>>> sub timesheet {
>>>   my ($dept, $env) = @_;
>>>
>>> #This is where I need help.  'user' is in the second hash but I'm not sure how
>>> #to get past the first one.  Should I use a foreach and step through each key?
>>>   if (exists $dept->{user}) {
>>>     open TIMESHEET, ">/work_reports/user/ops_timesheet_weekof_$endDate.txt";
>>>   }else{
>>>     open TIMESHEET, ">/work_reports/user/eng_timesheet_weekof_$endDate.txt";
>>>   }
>>>
>>>   print TIMESHEET "Timesheet for $startDate to $endDate\n\n\n";
>>>
>>>   foreach my $environ (sort keys %$dept) {
>>>     #Print the header for our data
>>>     print TIMESHEET "$environ", "\n";
>>>     printf TIMESHEET "%10s%8s\n", "User", "hh:mm";
>>>     print TIMESHEET ("-" x 30);
>>>     print TIMESHEET "\n";
>>>     foreach my $name (sort keys %{ $dept->{$environ} }) {
>>>       printf TIMESHEET "%10s%8s\n", "$name", "$dept->{$environ}->{$name}";
>>>     }
>>>     printf TIMESHEET ("-" x 30);
>>>     print  TIMESHEET "\n";
>>>     printf TIMESHEET "%18s\n\n", "$env->{$environ}";
>>>   }
>>>   close TIMESHEET;
>>> }
>>
>> I am not sure that I understand your problem.
>> In General if you want to check the existence of the key "user" in the first hash, you can use the following
>>  if ($dept and exists($dept->{user}){ ....}else{....}
>>
>> Hope that helps
> 
> To make this even more tricky, if the user shows up in even one of the second
> hashes the whole %$dept hash is affected.
> 
> We have $dept{customer}{user}
>         $dept{customer}{user1}
>         $dept{customer1}{user}
>   $dept{customer1{user1}
>   $dept{customer2}{user}
> 
> So, even though user2 isn't found in either customer's or customer1's hashes,
> its existence in customer2's hash means that all work will be done on the
> preceding two hashes as well.

Hi Mathew

(Please bottom-post your replies, so that extended threads can remain comprehensible.
Thanks.)

I think you have a less-than optimal solution at present. You need to express the
problem more clearly and, once that is done, a solution will present itself. You
mention the user2 key, but there is no such key in your data and I am not at all
sure what your criteria are.

Here's how I understand your data. In $dept you have a reference to a hash with a
number of customer names as keys and further hash references as values. You need to
check whether a particular user exists as a key to any of the secondary hashes. Am
I close?

If you loop over all the values of the %$dept hash, you will be able to check
whether the user exists in any of the secondary hashes, like this:

  my $user;
  foreach my $data (values %$dept) {
    $user++ if exists $data-{user};
  }

and now you can write

  if ($user) {
    :
  }

is that close to what you need?

The foreach loop can be written more concisely as

  my $user = grep exists $_->{user}, values %$dept;

Please let us now how your problem deviates from this guess.

HTH,

Rob

  

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


