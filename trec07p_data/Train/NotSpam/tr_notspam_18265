From beginners-return-92292-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon Jun 11 15:22:16 2007
Return-Path: <beginners-return-92292-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5BJMFL9017848
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 11 Jun 2007 15:22:15 -0400
Received: (qmail 28909 invoked by uid 514); 11 Jun 2007 19:22:09 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 28886 invoked from network); 11 Jun 2007 19:22:09 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 11 Jun 2007 19:22:09 -0000
Received: (qmail 27421 invoked by uid 225); 11 Jun 2007 19:22:09 -0000
Delivered-To: beginners@perl.org
Received: (qmail 27410 invoked by alias); 11 Jun 2007 19:22:08 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of chas.owens@gmail.com designates 209.85.146.176 as permitted sender)
Received: from wa-out-1112.google.com (HELO wa-out-1112.google.com) (209.85.146.176)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Mon, 11 Jun 2007 12:22:05 -0700
Received: by wa-out-1112.google.com with SMTP id v27so2290999wah
        for <beginners@perl.org>; Mon, 11 Jun 2007 12:22:01 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=pfgBryVIoZklefSljc2E54LkBBoiTUfS9ozK6wlmNyziBq7x5Sz82eYBJEmUoObTe9YVuDIpUUvC6BsSfDX2r9RshJKoVNYQurs0kGgUTz2RPhTbfnTurjpBOqhDWjosDnoJ+ZVKzmZUfRihry8wKBEKAKacprKPtqmsfFdmyug=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=Dsy0MFZ9s9fhsmhrYdplHj60bkGFmjYKfD2UGK46vfInOtApizaHWhZfvThvd4AF+QZrbx2VWAuRDmHobsWveVZEILCa+qmh0kAcsYCQ1ksLvPwMYg7vB/pKD+bWvxH95Q//Il33VMztk/GvztWlFxpjDZ6YLzNbW271GoBQvrE=
Received: by 10.115.109.1 with SMTP id l1mr5780409wam.1181589720693;
        Mon, 11 Jun 2007 12:22:00 -0700 (PDT)
Received: by 10.114.79.3 with HTTP; Mon, 11 Jun 2007 12:22:00 -0700 (PDT)
Message-ID: <58ce48dc0706111222n7dac63f1vc76b987f0c8da42e@mail.gmail.com>
Date: Mon, 11 Jun 2007 15:22:00 -0400
From: "Chas Owens" <chas.owens@gmail.com>
To: oryann9 <oryann9@yahoo.com>
Subject: Re: flock question
Cc: "Perl List" <beginners@perl.org>
In-Reply-To: <51937.80377.qm@web63403.mail.re1.yahoo.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <51937.80377.qm@web63403.mail.re1.yahoo.com>

On 6/11/07, oryann9 <oryann9@yahoo.com> wrote:
snip
> If you use LOCK_NB and are refused a LOCK_SH, then you
> know that someone else has a LOCK_EX and is updating
> the file. If you are refused a LOCK_EX, then someone
> holds either a LOCK_SH or a LOCK_EX, so you shouldn't
> try to update the file.
snip

I am not sure what you are asking, but I assume you don't understand
what the flock flags are for.  The flock function normally waits until
a lock can be achieved.  This could be forever (especially in the case
of a deadlock*), so it provides a flag LOCK_NB that lets you tell it
to run in Non-Blocking (NB) mode.  It will return immediately with
either true (if the requested lock type was made) or false (it
couldn't lock the file).  The two types of lock are shared (SH) and
exclusive (EX).  A given file can have an unlimited number of shared
locks at the same time, but if a file has been exclusively locked then
no other process can lock it (with either a shared or an exclusive
lock).  Think of shared locks as saying "I am reading this file don't
change it."  Many different processes can all read the same file
without causing a problem (so long as no one changes it).  Think of
exclusive locks as saying "I am going to change this file."  Only one
process at a time can safely change a file.

Hope that helps.


* A simple deadlock can be achieved like this
1. process A locks file foo
2. process B locks file bar
3. process A tries to lock file bar
4. process B tries to lock file foo
Both processes will wait forever for the other process to let go of
the others lock.

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


