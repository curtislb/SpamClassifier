From samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org  Mon May 14 13:08:50 2007
Return-Path: <samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org>
Received: from lists.samba.org (mail.samba.org [66.70.73.150])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l4EH8nqD024893
	for <ktwarwic@speedy.uwaterloo.ca>; Mon, 14 May 2007 13:08:50 -0400
Received: from dp.samba.org (localhost [127.0.0.1])
	by lists.samba.org (Postfix) with ESMTP id F0F7216385D
	for <ktwarwic@speedy.uwaterloo.ca>; Mon, 14 May 2007 17:08:46 +0000 (GMT)
X-Spam-Checker-Version: SpamAssassin 3.1.7 (2006-10-05) on dp.samba.org
X-Spam-Level: 
X-Spam-Status: No, score=-0.2 required=3.8 tests=AWL,BAYES_00,NO_REAL_NAME,
	NO_RELAYS,RCVD_IN_DSBL,UPPERCASE_25_50 autolearn=no version=3.1.7
X-Original-To: samba-cvs@samba.org
Delivered-To: samba-cvs@samba.org
Received: by lists.samba.org (Postfix, from userid 620)
	id 657BB162BC6; Mon, 14 May 2007 17:08:19 +0000 (GMT)
To: samba-cvs@samba.org
From: metze@samba.org
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Message-Id: <20070514170819.657BB162BC6@lists.samba.org>
Date: Mon, 14 May 2007 17:08:19 +0000 (GMT)
Subject: svn commit: samba r22858 - in branches/SAMBA_4_0/source: libcli/raw
	torture/smb2
X-BeenThere: samba-cvs@lists.samba.org
X-Mailman-Version: 2.1.5
Precedence: list
Reply-To: samba-technical@lists.samba.org
List-Id: Samba CVS and subversion commit messages <samba-cvs.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/archive/samba-cvs>
List-Post: <mailto:samba-cvs@lists.samba.org>
List-Help: <mailto:samba-cvs-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=subscribe>
Sender: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Errors-To: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org

Author: metze
Date: 2007-05-14 17:08:18 +0000 (Mon, 14 May 2007)
New Revision: 22858

WebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22858

Log:
- let SMB2-LOCK-VALID-REQUEST pass against longhorn beta3
- add modify the SMB2-LOCK-BLOCK-WRITE test to also test reading
  and name in SMB2-LOCK-RW-EXCLUSIV
- add SMB2-LOCK-NONE and SMB2-LOCK-SHARED

metze
Modified:
   branches/SAMBA_4_0/source/libcli/raw/interfaces.h
   branches/SAMBA_4_0/source/torture/smb2/lock.c


Changeset:
Modified: branches/SAMBA_4_0/source/libcli/raw/interfaces.h
===================================================================
--- branches/SAMBA_4_0/source/libcli/raw/interfaces.h	2007-05-14 16:04:24 UTC (rev 22857)
+++ branches/SAMBA_4_0/source/libcli/raw/interfaces.h	2007-05-14 17:08:18 UTC (rev 22858)
@@ -1889,11 +1889,12 @@
 			uint64_t offset;
 			uint64_t count;
 			uint32_t unknown5;
-#define SMB2_LOCK_FLAG_NONE	0x00000000
-#define SMB2_LOCK_FLAG_EXCLUSIV	0x00000002
-#define SMB2_LOCK_FLAG_UNLOCK	0x00000004
-#define SMB2_LOCK_FLAGS_MASK	0x00000006
-			uint32_t flags; 
+#define SMB2_LOCK_FLAG_NONE		0x00000000
+#define SMB2_LOCK_FLAG_SHARED		0x00000001
+#define SMB2_LOCK_FLAG_EXCLUSIV		0x00000002
+#define SMB2_LOCK_FLAG_UNLOCK		0x00000004
+#define SMB2_LOCK_FLAG_NO_PENDING	0x00000010
+			uint32_t flags;
 		} in;
 		struct {
 			/* static body buffer 4 (0x04) bytes */

Modified: branches/SAMBA_4_0/source/torture/smb2/lock.c
===================================================================
--- branches/SAMBA_4_0/source/torture/smb2/lock.c	2007-05-14 16:04:24 UTC (rev 22857)
+++ branches/SAMBA_4_0/source/torture/smb2/lock.c	2007-05-14 17:08:18 UTC (rev 22858)
@@ -93,7 +93,7 @@
 	lck.in.offset		= UINT64_MAX;
 	lck.in.count		= UINT64_MAX;
 	lck.in.unknown5		= 0x00000000;
-	lck.in.flags		= SMB2_LOCK_FLAG_EXCLUSIV;
+	lck.in.flags		= SMB2_LOCK_FLAG_EXCLUSIV|SMB2_LOCK_FLAG_NO_PENDING;
 	status = smb2_lock(tree, &lck);
 	CHECK_STATUS(status, NT_STATUS_OK);
 	CHECK_VALUE(lck.out.unknown1, 0);
@@ -118,7 +118,7 @@
 	lck.in.offset		= UINT32_MAX;
 	lck.in.count		= UINT32_MAX;
 	lck.in.unknown5		= 0x87654321;
-	lck.in.flags		= SMB2_LOCK_FLAG_EXCLUSIV;
+	lck.in.flags		= SMB2_LOCK_FLAG_EXCLUSIV|SMB2_LOCK_FLAG_NO_PENDING;
 	status = smb2_lock(tree, &lck);
 	CHECK_STATUS(status, NT_STATUS_OK);
 	CHECK_VALUE(lck.out.unknown1, 0);
@@ -163,8 +163,7 @@
 	lck.in.unknown5		= 0x12345678;
 	lck.in.flags		= SMB2_LOCK_FLAG_UNLOCK;
 	status = smb2_lock(tree, &lck);
-	CHECK_STATUS(status, NT_STATUS_OK);
-	CHECK_VALUE(lck.out.unknown1, 0);
+	CHECK_STATUS(status, NT_STATUS_RANGE_NOT_LOCKED);
 
 	lck.in.unknown1		= 0x0001;
 	lck.in.unknown2		= 0x12345678;
@@ -174,19 +173,9 @@
 	lck.in.unknown5		= 0x00000000;
 	lck.in.flags		= SMB2_LOCK_FLAG_UNLOCK;
 	status = smb2_lock(tree, &lck);
-	CHECK_STATUS(status, NT_STATUS_OK);
-	CHECK_VALUE(lck.out.unknown1, 0);
+	CHECK_STATUS(status, NT_STATUS_RANGE_NOT_LOCKED);
 
 	status = smb2_lock(tree, &lck);
-	CHECK_STATUS(status, NT_STATUS_OK);
-	CHECK_VALUE(lck.out.unknown1, 0);
-	status = smb2_lock(tree, &lck);
-	CHECK_STATUS(status, NT_STATUS_OK);
-	CHECK_VALUE(lck.out.unknown1, 0);
-	status = smb2_lock(tree, &lck);
-	CHECK_STATUS(status, NT_STATUS_OK);
-	CHECK_VALUE(lck.out.unknown1, 0);
-	status = smb2_lock(tree, &lck);
 	CHECK_STATUS(status, NT_STATUS_RANGE_NOT_LOCKED);
 	status = smb2_lock(tree, &lck);
 	CHECK_STATUS(status, NT_STATUS_RANGE_NOT_LOCKED);
@@ -197,7 +186,18 @@
 	return ret;
 }
 
-static BOOL test_block_write(struct torture_context *torture, struct smb2_tree *tree)
+struct test_lock_read_write_state {
+	const char *fname;
+	uint32_t lock_flags;
+	NTSTATUS write_h1_status;
+	NTSTATUS read_h1_status;
+	NTSTATUS write_h2_status;
+	NTSTATUS read_h2_status;
+};
+
+static BOOL test_lock_read_write(struct torture_context *torture,
+				 struct smb2_tree *tree,
+				 struct test_lock_read_write_state *s)
 {
 	BOOL ret = True;
 	NTSTATUS status;
@@ -206,11 +206,11 @@
 	struct smb2_lock lck;
 	struct smb2_create cr;
 	struct smb2_write wr;
-	const char *fname = "lock2.txt";
+	struct smb2_read rd;
 
 	ZERO_STRUCT(buf);
 
-	status = torture_smb2_testfile(tree, fname, &h1);
+	status = torture_smb2_testfile(tree, s->fname, &h1);
 	CHECK_STATUS(status, NT_STATUS_OK);
 
 	status = smb2_util_write(tree, h1, buf, 0, ARRAY_SIZE(buf));
@@ -222,7 +222,7 @@
 	lck.in.offset		= 0;
 	lck.in.count		= ARRAY_SIZE(buf)/2;
 	lck.in.unknown5		= 0x00000000;
-	lck.in.flags		= SMB2_LOCK_FLAG_EXCLUSIV;
+	lck.in.flags		= s->lock_flags;
 	status = smb2_lock(tree, &lck);
 	CHECK_STATUS(status, NT_STATUS_OK);
 	CHECK_VALUE(lck.out.unknown1, 0);
@@ -233,7 +233,7 @@
 	lck.in.offset		= ARRAY_SIZE(buf)/2;
 	lck.in.count		= ARRAY_SIZE(buf)/2;
 	lck.in.unknown5		= 0x00000000;
-	lck.in.flags		= SMB2_LOCK_FLAG_EXCLUSIV;
+	lck.in.flags		= s->lock_flags;
 	status = smb2_lock(tree, &lck);
 	CHECK_STATUS(status, NT_STATUS_OK);
 	CHECK_VALUE(lck.out.unknown1, 0);
@@ -248,30 +248,45 @@
 		NTCREATEX_SHARE_ACCESS_READ|
 		NTCREATEX_SHARE_ACCESS_WRITE;
 	cr.in.create_options = 0;
-	cr.in.fname = fname;
+	cr.in.fname = s->fname;
 
 	status = smb2_create(tree, tree, &cr);
 	CHECK_STATUS(status, NT_STATUS_OK);
 
 	h2 = cr.out.file.handle;
 
-
 	ZERO_STRUCT(wr);
 	wr.in.file.handle = h1;
 	wr.in.offset      = ARRAY_SIZE(buf)/2;
 	wr.in.data        = data_blob_const(buf, ARRAY_SIZE(buf)/2);
 
 	status = smb2_write(tree, &wr);
-	CHECK_STATUS(status, NT_STATUS_OK);
+	CHECK_STATUS(status, s->write_h1_status);
 
+	ZERO_STRUCT(rd);
+	rd.in.file.handle = h1;
+	rd.in.offset      = ARRAY_SIZE(buf)/2;
+	rd.in.length      = ARRAY_SIZE(buf)/2;
+
+	status = smb2_read(tree, tree, &rd);
+	CHECK_STATUS(status, s->read_h1_status);
+
 	ZERO_STRUCT(wr);
 	wr.in.file.handle = h2;
 	wr.in.offset      = ARRAY_SIZE(buf)/2;
 	wr.in.data        = data_blob_const(buf, ARRAY_SIZE(buf)/2);
 
 	status = smb2_write(tree, &wr);
-	CHECK_STATUS(status, NT_STATUS_FILE_LOCK_CONFLICT);
+	CHECK_STATUS(status, s->write_h2_status);
 
+	ZERO_STRUCT(rd);
+	rd.in.file.handle = h2;
+	rd.in.offset      = ARRAY_SIZE(buf)/2;
+	rd.in.length      = ARRAY_SIZE(buf)/2;
+
+	status = smb2_read(tree, tree, &rd);
+	CHECK_STATUS(status, s->read_h2_status);
+
 	lck.in.unknown1		= 0x0001;
 	lck.in.unknown2		= 0x00000000;
 	lck.in.file.handle	= h1;
@@ -291,10 +306,60 @@
 	status = smb2_write(tree, &wr);
 	CHECK_STATUS(status, NT_STATUS_OK);
 
+	ZERO_STRUCT(rd);
+	rd.in.file.handle = h2;
+	rd.in.offset      = ARRAY_SIZE(buf)/2;
+	rd.in.length      = ARRAY_SIZE(buf)/2;
+
+	status = smb2_read(tree, tree, &rd);
+	CHECK_STATUS(status, NT_STATUS_OK);
+
 done:
 	return ret;
 }
 
+static BOOL test_lock_rw_none(struct torture_context *torture, struct smb2_tree *tree)
+{
+	struct test_lock_read_write_state s = {
+		.fname			= "lock_rw_none.dat",
+		.lock_flags		= SMB2_LOCK_FLAG_NONE,
+		.write_h1_status	= NT_STATUS_FILE_LOCK_CONFLICT,
+		.read_h1_status		= NT_STATUS_OK,
+		.write_h2_status	= NT_STATUS_FILE_LOCK_CONFLICT,
+		.read_h2_status		= NT_STATUS_OK,
+	};
+
+	return test_lock_read_write(torture, tree, &s);
+}
+
+static BOOL test_lock_rw_shared(struct torture_context *torture, struct smb2_tree *tree)
+{
+	struct test_lock_read_write_state s = {
+		.fname			= "lock_rw_shared.dat",
+		.lock_flags		= SMB2_LOCK_FLAG_SHARED,
+		.write_h1_status	= NT_STATUS_FILE_LOCK_CONFLICT,
+		.read_h1_status		= NT_STATUS_OK,
+		.write_h2_status	= NT_STATUS_FILE_LOCK_CONFLICT,
+		.read_h2_status		= NT_STATUS_OK,
+	};
+
+	return test_lock_read_write(torture, tree, &s);
+}
+
+static BOOL test_lock_rw_exclusiv(struct torture_context *torture, struct smb2_tree *tree)
+{
+	struct test_lock_read_write_state s = {
+		.fname			= "lock_rw_exclusiv.dat",
+		.lock_flags		= SMB2_LOCK_FLAG_EXCLUSIV,
+		.write_h1_status	= NT_STATUS_OK,
+		.read_h1_status		= NT_STATUS_OK,
+		.write_h2_status	= NT_STATUS_FILE_LOCK_CONFLICT,
+		.read_h2_status		= NT_STATUS_FILE_LOCK_CONFLICT,
+	};
+
+	return test_lock_read_write(torture, tree, &s);
+}
+
 /* basic testing of SMB2 locking
 */
 struct torture_suite *torture_smb2_lock_init(void)
@@ -302,7 +367,9 @@
 	struct torture_suite *suite = torture_suite_create(talloc_autofree_context(), "LOCK");
 
 	torture_suite_add_1smb2_test(suite, "VALID-REQUEST", test_valid_request);
-	torture_suite_add_1smb2_test(suite, "BLOCK-WRITE", test_block_write);
+	torture_suite_add_1smb2_test(suite, "RW-NONE", test_lock_rw_none);
+	torture_suite_add_1smb2_test(suite, "RW-SHARED", test_lock_rw_shared);
+	torture_suite_add_1smb2_test(suite, "RW-EXCLUSIV", test_lock_rw_exclusiv);
 
 	suite->description = talloc_strdup(suite, "SMB2-LOCK tests");
 

