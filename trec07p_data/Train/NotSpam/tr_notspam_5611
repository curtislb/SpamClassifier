From beginners-return-91143-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri Apr 27 12:28:11 2007
Return-Path: <beginners-return-91143-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3RGS96w027970
	for <ktwarwic@speedy.uwaterloo.ca>; Fri, 27 Apr 2007 12:28:10 -0400
Received: (qmail 17410 invoked by uid 514); 27 Apr 2007 16:28:02 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 17401 invoked from network); 27 Apr 2007 16:28:02 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 27 Apr 2007 16:28:02 -0000
Received: (qmail 10724 invoked by uid 225); 27 Apr 2007 16:28:02 -0000
Delivered-To: beginners@perl.org
Received: (qmail 10718 invoked by alias); 27 Apr 2007 16:28:01 -0000
X-Spam-Status: No, hits=4.4 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,RCVD_IN_BL_SPAMCOP_NET,RCVD_IN_CBL,RCVD_IN_SORBS_WEB,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of frenchyp@gmail.com designates 64.233.184.233 as permitted sender)
Received: from wr-out-0506.google.com (HELO wr-out-0506.google.com) (64.233.184.233)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Fri, 27 Apr 2007 09:27:59 -0700
Received: by wr-out-0506.google.com with SMTP id 57so930269wri
        for <beginners@perl.org>; Fri, 27 Apr 2007 09:27:54 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:subject:from:to:cc:in-reply-to:references:content-type:date:message-id:mime-version:x-mailer:content-transfer-encoding;
        b=GEfH6xXs+aZEK1MjAZuLJ5QJz4wfN8Y+mEkgnBp16zWjXGa+7GkpAqQ7Tn/ecbwejs50wWUmEnl+HCFHv9YnQOj0qUHPdyRpDdKvXyP6yVMd4B5wSJ7m+K2gWxbOtQrmSgqf89ep1okYj5AfsHcpWQiwB4RZZSHqOKk7B+ascno=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:subject:from:to:cc:in-reply-to:references:content-type:date:message-id:mime-version:x-mailer:content-transfer-encoding;
        b=KwdHYAkSwmjn98uk2TI1FcP8KMciVpdsr0nY3TZ5KAx+zk3g28te3FW/oI15TKnL4KuV8uEE0qElsPmru8FD1eNF6hrvZwZqiv1Skdf5m0T7dhl85DNbzM0Se4OvVCrH1il3d/x90mYgVqA8XyQZYDM9VNJqgn6MaQoJ/MeDB9g=
Received: by 10.114.60.19 with SMTP id i19mr1036607waa.1177691271294;
        Fri, 27 Apr 2007 09:27:51 -0700 (PDT)
Received: from ?10.1.1.224? ( [64.79.222.10])
        by mx.google.com with ESMTP id n20sm1159018pof.2007.04.27.09.27.48;
        Fri, 27 Apr 2007 09:27:49 -0700 (PDT)
Subject: Re: improving my code: array of references
From: Pierre Mariani <frenchyp@gmail.com>
To: Chas Owens <chas.owens@gmail.com>
Cc: beginners@perl.org
In-Reply-To: <58ce48dc0704270903g491e78a1s473fb3e1c79d7e17@mail.gmail.com>
References: <6567.33482.qm@web30211.mail.mud.yahoo.com>
	 <1177624580.10826.12.camel@mariani.spry.com>
	 <bb075cdf0704261520k5de953dcmf54ff6151df69a25@mail.gmail.com>
	 <1177626362.10826.19.camel@mariani.spry.com> <46315FFF.9010108@richweb.com>
	 <1177685500.14854.24.camel@mariani.spry.com>
	 <58ce48dc0704270903g491e78a1s473fb3e1c79d7e17@mail.gmail.com>
Content-Type: text/plain
Date: Fri, 27 Apr 2007 09:19:48 -0700
Message-Id: <1177690788.14854.36.camel@mariani.spry.com>
Mime-Version: 1.0
X-Mailer: Evolution 2.8.3 
Content-Transfer-Encoding: 7bit
Status: O
Content-Length: 3291
Lines: 96

On Fri, 2007-04-27 at 12:03 -0400, Chas Owens wrote:
> On 4/27/07, Pierre Mariani <frenchyp@gmail.com> wrote:
> snip
> > > - modify_variable() doesn't appear to modify anything, otherwise why
> > > are you assigning its return value to the scalar passed as a parameter?
> > > It seems to be just a function.
> >
> > Modify_variable modifies its input variable.
> 
> I think the issue is what you mean by "modifies".  In order to say
> that the modify_variable function modifies its input then something
> like the following must be true:
> 
> my $foo = 5
> modify_variable($foo)
> print "$foo\n"; #prints "6\n"
> 

Yeah, that's exactly it.

> 
> >
> > > - Why are you using references? Are you sure you need to?
> > >
> > Please correct me if I am wrong.
> > My understanding is that:
> > 1) if I do:
> >         my @array = ($a, $b, $c);
> >         for (@array) { $_ = modify_variable($_)}
> > I am going to modify $array[0], $array[1] and $array[2], and NOT $a, $b,
> > $c.
> 
> Yes, that is correct, but this is most likely an invalid use of an
> array.  Either you should be using a array from the beginning, or you
> should be using a list.  Assigning a bunch of scalar variables to an
> array just to group them is useless.

Agree on that, but given other details that I didn't communicate, it is
not quite possible (this is actually a pl/perlu function in postgresql,
the variables I am working on are passed to the function, and their type
is limited by the function definition, so unless I create a composite
type I can't pass them as an array directly).

> $_ = modify_variable($_) for $a, $b, $c;
> 
> is a better construct.  However, it would be even better to make
> modify_variable take multiple arguments:
> 
> ($a, $b, $c) = modify_variables($a, $b, $c);

I agree on that (even better would be to make it work on references),
but unfortunately I can't modify it.

> > 2) if I do:
> >         for ($a, $b, $c) {$_ = modify_variable($_)}
> > I am going to modify $a, $b, $c, which is good, but if $a, $b, $c are
> > big I am going to be passing around lots of data.
> 
> Ah, here is the crux of the problem.  You thing you are passing
> copies.  Perl aliases its arguments to functions.  In C++ terms you
> are passing by reference (if I got the terminology right).  Passing
> "this is a really long string" and "a" both take up the same amount of
> time and memory.  Only passing around arrays and hashes take up O(n)
> space and time.  That is why it is good form to pass them as
> references.
> 
> snip
> > >   $_ = function($_) foreach ($var1, $var2, $var3);
> > >
> > > Will this do? Or is there more to the problem than you've explained?
> snip
> 
> $_ = function($_) foreach ($var1, $var2, $var3);
> 
> is the same as
> 
> foreach ($var1, $var2, $var3) {
>     $_ = function($_)
> }
> 
> If you only have one statement* in a loop for can write it in the
> former method.  It is considered by many to be clearer.
> 
> 
> * well, you can chain statements using , but that is poor form outside
> of Perl Golf, Obfuscation, and one-liners.

Thank you for the information. I was familiar with this kind of syntax
but never used it.


-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


