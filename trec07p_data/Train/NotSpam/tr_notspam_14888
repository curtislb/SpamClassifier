From beginners-return-92003-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu May 31 09:40:55 2007
Return-Path: <beginners-return-92003-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4VDethB028455
	for <ktwarwic@flax9.uwaterloo.ca>; Thu, 31 May 2007 09:40:55 -0400
Received: (qmail 18976 invoked by uid 514); 31 May 2007 13:40:44 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 18954 invoked from network); 31 May 2007 13:40:43 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 31 May 2007 13:40:43 -0000
Received: (qmail 5007 invoked by uid 225); 31 May 2007 13:40:42 -0000
Delivered-To: beginners@perl.org
Received: (qmail 4993 invoked by alias); 31 May 2007 13:40:42 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of chas.owens@gmail.com designates 209.85.146.183 as permitted sender)
Received: from wa-out-1112.google.com (HELO wa-out-1112.google.com) (209.85.146.183)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 31 May 2007 06:37:02 -0700
Received: by wa-out-1112.google.com with SMTP id m38so220921waf
        for <beginners@perl.org>; Thu, 31 May 2007 06:36:52 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=JXRfYMbmJD5oVWMijYcjl75p5kk1ck+rni3pyrgu9MiRTnrqjxkuPmMSzBRn0doVT/1V26y1igEGYugvPi+2T5B5eSQu3wqBfFxhYR5XjgtflaFOIyPE0pASsIBveE4Y7iUG0i4ed9pfNcNa9jCleV13XfkJZQPsldy3MYn3SXI=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=tCffpHJA+mcUyNxYi9UgM0mo/OROz5Q0sHtsH7y8cwgZkiGSFISnZ/7IxHqoyxNw+VLwz7VB16kEWr0wijBfF9WPlP4I09ZxLufBDoJLS+6Ub6zJd/qMBXh7P2/rs7Vcyp3O7z3KmQgIzALHUcx1zLOh2znByrHdnHE2W2QXies=
Received: by 10.114.179.1 with SMTP id b1mr623090waf.1180618612806;
        Thu, 31 May 2007 06:36:52 -0700 (PDT)
Received: by 10.114.92.6 with HTTP; Thu, 31 May 2007 06:36:52 -0700 (PDT)
Message-ID: <58ce48dc0705310636x29b69003k5f96da7bd2d8f280@mail.gmail.com>
Date: Thu, 31 May 2007 09:36:52 -0400
From: "Chas Owens" <chas.owens@gmail.com>
To: Alma <almatirkey@gmail.com>
Subject: Re: Passing arguments to subroutine
Cc: beginners@perl.org, perl-beginners@moderators.isc.org
In-Reply-To: <1180600046.701654.45930@j4g2000prf.googlegroups.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <1180600046.701654.45930@j4g2000prf.googlegroups.com>

On 31 May 2007 01:27:26 -0700, Alma <almatirkey@gmail.com> wrote:
snip
>         &deleteposter_file(@row);
snip
> sub delete_file()
snip

This would seem to be the problem, also where did you learn that you
should put & on the front of your subroutine calls?  I am curious
because I keep seeing people do it without understanding what it is
for.  Way back, in the dawn of time, it was the way to call
subroutines, but it then it changed to just
"deleteposter_file(@row);".

from perldoc perlsub
        To call subroutines:

           NAME(LIST);    # & is optional with parentheses.
           NAME LIST;     # Parentheses optional if predeclared/imported.
           &NAME(LIST);   # Circumvent prototypes.
           &NAME;         # Makes current @_ visible to called subroutine.

Note the extra bits that happen when you call it with &?  They can be
handy when you expect them and trying to achieve a specific effect,
but they can cause problems for the unwary:

#!/usr/bin/perl

use strict;
use warnings;

sub i_have_a_prototype($$$) {
        print "I can only be called with three parameters,",
                "they are $_[0], $_[1], and $_[2]\n"
}

eval qq{ i_have_a_prototype(1);       } or print "$@\n";
eval qq{ i_have_a_prototype(1, 2);    } or print "$@\n";
i_have_a_prototype(1, 2, 3);
&i_have_a_prototype(6); #oops

Also

#!/usr/bin/perl

use strict;
use warnings;

sub outer {
        if ($_[0] eq 'none') {
                &inner;
        } else {
                &inner("arg1", "arg2");
        }
}

#this is not treadsafe, but the first call
#sets up foobar, and all subsequent calls
#use foobar
sub inner {
        if (@_ == 0) {
                print "no args, so setup foobar\n";
                return;
        }

        #if we get here then args were passed
        #and foobar should setup
        local $" = ", ";
        print "I was call like this inner(@_)\n";
}

outer('none'); #setup foobar
outer('use');  #use foobar

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


