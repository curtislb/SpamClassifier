From samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org  Thu Apr 19 04:05:36 2007
Return-Path: <samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org>
Received: from lists.samba.org (mail.samba.org [66.70.73.150])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l3J85Y0I022052
	for <ktwarwic@speedy.uwaterloo.ca>; Thu, 19 Apr 2007 04:05:34 -0400
Received: from dp.samba.org (localhost [127.0.0.1])
	by lists.samba.org (Postfix) with ESMTP id 5E26F1638C2
	for <ktwarwic@speedy.uwaterloo.ca>; Thu, 19 Apr 2007 08:05:10 +0000 (GMT)
X-Spam-Checker-Version: SpamAssassin 3.1.7 (2006-10-05) on dp.samba.org
X-Spam-Level: 
X-Spam-Status: No, score=-0.1 required=3.8 tests=AWL,BAYES_00,NO_REAL_NAME,
	NO_RELAYS,RCVD_IN_DSBL autolearn=no version=3.1.7
X-Original-To: samba-cvs@samba.org
Delivered-To: samba-cvs@samba.org
Received: by lists.samba.org (Postfix, from userid 620)
	id 4EADA162B00; Thu, 19 Apr 2007 08:04:36 +0000 (GMT)
To: samba-cvs@samba.org
From: metze@samba.org
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Message-Id: <20070419080436.4EADA162B00@lists.samba.org>
Date: Thu, 19 Apr 2007 08:04:36 +0000 (GMT)
Subject: svn commit: samba r22360 - in
	branches/SAMBA_4_0/source/script/tests: .
X-BeenThere: samba-cvs@lists.samba.org
X-Mailman-Version: 2.1.5
Precedence: list
Reply-To: samba-technical@lists.samba.org
List-Id: Samba CVS and subversion commit messages <samba-cvs.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/archive/samba-cvs>
List-Post: <mailto:samba-cvs@lists.samba.org>
List-Help: <mailto:samba-cvs-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=subscribe>
Sender: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Errors-To: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Status: O
Content-Length: 5375
Lines: 201

Author: metze
Date: 2007-04-19 08:04:35 +0000 (Thu, 19 Apr 2007)
New Revision: 22360

WebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=22360

Log:
print out the name of the PCAP file and move setup and cleanup
of pcap files into functions

metze
Modified:
   branches/SAMBA_4_0/source/script/tests/SocketWrapper.pm
   branches/SAMBA_4_0/source/script/tests/selftest.pl


Changeset:
Modified: branches/SAMBA_4_0/source/script/tests/SocketWrapper.pm
===================================================================
--- branches/SAMBA_4_0/source/script/tests/SocketWrapper.pm	2007-04-19 07:39:45 UTC (rev 22359)
+++ branches/SAMBA_4_0/source/script/tests/SocketWrapper.pm	2007-04-19 08:04:35 UTC (rev 22360)
@@ -12,17 +12,30 @@
 use strict;
 use FindBin qw($RealBin);
 
-sub setup_dir($)
+sub setup_dir($$)
 {
-	my ($dir) = @_;
+	my ($dir, $pcap) = @_;
+	my $pcap_dir = undef;
+
 	if (defined($dir)) {
 		if ( -d $dir ) {
 			unlink <$dir/*>;
 		} else {
 			mkdir($dir);
 		}
+
+		if ($pcap) {
+			$pcap_dir = $dir."/pcap";
+
+			if ( -d $pcap_dir ) {
+				unlink <$pcap_dir/*>;
+			} else {
+				mkdir($pcap_dir);
+			}
+		}
 	}
 
+	$ENV{SOCKET_WRAPPER_PCAP_DIR} = $pcap_dir;
 	$ENV{SOCKET_WRAPPER_DIR} = $dir;
 	return $dir;
 }

Modified: branches/SAMBA_4_0/source/script/tests/selftest.pl
===================================================================
--- branches/SAMBA_4_0/source/script/tests/selftest.pl	2007-04-19 07:39:45 UTC (rev 22359)
+++ branches/SAMBA_4_0/source/script/tests/selftest.pl	2007-04-19 08:04:35 UTC (rev 22360)
@@ -219,6 +219,8 @@
 		$out .= $test_output->{$state->{NAME}};
 	}
 
+	$out .= "PCAP FILE: $state->{PCAP_FILE}\n" if defined($state->{PCAP_FILE});
+
 	$out .= getlog_env($state->{ENVNAME});
 
 	$out .= "==========================================\n";
@@ -270,16 +272,23 @@
 sub plain_end_msg($$$)
 {
 	my ($state, $expected_ret, $ret) = @_;
+	my $out = "";
 
 	if ($ret != $expected_ret) {
 		plain_output_msg($state, "ERROR: $ret\n");
 	}
 
 	if ($ret != $expected_ret and ($opt_immediate or $opt_one) and not $opt_verbose) {
-		print $test_output->{$state->{NAME}}."\n";
+		$out .= $test_output->{$state->{NAME}};
 	}
 
-	print getlog_env($state->{ENVNAME});
+	if (not $opt_socket_wrapper_keep_pcap and defined($state->{PCAP_FILE})) {
+		$out .= "PCAP FILE: $state->{PCAP_FILE}\n";
+	}
+
+	$out .= getlog_env($state->{ENVNAME});
+
+	print $out;
 }
 
 my $plain_msg_ops = {
@@ -288,9 +297,39 @@
 	end_msg		=> \&plain_end_msg
 };
 
+sub setup_pcap($)
+{
+	my ($state) = @_;
+
+	return unless ($opt_socket_wrapper_pcap);
+	return unless defined($ENV{SOCKET_WRAPPER_PCAP_DIR});
+
+	my $fname = sprintf("t%03u_%s", $state->{INDEX}, $state->{NAME});
+	$fname =~ s%[^abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0090687678\-]%_%g;
+
+	$state->{PCAP_FILE} = "$ENV{SOCKET_WRAPPER_PCAP_DIR}/$fname.pcap";
+
+	SocketWrapper::setup_pcap($state->{PCAP_FILE});
+}
+
+sub cleanup_pcap($$$)
+{
+	my ($state, $expected_ret, $ret) = @_;
+
+	return unless ($opt_socket_wrapper_pcap);
+	return if ($opt_socket_wrapper_keep_pcap);
+	return unless ($expected_ret == $ret);
+	return unless defined($state->{PCAP_FILE});
+
+	unlink($state->{PCAP_FILE});
+	$state->{PCAP_FILE} = undef;
+}
+
 sub run_test($$$$$$)
 {
 	my ($envname, $name, $cmd, $i, $totalsuites, $msg_ops) = @_;
+	my $expected_ret = 1;
+	my $open_tests = {};
 	my $msg_state = {
 		ENVNAME	=> $envname,
 		NAME	=> $name,
@@ -299,10 +338,12 @@
 		TOTAL	=> $totalsuites,
 		START	=> time()
 	};
+
+	setup_pcap($msg_state);
+
 	$msg_ops->{start_msg}($msg_state);
+
 	open(RESULT, "$cmd 2>&1|");
-	my $expected_ret = 1;
-	my $open_tests = {};
 	while (<RESULT>) {
 		$msg_ops->{output_msg}($msg_state, $_);
 		if (/^test: (.+)\n/) {
@@ -338,7 +379,11 @@
 		$statistics->{TESTS_ERROR}++;
 	}
 	my $ret = close(RESULT);
+
+	cleanup_pcap($msg_state,  $expected_ret, $ret);
+
 	$msg_ops->{end_msg}($msg_state, $expected_ret, $ret);
+
 	if ($ret != $expected_ret) {
 		push(@$suitesfailed, $name);
 		$statistics->{SUITES_FAIL}++;
@@ -473,17 +518,15 @@
 $ENV{PKG_CONFIG_PATH} = "$old_pwd/bin/pkgconfig:$ENV{PKG_CONFIG_PATH}";
 $ENV{PATH} = "$old_pwd/bin:$ENV{PATH}";
 
-my $pcap_dir = "$prefix/pcap";
 
 if ($opt_socket_wrapper_pcap) {
-	mkdir($pcap_dir);
 	# Socket wrapper pcap implies socket wrapper
 	$opt_socket_wrapper = 1;
 }
 
 my $socket_wrapper_dir;
 if ($opt_socket_wrapper) {
-	$socket_wrapper_dir = SocketWrapper::setup_dir("$prefix/w");
+	$socket_wrapper_dir = SocketWrapper::setup_dir("$prefix/w", $opt_socket_wrapper_pcap);
 	print "SOCKET_WRAPPER_DIR=$socket_wrapper_dir\n";
 } else {
 	warn("Not using socket wrapper, but also not running as root. Will not be able to listen on proper ports") unless $< == 0;
@@ -710,19 +753,8 @@
 
 		setup_env($envname);
 
-		my $shname = $name;
-		$shname =~ s%[^abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0090687678\-]%_%g;
-		my $pcap_file = "$pcap_dir/$shname.cap";
+		run_test($envname, $name, $cmd, $i, $suitestotal, $msg_ops);
 
-		SocketWrapper::setup_pcap($pcap_file) if ($opt_socket_wrapper_pcap);
-		my $result = run_test($envname, $name, $cmd, $i, $suitestotal, 
-							  $msg_ops);
-
-		if ($opt_socket_wrapper_pcap and $result and 
-			not $opt_socket_wrapper_keep_pcap) {
-			unlink($pcap_file);
-		}
-
 		if (defined($opt_analyse_cmd)) {
 			system("$opt_analyse_cmd \"$name\"");
 		}

