From perl6-all-return-81659-ktwarwic=speedy.uwaterloo.ca@perl.org  Tue May 29 20:43:01 2007
Return-Path: <perl6-all-return-81659-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4U0h0hB005828
	for <ktwarwic@flax9.uwaterloo.ca>; Tue, 29 May 2007 20:43:00 -0400
Received: (qmail 9719 invoked by uid 514); 30 May 2007 00:42:54 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 9714 invoked from network); 30 May 2007 00:42:54 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=1.3 required=8.0
	tests=BAYES_20,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,KARMA_CONNECT_NEGATIVE,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
From: larry@cvs.develooper.com
To: perl6-language@perl.org
Subject: [svn:perl6-synopsis] r14408 - doc/trunk/design/syn
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Message-Id: <20070530003825.28111CB9B8@x12.develooper.com>
Date: Tue, 29 May 2007 17:38:25 -0700 (PDT)
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-0.2 required=8.0
	tests=BAYES_40,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS

Author: larry
Date: Tue May 29 17:38:24 2007
New Revision: 14408

Modified:
   doc/trunk/design/syn/S06.pod

Log:
Extensibility of "is cached" explained, as requested by gabriele renzi++


Modified: doc/trunk/design/syn/S06.pod
==============================================================================
--- doc/trunk/design/syn/S06.pod	(original)
+++ doc/trunk/design/syn/S06.pod	Tue May 29 17:38:24 2007
@@ -13,9 +13,9 @@
 
   Maintainer: Larry Wall <larry@wall.org>
   Date: 21 Mar 2003
-  Last Modified: 21 May 2007
+  Last Modified: 29 May 2007
   Number: 6
-  Version: 84
+  Version: 85
 
 
 This document summarizes Apocalypse 6, which covers subroutines and the
@@ -1472,12 +1472,32 @@
 
 =item C<is cached>
 
-Marks a subroutine as being memoized.
+Marks a subroutine as being memoized, or at least memoizable.  The
+compiler is free to choose any kind of caching algorithm (including
+non-expiring, random, lru, pseudo-lru, or adaptive algoritms, or
+even no caching algorithm at all).  The run-time system is free to
+choose any kind of maximum cache size depending on the availability
+of memory and trends in usage patterns.  You may suggest a particular
+cache size by passing a numeric argument, and some of the possible
+algorithms may pay attention to it.  You may also pass C<*> for the
+size to request a non-expiring cache (complete memoization).  The
+compiler is free to ignore this too.
+
+The intent of this pragma is to specify performance hints without
+mandating any exact behavior.  Use of this pragma should not change
+semantics of the program, and this pragma will not be extended to
+reinvent other existing ways of achieving the same effect.  To gain
+more control, write your own trait handler to allow the use of a more
+specific trait, such as "C<is lru(42)>".  Alternately, just
+use a state hash keyed on the sub's argument capture to write
+your own memoization with complete control from within the subroutine
+itself.
 
 =item C<is inline>
 
 I<Suggests> to the compiler that the subroutine is a candidate for
-optimization via inlining.
+optimization via inlining.  Basically promises that nobody is going
+to try to wrap this subroutine (or that if they do, you don't care).
 
 =item C<is tighter>/C<is looser>/C<is equiv>
 

