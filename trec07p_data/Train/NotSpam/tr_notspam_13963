From samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org  Mon May 28 07:09:20 2007
Return-Path: <samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org>
Received: from lists.samba.org (mail.samba.org [66.70.73.150])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l4SB9KqD013590
	for <ktwarwic@speedy.uwaterloo.ca>; Mon, 28 May 2007 07:09:20 -0400
Received: from dp.samba.org (localhost [127.0.0.1])
	by lists.samba.org (Postfix) with ESMTP id E1068162B6D
	for <ktwarwic@speedy.uwaterloo.ca>; Mon, 28 May 2007 11:09:14 +0000 (GMT)
X-Spam-Checker-Version: SpamAssassin 3.1.7 (2006-10-05) on dp.samba.org
X-Spam-Level: 
X-Spam-Status: No, score=-0.7 required=3.8 tests=AWL,BAYES_00,NO_REAL_NAME,
	NO_RELAYS,UPPERCASE_25_50 autolearn=no version=3.1.7
X-Original-To: samba-cvs@samba.org
Delivered-To: samba-cvs@samba.org
Received: by lists.samba.org (Postfix, from userid 605)
	id A8504162ADA; Mon, 28 May 2007 11:08:59 +0000 (GMT)
To: samba-cvs@samba.org
From: vlendec@samba.org
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Message-Id: <20070528110859.A8504162ADA@lists.samba.org>
Date: Mon, 28 May 2007 11:08:59 +0000 (GMT)
Subject: svn commit: samba r23170 - in branches: SAMBA_3_0/source/lib
	SAMBA_3_0_26/source/lib
X-BeenThere: samba-cvs@lists.samba.org
X-Mailman-Version: 2.1.5
Precedence: list
Reply-To: samba-technical@lists.samba.org
List-Id: Samba CVS and subversion commit messages <samba-cvs.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/archive/samba-cvs>
List-Post: <mailto:samba-cvs@lists.samba.org>
List-Help: <mailto:samba-cvs-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=subscribe>
Sender: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Errors-To: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org

Author: vlendec
Date: 2007-05-28 11:08:58 +0000 (Mon, 28 May 2007)
New Revision: 23170

WebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23170

Log:
Add map_nt_error_from_tdb()

Modified:
   branches/SAMBA_3_0/source/lib/dbwrap_tdb.c
   branches/SAMBA_3_0/source/lib/util_tdb.c
   branches/SAMBA_3_0_26/source/lib/dbwrap_tdb.c
   branches/SAMBA_3_0_26/source/lib/util_tdb.c


Changeset:
Modified: branches/SAMBA_3_0/source/lib/dbwrap_tdb.c
===================================================================
--- branches/SAMBA_3_0/source/lib/dbwrap_tdb.c	2007-05-27 17:12:08 UTC (rev 23169)
+++ branches/SAMBA_3_0/source/lib/dbwrap_tdb.c	2007-05-28 11:08:58 UTC (rev 23170)
@@ -127,9 +127,15 @@
 {
 	struct db_tdb_ctx *ctx = talloc_get_type_abort(rec->private_data,
 						       struct db_tdb_ctx);
+	int res;
+	
+	res = tdb_delete(ctx->tdb, rec->key);
 
-	return (tdb_delete(ctx->tdb, rec->key) == 0) ?
-		NT_STATUS_OK : NT_STATUS_UNSUCCESSFUL;
+	if (res == 0) {
+		return NT_STATUS_OK;
+	}
+
+	return map_nt_error_from_tdb(tdb_error(ctx->tdb));
 }
 
 struct db_tdb_traverse_ctx {

Modified: branches/SAMBA_3_0/source/lib/util_tdb.c
===================================================================
--- branches/SAMBA_3_0/source/lib/util_tdb.c	2007-05-27 17:12:08 UTC (rev 23169)
+++ branches/SAMBA_3_0/source/lib/util_tdb.c	2007-05-28 11:08:58 UTC (rev 23170)
@@ -940,3 +940,40 @@
 
 	return w;
 }
+
+NTSTATUS map_nt_error_from_tdb(enum TDB_ERROR err)
+{
+	struct { enum TDB_ERROR err; NTSTATUS status; }	map[] =
+		{ { TDB_SUCCESS,	NT_STATUS_OK },
+		  { TDB_ERR_CORRUPT,	NT_STATUS_INTERNAL_DB_CORRUPTION },
+		  { TDB_ERR_IO,		NT_STATUS_UNEXPECTED_IO_ERROR },
+		  { TDB_ERR_OOM,	NT_STATUS_NO_MEMORY },
+		  { TDB_ERR_EXISTS,	NT_STATUS_OBJECT_NAME_COLLISION },
+
+		  /*
+		   * TDB_ERR_LOCK is very broad, we could for example
+		   * distinguish between fcntl locks and invalid lock
+		   * sequences. So NT_STATUS_FILE_LOCK_CONFLICT is a
+		   * compromise.
+		   */
+		  { TDB_ERR_LOCK,	NT_STATUS_FILE_LOCK_CONFLICT },
+		  /*
+		   * The next two ones in the enum are not actually used
+		   */
+		  { TDB_ERR_NOLOCK,	NT_STATUS_FILE_LOCK_CONFLICT },
+		  { TDB_ERR_LOCK_TIMEOUT, NT_STATUS_FILE_LOCK_CONFLICT },
+		  { TDB_ERR_NOEXIST,	NT_STATUS_NOT_FOUND },
+		  { TDB_ERR_EINVAL,	NT_STATUS_INVALID_PARAMETER },
+		  { TDB_ERR_RDONLY,	NT_STATUS_ACCESS_DENIED }
+		};
+
+	int i;
+
+	for (i=0; i < sizeof(map) / sizeof(map[0]); i++) {
+		if (err == map[i].err) {
+			return map[i].status;
+		}
+	}
+
+	return NT_STATUS_INTERNAL_ERROR;
+}

Modified: branches/SAMBA_3_0_26/source/lib/dbwrap_tdb.c
===================================================================
--- branches/SAMBA_3_0_26/source/lib/dbwrap_tdb.c	2007-05-27 17:12:08 UTC (rev 23169)
+++ branches/SAMBA_3_0_26/source/lib/dbwrap_tdb.c	2007-05-28 11:08:58 UTC (rev 23170)
@@ -125,9 +125,15 @@
 {
 	struct db_tdb_ctx *ctx = talloc_get_type_abort(rec->private_data,
 						       struct db_tdb_ctx);
+	int res;
+	
+	res = tdb_delete(ctx->tdb, rec->key);
 
-	return (tdb_delete(ctx->tdb, rec->key) == 0) ?
-		NT_STATUS_OK : NT_STATUS_UNSUCCESSFUL;
+	if (res == 0) {
+		return NT_STATUS_OK;
+	}
+
+	return map_nt_error_from_tdb(tdb_error(ctx->tdb));
 }
 
 struct db_tdb_traverse_ctx {

Modified: branches/SAMBA_3_0_26/source/lib/util_tdb.c
===================================================================
--- branches/SAMBA_3_0_26/source/lib/util_tdb.c	2007-05-27 17:12:08 UTC (rev 23169)
+++ branches/SAMBA_3_0_26/source/lib/util_tdb.c	2007-05-28 11:08:58 UTC (rev 23170)
@@ -940,3 +940,40 @@
 
 	return w;
 }
+
+NTSTATUS map_nt_error_from_tdb(enum TDB_ERROR err)
+{
+	struct { enum TDB_ERROR err; NTSTATUS status; }	map[] =
+		{ { TDB_SUCCESS,	NT_STATUS_OK },
+		  { TDB_ERR_CORRUPT,	NT_STATUS_INTERNAL_DB_CORRUPTION },
+		  { TDB_ERR_IO,		NT_STATUS_UNEXPECTED_IO_ERROR },
+		  { TDB_ERR_OOM,	NT_STATUS_NO_MEMORY },
+		  { TDB_ERR_EXISTS,	NT_STATUS_OBJECT_NAME_COLLISION },
+
+		  /*
+		   * TDB_ERR_LOCK is very broad, we could for example
+		   * distinguish between fcntl locks and invalid lock
+		   * sequences. So NT_STATUS_FILE_LOCK_CONFLICT is a
+		   * compromise.
+		   */
+		  { TDB_ERR_LOCK,	NT_STATUS_FILE_LOCK_CONFLICT },
+		  /*
+		   * The next two ones in the enum are not actually used
+		   */
+		  { TDB_ERR_NOLOCK,	NT_STATUS_FILE_LOCK_CONFLICT },
+		  { TDB_ERR_LOCK_TIMEOUT, NT_STATUS_FILE_LOCK_CONFLICT },
+		  { TDB_ERR_NOEXIST,	NT_STATUS_NOT_FOUND },
+		  { TDB_ERR_EINVAL,	NT_STATUS_INVALID_PARAMETER },
+		  { TDB_ERR_RDONLY,	NT_STATUS_ACCESS_DENIED }
+		};
+
+	int i;
+
+	for (i=0; i < sizeof(map) / sizeof(map[0]); i++) {
+		if (err == map[i].err) {
+			return map[i].status;
+		}
+	}
+
+	return NT_STATUS_INTERNAL_ERROR;
+}

