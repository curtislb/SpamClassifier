From beginners-return-91383-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon May  7 14:14:05 2007
Return-Path: <beginners-return-91383-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l47IE4qD001836
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 7 May 2007 14:14:04 -0400
Received: (qmail 21781 invoked by uid 514); 7 May 2007 18:13:59 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 21772 invoked from network); 7 May 2007 18:13:58 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 7 May 2007 18:13:58 -0000
Received: (qmail 14732 invoked by uid 225); 7 May 2007 18:13:58 -0000
Delivered-To: Beginners@perl.org
Received: (qmail 14726 invoked by alias); 7 May 2007 18:13:57 -0000
X-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of cavac@magicbooks.org designates 217.79.181.111 as permitted sender)
Received: from www.magicbooks.org (HELO mail.magicbooks.org) (217.79.181.111)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Mon, 07 May 2007 11:13:46 -0700
Received: from mail.magicbooks.org (localhost [127.0.0.1])
	by mail.magicbooks.org (8.12.10/8.12.10/SuSE Linux 0.7) with ESMTP id l47IDXPe024504;
	Mon, 7 May 2007 20:13:40 +0200
Received: from 85.127.207.126
        (SquirrelMail authenticated user cavac)
        by mail.magicbooks.org with HTTP;
        Mon, 7 May 2007 20:13:40 +0200 (CEST)
Message-ID: <3551.85.127.207.126.1178561620.squirrel@mail.magicbooks.org>
In-Reply-To: <8AB6E1A249644643AF0A32306C7F37D41E56@sktymail1.sktydev.com>
References: <8AB6E1A249644643AF0A32306C7F37D41E56@sktymail1.sktydev.com>
Date: Mon, 7 May 2007 20:13:40 +0200 (CEST)
Subject: Re: array and hash patter matching
From: "Rene Schickbauer" <cavac@magicbooks.org>
To: "Tim Wolak" <twolak@sktydev.com>
Cc: Beginners@perl.org
User-Agent: SquirrelMail/1.4.6
MIME-Version: 1.0
Content-Type: text/plain;charset=iso-8859-1
Content-Transfer-Encoding: 8bit
X-Priority: 3 (Normal)
Importance: Normal


> Morning all,
>
> I am working on a script that reads in /var/log/auth.log,, takes the ip
> addresses puts them into a hash keeping track of how many times it finds
> that address and compare it to addresses found in /etc/hosts.deny and
> only write the addresses that are new in the file.  So far I can get the
> addresses from the log file no problem and write them to the deny file,
> however I am struggling on how to compare the hash with an array for any
> duplicate addresses.  What is the best approach to take with this?

I guess you mean the following part:

> while (<DENY>) {
>         if ($_ =~ /Invalid user/ || /Failed password for/) {
>                push @origDeny, $_;
>        }
>                 foreach $orig (@origDeny) {
>                         if ($off =~ /((\d+)\.(\d+)\.(\d+)\.(\d+))/) {
>                            push @hosts, $1;
>                                 }
>                 }
> }
> close DENY;


You could change that to something like:
while (<DENY>) {
        if ($_ =~ /Invalid user/ || /Failed password for/) {
               push @origDeny, $_;
       }
                foreach $orig (@origDeny) {
                        if ($off =~ /((\d+)\.(\d+)\.(\d+)\.(\d+))/) {
                          # BAD
                           #push @hosts, $1;

                          #GOOD {tm}:
                          # Put every host as KEY into a hash with a TRUE
pseudo-values
                          # so it is DEFINED ;-)
                          $badHost{$1} = 1;

                                }
                }
}
close DENY;

Now, every host is unique. Then:

open (DENY, ">>/etc/hosts.deny") or die "Can't open log file: $!\n";
while (<LOGFILE>) {
        if ($_ =~ /Invalid user/ || /Failed password for/) {
                if ($off =~ /((\d+)\.(\d+)\.(\d+)\.(\d+))/) {
                        $host = $1;
                        if(!defined($badHost{$host}) {
                           $badHost{$host} = 1; # Remember the baddy
                           print DENY "$host\n";
                       }
                }
        }
}
close DENY

Btw: use strict and use warnings and don't use barewords...

LLAP & LG
Rene

-- 
-----BEGIN GEEK CODE BLOCK-----
Version: 3.1    Visit <http://www.ebb.org/ungeek/> to decode
GCS d- s:- a-- C++$ UBLA*++++$ P++++$ L+$ !E !W+++$ N+ o+ K--?
w++$ !O M+ V-- PS PE Y+ PGP+ t+ 5 X- !R tv b+++ DI-- D++ G e h-- r-- y+
------END GEEK CODE BLOCK------


-----------------------------------------
This E-Mail was sent through MagicMail

Download our Jump'n'Run "BlinkenSisters":
    http://www.blinkensisters.org


-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


