From beginners-return-90907-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed Apr 18 16:13:18 2007
Return-Path: <beginners-return-90907-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3IKDG0I015365
	for <ktwarwic@speedy.uwaterloo.ca>; Wed, 18 Apr 2007 16:13:17 -0400
Received: (qmail 7857 invoked by uid 514); 18 Apr 2007 20:12:46 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 7848 invoked from network); 18 Apr 2007 20:12:43 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 18 Apr 2007 20:12:43 -0000
Received: (qmail 22084 invoked by uid 225); 18 Apr 2007 20:12:42 -0000
Delivered-To: beginners@perl.org
Received: (qmail 22079 invoked by alias); 18 Apr 2007 20:12:42 -0000
X-Spam-Status: No, hits=-2.4 required=8.0
	tests=BAYES_00,DK_SIGNED,MIME_BASE64_NO_NAME
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of daggerquill@gmail.com designates 64.233.184.226 as permitted sender)
Received: from wr-out-0506.google.com (HELO wr-out-0506.google.com) (64.233.184.226)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Wed, 18 Apr 2007 13:11:54 -0700
Received: by wr-out-0506.google.com with SMTP id 57so247256wri
        for <beginners@perl.org>; Wed, 18 Apr 2007 13:11:49 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=AUTWSIUMpWMEJtF31Q0MM232nBjk+xfDcYxqX5HQYIRYKF1Ssum7DKSqzV1ZXYGdr9qsQ/Mqb42IZBD5bXdo6t8CcXhKlGyey8VuZwhyKMSAHvpTqAWiSvCmqxJtMoQRDl4ELjHPNUC3PmhWDQv8BZTRjKLNIoD8Vlcgbvg8X8c=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=FVKNwiTPdNmKPj+tLQtILBf6yYyDEQU700jGN6SxrCIsjfElMw1biRTp84aJg/v8IZ3w0uU6hKySV+1zMf382Yt23/SHS1/UCc44YRjnDS4INsIF6EUnRu+AuLtirUDfSQ/OQ88WRNy6F0Fa3a17tnnyBE5/CTNp5Zto//uNeVk=
Received: by 10.115.107.1 with SMTP id j1mr377738wam.1176927108840;
        Wed, 18 Apr 2007 13:11:48 -0700 (PDT)
Received: by 10.114.72.16 with HTTP; Wed, 18 Apr 2007 13:11:48 -0700 (PDT)
Message-ID: <4ce365ec0704181311g4fe848d5nc033c503e4bab345@mail.gmail.com>
Date: Wed, 18 Apr 2007 16:11:48 -0400
From: "Jay Savage" <daggerquill@gmail.com>
To: "Gauthier, Dave" <dave.gauthier@intel.com>,
   "Perl List" <beginners@perl.org>
Subject: Re: how to use xml::simple with nested for loops???
In-Reply-To: <D7FF158337303A419CF4A183F48302D602293794@hdsmsx411.amr.corp.intel.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-7; format=flowed
Content-Disposition: inline
References: <4ce365ec0704031520h5083306cwf4c5b2a6ca9b47c3@mail.gmail.com>
	 <D7FF158337303A419CF4A183F48302D602293794@hdsmsx411.amr.corp.intel.com>
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from base64 to 8bit by speedy.uwaterloo.ca id l3IKDG0I015365
Status: O
Content-Length: 3282
Lines: 20

On 4/18/07, Gauthier, Dave <dave.gauthier@intel.com> wrote:>>>> Hi Jay:>> Going back a couple weeks regarding the nested foreach to read out nested> data using XML::Simple, your solution works great, Thanks !>> But a new requirement is that I sort the output>>> foreach (@{$xml->{FOREST}}) {>>     print $_->{NAME}, ":\n";>>     foreach (@{$_->{TREE}}) {>>         print "\t", $_->{NAME}, ":\n";>>         foreach (@{$_->{DIAM_HEIGHT}}) {>>             print "\t\ttdata:\t", $_, "\n";>>         }>>     }>> }>>> To be painfully honest, I'm not sure what's going on inside the...>> {@{$xml->{FOREST}}} (for example).  Is there some sort of casting going on> here?  I tried to "sort" the list, and it ran, but the output was not> sorted.  I suspect that it's sortig pointers and not values :-(>> Any help would be appreciated.>> Thanks (Again)>> -dave>
Sort of. Perl references aren't pointers, per se. They're referencesto to internal data structures, not actual memory locations. Butyou're on the right track.
$xml is a scalar that contains a reference to an anonymous hashstructure. In your case, there is only one key/value pair in the hash,"FOREST". So far, we could write that as:
    my $xml = { FOREST => "value"};
If you're not comfortable with references, you should take anotherlook at the perlreftut and perlref man pages.
The value of FOREST, in turn, is a reference to an anonymous array ofall the forests. The anonymous array of forests, in turn, contains ananonymous hashref with information on each forest. Something likethis:
    my $xml = { FOREST => [{}
So
   @{$xml->{FOREST}}
says, "give me the array that is the value of $xml->{FOREST}". Since@{$xml->{FOREST}}, is a list of hashrefs, though, it's not much use byitself. That's why we cycle through it with the foreach. For eachelement of @{$xml->{FOREST}}, $_->{NAME} is the name of the forest,$_->{TREE} is the reference to the anonymous list of trees, etc.
To sort the forests, you'll need to sort based on the value of$_->{NAME}. sort() supports that, since $a and $b are simplyreferences to each of the values of the list being sorted:
    foreach ( sort { $a->{NAME} cmp $b->{NAME} } @{$xml->{FOREST}} ) {        print $_->{NAME}, "\n";    }
see perlfunc for information on sort.

If this sounds complicated, it is. Because XML is a markup language,each element of a similar type has the same label. This makes it veryeasy to apply attributes to all elements of a specific type, or counthow many elements of a specific type you have. If you want to dosomething to a particular element, though, you run into trouble. Ifall your forests are just called <forest></forest>, it's hard to knowwhich <forest> is which. XML::Simple solves this by aggregating allthe elements at a particular level of the XML parse tree intoanonymous array. $xml->{FOREST}->[0] is the first forest,$xml->{FOREST}->[1] the second, etc.
Looking at the contents of $xml with Data::Dumper as I suggestedbefore would help make things clearer.
HTH,
--jay--------------------------------------------------This email and attachment(s): [  ] blogable; [ x ] ask first; [  ]private and confidential
daggerquill [at] gmail [dot] comhttp://www.tuaw.com  http://www.downloadsquad.com  http://www.engatiki.org
values of â will give rise to dom!

