From beginners-return-91399-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon May  7 18:21:29 2007
Return-Path: <beginners-return-91399-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l47MLQqD003998
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 7 May 2007 18:21:27 -0400
Received: (qmail 9574 invoked by uid 514); 7 May 2007 22:21:18 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 9565 invoked from network); 7 May 2007 22:21:17 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 7 May 2007 22:21:17 -0000
Received: (qmail 26095 invoked by uid 225); 7 May 2007 22:21:17 -0000
Delivered-To: beginners@perl.org
Received: (qmail 26091 invoked by alias); 7 May 2007 22:21:17 -0000
X-Spam-Status: No, hits=-0.7 required=8.0
	tests=BAYES_20,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of krahnj@telus.net designates 204.209.205.55 as permitted sender)
Received: from defout.telus.net (HELO defout.telus.net) (204.209.205.55)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Mon, 07 May 2007 15:21:04 -0700
Received: from priv-edmwaa05.telusplanet.net ([154.20.161.24])
          by priv-edmwes50.telusplanet.net
          (InterMail vM.7.08.02.00 201-2186-121-20061213) with ESMTP
          id <20070507222059.JJLB14069.priv-edmwes50.telusplanet.net@priv-edmwaa05.telusplanet.net>
          for <beginners@perl.org>; Mon, 7 May 2007 16:20:59 -0600
Received: from [154.20.161.24] (d154-20-161-24.bchsia.telus.net [154.20.161.24])
	by priv-edmwaa05.telusplanet.net (BorderWare MXtreme Infinity Mail Firewall) with ESMTP id 78RRNSBNC0
	for <beginners@perl.org>; Mon,  7 May 2007 16:20:58 -0600 (MDT)
Message-ID: <463FA64D.5030007@telus.net>
Date: Mon, 07 May 2007 15:21:01 -0700
From: "John W. Krahn" <krahnj@telus.net>
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.7.13) Gecko/20060411
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: Perl Beginners <beginners@perl.org>
Subject: Re: Redirecting STDOUT & STDERR
References: <3.0.1.32.20070507115106.01c55100@muse.calarts.edu>
In-Reply-To: <3.0.1.32.20070507115106.01c55100@muse.calarts.edu>
X-Enigmail-Version: 0.90.1.0
X-Enigmail-Supports: pgp-inline, pgp-mime
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
X-Virus-Checked: Checked

Karyn Williams wrote:
> I have this script I have been working on where I need to redirect STDOUT
> and STDERR to files at the beginning of the script and then back to default
> (terminal) at the end of the script. I found an example on-line and used it
> and it works, however it generates a warning when running my script.

Try using the example that comes with Perl:

perldoc -f open

> I would prefer to make that warning go away. This is the output of the script:
> 
> alum# ./match.pl
> Name "main::OLDERR" used only once: possible typo at ./match.pl line 38.
> Name "main::OLDOUT" used only once: possible typo at ./match.pl line 37.
> Records processed: 2
> Kicked as dups: 1
> Kicked as exceptions: 0
> Accounts created: 1
> 
> This is the script:
> 
> #!/usr/bin/perl
> 
> # match.pl expanded
> # Checks the current csv against the passwd file to detect and prevent
> creating duplicate accounts
> 
> use strict;
> use warnings;
> 
> my $dir = "/usr/local/accounts";
> 
> my $csv = "isirin.csv";
> my $expin = "exceptions.csv";
> my $pwfile = "/etc/passwd";
> my $expout = "exceptions.log";
> my $clog = "account_change.log";
> my $as400 = "as400.txt";
> my $admiss = "admissions.txt";
> my $err = "error.log";
> 
> my $description = "SIR Fall 2007";
> 
> my $date = localtime();
> my ($sec,$min,$hour,$mday,$mon,$year) = (localtime)[0,1,2,3,4,5];
> $mday++;

You are incrementing the day of the month so if today is 31 May your string
will display the 32nd day of May!


> $mon++;
> $year += 1900;
> my $today = sprintf("%04d%02d%02d-%02d%02d%02d", $year, $mon, $mday, $hour,
> $min, $sec);
> 
> # Read in csv file from Accounting and check for existing accounts.
> 
> open (IN, "$dir/$csv") or die "$dir/$csv does not exist. This file must be
> available to run this script: $!";
> open (EX, "$dir/$expin") or die "Can't open EX $expin : $!";
> open (PW, "$pwfile") or die "Can't open PW $pwfile : $!";
> open (EXCEP, ">>$dir/$expout") or die "Can't open EXCEP: $!";
> open (OUT, ">>$dir/$clog") or die "Can't open OUT: $!";
> open (AOUT, ">$dir/$as400") or die "Can't open AOUT: $!";
> open (OLDOUT, ">&STDOUT");
> open (OLDERR, ">&STDERR");
> open (STDOUT, ">$dir/$admiss") or die "Can't open STDOUT: $!";
> open (STDERR, ">>$dir/$err") or die "Can't open STDERR: $!";

You should use the three argument form of open and you should *ALWAYS* verify
that open succeeded:

open IN,     '<',  "$dir/$csv"    or die "$dir/$csv does not exist. This file
must be available to run this script: $!";
open EX,     '<',  "$dir/$expin"  or die "Can't open EX $expin : $!";
open PW,     '<',  $pwfile        or die "Can't open PW $pwfile : $!";
open EXCEP,  '>>', "$dir/$expout" or die "Can't open EXCEP: $!";
open OUT,    '>>', "$dir/$clog"   or die "Can't open OUT: $!";
open AOUT,   '>',  "$dir/$as400"  or die "Can't open AOUT: $!";
open OLDOUT, '>&', \*STDOUT       or die "Can't dup STDOUT: $!";
open OLDERR, '>&', \*STDERR       or die "Can't dup STDERR: $!";
open STDOUT, '>',  "$dir/$admiss" or die "Can't open STDOUT: $!";
open STDERR, '>>', "$dir/$err"    or die "Can't open STDERR: $!";


> my $pwf;
> my $exp;
> my $gecos;
> my $login;
> my $rcount = 0;
> my $acount = 0;
> my $ecount = 0;
> my $lcount = 0 ;
> 
> my @line = <IN>;

Why are you reading the entire file into memory if you don't really have to?

> printf STDOUT ("$date\n");

That should be print instead of printf:

print STDOUT "$date\n";

printf() requires that the first string is a format string and will
interpolate certain characters.


> # Slurp the /etc/passwd file into one string and then search for matching
> Student IDs in that 
> # string. Use this later for checking unused loginnames also.
> 
> while (<PW>) {
>         $pwf .= $_;
>         }

my $pwf = do { local $/; <PW> };


> while (<EX>) {
>         $exp .= $_;
>         }

my $exp = do { local $/; <EX> };


> # Create GECOS and login info and then create account using pw
> 
> foreach my $line (@line) {

You probably should use a while loop instead of a foreach loop.

>         next if $line =~ /^nameid/;
>         next if $line =~ /^$/;
>         next if $line =~ /^\s+$/;
>         # file format is nameid,first,init,last
>         #print $line;
>         chomp $line;
>         $rcount++;
>         my ($sid,$name) = split(/,/, $line,2);
>         if ($pwf =~ /\b$sid\b/) {

You should probably store the $sid values in a hash.

>                 printf EXCEP ("$date, $name, $sid, possible dup

You should use print instead of printf.

> account\n"); $acount++;
>                 } elsif ($exp =~ /\b$sid\b/) {

You should probably store the $sid values in a hash.

>                 printf EXCEP ("$date, $name, $sid, listed in

You should use print instead of printf.

> exceptions.csv\n"); $ecount++;
>                 } else {
> 
>         my ($first, $initial, $last) = split(/,/, $name, 3);
>         # Create gecos info
>         $last =~ s/[",]//g;
>         $first =~ s/[",]//g;
>         $initial =~ s/[",]//g;

          tr/",//d for $first, $initial, $last;


>         if ($initial) { 
>                 $gecos = "\"$first $initial $last, $sid, $description\"";
>                 } else {
>                 $gecos = "\"$first $last, $sid, $description\""; }
>         #print "GECOS IS $gecos\n";
>         # Now guess at a login
>         my $lfirst = $first;
>         $lfirst =~ s/[^a-zA-Z]//g;
>         #(my $lfirst = $first) =~ s/[^a-zA-Z]//g);
>         my @last = split(/\s/, $last, 2);
>         my $llast = $last[0];

You don't need the array if you are only extracting one value:

         my $llast = ( split ' ', $last )[ 0 ];

>         $llast =~ s/[-\s]//g;
>         #print "LoginLast is $llast\n";
>         if (length($lfirst) + length($llast) <= 16) {
>                 $login = $lfirst . $llast; 
>                 } else {
>                 my $f = substr(($lfirst),0,1);
>                 $login = $f . $llast;
>                 }
>         $login = lc($login); 
>         #print "Login is $login\n";
>         #printf STDOUT ("$first $initial $last, $sid, $login, passwd\n");
>         printf STDOUT ("$first $initial $last, $sid, $login, ");

You should use print instead of printf.

>         #This next line is for testing purposes
>         system("pw useradd -n $login -c $gecos -m -s /bin/ftpshell -N");

You should verify that 'pw' executed correctly:

        system( 'pw', 'useradd', '-n', $login, '-c', $gecos, '-m', '-s',
'/bin/ftpshell', '-N' ) == 0 or die "Cannot run 'pw' $?";


>         #system("pw useradd -n $login -c $gecos -m -s /bin/ftpshell -w
> random");
>         printf OUT ("$date Account Added, $first $initial $last, $login,

You should use print instead of printf.

> $sid\n");
>         printf AOUT ("$sid, $first $initial $last, $login\n");

You should use print instead of printf.

>         $lcount++;
>         }
> }
> 
> close IN;
> close OUT;
> close AOUT;
> close STDOUT;
> close STDERR;
> close EX;
> close PW;
> close EXCEP;
> 
> rename ("$dir/$csv", "$dir/$csv.$today") or die "Can't rename $dir/$csv : $!";
> 
> open(STDOUT, ">&OLDOUT");
> open(STDERR, ">&OLDERR");

You should use the three argument form of open and you should *ALWAYS* verify
that open succeeded:

open STDOUT, '>&', \*OLDOUT or die "Cannot dup OLDOUT: $!";
open STDERR, '>&', \*OLDERR or die "Cannot dup OLDERR: $!";


> print "Records processed: $rcount\n";
> print "Kicked as dups: $acount\n";
> print "Kicked as exceptions: $ecount\n";
> print "Accounts created: $lcount\n";
> 
> # send via e-mail output of this script.
> 
> my $to = "To: karyn\@calarts.edu";
> my $from = "From: accounts\@alum.calarts.edu";
> my $subject = "Subject: Test Output for SIRs";
> my $sendmail = "/usr/sbin/sendmail -t";
> 
> my @files = ("$dir/$as400", "$dir/$admiss");
> my @mail = ();
> 
> foreach my $file (@files) {
> 
> open (MAIL, "|$sendmail") or die "Can't open $sendmail: $!";
> open (AOUT, "<$file") or die "Can't open AOUT for read: $!";
> 
> print MAIL "$to\n";    
> print MAIL "$from\n";      
> print MAIL "$subject\n";         
> 
> @mail = <AOUT>;
>         foreach my $line (@mail) {
>                 print MAIL $line;
>         }

You don't need the array or loop there:

print MAIL "$to\n",
           "$from\n",
           "$subject\n",
           <AOUT>;


> close (MAIL);

When you close a piped open you should verify that it closed correctly:

perldoc -f close


> close AOUT;
> 
> }
> 
> # end of script


John
-- 
Perl isn't a toolbox, but a small machine shop where you can special-order
certain sorts of tools at low cost and in short order.       -- Larry Wall

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


