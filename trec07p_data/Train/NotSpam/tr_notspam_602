From perl6-all-return-80473-ktwarwic=speedy.uwaterloo.ca@perl.org  Tue Apr 10 20:03:22 2007
Return-Path: <perl6-all-return-80473-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3B03K0I003900
	for <ktwarwic@speedy.uwaterloo.ca>; Tue, 10 Apr 2007 20:03:21 -0400
Received: (qmail 21477 invoked by uid 514); 11 Apr 2007 00:02:57 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 21472 invoked from network); 11 Apr 2007 00:02:57 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: neutral (x1.develooper.com: 63.251.223.186 is neither permitted nor denied by domain of alek.storm@gmail.com)
Delivered-To: perlmail-parrot-porters@onion.perl.org
Delivered-To: parrot-porters@perl.org
Received-SPF: pass (x1.develooper.com: domain of alek.storm@gmail.com designates 66.249.92.172 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=eP5Gstu55vAH1rAp6Jx0OzW6O/6LWg8bmnkI7ixUg1HhXPqfDENLx9xbJmplAfnyx64EFV5LqW3gLewV7MchA3vlzV44UzHdGeLbyBHUeetbD270uKO2Z85hP2h+f5IkASXNCWABwC6uq0hIopcRUD6oTEUalRxl/JCCIs2NEio=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=PVWHuKGoth+jXaRb8QXW4pSZQcvjpiGghv8DezeNDCeOqOPdxdoyBj+TUQVGniDvnyfaM8cxi9NygixePIXTr5IpI/dX6TY3OqIkI7DZA8gfKvDN4XpmAsGuRsDr9XL/79EHhjUFTzfwpltYwzd3vcCDRxKGIHJI4Dvipkfr/Ig=
Message-ID: <189adbd0704101702g34d86254t75708dd9035094f2@mail.gmail.com>
Date: Wed, 11 Apr 2007 00:02:29 +0000
From: "Alek Storm" <alek.storm@gmail.com>
To: "Allison Randal" <allison@perl.org>
Subject: Re: modifying classes after they're instantiated
Cc: p2 <parrot-porters@perl.org>
In-Reply-To: <461C0EEF.1010107@perl.org>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <461C0EEF.1010107@perl.org>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED
Status: O
Content-Length: 2627
Lines: 57

On 4/10/07, Allison Randal <allison@perl.org> wrote:
> 4) Do away with automatic morphing. Attempting to make changes to a
> class that's already been instantiated is not allowed (add_method, etc.
> will throw an exception). This also eliminates the need for
> remove_method, remove_attribute, remove_role, and remove_parent. To
> modify a class that has instantiated objects you must clone it first:
>
>    classobj = newclass 'Foo'
>    object = classobj.'new'()
>
>    newclassobj = classobj.'clone'('exclude_methods'=>$P1)
>    newclassobj.'add_method'('bar', $P3)
>    object2 = newclassobj.'new'()
>
> And 'clone' could take an option specifying whether this particular
> clone will replace the existing class in the namespace. Disadvantage: It
> eliminates some of the DWIMery of the system. On the other hand, it
> might make it easier to implement a language that doesn't allow
> modifications to instantiated classes. (This is currently my favorite
> alternative.)
>
> Allison

I like this one, but I also have another alternative.  First, make all
class-modification code (add_method, remove_attribute, etc) return a
PMC*.  Whenever one of these methods is called on a class, the class
is cloned inside the method, the change is applied to the clone, and
the clone is returned.  The caller doesn't need to know about the
cloning, and neither do the already-existing instances of the original
class - they get to keep their copy of the original class.  This
approach preserves the current interface and DWIMery of the class
system, while retaining the benefits of alternative #4.

Since not all languages want to make clones of their classes on
modification (a problem with alternative #4), it's quite easy for that
language's class PMC not to clone itself inside the method, and
instead return a modified version of itself.  In this case, all
instantiated objects would be affected, but this would only be used if
that's the way that language's class system works.

classobj = newclass 'Foo'
object = classobj.'new'()

# add_method returns a clone of the original class with "bar" added
# C<object> keeps its reference to the original class
classobj = classobj.'add_method'('bar', $P3)
object2 = classobj.'new'()

The only downside I can think of is the overhead involved in creating
a new clone of the class for every change to it, for example, when
many attributes are added at once, but I imagine it would be minimal,
since classes are generally initialized once and that's it.  If it is
a problem, we could create a shortcut method that takes a list of
attributes to add, or something like that.

-- 
Alek Storm

