From beginners-return-91619-ktwarwic=speedy.uwaterloo.ca@perl.org  Sun May 13 23:05:52 2007
Return-Path: <beginners-return-91619-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4E35pqD015755
	for <ktwarwic@flax9.uwaterloo.ca>; Sun, 13 May 2007 23:05:51 -0400
Received: (qmail 21707 invoked by uid 514); 14 May 2007 03:05:44 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 21698 invoked from network); 14 May 2007 03:05:44 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 14 May 2007 03:05:44 -0000
Received: (qmail 25490 invoked by uid 225); 14 May 2007 03:05:44 -0000
Delivered-To: beginners@perl.org
Received: (qmail 25476 invoked by alias); 14 May 2007 03:05:43 -0000
X-Spam-Status: No, hits=-1.1 required=8.0
	tests=BAYES_05,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of chas.owens@gmail.com designates 64.233.162.233 as permitted sender)
Received: from nz-out-0506.google.com (HELO nz-out-0506.google.com) (64.233.162.233)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Sun, 13 May 2007 20:05:35 -0700
Received: by nz-out-0506.google.com with SMTP id x7so294982nzc
        for <beginners@perl.org>; Sun, 13 May 2007 20:05:31 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=h8nMhgnk1oej3buDGWMxhm9Cy5WCjCsjVfYjyuP4zuFiPJYa4cnL/As5RtofYvYRn52Zoe+Z0WGbbCKIwAJ8Op4Dn+Kr/+5xSZAr+c6Rfrkn/YHTaP1nlbLg92zquYzslo6nXF3ZLuUEDDIwLc4Zpx84lbh+QTtW8STUetxFm8M=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=NkNhnyx8A4TTi1fKWeM9j+zMlHL8jdEobkqPlv0uRFev1PskcrF8hE7LKBDajCUc0fF4Mf/lvicNTBsxhhl4HPxNU71HrO9oNU9tx0GxkfZkzgiFIHWFqiYKzNpRVi6tEWZD+0s2ZTKvRSRvsP3rBclvROgM0ObTm5XK2N7WC2Y=
Received: by 10.115.22.1 with SMTP id z1mr802276wai.1179111931038;
        Sun, 13 May 2007 20:05:31 -0700 (PDT)
Received: by 10.114.79.3 with HTTP; Sun, 13 May 2007 20:05:30 -0700 (PDT)
Message-ID: <58ce48dc0705132005u5e5f2156v777908ecc4d67cdb@mail.gmail.com>
Date: Sun, 13 May 2007 23:05:30 -0400
From: "Chas Owens" <chas.owens@gmail.com>
To: Mathew <theillien@yahoo.com>
Subject: Re: Stuck on a hash referrence, kinda
Cc: "Rob Dixon" <rob.dixon@350.com>, "Perl Beginners" <beginners@perl.org>
In-Reply-To: <4646FF98.60604@yahoo.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <4032136.38521179040784191.JavaMail.root@store2a.brinkster.com>
	 <4646C10A.3040906@yahoo.com> <4646FD35.3040207@350.com>
	 <4646FF98.60604@yahoo.com>

My understanding of the problem:

You have a ref to a HoH and you need to find all of the first set of
keys that have a specific, but unspecified at coding time, second key
or value.

For key I would do something like this

my $key2 = func_to_get_key2();
for $key1 (grep { exists $store->{$key1}{$key2} } sort keys %$store) {
    process($store, $key1, $key2);
}

For value I would use a similar construct

my ($key2, $value) = func_to_get_key2_and_value();
for $key1 (grep { $store->{$key1}{$key2} eq $value } sort keys %$store) {
    process($store, $key1, $key2);
}

N.B. eq is not a good test of equality for numbers (use == instead)
and == is not a good test of equality for floating point numbers that
are the result of even simple operations (use an inequaltiy with an
appropriate delta* instead); hopefully objects will provide an
overridden eq or == operator or will provide an explicit method for
testing equality.


* I may have butchered that, what I mean is something like
($value <= $target-$delta and $value <= $target+$delta)
where $delta is a small value that is equal to the amount of rounding
error you think may have crept in.

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


