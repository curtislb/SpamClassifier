From beginners-return-91620-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon May 14 01:38:02 2007
Return-Path: <beginners-return-91620-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4E5c0qD016939
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 14 May 2007 01:38:00 -0400
Received: (qmail 12032 invoked by uid 514); 14 May 2007 05:37:54 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 12023 invoked from network); 14 May 2007 05:37:53 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 14 May 2007 05:37:53 -0000
Received: (qmail 32727 invoked by uid 225); 14 May 2007 05:37:53 -0000
Delivered-To: beginners@perl.org
Received: (qmail 32723 invoked by alias); 14 May 2007 05:37:53 -0000
X-Spam-Status: No, hits=3.0 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,DK_POLICY_TESTING,FORGED_YAHOO_RCVD,SPF_NEUTRAL
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: local policy)
Received: from office.servervault.com (HELO mail1.dulles.sv.int) (216.12.128.136)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Sun, 13 May 2007 22:37:50 -0700
Received: from [192.168.4.103] ([192.168.4.103]) by mail1.dulles.sv.int with Microsoft SMTPSVC(6.0.3790.1830);
	 Mon, 14 May 2007 01:37:43 -0400
Message-ID: <4647F566.6020608@yahoo.com>
Date: Mon, 14 May 2007 01:36:38 -0400
From: Mathew Snyder <theillien@yahoo.com>
User-Agent: Thunderbird 1.5.0.10 (X11/20060911)
MIME-Version: 1.0
To: Chas Owens <chas.owens@gmail.com>
CC: Rob Dixon <rob.dixon@350.com>, Perl Beginners <beginners@perl.org>
Subject: Re: Stuck on a hash referrence, kinda
References: <4032136.38521179040784191.JavaMail.root@store2a.brinkster.com>	 <4646C10A.3040906@yahoo.com> <4646FD35.3040207@350.com>	 <4646FF98.60604@yahoo.com> <58ce48dc0705132005u5e5f2156v777908ecc4d67cdb@mail.gmail.com>
In-Reply-To: <58ce48dc0705132005u5e5f2156v777908ecc4d67cdb@mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 7bit
X-OriginalArrivalTime: 14 May 2007 05:37:43.0165 (UTC) FILETIME=[FE6A5AD0:01C795E9]

That's waaaaaaay over my head.  The method I used works so I'll stick with that.
 Thanks though.  :)

Keep up with me and what I'm up to: http://theillien.blogspot.com


Chas Owens wrote:
> My understanding of the problem:
> 
> You have a ref to a HoH and you need to find all of the first set of
> keys that have a specific, but unspecified at coding time, second key
> or value.
> 
> For key I would do something like this
> 
> my $key2 = func_to_get_key2();
> for $key1 (grep { exists $store->{$key1}{$key2} } sort keys %$store) {
>    process($store, $key1, $key2);
> }
> 
> For value I would use a similar construct
> 
> my ($key2, $value) = func_to_get_key2_and_value();
> for $key1 (grep { $store->{$key1}{$key2} eq $value } sort keys %$store) {
>    process($store, $key1, $key2);
> }
> 
> N.B. eq is not a good test of equality for numbers (use == instead)
> and == is not a good test of equality for floating point numbers that
> are the result of even simple operations (use an inequaltiy with an
> appropriate delta* instead); hopefully objects will provide an
> overridden eq or == operator or will provide an explicit method for
> testing equality.
> 
> 
> * I may have butchered that, what I mean is something like
> ($value <= $target-$delta and $value <= $target+$delta)
> where $delta is a small value that is equal to the amount of rounding
> error you think may have crept in.
> 

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


