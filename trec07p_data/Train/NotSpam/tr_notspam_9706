From perl6-all-return-81272-ktwarwic=speedy.uwaterloo.ca@perl.org  Sat May 12 05:49:25 2007
Return-Path: <perl6-all-return-81272-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4C9nNqD009417
	for <ktwarwic@flax9.uwaterloo.ca>; Sat, 12 May 2007 05:49:24 -0400
Received: (qmail 25873 invoked by uid 514); 12 May 2007 09:49:19 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 25867 invoked from network); 12 May 2007 09:49:16 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: domain of jrisom@gmail.com designates 64.233.166.183 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:in-reply-to:references:mime-version:content-type:message-id:content-transfer-encoding:cc:from:subject:date:to:x-mailer;
        b=eAydrIiFbcp6FeG+VhoOkC7bk8Og0ERfFfhdw25D+WemeixZanFomCShPmpvkF95BXuYErbkpASq/bLrZ9QiFPYuSRvlBJkp98v2PUdZ5x0gdR/YpkmMDMQwu2+/QomkS4mr+mmLsPXKAQkWasbgSeqPv+lQfzJxu4dnyck9sv8=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:in-reply-to:references:mime-version:content-type:message-id:content-transfer-encoding:cc:from:subject:date:to:x-mailer;
        b=W00UQGTVVTwRMGgCrYUS9m0QGcXA0yTijAZpZezSOpAU46iSA+WsVAOMIn8E+RLptyb6HIy4K1J92nK6mRGPLOHePp/itdDyeanMt0PC6Pc7iXSIfQeAh5ghzaSd0fukyK+6DkxitaNclF9mpfQaT9icw+XNib/yR+niXAHxUQY=
In-Reply-To: <200705112225.11261.chromatic@wgz.org>
References: <RT-Ticket-42929@perl.org> <9BDAFD5D-0BDF-47AB-91FE-81C9063E4D7C@verizon.net> <rt-3.6.HEAD-12281-1178935311-488.42929-72-0@perl.org> <200705112225.11261.chromatic@wgz.org>
Mime-Version: 1.0 (Apple Message framework v624)
Content-Type: text/plain; charset=US-ASCII; format=flowed
Message-Id: <78294067d941d33ef3ff6ad064ded5e0@gmail.com>
Content-Transfer-Encoding: 7bit
Cc: Perl 6 Internals <perl6-internals@perl.org>,
   bugs-bitbucket@netlabs.develooper.com
From: Joshua Isom <jrisom@gmail.com>
Subject: Re: [perl #42929] [BUG] t/doc/pod_todo.t:  Massive failures from newly added test file
Date: Sat, 12 May 2007 04:26:40 -0500
To: chromatic <chromatic@wgz.org>
X-Mailer: Apple Mail (2.624)
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS


On May 12, 2007, at 12:25 AM, chromatic wrote:

> I agree.  It may be a decent test, but it's not a test to run by 
> default right
> now.
>
> While I'm asking for a pony, I'd also like a way to disable the coding
> standards tests for an official release tarball.
>
> -- c
>

This will at least take care of the second part.  The end user probably 
won't care less if pod has a little bit of an error.  Maybe using an 
environmental variable would help with some of the issues which tests 
to run and when.

Index: config/gen/makefiles/root.in
===================================================================
--- config/gen/makefiles/root.in        (revision 18511)
+++ config/gen/makefiles/root.in        (working copy)
@@ -1331,7 +1331,8 @@

  # The --running-make-test argument is currently used by long-running 
tests
  # to disable GC_DEBUG.
-EXTRA_TEST_ARGS    = --gc-debug --running-make-test
+#INVERSE_CONDITIONED_LINE(DEVEL):EXTRA_TEST_ARGS    = --gc-debug 
--running-make-test
+#CONDITIONED_LINE(DEVEL):EXTRA_TEST_ARGS    = --developing --gc-debug 
--running-make-test
  DISTRO_TEST_FILES = \
      t/distro/*.t
  BENCHMARK_TEST_FILES = \
Index: t/harness
===================================================================
--- t/harness   (revision 18511)
+++ t/harness   (working copy)
@@ -80,6 +80,11 @@

  Emit a C<smoke.html> file instead of displaying results.

+=item C<--developing>
+
+Run extra tests the check coding standards and other parts of parrot 
not
+essential for a successful build.
+
  =back

  =cut
@@ -111,6 +116,9 @@
  my $use_test_run = grep { $_ eq '--tr' } @ARGV;
  @ARGV = grep { $_ ne '--tr' } @ARGV;

+my $developing = grep { $_ eq '--developing' } @ARGV;
+@ARGV = grep { $_ ne '--developing' } @ARGV;
+
  $use_test_run ||= $ENV{'PARROT_USE_TEST_RUN'};

  # Suck the short options into the TEST_PROG_ARGS evar:
@@ -153,34 +161,44 @@

  # Pass in a list of tests to run on the command line, else run all the 
tests.
  my @default_tests = map {glob "t/$_/*.t"} qw(
-    configure postconfigure compilers/imcc/* op pmc native_pbc dynpmc 
dynoplibs
+    postconfigure compilers/imcc/* op pmc native_pbc dynpmc dynoplibs
      compilers/past compilers/pge compilers/pge/p5regex 
compilers/pge/p6regex
-    compilers/tge compilers/json library examples run src tools perl 
doc stm
+    compilers/tge compilers/json library examples run tools stm
  );

-# append the distribution checking tests to the default tests
-my @distro_tests = map { "t/distro/$_" } qw(
-    manifest.t
-    file_metadata.t
-);
-push @default_tests, @distro_tests;
+if ($developing) {
+    my @developing_tests;
+    @developing_tests = map {glob "t/$_/*.t" } qw(
+        configure src perl doc
+    );
+    push @default_tests, @developing_tests;

-# collect the coding standard tests (that we want to run) together and
-# append them to the list of default tests
-my @coding_std_tests = map { "t/codingstd/$_" } qw(
-    c_code_coda.t
-    c_header_guards.t
-    c_indent.t
-    c_struct.t
-    cppcomments.t
-    cuddled_else.t
-    gmt_utc.t
-    pir_code_coda.t
-    tabs.t
-    trailing_space.t
-);
-push @default_tests, @coding_std_tests;
+    # append the distribution checking tests to the default tests
+    my @distro_tests;
+    @distro_tests = map { "t/distro/$_" } qw(
+        manifest.t
+        file_metadata.t
+    );
+    push @default_tests, @distro_tests;

+    # collect the coding standard tests (that we want to run) together 
and
+    # append them to the list of default tests
+    my @coding_std_tests;
+    @coding_std_tests = map { "t/codingstd/$_" } qw(
+        c_code_coda.t
+        c_header_guards.t
+        c_indent.t
+        c_struct.t
+        cppcomments.t
+        cuddled_else.t
+        gmt_utc.t
+        pir_code_coda.t
+        tabs.t
+        trailing_space.t
+    );
+    push @default_tests, @coding_std_tests;
+}
+
  my @tests = @ARGV ? map { glob( $_ ) } @ARGV : @default_tests;

  if ($use_test_run) {

