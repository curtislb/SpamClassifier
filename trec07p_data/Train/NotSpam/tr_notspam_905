From r-help-bounces@stat.math.ethz.ch  Wed Apr 11 16:57:27 2007
Return-Path: <r-help-bounces@stat.math.ethz.ch>
Received: from hypatia.math.ethz.ch (hypatia.math.ethz.ch [129.132.145.15])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l3BKvP0I021722
	for <ktwarwic@speedy.uwaterloo.ca>; Wed, 11 Apr 2007 16:57:26 -0400
Received: from hypatia.math.ethz.ch (hypatia [129.132.145.15])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l3BKtgaj029255;
	Wed, 11 Apr 2007 22:55:59 +0200
X-Spam-Checker-Version: SpamAssassin 3.1.8 (2007-02-13) on hypatia.math.ethz.ch
X-Spam-Level: 
X-Spam-Status: No, score=-0.5 required=5.0 tests=AWL,
	BAYES_50 autolearn=no version=3.1.8
Received: from nz-out-0506.google.com (nz-out-0506.google.com [64.233.162.237])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l3BKtVIe029156
	for <r-help@stat.math.ethz.ch>; Wed, 11 Apr 2007 22:55:32 +0200
Received: by nz-out-0506.google.com with SMTP id r28so238832nza
	for <r-help@stat.math.ethz.ch>; Wed, 11 Apr 2007 13:55:31 -0700 (PDT)
Received: by 10.115.78.1 with SMTP id f1mr445971wal.1176324931320;
	Wed, 11 Apr 2007 13:55:31 -0700 (PDT)
Received: by 10.114.169.18 with HTTP; Wed, 11 Apr 2007 13:55:30 -0700 (PDT)
Message-ID: <eb555e660704111355o25b185b8l56e873e246d528a4@mail.gmail.com>
Date: Wed, 11 Apr 2007 13:55:30 -0700
From: "Deepayan Sarkar" <deepayan.sarkar@gmail.com>
To: "Sundar Dorai-Raj" <sundar.dorai-raj@pdf.com>
In-Reply-To: <461D33AB.5030603@pdf.com>
MIME-Version: 1.0
Content-Disposition: inline
References: <FCD43F49-D13B-49C6-B6FC-B703C6FF1D46@virginia.edu>
	<eb555e660704101607y4b021629g8ff283f68a18e68c@mail.gmail.com>
	<C3E95C7F-112D-4B3C-908B-7DEE6F8D3AF2@virginia.edu>
	<461D33AB.5030603@pdf.com>
X-Virus-Scanned: by amavisd-new at stat.math.ethz.ch
Cc: r-help@stat.math.ethz.ch
Subject: Re: [R] Positioning in xyplot
X-BeenThere: r-help@stat.math.ethz.ch
X-Mailman-Version: 2.1.9
Precedence: list
List-Id: "Main R Mailing List: Primary help" <r-help.stat.math.ethz.ch>
List-Unsubscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=unsubscribe>
List-Archive: <https://stat.ethz.ch/pipermail/r-help>
List-Post: <mailto:r-help@stat.math.ethz.ch>
List-Help: <mailto:r-help-request@stat.math.ethz.ch?subject=help>
List-Subscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: r-help-bounces@stat.math.ethz.ch
Errors-To: r-help-bounces@stat.math.ethz.ch
Status: O
Content-Length: 4700
Lines: 153

On 4/11/07, Sundar Dorai-Raj <sundar.dorai-raj@pdf.com> wrote:

> Seems like you may get a workaround (albeit kludgey) by using
> ?print.trellis. Here's another example:
>
> library(lattice)
> z <- expand.grid(x = 1:10, p = 1:5, r = 1:10)
> z$y <- rnorm(nrow(z))
> z$p <- factor(z$p, levels = c(1, 5, 2, 4, 3))
> bot <- xyplot(y ~ x | p, z, groups = r,
>                layout = c(2, 2), type = "l",
>                scales = list(alternating = 1),
>                subset = p != 3)
> top <- xyplot(y ~ x | p, z, groups = r,
>                type = "l", xlab = "",
>                scales = list(alternating = 2),
>                subset = p == 3)
>
> print(bot, c(0, 0, 1, 11/16))
> print(top, c(1/5, 7/12, 4/5, 1), newpage = FALSE)

Here's another hack (thanks to Sundar for the reproducible example):



library(grid)

## this is a safer version of current.panel.limits()

current.limits <-
    function ()
{
    xlim <- convertX(unit(c(0, 1), "npc"), "native", valueOnly = TRUE)
    ylim <- convertY(unit(c(0, 1), "npc"), "native", valueOnly = TRUE)
    if (any(!is.finite(xlim))) xlim <- c(0, 1)
    if (any(!is.finite(ylim))) ylim <- c(0, 1)
    list(xlim = xlim, ylim = ylim)
}

## this calls 'fun' after moving its viewport if panel.number() == 5

callAfterMoving <-
    function(fun, border = TRUE, move.x = 1, ...)
{
    if (panel.number() == 5) {
        fun(...)
        if (border) grid.rect()
    }
    else {
        cpl <- current.limits()
        pushViewport(viewport(x = move.x,
                              width = unit(1, "npc"),
                              xscale = cpl$xlim,
                              yscale = cpl$ylim,
                              clip = "off"))
        fun(...)
        if (border) grid.rect()
        upViewport()
    }
}


## this almost works, except for the axes on the left, because in the
## context in which it is drawn (the strip on the left, invisible in
## this example), information about how much to move right is not
## available.


xyplot(y ~ x | p, z, groups = r,
       layout = c(2, 3), type = "l",
       par.settings =
       list(axis.line = list(col = "transparent"),
            strip.border = list(col = "transparent")),
       panel = function(...) {
           callAfterMoving(panel.xyplot, ...)
       },
       strip = function(...) {
           callAfterMoving(strip.default, ...)
       },
       axis = function(..., line.col) {
           callAfterMoving(axis.default,
                           border = FALSE,
                           line.col = 'black',
                           ...)
       })


## one way to bail out is simply not draw the left axes.  It can also be
## added back explicitly by adding a call to panel.axis inside the
## panel function (see below)


xyplot(y ~ x | p, z, groups = r,
       layout = c(2, 3), type = "l",
       par.settings =
       list(axis.line = list(col = "transparent"),
            strip.border = list(col = "transparent")),
       panel = function(...) {
           callAfterMoving(panel.xyplot, ...)
       },
       strip = function(...) {
           callAfterMoving(strip.default, ...)
       },
       axis = function(..., line.col, side) {
           if (side != "left" || panel.number() != 5) {
               callAfterMoving(axis.default,
                               border = FALSE,
                               line.col = 'black',
                               side = side,
                               ...)
           }
       })


## panel function with axes on the left:

panel.leftaxes <- function(...)
{
    if (panel.number() == 5)
       panel.axis("left", outside = TRUE,
                   line.col = "black")
    panel.xyplot(...)
}


xyplot(y ~ x | p, z, groups = r,
       layout = c(2, 3), type = "l",
       par.settings =
       list(axis.line = list(col = "transparent"),
            strip.border = list(col = "transparent")),
       panel = function(...) {
           callAfterMoving(panel.leftaxes, ...)
       },
       strip = function(...) {
           callAfterMoving(strip.default, ...)
       },
       axis = function(..., line.col, side) {
           if (side != "left" || panel.number() != 5) {
               callAfterMoving(axis.default,
                               border = FALSE,
                               line.col = 'black',
                               side = side,
                               ...)
           }
       })

-Deepayan

______________________________________________
R-help@stat.math.ethz.ch mailing list
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.

