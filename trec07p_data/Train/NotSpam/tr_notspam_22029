From beginners-return-92722-ktwarwic=speedy.uwaterloo.ca@perl.org  Sun Jun 24 13:21:53 2007
Return-Path: <beginners-return-92722-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5OHLqL9015153
	for <ktwarwic@flax9.uwaterloo.ca>; Sun, 24 Jun 2007 13:21:53 -0400
Received: (qmail 27897 invoked by uid 514); 24 Jun 2007 17:21:42 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Delivered-To: moderator for beginners@perl.org
Received: (qmail 5983 invoked from network); 24 Jun 2007 14:43:08 -0000
Delivered-To: beginners@perl.org
X-Spam-Status: No, hits=-1.9 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: 63.251.223.186 is neither permitted nor denied by domain of nobull67@gmail.com)
To: beginners@perl.org
MBOX-Line: From news@google.com Sun Jun 24 14:42:52 2007
Delivered-To: colobus-nntpmod@lists.develooper.com
Delivered-To: news-moderator-perl.beginners@perl.org
Received-SPF: neutral (x1.develooper.com: 130.59.1.10 is neither permitted nor denied by domain of news@google.com)
From: "nobull67@gmail.com" <nobull67@gmail.com>
Subject: Re: Conditional in regex
Date: Sun, 24 Jun 2007 14:42:43 -0000
Organization: http://groups.google.com
Lines: 67
Message-ID: <1182696163.021916.127330@k79g2000hse.googlegroups.com>
References: <C2A34FD8.7EBF%pl@loserville.org>
NNTP-Posting-Host: 212.183.134.209
Mime-Version: 1.0
Content-Type: text/plain; charset="us-ascii"
X-Trace: posting.google.com 1182696163 30912 127.0.0.1 (24 Jun 2007 14:42:43 GMT)
X-Complaints-To: groups-abuse@google.com
NNTP-Posting-Date: Sun, 24 Jun 2007 14:42:43 +0000 (UTC)
In-Reply-To: <C2A34FD8.7EBF%pl@loserville.org>
User-Agent: G2/1.0
X-HTTP-UserAgent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.8.1.4) Gecko/20070515 Firefox/2.0.0.4,gzip(gfe),gzip(gfe)
Complaints-To: groups-abuse@google.com
Injection-Info: k79g2000hse.googlegroups.com; posting-host=212.183.134.209;
   posting-account=OHUTRQwAAAAO3UloDZ6NlCKiNTyTMOkq
X-Posted-By: 63.251.223.186
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-1.9 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL

On Jun 24, 3:31 am, p...@loserville.org (Jeff) wrote:
> Hi all. I'm new to perl, a new programmer, and I badly need guidance. I'm
> trying to parse a config file with key/value pairs seperated by white space
> and surrounded by curly brackets. It has multiple fields that look like
> this:
>
> {
> Key  value
> Key   value
>
> }
>
> My solution has been to parse it with something simple --
>
> while ($file_contents =~ /(\w+)\s*\{([^}]*)\}/gs) {
>        push @new, $2;
>
> }
>
> foreach (@new){
>                   $_  =~ /\b(\w+)\s+(.*)\s+
>                           \b(\w+)\s+(.*)/xgs;
>
> My @next_tmp_variable = ($1, $2, etc);
>
> }
>
> -- but the config definitions contained in those curly brackets are
> different lengths. Some only have a four left hand values, while others have
> six or more. My solution isn't giving me what I really need.

It's actually very close.

The =~ is redundant since $_ is the default.

There's no need for the intermediate variables.

Are newlines significant? Or can just treat it as a list of
alternating keys and values delimited by whitespace?

> So I have two questions. First, I don't understand how to test this so that
> I parse all the values between the curly braces, regardless of how many
> items are there.

You don't need to repeat the pattern by hand - the /g will do that for
you.

> Second, and equally important, what kind of data structure
> should I put the results in? I think I need a hash of hashes

Probably a list of hashes would be the most natural.

my @LoH = map { { split } } $file_contents =~ /\{(.*?)\}/gs;

>. What I'd like
> to do is assign each left hand value as the key in a hash. Then, in each set
> there's a left 'command' where the right hand value will always be unique,
> which would be perfect for use as the name of an alias for the hash or as
> the key to a reference to a hash of that definition.

my %HoH;
while ( $file_contents =~ /\{(.*?)\}/gs ) {
        my %entry = split;
        $HoH{delete $entry{command}} = \%entry;
}



-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


