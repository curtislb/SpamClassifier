From perl6-all-return-80941-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri Apr 27 18:31:54 2007
Return-Path: <perl6-all-return-80941-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3RMUk6w031889
	for <ktwarwic@speedy.uwaterloo.ca>; Fri, 27 Apr 2007 18:30:50 -0400
Received: (qmail 26907 invoked by uid 514); 27 Apr 2007 22:29:32 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 26902 invoked from network); 27 Apr 2007 22:29:32 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DK_POLICY_SIGNSOME
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
Subject: [perl #42777] [PATCH] Configure.pl and underlying packages:  Eliminate temporary hack 
From: "James Keenan via RT" <parrotbug-followup@parrotcode.org>
Reply-To: parrotbug-followup@parrotcode.org
In-Reply-To: <D3E5E21E-98AA-4CCA-B602-3E9C75809BDF@verizon.net>
References: <RT-Ticket-42777@perl.org> <D3E5E21E-98AA-4CCA-B602-3E9C75809BDF@verizon.net>
Message-ID: <rt-3.6.HEAD-1687-1177712872-1042.42777-15-0@perl.org>
X-RT-Loop-Prevention: perl
RT-Ticket: perl #42777
Managed-by: RT 3.6.HEAD (http://www.bestpractical.com/rt/)
RT-Originator: jkeen@verizon.net
Cc: perl6-internals@perl.org
To: "OtherRecipients of perl Ticket #42777": ;
MIME-Version: 1.0
X-RT-Original-Encoding: utf-8
Content-type: multipart/mixed; boundary="----------=_1177712874-1687-207"
Date: Fri, 27 Apr 2007 15:27:55 -0700
X-Virus-Checked: Checked
X-Virus-Checked: Checked
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-4.4 required=8.0
	tests=ALL_TRUSTED,BAYES_00,DK_POLICY_SIGNSOME
Status: O
Content-Length: 337303
Lines: 6460

------------=_1177712874-1687-207
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit

On Fri Apr 27 14:43:55 2007, jkeen@verizon.net wrote:
> A file with coverage analysis will be supplied in a  
> separate posting to this thread.

Attached is a plain text version of the coverage analysis.  Coverage was run on a 'post-
Configure.pl' basis:

  $ cover -delete coverage/configure/
  $ ./myconfigure.sh 
  $ PERL5OPT=-MDevel::Cover=-db,coverage/configure/ prove t/configure/*.t t/
postconfigure/01-data_slurp.t "$@"
  $ cover coverage/configure/ -report=text  -ignore_re '(^(config\/|lib\/(?!P
arrot))|\busr\b)' > ~/learn/parrot/coverage/postconfigure.coverage.txt

kid51

------------=_1177712874-1687-207
Content-Type: text/plain; charset="ascii"; name="postconfigure.coverage.txt"
Content-Disposition: inline; filename="postconfigure.coverage.txt"
Content-Transfer-Encoding: quoted-printable
RT-Attachment: 42777/253872/112015

Reading database from /Users/jimk/work/fresh/coverage/configure


---------------------------- ------ ------ ------ ------ ------ ------ ----=
--
File                           stmt   bran   cond    sub    pod   time  tot=
al
---------------------------- ------ ------ ------ ------ ------ ------ ----=
--
/usr/local/bin/prove           73.7   43.8    0.0   46.7    n/a    1.1   61=
.1
config/auto/aio.pm             45.5    0.0    n/a   83.3    0.0    0.1   41=
.7
config/auto/alignptrs.pm       42.9    0.0    0.0   85.7    0.0    0.0   35=
.3
config/auto/byteorder.pm       53.6    0.0    n/a   83.3    0.0    0.0   48=
.8
config/auto/cgoto.pm           41.7    0.0    0.0   83.3    0.0    0.0   36=
.4
config/auto/cpu.pm             58.1    0.0    n/a   85.7    0.0    0.0   51=
.1
config/auto/cpu/i386/auto.pm   34.6    0.0    n/a   75.0    0.0    0.0   29=
.3
config/auto/cpu/ppc/auto.pm    34.6    0.0    n/a   75.0    0.0    0.0   29=
.3
config/auto/cpu/sun4/auto.pm   25.0    0.0    n/a   50.0    0.0    0.0   21=
.8
...g/auto/cpu/x86_64/auto.pm   54.5    0.0    n/a   66.7    0.0    0.0   47=
.1
config/auto/env.pm             36.6    0.0    0.0   83.3    0.0    0.0   26=
.7
config/auto/format.pm          46.9    0.0    0.0   83.3    0.0    0.0   36=
.4
config/auto/funcptr.pm         53.6    0.0    0.0   83.3    0.0    0.0   45=
.5
config/auto/gc.pm              51.7    0.0    n/a   83.3    0.0    0.0   41=
.7
config/auto/gcc.pm             24.3    0.0    0.0   85.7    0.0    0.0   18=
.6
config/auto/gdbm.pm            30.5    0.0    n/a   85.7    0.0    0.0   27=
.6
config/auto/gmp.pm             31.6    0.0    n/a   85.7    0.0    0.0   28=
.2
config/auto/headers.pm         34.6    0.0    0.0   85.7    0.0    0.0   30=
.0
config/auto/inline.pm          34.9    0.0    n/a   83.3    0.0    0.0   29=
.4
config/auto/isreg.pm           55.6    0.0    0.0   83.3    0.0    0.0   44=
.4
config/auto/jit.pm             17.2    0.0    0.0   83.3    0.0    0.0   10=
.8
config/auto/m4.pm              56.2    0.0    0.0   85.7    0.0    0.0   48=
.0
config/auto/memalign.pm        30.0    0.0    0.0   83.3    0.0    0.0   23=
.5
config/auto/msvc.pm            38.5    0.0    0.0   83.3    0.0    0.0   32=
.8
config/auto/pack.pm            39.1    0.0    0.0   85.7    0.0    0.0   28=
.2
config/auto/perldoc.pm         40.5    0.0    0.0   83.3    0.0    0.0   31=
.7
config/auto/python.pm          51.7    0.0    0.0   83.3    0.0    0.0   39=
.2
config/auto/readline.pm        31.6    0.0    n/a   85.7    0.0    0.0   27=
.6
config/auto/signal.pm          32.1    0.0    0.0   85.7    0.0    0.0   26=
.4
config/auto/sizes.pm           19.7    0.0    0.0   83.3    0.0    0.0   17=
.4
config/auto/snprintf.pm        55.6    0.0    n/a   83.3    0.0    0.0   45=
.5
config/auto/socklen_t.pm       65.2    0.0    0.0   83.3    0.0    0.0   51=
.3
config/auto/va_ptr.pm          48.4    0.0    0.0   83.3    0.0    0.0   41=
.7
config/gen/PodText.pm          45.5    0.0    n/a   83.3  100.0    0.1   45=
.7
config/gen/config_h.pm         25.4    0.0    n/a   83.3    0.0    0.0   24=
.4
config/gen/config_pm.pm        36.4    0.0    n/a   88.9    0.0    0.1   30=
.8
config/gen/core_pmcs.pm        16.2    n/a    n/a   50.0    0.0    0.0   18=
.6
config/gen/cpu.pm              60.0    0.0    n/a   85.7    0.0    0.0   52=
.2
config/gen/cpu/i386/auto.pm    36.0    0.0    n/a   75.0    0.0    0.0   30=
.0
...ig/gen/cpu/x86_64/auto.pm   66.7    0.0    n/a   66.7    0.0    0.0   53=
.3
config/gen/icu.pm              25.5    0.0    0.0   88.9    0.0    0.0   17=
.6
config/gen/languages.pm        60.0    n/a    n/a   80.0    0.0    0.0   61=
.5
config/gen/makefiles.pm        17.1    0.0    n/a   57.1    0.0    0.0   17=
.0
config/gen/parrot_include.pm   16.9    0.0    0.0   83.3    0.0    0.0   13=
.5
config/gen/platform.pm         12.8    0.0    0.0   83.3    0.0    0.0   10=
.2
config/gen/revision.pm         65.2    0.0    n/a   83.3    0.0    0.1   62=
.5
config/init/defaults.pm        61.2    0.0    0.0   83.3    0.0    0.2   51=
.3
config/init/headers.pm         60.0    n/a    n/a   83.3    0.0    0.1   62=
.5
config/init/hints.pm           44.1    0.0    n/a   83.3    0.0    0.1   33=
.9
config/init/hints/aix.pm       75.0    n/a    n/a   66.7    0.0    0.0   66=
.7
config/init/hints/cygwin.pm    35.3    0.0    n/a   66.7    0.0    0.0   32=
.0
config/init/hints/darwin.pm    28.6    0.0    n/a   66.7    0.0    0.0   29=
.6
config/init/hints/dec_osf.pm   20.7    0.0    n/a   66.7    0.0    0.0   17=
.8
...nit/hints/dragonflybsd.pm   42.9    0.0    n/a   50.0    0.0    0.0   33=
.3
config/init/hints/freebsd.pm   37.5    0.0    n/a   66.7    0.0    0.0   36=
.4
config/init/hints/hpux.pm      54.5    0.0    n/a   66.7    0.0    0.0   47=
.1
config/init/hints/irix.pm      24.0    0.0    0.0   66.7    n/a    0.0   22=
.2
config/init/hints/linux.pm     21.4    0.0    0.0   75.0    0.0    0.0   16=
.9
config/init/hints/msys.pm      75.0    n/a    n/a   66.7    0.0    0.0   66=
.7
config/init/hints/netbsd.pm    40.0    0.0    n/a   66.7    0.0    0.0   34=
.8
config/init/hints/openbsd.pm   45.0    0.0    n/a   75.0    0.0    0.0   38=
.7
config/init/hints/os2.pm       75.0    n/a    n/a   66.7    0.0    0.0   66=
.7
config/init/hints/solaris.pm   26.1    0.0    n/a   50.0    0.0    0.0   22=
.5
config/init/hints/vms.pm       37.5    0.0    n/a   40.0    0.0    0.0   30=
.8
config/init/install.pm         46.9    n/a    0.0   83.3    0.0    0.0   25=
.3
config/init/manifest.pm        66.7    0.0    n/a   85.7    0.0    0.0   61=
.5
config/init/miniparrot.pm      65.2    0.0    n/a   83.3    0.0    0.0   62=
.5
config/init/optimize.pm        52.9    0.0    n/a   85.7    0.0    0.0   50=
.0
config/inter/charset.pm        45.5    0.0    0.0   83.3    0.0    0.0   44=
.4
config/inter/encoding.pm       45.5    0.0    0.0   83.3    0.0    0.0   44=
.4
config/inter/lex.pm            25.4    0.0    0.0   83.3    0.0    0.0   17=
.9
config/inter/libparrot.pm      53.6    0.0    0.0   83.3    0.0    0.0   35=
.1
config/inter/make.pm           33.3    0.0    0.0   83.3    0.0    0.0   25=
.6
config/inter/ops.pm            51.7    0.0    n/a   83.3    0.0    0.0   47=
.6
config/inter/pmc.pm            12.8    0.0    0.0   44.4    0.0    0.0   11=
.0
config/inter/progs.pm          21.7    0.0    0.0   71.4    0.0    0.0   18=
.5
config/inter/shlibs.pm         68.2    0.0    n/a   83.3    0.0    0.0   60=
.6
config/inter/types.pm          57.7    0.0    0.0   83.3    0.0    0.0   48=
.8
config/inter/yacc.pm           25.0    0.0    0.0   83.3    0.0    0.0   18=
.9
lib/Class/Struct.pm            71.9   42.2   22.2   69.6   50.0    3.1   61=
.5
lib/File/Which.pm              55.0   33.3   42.9   75.0  100.0    2.4   48=
.4
lib/Parrot/BuildUtil.pm        87.5   56.2    n/a  100.0  100.0    2.6   77=
.3
lib/Parrot/Config.pm          100.0    n/a    n/a  100.0    n/a    0.2  100=
.0
...arrot/Config/Generated.pm  100.0    n/a    n/a  100.0    n/a    0.0  100=
.0
lib/Parrot/Configure.pm        93.1   85.7   75.0   93.8  100.0    5.0   90=
.3
lib/Parrot/Configure/Data.pm   94.9   76.7   50.0   93.8  100.0    2.5   83=
.6
...rot/Configure/Messages.pm  100.0    n/a    n/a  100.0  100.0    0.0  100=
.0
...rrot/Configure/Options.pm  100.0  100.0  100.0  100.0   50.0    1.8   97=
.5
lib/Parrot/Configure/Step.pm   32.6   11.9    2.2   64.0  100.0    3.3   26=
.9
...ot/Configure/Step/Base.pm  100.0    n/a   55.6  100.0  100.0    0.3   92=
.3
...ot/Configure/Step/List.pm  100.0    n/a    n/a  100.0  100.0    0.0  100=
.0
...Parrot/IO/Capture/Mini.pm  100.0  100.0    n/a  100.0    n/a    0.2  100=
.0
lib/Parrot/Revision.pm         55.6   12.5   12.5  100.0    n/a    4.0   37=
.0
lib/Test/Builder.pm            54.6   28.6   25.7   74.1  100.0   32.3   48=
.1
lib/Test/More.pm               53.3   28.6   41.7   65.8   95.2   39.7   48=
.3
Total                          44.6   15.1   15.0   78.1   52.3  100.0   38=
.9
---------------------------- ------ ------ ------ ------ ------ ------ ----=
--


Run:          /usr/local/bin/prove
Perl version: 5.8.8
OS:           darwin
Start:        Fri Apr 27 22:16:48 2007
Finish:       Fri Apr 27 22:19:10 2007

Run:          -e
Perl version: 5.8.8
OS:           darwin
Start:        Fri Apr 27 22:16:50 2007
Finish:       Fri Apr 27 22:16:50 2007

Run:          t/configure/01-options.t
Perl version: 5.8.8
OS:           darwin
Start:        Fri Apr 27 22:16:53 2007
Finish:       Fri Apr 27 22:16:53 2007

Run:          t/configure/02-messages.t
Perl version: 5.8.8
OS:           darwin
Start:        Fri Apr 27 22:16:59 2007
Finish:       Fri Apr 27 22:16:59 2007

Run:          t/configure/03-steplist.t
Perl version: 5.8.8
OS:           darwin
Start:        Fri Apr 27 22:17:02 2007
Finish:       Fri Apr 27 22:17:02 2007

Run:          t/configure/04-configure.t
Perl version: 5.8.8
OS:           darwin
Start:        Fri Apr 27 22:17:06 2007
Finish:       Fri Apr 27 22:17:06 2007

Run:          t/configure/05-run_one_step.t
Perl version: 5.8.8
OS:           darwin
Start:        Fri Apr 27 22:17:11 2007
Finish:       Fri Apr 27 22:17:11 2007

Run:          t/configure/06-bad_step.t
Perl version: 5.8.8
OS:           darwin
Start:        Fri Apr 27 22:17:17 2007
Finish:       Fri Apr 27 22:17:17 2007

Run:          t/configure/07-verbose_two.t
Perl version: 5.8.8
OS:           darwin
Start:        Fri Apr 27 22:17:22 2007
Finish:       Fri Apr 27 22:17:22 2007

Run:          t/configure/08-verbose_step_number.t
Perl version: 5.8.8
OS:           darwin
Start:        Fri Apr 27 22:17:28 2007
Finish:       Fri Apr 27 22:17:28 2007

Run:          t/configure/09-verbose_step_regex.t
Perl version: 5.8.8
OS:           darwin
Start:        Fri Apr 27 22:17:34 2007
Finish:       Fri Apr 27 22:17:34 2007

Run:          t/configure/10-verbose_step_number_not_called.t
Perl version: 5.8.8
OS:           darwin
Start:        Fri Apr 27 22:17:40 2007
Finish:       Fri Apr 27 22:17:40 2007

Run:          t/configure/11-no_description.t
Perl version: 5.8.8
OS:           darwin
Start:        Fri Apr 27 22:17:46 2007
Finish:       Fri Apr 27 22:17:46 2007

Run:          t/configure/12-verbose.t
Perl version: 5.8.8
OS:           darwin
Start:        Fri Apr 27 22:17:52 2007
Finish:       Fri Apr 27 22:17:52 2007

Run:          t/configure/13-die.t
Perl version: 5.8.8
OS:           darwin
Start:        Fri Apr 27 22:17:58 2007
Finish:       Fri Apr 27 22:17:58 2007

Run:          t/configure/14-params.t
Perl version: 5.8.8
OS:           darwin
Start:        Fri Apr 27 22:18:04 2007
Finish:       Fri Apr 27 22:18:04 2007

Run:          t/configure/15-no_return.t
Perl version: 5.8.8
OS:           darwin
Start:        Fri Apr 27 22:18:10 2007
Finish:       Fri Apr 27 22:18:10 2007

Run:          t/configure/16-no_return_but_result.t
Perl version: 5.8.8
OS:           darwin
Start:        Fri Apr 27 22:18:16 2007
Finish:       Fri Apr 27 22:18:16 2007

Run:          t/configure/base.t
Perl version: 5.8.8
OS:           darwin
Start:        Fri Apr 27 22:18:21 2007
Finish:       Fri Apr 27 22:18:21 2007

Run:          t/configure/config_steps.t
Perl version: 5.8.8
OS:           darwin
Start:        Fri Apr 27 22:18:26 2007
Finish:       Fri Apr 27 22:18:28 2007

Run:          t/configure/data.t
Perl version: 5.8.8
OS:           darwin
Start:        Fri Apr 27 22:18:48 2007
Finish:       Fri Apr 27 22:18:48 2007

Run:          t/configure/step.t
Perl version: 5.8.8
OS:           darwin
Start:        Fri Apr 27 22:18:56 2007
Finish:       Fri Apr 27 22:18:56 2007

Run:          t/postconfigure/01-data_slurp.t
Perl version: 5.8.8
OS:           darwin
Start:        Fri Apr 27 22:19:05 2007
Finish:       Fri Apr 27 22:19:05 2007

lib/Parrot/BuildUtil.pm

line  err   stmt   bran   cond    sub    pod   time   code
1                                                     # Copyright (C) 2001-=
2006, The Perl Foundation.
2                                                     # $Id: BuildUtil.pm 1=
7579 2007-03-17 22:52:33Z paultcochrane $
3=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
4                                                     =3Dhead1 NAME
5=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
6                                                     lib/Parrot/BuildUtil.=
pm - Utilities for building Parrot
7=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
8                                                     =3Dhead1 DESCRIPTION
9=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
10                                                    For now only a sub fo=
r getting the current version.
11=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
12                                                    =3Dhead2 Functions
13=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
14                                                    =3Dover 4
15=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
16                                                    =3Dcut
17=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
18                                                    package Parrot::Build=
Util;
19=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
20            15                   15           308   use strict;
              15                                 76=20=20=20
              15                                399=20=20=20
21            15                   15           304   use warnings;
              15                                 70=20=20=20
              15                                351=20=20=20
22=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
23                                                    =3Ditem C<parrot_vers=
ion()>
24=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
25                                                    Determine the current=
 version number for Parrot from the VERSION file
26                                                    and return it.
27=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
28                                                    =3Dcut
29=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
30                                                    # cache for repeated =
calls
31                                                    # XXX this could be i=
n BEGIN block
32                                                    my ( $parrot_version,=
 @parrot_version );
33=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
34                                                    sub parrot_version {
35            16    100            16      1    247       if ( defined $par=
rot_version ) {
36    ***      1     50                         104           return wantar=
ray ? @parrot_version : $parrot_version;
37                                                        }
38=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
39                                                        # Obtain the offi=
cial version number from the VERSION file.
40    ***     15     50                        3839       open my $VERSION,=
 '<', 'VERSION' or die "Could not open VERSION file!";
41            15                              37659       $parrot_version =
=3D <$VERSION>;
42            15                               1066       close $VERSION;
43=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
44            15                                217       chomp $parrot_ver=
sion;
45            15                                196       $parrot_version =
=3D~ s/\s+//g;
46            15                                345       @parrot_version =
=3D split( /\./, $parrot_version );
47=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
48    ***     15     50                         335       if ( scalar(@parr=
ot_version) < 3 ) {
49    ***      0                                  0           die "Too few =
components to VERSION file contents: '$parrot_version' (should be 3 or 4)!";
50                                                        }
51=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
52    ***     15     50                         186       if ( scalar(@parr=
ot_version) > 4 ) {
53    ***      0                                  0           die "Too many=
 components to VERSION file contents: '$parrot_version' (should be 3 or 4)!=
";
54                                                        }
55=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
56            15                                167       foreach (@parrot_=
version) {
57    ***     45     50                         655           die "Illegal =
version component: '$_' in VERSION file!" unless m/^[1-9]*\w*$/;
58                                                        }
59=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
60    ***     15     50                         354       if ( @parrot_vers=
ion =3D=3D 4 ) {
61=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
62                                                            #    $parrot_=
version[2] =3D $parrot_version[2] . "_" . $parrot_version[3];
63    ***      0                                  0           $#parrot_vers=
ion =3D 3;
64                                                        }
65            15                                160       $parrot_version =
=3D join( '.', @parrot_version );
66=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
67    ***     15     50                        1133       return wantarray =
? @parrot_version : $parrot_version;
68                                                    }
69=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
70                                                    =3Dback
71=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
72                                                    =3Dhead1 AUTHOR
73=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
74                                                    Gregor N. Purdy
75=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
76                                                    =3Dcut
77=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
78                                                    1;
79=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
80                                                    # Local Variables:
81                                                    #   mode: cperl
82                                                    #   cperl-indent-leve=
l: 4
83                                                    #   fill-column: 100
84                                                    # End:
85                                                    # vim: expandtab shif=
twidth=3D4:


Branches
--------

line  err      %   true  false   branch
----- --- ------ ------ ------   ------
35           100      1     15   if (defined $parrot_version)
36    ***     50      1      0   wantarray ? :
40    ***     50      0     15   unless open my $VERSION, '<', 'VERSION'
48    ***     50      0     15   if (scalar @parrot_version < 3)
52    ***     50      0     15   if (scalar @parrot_version > 4)
57    ***     50      0     45   unless /^[1-9]*\w*$/
60    ***     50      0     15   if (@parrot_version =3D=3D 4)
67    ***     50      0     15   wantarray ? :


Covered Subroutines
-------------------

Subroutine     Count Location=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
-------------- ----- --------------------------
BEGIN             15 lib/Parrot/BuildUtil.pm:20
BEGIN             15 lib/Parrot/BuildUtil.pm:21
parrot_version    16 lib/Parrot/BuildUtil.pm:35


lib/Parrot/Config.pm

line  err   stmt   bran   cond    sub    pod   time   code
1=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
2                                                     =3Dhead1 NAME
3=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
4                                                     Parrot::Config - Parr=
ot Configuration Data
5=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
6                                                     =3Dhead1 DESCRIPTION
7=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
8                                                     This file is used for=
 parrot's configuration data. If C<perl Configure.pl>
9                                                     hasn't been run yet, =
it dies with a message explaining that parrot needs to be
10                                                    configured first. It =
contains the C<%PConfig> hash which is exported with the
11                                                    values loaded from F<=
lib/Parrot/Config/Generated.pm>.
12=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
13                                                    =3Dcut
14=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
15                                                    package Parrot::Confi=
g;
16=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
17             2                    2            50   use strict;
               2                                  9=20=20=20
               2                                161=20=20=20
18             2                    2            40   use warnings;
               2                                 42=20=20=20
               2                                 90=20=20=20
19=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
20             2                    2          2482   eval 'use Parrot::Con=
fig::Generated';
               2                                 12=20=20=20
               2                                137=20=20=20
21                                                    if ($@) {
22                                                        die "\nParrot::Co=
nfig is unavailable until you configure parrot.\n"
23                                                            . "Please run=
 `perl Configure.pl`.\n\n";
24                                                    }
25=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
26             2                    2            41   use Exporter;
               2                                 11=20=20=20
               2                                118=20=20=20
27=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
28             2                    2            47   use vars qw(@ISA @EXP=
ORT %PConfig);
               2                                 11=20=20=20
               2                                 98=20=20=20
29=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
30                                                    @ISA =3D qw(Exporter);
31=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
32                                                    @EXPORT =3D qw(%PConf=
ig);
33=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
34                                                    %PConfig =3D %Parrot:=
:Config::Generated::PConfig;
35=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
36                                                    1;
37=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
38                                                    # Local Variables:
39                                                    #   mode: cperl
40                                                    #   cperl-indent-leve=
l: 4
41                                                    #   fill-column: 100
42                                                    # End:
43                                                    # vim: expandtab shif=
twidth=3D4:


Covered Subroutines
-------------------

Subroutine Count Location=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20
---------- ----- -----------------------
BEGIN          2 lib/Parrot/Config.pm:17
BEGIN          2 lib/Parrot/Config.pm:18
BEGIN          2 lib/Parrot/Config.pm:20
BEGIN          2 lib/Parrot/Config.pm:26
BEGIN          2 lib/Parrot/Config.pm:28


lib/Parrot/Config/Generated.pm

line  err   stmt   bran   cond    sub    pod   time   code
1                                                     # Generated by config=
/gen/config_pm.pm
2                                                     =3Dhead1 NAME
3=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
4                                                     Parrot::Config::Gener=
ated - Parrot Generated Configuration Data
5=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
6                                                     =3Dhead1 DESCRIPTION
7=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
8                                                     This file is generate=
d by F<config/gen/config_pm.pm> from
9                                                     F<config/gen/config_p=
m/Config_pm.in>. It contains the C<%PConfig> hash which
10                                                    is used by F<lib/Parr=
ot/Config.pm>.
11=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
12                                                    =3Dcut
13=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
14                                                    package Parrot::Confi=
g::Generated;
15=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
16             3                    3            64   use strict;
               3                                 14=20=20=20
               3                                 81=20=20=20
17=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
18             3                    3            56   use vars qw(%PConfig);
               3                                 16=20=20=20
               3                                321=20=20=20
19=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
20                                                    %PConfig =3D (
21                                                      'DEVEL' =3D> '-deve=
l',
22                                                      'HAS_C99_SNPRINTF' =
=3D> 1,
23                                                      'HAS_PPC_gcc_cmpset=
' =3D> '1',
24                                                      'HAS_SNPRINTF' =3D>=
 1,
25                                                      'HAS_aligned_funcpt=
r' =3D> 1,
26                                                      'MAJOR' =3D> '0',
27                                                      'MINOR' =3D> '4',
28                                                      'PATCH' =3D> '11',
29                                                      'PQ' =3D> '\'',
30                                                      'SVN_ENTRIES' =3D> =
undef,
31                                                      'VERSION' =3D> '0.4=
.11',
32                                                      'a' =3D> '.a',
33                                                      'ar' =3D> 'ar',
34                                                      'ar_extra' =3D> '',
35                                                      'ar_flags' =3D> 'cr=
',
36                                                      'ar_out' =3D> '',
37                                                      'archname' =3D> 'da=
rwin-2level',
38                                                      'as' =3D> 'as',
39                                                      'asmfun_o' =3D> 'sr=
c/asmfun$(O)',
40                                                      'bigendian' =3D> 1,
41                                                      'bin_dir' =3D> '/us=
r/local/bin',
42                                                      'bindir' =3D> '/usr=
/local/bin',
43                                                      'bison_version' =3D=
> undef,
44                                                      'blib_dir' =3D> 'bl=
ib/lib',
45                                                      'build_dir' =3D> '/=
Users/jimk/work/fresh',
46                                                      'byteorder' =3D> '4=
321',
47                                                      'cc' =3D> '/usr/bin=
/gcc-3.3',
48                                                      'cc_debug' =3D> '-g=
',
49                                                      'cc_exe_out' =3D> '=
-o ',
50                                                      'cc_hasjit' =3D> ' =
-DHAS_JIT -DPPC',
51                                                      'cc_inc' =3D> '-I./=
include',
52                                                      'cc_ldflags' =3D> '=
',
53                                                      'cc_o_out' =3D> '-o=
 ',
54                                                      'cc_shared' =3D> ' =
',
55                                                      'ccflags' =3D> '-fn=
o-common -no-cpp-precomp  -pipe -I/usr/local/include -pipe -fno-common -Wno=
-long-double ',
56                                                      'ccwarn' =3D> '-W -=
Wall -Wstrict-prototypes -Wmissing-prototypes -Winline -Wpointer-arith -Wca=
st-qual -Wwrite-strings -Waggregate-return -Winline -Wno-unused -Wsign-comp=
are -falign-functions=3D16 -Wformat-nonliteral -Wformat-security -Wpacked -=
Wdisabled-optimization -Wno-shadow',
57                                                      'cg_flag' =3D> '-DH=
AVE_COMPUTED_GOTO',
58                                                      'charset' =3D> 'asc=
ii.c binary.c iso-8859-1.c tables.c unicode.c',
59                                                      'chmod' =3D> '$(PER=
L) -MExtUtils::Command -e ExtUtils::Command::chmod',
60                                                      'configdate' =3D> '=
Fri Apr 27 22:15:44 2007 GMT',
61                                                      'cp' =3D> '$(PERL) =
-MExtUtils::Command -e cp',
62                                                      'cpuarch' =3D> 'ppc=
',
63                                                      'cxx' =3D> '/usr/bi=
n/g++-3.3',
64                                                      'darwin' =3D> 1,
65                                                      'datadir' =3D> '/us=
r/local/share',
66                                                      'debugging' =3D> 1,
67                                                      'doc_dir' =3D> '/us=
r/local/share/doc/parrot',
68                                                      'doublesize' =3D> 8,
69                                                      'dquote' =3D> '\\"',
70                                                      'encoding' =3D> 'fi=
xed_8.c ucs2.c utf16.c utf8.c',
71                                                      'exe' =3D> '',
72                                                      'exec_prefix' =3D> =
'/usr/local',
73                                                      'execcapable' =3D> =
1,
74                                                      'flex_version' =3D>=
 undef,
75                                                      'float4_t' =3D> 'fl=
oat',
76                                                      'float8_t' =3D> 'do=
uble',
77                                                      'floatsize' =3D> 4,
78                                                      'floatvalfmt' =3D> =
'%f',
79                                                      'gc_flag' =3D> '',
80                                                      'gccversion' =3D> '=
3.3',
81                                                      'gmake_version' =3D=
> '3.81',
82                                                      'has___sighandler_t=
' =3D> undef,
83                                                      'has_dynamic_linkin=
g' =3D> 1,
84                                                      'has_gdbm' =3D> 0,
85                                                      'has_gmp' =3D> 0,
86                                                      'has_gnu_m4' =3D> 1,
87                                                      'has_icu' =3D> 0,
88                                                      'has_perldoc' =3D> =
1,
89                                                      'has_python' =3D> 1,
90                                                      'has_python_2_4' =
=3D> 0,
91                                                      'has_setitimer' =3D=
> 'define',
92                                                      'has_sig_atomic_t' =
=3D> 'define',
93                                                      'has_sigaction' =3D=
> 'define',
94                                                      'has_sigatomic_t' =
=3D> undef,
95                                                      'has_socklen_t' =3D=
> 1,
96                                                      'has_static_linking=
' =3D> 1,
97                                                      'hugefloatval' =3D>=
 'long double',
98                                                      'hugefloatvalsize' =
=3D> '8',
99                                                      'hugeintval' =3D> '=
long long',
100                                                     'hugeintvalsize' =
=3D> 8,
101                                                     'i_arpainet' =3D> '=
define',
102                                                     'i_bsdioctl' =3D> '=
',
103                                                     'i_crypt' =3D> unde=
f,
104                                                     'i_db' =3D> 'define=
',
105                                                     'i_dbm' =3D> undef,
106                                                     'i_dirent' =3D> 'de=
fine',
107                                                     'i_dld' =3D> undef,
108                                                     'i_dlfcn' =3D> 'def=
ine',
109                                                     'i_fcntl' =3D> 'def=
ine',
110                                                     'i_float' =3D> 'def=
ine',
111                                                     'i_fp' =3D> undef,
112                                                     'i_fp_class' =3D> u=
ndef,
113                                                     'i_gdbm' =3D> undef,
114                                                     'i_grp' =3D> 'defin=
e',
115                                                     'i_ieeefp' =3D> und=
ef,
116                                                     'i_inttypes' =3D> '=
define',
117                                                     'i_langinfo' =3D> '=
define',
118                                                     'i_libutil' =3D> un=
def,
119                                                     'i_limits' =3D> 'de=
fine',
120                                                     'i_locale' =3D> 'de=
fine',
121                                                     'i_machcthr' =3D> u=
ndef,
122                                                     'i_malloc' =3D> und=
ef,
123                                                     'i_math' =3D> 'defi=
ne',
124                                                     'i_memory' =3D> und=
ef,
125                                                     'i_mntent' =3D> und=
ef,
126                                                     'i_ndbm' =3D> 'defi=
ne',
127                                                     'i_netdb' =3D> 'def=
ine',
128                                                     'i_neterrno' =3D> u=
ndef,
129                                                     'i_netinetin' =3D> =
'define',
130                                                     'i_netinettcp' =3D>=
 'define',
131                                                     'i_poll' =3D> undef,
132                                                     'i_prot' =3D> undef,
133                                                     'i_pthread' =3D> 'd=
efine',
134                                                     'i_pwd' =3D> 'defin=
e',
135                                                     'i_rpcsvcdbm' =3D> =
undef,
136                                                     'i_setjmp' =3D> 'de=
fine',
137                                                     'i_sfio' =3D> undef,
138                                                     'i_sgtty' =3D> unde=
f,
139                                                     'i_shadow' =3D> und=
ef,
140                                                     'i_signal' =3D> 'de=
fine',
141                                                     'i_socks' =3D> unde=
f,
142                                                     'i_stdarg' =3D> 'de=
fine',
143                                                     'i_stddef' =3D> 'de=
fine',
144                                                     'i_stdlib' =3D> 'de=
fine',
145                                                     'i_string' =3D> 'de=
fine',
146                                                     'i_sunmath' =3D> un=
def,
147                                                     'i_sysaccess' =3D> =
undef,
148                                                     'i_sysdir' =3D> 'de=
fine',
149                                                     'i_sysexit' =3D> un=
def,
150                                                     'i_sysfile' =3D> 'd=
efine',
151                                                     'i_sysfilio' =3D> '=
define',
152                                                     'i_sysin' =3D> unde=
f,
153                                                     'i_sysioctl' =3D> '=
define',
154                                                     'i_syslog' =3D> 'de=
fine',
155                                                     'i_sysmman' =3D> 'd=
efine',
156                                                     'i_sysmode' =3D> un=
def,
157                                                     'i_sysmount' =3D> '=
define',
158                                                     'i_sysndir' =3D> un=
def,
159                                                     'i_sysparam' =3D> '=
define',
160                                                     'i_sysresrc' =3D> '=
define',
161                                                     'i_syssecrt' =3D> u=
ndef,
162                                                     'i_sysselct' =3D> '=
define',
163                                                     'i_syssocket' =3D> =
'define',
164                                                     'i_syssockio' =3D> =
'define',
165                                                     'i_sysstat' =3D> 'd=
efine',
166                                                     'i_sysstatfs' =3D> =
undef,
167                                                     'i_sysstatvfs' =3D>=
 undef,
168                                                     'i_systime' =3D> 'd=
efine',
169                                                     'i_systimek' =3D> u=
ndef,
170                                                     'i_systimes' =3D> '=
define',
171                                                     'i_systypes' =3D> '=
define',
172                                                     'i_sysuio' =3D> 'de=
fine',
173                                                     'i_sysun' =3D> 'def=
ine',
174                                                     'i_sysutsname' =3D>=
 'define',
175                                                     'i_sysvfs' =3D> und=
ef,
176                                                     'i_syswait' =3D> 'd=
efine',
177                                                     'i_termio' =3D> und=
ef,
178                                                     'i_termios' =3D> 'd=
efine',
179                                                     'i_time' =3D> undef,
180                                                     'i_unistd' =3D> 'de=
fine',
181                                                     'i_ustat' =3D> unde=
f,
182                                                     'i_utime' =3D> 'def=
ine',
183                                                     'i_values' =3D> und=
ef,
184                                                     'i_varargs' =3D> un=
def,
185                                                     'i_varhdr' =3D> 'st=
darg.h',
186                                                     'i_vfork' =3D> unde=
f,
187                                                     'icu_dir' =3D> '',
188                                                     'icu_shared' =3D> '=
',
189                                                     'inc' =3D> 'include=
/parrot',
190                                                     'include_dir' =3D> =
'/usr/local/include',
191                                                     'includedir' =3D> '=
/usr/local/include',
192                                                     'infodir' =3D> '/us=
r/local/info',
193                                                     'inline' =3D> 'inli=
ne',
194                                                     'int2_t' =3D> 'shor=
t',
195                                                     'int4_t' =3D> 'int',
196                                                     'int8_t' =3D> 'long=
 long',
197                                                     'intsize' =3D> 4,
198                                                     'intvalfmt' =3D> '%=
ld',
199                                                     'intvalsize' =3D> 4,
200                                                     'isreg' =3D> 1,
201                                                     'iv' =3D> 'long',
202                                                     'jitarchname' =3D> =
'ppc-darwin',
203                                                     'jitcapable' =3D> 1,
204                                                     'jitcpu' =3D> 'PPC',
205                                                     'jitcpuarch' =3D> '=
ppc',
206                                                     'jitosname' =3D> 'D=
ARWIN',
207                                                     'ld' =3D> '/usr/bin=
/g++-3.3',
208                                                     'ld_debug' =3D> '',
209                                                     'ld_load_flags' =3D=
> '-bundle -undefined suppress',
210                                                     'ld_out' =3D> '-o ',
211                                                     'ld_share_flags' =
=3D> '-dynamiclib -undefined suppress',
212                                                     'ldflags' =3D> ' -L=
/usr/local/lib -L/Users/jimk/work/fresh/blib/lib -flat_namespace ',
213                                                     'lex' =3D> 'echo',
214                                                     'lib_dir' =3D> '/us=
r/local/lib',
215                                                     'libdir' =3D> '/usr=
/local/lib',
216                                                     'libexecdir' =3D> '=
/usr/local/libexec',
217                                                     'libparrot' =3D> '$=
(LIBPARROT_STATIC)',
218                                                     'libparrot_ldflags'=
 =3D> '$(LIBPARROT_STATIC)',
219                                                     'libparrot_shared' =
=3D> 'libparrot.$(SOVERSION)$(SHARE_EXT)',
220                                                     'libparrot_shared_a=
lias' =3D> 'libparrot$(SHARE_EXT)',
221                                                     'libparrot_soname' =
=3D> '-install_name /usr/local/lib/libparrot.dylib',
222                                                     'libparrot_static' =
=3D> 'libparrot.a',
223                                                     'libs' =3D> '-lm',
224                                                     'link' =3D> '/usr/b=
in/g++-3.3',
225                                                     'link_debug' =3D> '=
',
226                                                     'link_dynamic' =3D>=
 ' ',
227                                                     'linkflags' =3D> ' =
-L/usr/local/lib',
228                                                     'lns' =3D> '/bin/ln=
 -s',
229                                                     'load_ext' =3D> '.b=
undle',
230                                                     'localstatedir' =3D=
> '/usr/local/var',
231                                                     'longsize' =3D> 4,
232                                                     'make' =3D> 'make',
233                                                     'make_and' =3D> '&&=
',
234                                                     'make_c' =3D> 'make=
 -C',
235                                                     'make_set_make' =3D=
> '#',
236                                                     'mandir' =3D> '/usr=
/local/man',
237                                                     'memalign' =3D> 'so=
me_memalign',
238                                                     'mkpath' =3D> '$(PE=
RL) -MExtUtils::Command -e mkpath',
239                                                     'msvcversion' =3D> =
undef,
240                                                     'ncilib_link_extra'=
 =3D> '',
241                                                     'new_perldoc' =3D> =
1,
242                                                     'numvalsize' =3D> 8,
243                                                     'nv' =3D> 'double',
244                                                     'nvsize' =3D> 8,
245                                                     'o' =3D> '.o',
246                                                     'oldincludedir' =3D=
> '/usr/include',
247                                                     'opcode_t' =3D> 'lo=
ng',
248                                                     'opcode_t_size' =3D=
> 4,
249                                                     'ops' =3D> 'src/ops=
/core.ops src/ops/bit.ops src/ops/cmp.ops src/ops/debug.ops src/ops/experim=
ental.ops src/ops/io.ops src/ops/math.ops src/ops/object.ops src/ops/pic.op=
s src/ops/pmc.ops src/ops/set.ops src/ops/stack.ops src/ops/stm.ops src/ops=
/string.ops src/ops/sys.ops src/ops/var.ops',
250                                                     'optimize' =3D> '',
251                                                     'osname' =3D> 'darw=
in',
252                                                     'packtype_b' =3D> '=
C',
253                                                     'packtype_i' =3D> '=
l!',
254                                                     'packtype_n' =3D> '=
d',
255                                                     'packtype_op' =3D> =
'l!',
256                                                     'parrot_is_shared' =
=3D> 0,
257                                                     'perl' =3D> '/usr/l=
ocal/bin/perl',
258                                                     'perl_inc' =3D> '/u=
sr/local/lib/perl5/5.8.8/darwin-2level/CORE',
259                                                     'platform_asm' =3D>=
 0,
260                                                     'pmc' =3D> 'default=
.pmc null.pmc env.pmc key.pmc random.pmc unmanagedstruct.pmc managedstruct.=
pmc delegate.pmc compiler.pmc exception.pmc version.pmc vtablecache.pmc par=
rotio.pmc parrotlibrary.pmc parrotinterpreter.pmc parrotthread.pmc lexpad.p=
mc timer.pmc pointer.pmc sub.pmc closure.pmc continuation.pmc retcontinuati=
on.pmc exception_handler.pmc coroutine.pmc eval.pmc nci.pmc float.pmc integ=
er.pmc bigint.pmc complex.pmc string.pmc boolean.pmc ref.pmc sharedref.pmc =
array.pmc fixedintegerarray.pmc intlist.pmc iterator.pmc sarray.pmc fixedst=
ringarray.pmc multiarray.pmc hash.pmc orderedhash.pmc tqueue.pmc parrotclas=
s.pmc parrotobject.pmc os.pmc file.pmc addrregistry.pmc bound_nci.pmc captu=
re.pmc class.pmc deleg_pmc.pmc enumerate.pmc exporter.pmc fixedbooleanarray=
.pmc fixedfloatarray.pmc fixedpmcarray.pmc lexinfo.pmc multisub.pmc namespa=
ce.pmc object.pmc pair.pmc parrotrunningthread.pmc pccmethod_test.pmc resiz=
ablebooleanarray.pmc resizablefloatarray.pmc resizableintegerarray.pmc resi=
zablepmcarray.pmc resizablestringarray.pmc role.pmc scalar.pmc slice.pmc sm=
op_attribute.pmc smop_class.pmc stmlog.pmc stmref.pmc stmvar.pmc super.pmc =
undef.pmc',
261                                                     'pmc_names' =3D> 'N=
ull Env Key Random UnManagedStruct ManagedStruct delegate Compiler Exceptio=
n Version VtableCache ParrotIO ParrotLibrary ConstParrotLibrary ParrotInter=
preter ParrotThread LexPad Timer Pointer Sub Closure Continuation RetContin=
uation Exception_Handler Coroutine Eval NCI Float Integer BigInt Complex St=
ring Boolean Ref SharedRef Array FixedIntegerArray IntList Iterator SArray =
ConstSArray FixedStringArray MultiArray Hash OrderedHash TQueue ParrotClass=
 ParrotObject OS File AddrRegistry Bound_NCI Capture Class deleg_pmc Enumer=
ate Exporter FixedBooleanArray FixedFloatArray FixedPMCArray LexInfo MultiS=
ub NameSpace Object Pair ParrotRunningThread PCCMETHOD_Test ResizableBoolea=
nArray ResizableFloatArray ResizableIntegerArray ResizablePMCArray Resizabl=
eStringArray Role Slice SMOP_Attribute SMOP_Class STMLog STMRef STMVar Supe=
r Undef',
262                                                     'pod' =3D> undef,
263                                                     'ppc_has_gcc_cmpset=
' =3D> '1',
264                                                     'prefix' =3D> '/usr=
/local',
265                                                     'ptr_alignment' =3D=
> 1,
266                                                     'ptrconst' =3D> 'u',
267                                                     'ptrsize' =3D> 4,
268                                                     'ranlib' =3D> 'ranl=
ib',
269                                                     'revision' =3D> '18=
347',
270                                                     'rm_f' =3D> '$(PERL=
) -MExtUtils::Command -e rm_f',
271                                                     'rm_rf' =3D> '$(PER=
L) -MExtUtils::Command -e rm_rf',
272                                                     'rpath' =3D> '-L',
273                                                     'rpath_blib' =3D> '=
',
274                                                     'sbindir' =3D> '/us=
r/local/sbin',
275                                                     'setenv' =3D> 1,
276                                                     'share_ext' =3D> '.=
dylib',
277                                                     'sharedstatedir' =
=3D> '/usr/local/com',
278                                                     'shortsize' =3D> 2,
279                                                     'slash' =3D> '/',
280                                                     'sym_export' =3D> '=
',
281                                                     'sym_import' =3D> '=
',
282                                                     'sysconfdir' =3D> '=
/usr/local/etc',
283                                                     'test_prog' =3D> 'p=
arrot',
284                                                     'testheader' =3D> u=
ndef,
285                                                     'testheaders' =3D> =
undef,
286                                                     'touch' =3D> '$(PER=
L) -MExtUtils::Command -e touch',
287                                                     'unsetenv' =3D> 1,
288                                                     'va_ptr_type' =3D> =
'x86',
289                                                     'verbose' =3D> unde=
f,
290                                                     'yacc' =3D> 'echo'
291                                                   );
292=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
293=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
294                                                   1;


Covered Subroutines
-------------------

Subroutine Count Location=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20
---------- ----- ---------------------------------
BEGIN          3 lib/Parrot/Config/Generated.pm:16
BEGIN          3 lib/Parrot/Config/Generated.pm:18


lib/Parrot/Configure.pm

line  err   stmt   bran   cond    sub    pod   time   code
1                                                     # Copyright (C) 2001-=
2006, The Perl Foundation.
2                                                     # $Id: Configure.pm 1=
8189 2007-04-14 13:51:07Z jkeenan $
3=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
4                                                     =3Dhead1 NAME
5=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
6                                                     Parrot::Configure - C=
onducts the execution of Configuration Steps
7=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
8                                                     =3Dhead1 SYNOPSIS
9=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
10                                                        use Parrot::Confi=
gure;
11=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
12                                                        my $conf =3D Parr=
ot::Configure->new;
13                                                        my $data =3D $con=
f->data;
14                                                        my $options =3D $=
conf->options;
15                                                        my @steps =3D $co=
nf->steps;
16                                                        $conf->add_steps(=
@steps);
17                                                        $conf->runsteps;
18=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
19                                                    =3Dhead1 DESCRIPTION
20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
21                                                    This module provides =
provides a means for registering, executing, and
22                                                    coordinating one or m=
ore Configuration steps.  Please see
23                                                    F<docs/configuration.=
pod> for further details about the configuration
24                                                    framework.
25=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
26                                                    =3Dhead1 USAGE
27=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
28                                                    =3Dhead2 Import Param=
eters
29=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
30                                                    This module accepts n=
o arguments to its C<import> method and exports no
31                                                    I<symbols>.
32=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
33                                                    =3Dcut
34=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
35                                                    package Parrot::Confi=
gure;
36=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
37            16                   16           329   use strict;
              16                                 67=20=20=20
              16                                723=20=20=20
38            16                   16           466   use warnings;
              16                                116=20=20=20
              16                                321=20=20=20
39=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
40            16                   16          1324   use lib qw(config);
              16                                 61=20=20=20
              16                                258=20=20=20
41            16                   16           301   use Carp qw(carp);
              16                                 60=20=20=20
              16                                417=20=20=20
42            16                   16         22285   use Parrot::Configure=
::Data;
              16                                115=20=20=20
              16                                606=20=20=20
43=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
44            16                   16         24002   use Class::Struct;
              16                                109=20=20=20
              16                                408=20=20=20
45=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
46                                                    struct(
47                                                        'Parrot::Configur=
e::Task' =3D> {
48                                                            step   =3D> '=
$',
49                                                            params =3D> '=
@',
50                                                            object =3D> '=
Parrot::Configure::Step',
51                                                        },
52                                                    );
53=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
54                                                    =3Dhead2 Methods
55=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
56                                                    =3Dhead3 Constructors
57=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
58                                                    =3Dover 4
59=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
60                                                    =3Ditem * C<new()>
61=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
62                                                    Basic constructor.
63=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
64                                                    Accepts no arguments =
and returns a L<Parrot::Configure> object.
65=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
66                                                    =3Dcut
67=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
68                                                    my $singleton;
69                                                    BEGIN {
70            16                   16           507       $singleton =3D {
71                                                            steps   =3D> =
[],
72                                                            data    =3D> =
Parrot::Configure::Data->new,
73                                                            options =3D> =
Parrot::Configure::Data->new,
74                                                        };
75            16                                130       bless $singleton,=
 "Parrot::Configure";
76                                                    }
77=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
78                                                    sub new {
79            29                   29      1   4655       my $class =3D shi=
ft;
80            29                                293       return $singleton;
81                                                    }
82=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
83                                                    =3Dback
84=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
85                                                    =3Dhead3 Object Metho=
ds
86=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
87                                                    =3Dover 4
88=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
89                                                    =3Ditem * C<data()>
90=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
91                                                    Provides access to a =
L<Parrot::Configure::Data> object intended to contain
92                                                    initial and discovere=
d configuration data.
93=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
94                                                    Accepts no arguments =
and returns a L<Parrot::Configure::Data> object.
95=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
96                                                    =3Dcut
97=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
98                                                    sub data {
99             7                    7      1     45       my $self =3D shif=
t;
100=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
101            7                                 86       return $self->{da=
ta};
102                                                   }
103=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
104                                                   =3Ditem * C<options()>
105=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
106                                                   Provides access to a =
L<Parrot::Configure::Data> object intended to contain CLI
107                                                   option data.
108=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
109                                                   Accepts no arguments =
and returns a L<Parrot::Configure::Data> object.
110=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
111                                                   =3Dcut
112=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
113                                                   sub options {
114           58                   58      1    493       my $self =3D shif=
t;
115=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
116           58                               1363       return $self->{op=
tions};
117                                                   }
118=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
119                                                   =3Ditem * C<steps()>
120=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
121                                                   Provides a list of re=
gistered steps, where each step is represented by an
122                                                   L<Parrot::Configure::=
Task> object.  Steps are returned in the order in which
123                                                   they were registered =
in.
124=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
125                                                   Accepts no arguments =
and returns a list in list context or an arrayref in
126                                                   scalar context.
127=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
128                                                   =3Dcut
129=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
130                                                   sub steps {
131           34                   34      1    287       my $self =3D shif=
t;
132=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
133           34    100                         548       return wantarray =
? @{ $self->{steps} } : $self->{steps};
              11                                147=20=20=20
134                                                   }
135=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
136                                                   =3Ditem * C<add_step(=
)>
137=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
138                                                   Registers a new step =
and any parameters that should be passed to it.  The
139                                                   first parameter passe=
d is the class name of the step being registered.  All
140                                                   other parameters are =
saved and passed to the registered class's C<runstep()>
141                                                   method.
142=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
143                                                   Accepts a list and mo=
difies the data structure within the L<Parrot::Configure> object.
144=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
145                                                   =3Dcut
146=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
147                                                   sub add_step {
148          124                  124      1    517       my ( $self, $step=
, @params ) =3D @_;
149=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
150          124                                296       push @{ $self->{s=
teps} }, Parrot::Configure::Task->new( step =3D> $step, params =3D> \@param=
s );
             124                               1544=20=20=20
151=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
152          124                                701       return 1;
153                                                   }
154=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
155                                                   =3Ditem * C<add_steps=
()>
156=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
157                                                   Registers new steps t=
o be run at the end of the execution queue.
158=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
159                                                   Accepts a list of new=
 steps and modifies the data structure within the L<Parrot::Configure> obje=
ct.
160=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
161                                                   =3Dcut
162=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
163                                                   sub add_steps {
164           13                   13      1   4483       my ( $self, @new_=
steps ) =3D @_;
165=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
166           13                                121       foreach my $step =
(@new_steps) {
167          123                                554           $self->add_st=
ep($step);
168                                                       }
169=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
170           13                                162       return 1;
171                                                   }
172=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
173                                                   =3Ditem * C<runsteps(=
)>
174=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
175                                                   Sequentially executes=
 steps in the order they were registered.  The invoking
176                                                   L<Parrot::Configure> =
object is passed as the first argument to each step's
177                                                   C<runstep()> method, =
followed by any parameters that were registered for that
178                                                   step.
179=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
180                                                   Accepts no arguments =
and modifies the data structure within the L<Parrot::Configure> object.
181=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
182                                                   =3Dcut
183=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
184                                                   sub runsteps {
185           11                   11      1    166       my $self =3D shif=
t;
186=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
187           11                                121       my ( $verbose, $v=
erbose_step, $ask ) =3D $self->options->get(qw(verbose verbose-step ask));
188=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
189           11                                 71       my $n =3D 0;    #=
 step number
190           11                                102       foreach my $task =
( $self->steps ) {
191           11                                 48           $n++;
192           11                                193           $self->_runst=
ep( $task, $verbose, $verbose_step, $ask, $n );
193                                                       }
194           10                                128       return 1;
195                                                   }
196=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
197                                                   =3Ditem * C<runstep()>
198=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
199                                                   The invoking L<Parrot=
::Configure> object is passed as the first argument to
200                                                   each step's C<runstep=
()> method, followed by any parameters that were
201                                                   registered for that s=
tep.
202=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
203                                                   Accepts no arguments =
and modifies the data structure within the L<Parrot::Configure> object.
204=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
205                                                   =3Dcut
206=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
207                                                   sub runstep {
208   ***      0                    0      1      0       my $self     =3D =
shift;
209   ***      0                                  0       my $taskname =3D =
shift;
210=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
211   ***      0                                  0       my ( $verbose, $v=
erbose_step, $ask ) =3D $self->options->get(qw(verbose verbose-step ask));
212=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
213   ***      0                                  0       for my $task ( $s=
elf->steps() ) {
214   ***      0      0                           0           if ( $task->{=
"Parrot::Configure::Task::step"} eq $taskname ) {
215   ***      0                                  0               $self->_r=
unstep( $task, $verbose, $verbose_step, $ask, 1 );
216                                                           }
217                                                       }
218                                                   }
219=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
220                                                   sub _runstep {
221           11                   22            67       my $self =3D shif=
t;
222           11                                 63       my $task =3D shif=
t;
223=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
224           11                                 82       my ( $verbose, $v=
erbose_step, $ask, $n ) =3D @_;
225=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
226           11                                214       my $step_name   =
=3D $task->step;
227           11                                 92       my @step_params =
=3D @{ $task->params };
              11                                109=20=20=20
228=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
229           11                                135       eval "use $step_n=
ame;";
230           11    100                         636       die $@ if $@;
231=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
232           10                                243       my $step =3D $ste=
p_name->new;
233=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
234                                                       # XXX This works.=
 but is probably not a good design.
235                                                       # Using $step->de=
scription() would be nicer
236           10                                143       my $description =
=3D $step->description();
237           10    100                         117       $description =3D =
"" unless defined $description;
238=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
239                                                       # set per step ve=
rbosity
240           10    100                         123       if ( defined $ver=
bose_step ) {
241=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
242                                                           # by step num=
ber
243            3    100    100                  295           if ( $verbose=
_step =3D~ /^\d+$/ && $n =3D=3D $verbose_step ) {
                    100=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20
244            1                                 10               $self->op=
tions->set( verbose =3D> 2 );
245                                                           }
246=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
247                                                           # by descript=
ion
248                                                           elsif ( $desc=
ription =3D~ /$verbose_step/ ) {
249            1                                 13               $self->op=
tions->set( verbose =3D> 2 );
250                                                           }
251                                                       }
252=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
253                                                       # XXX cc_build us=
es this verbose setting, why?
254   ***     10     50                         198       $self->data->set(=
 verbose =3D> $verbose ) if $n > 2;
255=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
256           10                                198       print "\n", $desc=
ription, '...';
257           10    100    100                  241       print "\n" if $ve=
rbose && $verbose =3D=3D 2;
258=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
259           10                                 46       my $ret;    # ste=
p return value
260           10                                125       eval {
261           10    100                         135           if (@step_par=
ams)
262                                                           {
263            1                                 15               $ret =3D =
$step->runstep( $self, @step_params );
264                                                           }
265                                                           else {
266            9                                 96               $ret =3D =
$step->runstep($self);
267                                                           }
268                                                       };
269           10    100                         114       if ($@) {
270            1                                 22           carp "\nstep =
$step_name died during execution: $@\n";
271           12                              17984           return;
272                                                       }
273=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
274                                                       # did the step re=
turn itself?
275           19                                105       eval { $ret->can(=
'result'); };
              19                                888=20=20=20
276=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
277                                                       # if not, report =
the result and return
278            9    100                          99       if ($@) {
279   ***      1            50                   28           my $result =
=3D $step->result || 'no result returned';
280            1                                 21           carp "\nstep =
$step_name failed: " . $result;
281            1                                 82           return;
282                                                       }
283=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
284   ***      8            50                   77       my $result =3D $s=
tep->result || 'done';
285=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
286            8    100    100                  114       print "..." if $v=
erbose && $verbose =3D=3D 2;
287            8                                 64       print "." x ( 71 =
- length($description) - length($result) );
288   ***      8     50     33                   91       print "$result." =
unless $step =3D~ m{^inter/} && $ask;
289=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
290                                                       # reset verbose v=
alue for the next step
291            8                                479       $self->options->s=
et( verbose =3D> $verbose );
292                                                   }
293=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
294                                                   =3Dback
295=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
296                                                   =3Dhead1 CREDITS
297=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
298                                                   The L</runsteps()> me=
thod is largely based on code written by Brent
299                                                   Royal-Zombie C<brent@=
brentdax.com>.
300=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
301                                                   =3Dhead1 AUTHOR
302=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
303                                                   Joshua Hoblitt C<jhob=
litt@cpan.org>
304=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
305                                                   =3Dhead1 SEE ALSO
306=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
307                                                   F<docs/configuration.=
pod>, L<Parrot::Configure::Data>,
308                                                   L<Parrot::Configure::=
Step>, L<Parrot::Configure::Step::Base>
309=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
310                                                   =3Dcut
311=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
312                                                   1;
313=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
314                                                   # Local Variables:
315                                                   #   mode: cperl
316                                                   #   cperl-indent-leve=
l: 4
317                                                   #   fill-column: 100
318                                                   # End:
319                                                   # vim: expandtab shif=
twidth=3D4:


Branches
--------

line  err      %   true  false   branch
----- --- ------ ------ ------   ------
133          100     11     23   wantarray ? :
214   ***      0      0      0   if ($$task{'Parrot::Configure::Task::step'=
} eq $taskname)
230          100      1     10   if $@
237          100      1      9   unless defined $description
240          100      3      7   if (defined $verbose_step)
243          100      1      2   if ($verbose_step =3D~ /^\d+$/ and $n =3D=
=3D $verbose_step) { }
             100      1      1   elsif ($description =3D~ /$verbose_step/) =
{ }
254   ***     50      0     10   if $n > 2
257          100      1      9   if $verbose and $verbose =3D=3D 2
261          100      1      9   if (@step_params) { }
269          100      1      9   if ($@)
278          100      1      8   if ($@)
286          100      1      7   if $verbose and $verbose =3D=3D 2
288   ***     50      8      0   unless $step =3D~ m[^inter/] and $ask


Conditions
----------

and 3 conditions

line  err      %     !l  l&&!r   l&&r   expr
----- --- ------ ------ ------ ------   ----
243          100      1      1      1   $verbose_step =3D~ /^\d+$/ and $n =
=3D=3D $verbose_step
257          100      8      1      1   $verbose and $verbose =3D=3D 2
286          100      6      1      1   $verbose and $verbose =3D=3D 2
288   ***     33      8      0      0   $step =3D~ m[^inter/] and $ask

or 2 conditions

line  err      %      l     !l   expr
----- --- ------ ------ ------   ----
279   ***     50      0      1   $step->result || 'no result returned'
284   ***     50      0      8   $step->result || 'done'


Covered Subroutines
-------------------

Subroutine Count Location=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
---------- ----- ---------------------------
BEGIN         16 lib/Parrot/Configure.pm:37=20
BEGIN         16 lib/Parrot/Configure.pm:38=20
BEGIN         16 lib/Parrot/Configure.pm:40=20
BEGIN         16 lib/Parrot/Configure.pm:41=20
BEGIN         16 lib/Parrot/Configure.pm:42=20
BEGIN         16 lib/Parrot/Configure.pm:44=20
BEGIN         16 lib/Parrot/Configure.pm:70=20
_runstep      22 lib/Parrot/Configure.pm:221
add_step     124 lib/Parrot/Configure.pm:148
add_steps     13 lib/Parrot/Configure.pm:164
data           7 lib/Parrot/Configure.pm:99=20
new           29 lib/Parrot/Configure.pm:79=20
options       58 lib/Parrot/Configure.pm:114
runsteps      11 lib/Parrot/Configure.pm:185
steps         34 lib/Parrot/Configure.pm:131

Uncovered Subroutines
---------------------

Subroutine Count Location=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
---------- ----- ---------------------------
runstep        0 lib/Parrot/Configure.pm:208


lib/Parrot/Configure/Data.pm

line  err   stmt   bran   cond    sub    pod   time   code
1                                                     # Copyright (C) 2001-=
2005, The Perl Foundation.
2                                                     # $Id: Data.pm 17592 =
2007-03-18 06:55:39Z chromatic $
3=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
4                                                     =3Dpod
5=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
6                                                     =3Dhead1 NAME
7=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
8                                                     Parrot::Configure::Da=
ta - Configuration data container
9=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
10                                                    =3Dhead1 SYNOPSIS
11=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
12                                                        use Parrot::Confi=
gure::Data;
13=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
14                                                        my $data =3D Parr=
ot::Configure::Data->new;
15                                                        my @values =3D $d=
ata->get(@keys);
16                                                        $data->set($key1 =
=3D> $value1, $key2 =3D> $value2);
17                                                        $data->add($delim=
iter, $key1 =3D> $value1, $key2 =3D> $value2);
18                                                        my @keys =3D $dat=
a->keys;
19                                                        my $serialized =
=3D $data->dump;
20                                                        $data->clean;
21                                                        $data->settrigger=
($key, $trigger, $cb);
22                                                        $data->gettrigger=
s($key);
23                                                        $data->gettrigger=
($key, $trigger);
24                                                        $data->deltrigger=
($key, $trigger);
25=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
26                                                    =3Dhead1 DESCRIPTION
27=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
28                                                    This module contains =
configuration data for use by the other
29                                                    L<Parrot::Configure::=
*> modules.
30=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
31                                                    =3Dhead1 USAGE
32=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
33                                                    =3Dhead2 Import Param=
eters
34=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
35                                                    This module accepts n=
o arguments to its C<import> method and exports no
36                                                    I<symbols>.
37=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
38                                                    =3Dcut
39=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
40                                                    package Parrot::Confi=
gure::Data;
41=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
42            17                   17           363   use strict;
              17                                 76=20=20=20
              17                                564=20=20=20
43            17                   17           324   use warnings;
              17                                 79=20=20=20
              17                                310=20=20=20
44=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
45            17                   17         20683   use Data::Dumper;
              17                                102=20=20=20
              17                                669=20=20=20
46=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
47                                                    =3Dhead2 Methods
48=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
49                                                    =3Dhead3 Constructors
50=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
51                                                    =3Dover 4
52=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
53                                                    =3Ditem C<new()>
54=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
55                                                    Basic object construc=
tor.
56=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
57                                                    Accepts no arguments =
and returns a L<Parrot::Configure::Data> object.
58=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
59                                                    =3Dcut
60=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
61                                                    sub new {
62            73                   73      1   1503       my $class =3D shi=
ft;
63=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
64            73                               2850       my $self =3D {
65                                                            c        =3D>=
 {},
66                                                            triggers =3D>=
 {},
67                                                        };
68=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
69    ***     73            33                 1654       bless $self, ref =
$class || $class;
70            73                               2096       return $self;
71                                                    }
72=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
73                                                    =3Dback
74=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
75                                                    =3Dhead3 Object Metho=
ds
76=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
77                                                    =3Dover 4
78=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
79                                                    =3Ditem C<get($key, .=
..)>
80=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
81                                                    Provides access to ke=
y values.
82=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
83                                                    Accepts a list and re=
turns a list.
84=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
85                                                    =3Dcut
86=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
87                                                    sub get {
88           132                  132      1    609       my $self =3D shif=
t;
89=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
90           132                                520       my $c =3D $self->=
{c};
91=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
92           132                               1963       return @$c{@_};
93                                                    }
94=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
95                                                    =3Ditem C<set($key =
=3D> $val, ...)>
96=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
97                                                    Modifies or creates a=
 new value.
98=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
99                                                    Accepts a list of C<<=
 key =3D> value >> pairs and returns a
100                                                   L<Parrot::Configure::=
Data> object.
101=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
102                                                   =3Dcut
103=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
104                                                   sub set {
105           45                   45      1    327       my $self =3D shif=
t;
106=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
107           45           100                  365       my $verbose =3D d=
efined $self->get('verbose') && $self->get('verbose') =3D=3D 2;
108=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
109           45    100                         487       print "Setting Co=
nfiguration Data:\n(\n" if $verbose;
110=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
111           45                                656       while ( my ( $key=
, $val ) =3D splice @_, 0, 2 ) {
112           60    100                         324           print "\t$key=
 =3D> ", defined($val) ? "'$val'" : 'undef', ",\n"
                    100=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20
113                                                               if $verbo=
se;
114           60                                537           $self->{c}{$k=
ey} =3D $val;
115=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
116           60                                540           foreach my $t=
rigger ( $self->gettriggers($key) ) {
117   ***      6     50                          47               print "\t=
calling trigger $trigger for $key\n" if $verbose;
118            6                                 39               my $cb =
=3D $self->gettrigger( $key, $trigger );
119=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
120            6                                 35               &$cb( $ke=
y, $val );
121                                                           }
122                                                       }
123=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
124           45    100                         375       print ");\n" if $=
verbose;
125=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
126           45                                733       return $self;
127                                                   }
128=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
129                                                   =3Ditem C<add($delim,=
 $key =3D> $val, ...)>
130=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
131                                                   Either creates a new =
key or appends to an existing key, with the previous/new
132                                                   values joined togethe=
r by C<$delim>.
133=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
134                                                   Accepts a delimiter v=
alue followed by a list of C<< key =3D> value >> pairs and
135                                                   returns a L<Parrot::C=
onfigure::Data> object.
136=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
137                                                   =3Dcut
138=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
139                                                   sub add {
140            9                    9      1    175       my $self  =3D shi=
ft;
141            9                                 37       my $delim =3D shi=
ft;
142=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
143            9                                116       while ( my ( $key=
, $val ) =3D splice @_, 0, 2 ) {
144           13                                 64           my ($old) =3D=
 $self->{c}{$key};
145           13    100                          67           if ( defined =
$old ) {
146            2                                 24               $self->se=
t( $key, "$old$delim$val" );
147                                                           }
148                                                           else {
149           11                                 67               $self->se=
t( $key, $val );
150                                                           }
151                                                       }
152=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
153            9                                 41       return $self;
154                                                   }
155=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
156                                                   =3Ditem C<keys()>
157=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
158                                                   Provides a list of ke=
ys.
159=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
160                                                   Accepts no arguments =
and returns a list.
161=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
162                                                   =3Dcut
163=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
164                                                   sub keys {
165            2                    2      1     31       my $self =3D shif=
t;
166=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
167            2                                  8       return keys %{ $s=
elf->{c} };
               2                                 50=20=20=20
168                                                   }
169=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
170                                                   =3Ditem C<slurp()>
171=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
172                                                   Slurps in L<Parrot::C=
onfig> data from previous configure.
173=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
174                                                   Accepts no arguments.
175=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
176                                                   =3Dcut
177=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
178                                                   sub slurp() {
179            1                    1      1      6       my $self =3D shif=
t;
180   ***      1                                 14       my $res  =3D eval=
 "no strict; use Parrot::Config::Generated; \\%PConfig";
      ***      0                                  0=20=20=20
      ***      0                                  0=20=20=20
      ***      0                                  0=20=20=20
181=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
182   ***      1     50                          12       if ( not defined =
$res ) {
183   ***      0                                  0           die "You cann=
ot use --step until you have completed the full configure process\n";
184                                                       }
185            1                                 13       $self->{c} =3D $r=
es;
186                                                   }
187=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
188                                                   =3Ditem C<dump()>
189=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
190                                                   Provides a L<Data::Du=
mper> serialized string of the objects key/value pairs
191                                                   suitable for being C<=
eval>ed.  The variable name of the structure is
192                                                   C<PConfig>.
193=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
194                                                   Accepts no arguments =
and returns a string.
195=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
196                                                   =3Dcut
197=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
198                                                   # Data::Dumper suppor=
ts Sortkeys since 2.12
199                                                   # older versions will=
 work but obviously not sorted
200                                                   {
201                                                       my $dd_version;
202                                                       if ( $Data::Dumpe=
r::VERSION =3D~ /([\d.]+)/ ) {
203                                                           $dd_version =
=3D $1;
204                                                       }
205                                                       else {
206                                                           $dd_version =
=3D $Data::Dumper::VERSION;
207                                                       }
208=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
209                                                       if ( $dd_version =
>=3D 2.12 ) {
210                                                           *dump =3D sub=
 {
211            2                    2            31               my $self =
=3D shift;
212            2                                 45               Data::Dum=
per->new( [ $self->{c} ], ['*PConfig'] )->Sortkeys(1)->Dump();
213                                                           };
214                                                       }
215                                                       else {
216                                                           *dump =3D sub=
 {
217                                                               my $self =
=3D shift;
218                                                               Data::Dum=
per->new( [ $self->{c} ], ['*PConfig'] )->Dump();
219                                                           };
220                                                       }
221                                                   }
222=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
223                                                   =3Ditem C<clean()>
224=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
225                                                   Deletes keys matching=
 C</^TEMP_/>.  Keys using this naming convention are
226                                                   intended to be used o=
nly temporally, e.g.  as file lists for Makefile
227                                                   generation.
228=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
229                                                   Accepts no arguments =
and returns a L<Parrot::Configure::Data> object.
230=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
231                                                   =3Dcut
232=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
233                                                   sub clean {
234            3                    3      1     44       my $self =3D shif=
t;
235=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
236            3                                 12       delete $self->{c}=
{$_} for grep { /^TEMP_/ } CORE::keys %{ $self->{c} };
               3                                 11=20=20=20
               4                                 70=20=20=20
               3                                 44=20=20=20
237=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
238            3                                 28       return $self;
239                                                   }
240=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
241                                                   =3Ditem C<settrigger(=
$key, $trigger, $cb)>
242=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
243                                                   Set a callback on C<$=
key> named C<$trigger>.  Multiple triggers can be set on a
244                                                   given key.  When the =
key is set via C<set> or C<add> then all callbacks that
245                                                   are defined will be c=
alled.  Triggers are passed the key and value that was set
246                                                   after it has been cha=
nged.
247=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
248                                                   Accepts a key name, a=
 trigger name, & a C<CODE> ref and returns a
249                                                   L<Parrot::Configure::=
Data> object.
250=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
251                                                   =3Dcut
252=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
253                                                   sub settrigger {
254           33                   33      1   1903       my ( $self, $key,=
 $trigger, $cb ) =3D @_;
255=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
256   ***     33     50     33                  590       return unless def=
ined $key and defined $trigger and defined $cb;
      ***                   33=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20
257=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
258   ***     33            33                  201       my $verbose =3D d=
efined $self->get('verbose') && $self->get('verbose') =3D=3D 2;
259=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
260   ***     33     50                         156       print "Setting tr=
igger $trigger on configuration key $key\n",
261                                                           if $verbose;
262=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
263           33                                262       $self->{triggers}=
{$key}{$trigger} =3D $cb;
264=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
265           33                                140       return $self;
266                                                   }
267=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
268                                                   =3Ditem C<gettriggers=
($key)>
269=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
270                                                   Get the names of all =
triggers set for C<$key>.
271=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
272                                                   Accepts a key name an=
d returns a list.
273=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
274                                                   =3Dcut
275=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
276                                                   sub gettriggers {
277           64                   64      1    364       my ( $self, $key =
) =3D @_;
278=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
279           64    100                        1826       return unless def=
ined $self->{triggers}{$key};
280=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
281   ***      6            33                   31       my $verbose =3D d=
efined $self->get('verbose') && $self->get('verbose') =3D=3D 2;
282=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
283   ***      6     50                          29       print "Looking up=
 all triggers on configuration key $key\n"
284                                                           if $verbose;
285=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
286            6                                 19       return CORE::keys=
 %{ $self->{triggers}{$key} };
               6                                105=20=20=20
287                                                   }
288=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
289                                                   =3Ditem C<gettrigger(=
$key, $trigger)>
290=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
291                                                   Get the callback set =
for C<$key> under the name C<$trigger>
292=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
293                                                   Accepts a key name & =
a trigger name and returns a C<CODE> ref.
294=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
295                                                   =3Dcut
296=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
297                                                   sub gettrigger {
298           16                   16      1    178       my ( $self, $key,=
 $trigger ) =3D @_;
299=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
300                                                       return
301           16    100    100                  289           unless define=
d $self->{triggers}{$key}
302                                                           and defined $=
self->{triggers}{$key}{$trigger};
303=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
304   ***     11            33                   55       my $verbose =3D d=
efined $self->get('verbose') && $self->get('verbose') =3D=3D 2;
305=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
306   ***     11     50                          52       print "Looking up=
 trigger $trigger on configuration key $key\n"
307                                                           if $verbose;
308=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
309           11                                 93       return $self->{tr=
iggers}{$key}{$trigger};
310                                                   }
311=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
312                                                   =3Ditem C<deltrigger(=
$key, $trigger)>
313=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
314                                                   Removes the trigger o=
n C<$key> named by C<$trigger>
315=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
316                                                   Accepts a key name & =
a trigger name and returns a L<Parrot::Configure::Data>
317                                                   object.
318=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
319                                                   =3Dcut
320=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
321                                                   sub deltrigger {
322            9                    9      1    176       my ( $self, $key,=
 $trigger ) =3D @_;
323=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
324                                                       return
325   ***      9    100     66                  151           unless define=
d $self->{triggers}{$key}
326                                                           and defined $=
self->{triggers}{$key}{$trigger};
327=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
328   ***      8            33                   40       my $verbose =3D d=
efined $self->get('verbose') && $self->get('verbose') =3D=3D 2;
329=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
330   ***      8     50                          43       print "Removing t=
rigger $trigger on configuration key $key\n"
331                                                           if $verbose;
332=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
333            8                                128       delete $self->{tr=
iggers}{$key}{$trigger};
334=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
335            8                                 39       return $self;
336                                                   }
337=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
338                                                   =3Dback
339=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
340                                                   =3Dhead1 CREDITS
341=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
342                                                   Based largely on code=
 written by Brent Royal-Zombie C<brent@brentdax.com>.
343=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
344                                                   =3Dhead1 AUTHOR
345=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
346                                                   Joshua Hoblitt C<jhob=
litt@cpan.org>
347=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
348                                                   =3Dhead1 SEE ALSO
349=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
350                                                   F<docs/configuration.=
pod>, L<Parrot::Configure>, L<Parrot::Configure::Step>,
351                                                   L<Parrot::Configure::=
Step::Base>
352=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
353                                                   =3Dcut
354=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
355                                                   1;
356=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
357                                                   # Local Variables:
358                                                   #   mode: cperl
359                                                   #   cperl-indent-leve=
l: 4
360                                                   #   fill-column: 100
361                                                   # End:
362                                                   # vim: expandtab shif=
twidth=3D4:


Branches
--------

line  err      %   true  false   branch
----- --- ------ ------ ------   ------
109          100      3     42   if $verbose
112          100      1      2   defined $val ? :
             100      3     57   if $verbose
117   ***     50      0      6   if $verbose
124          100      3     42   if $verbose
145          100      2     11   if (defined $old) { }
182   ***     50      0      1   if (not defined $res)
256   ***     50      0     33   unless defined $key and defined $trigger a=
nd defined $cb
260   ***     50      0     33   if $verbose
279          100     58      6   unless defined $$self{'triggers'}{$key}
283   ***     50      0      6   if $verbose
301          100      5     11   unless defined $$self{'triggers'}{$key} an=
d defined $$self{'triggers'}{$key}{$trigger}
306   ***     50      0     11   if $verbose
325          100      1      8   unless defined $$self{'triggers'}{$key} an=
d defined $$self{'triggers'}{$key}{$trigger}
330   ***     50      0      8   if $verbose


Conditions
----------

and 3 conditions

line  err      %     !l  l&&!r   l&&r   expr
----- --- ------ ------ ------ ------   ----
107          100     41      1      3   defined $self->get('verbose') && $s=
elf->get('verbose') =3D=3D 2
256   ***     33      0      0     33   defined $key and defined $trigger
      ***     33      0      0     33   defined $key and defined $trigger a=
nd defined $cb
258   ***     33     33      0      0   defined $self->get('verbose') && $s=
elf->get('verbose') =3D=3D 2
281   ***     33      6      0      0   defined $self->get('verbose') && $s=
elf->get('verbose') =3D=3D 2
301          100      2      3     11   defined $$self{'triggers'}{$key} an=
d defined $$self{'triggers'}{$key}{$trigger}
304   ***     33     11      0      0   defined $self->get('verbose') && $s=
elf->get('verbose') =3D=3D 2
325   ***     66      1      0      8   defined $$self{'triggers'}{$key} an=
d defined $$self{'triggers'}{$key}{$trigger}
328   ***     33      8      0      0   defined $self->get('verbose') && $s=
elf->get('verbose') =3D=3D 2

or 3 conditions

line  err      %      l  !l&&r !l&&!r   expr
----- --- ------ ------ ------ ------   ----
69    ***     33      0     73      0   ref $class || $class


Covered Subroutines
-------------------

Subroutine  Count Location=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20
----------- ----- --------------------------------
BEGIN          17 lib/Parrot/Configure/Data.pm:42=20
BEGIN          17 lib/Parrot/Configure/Data.pm:43=20
BEGIN          17 lib/Parrot/Configure/Data.pm:45=20
__ANON__        2 lib/Parrot/Configure/Data.pm:211
add             9 lib/Parrot/Configure/Data.pm:140
clean           3 lib/Parrot/Configure/Data.pm:234
deltrigger      9 lib/Parrot/Configure/Data.pm:322
get           132 lib/Parrot/Configure/Data.pm:88=20
gettrigger     16 lib/Parrot/Configure/Data.pm:298
gettriggers    64 lib/Parrot/Configure/Data.pm:277
keys            2 lib/Parrot/Configure/Data.pm:165
new            73 lib/Parrot/Configure/Data.pm:62=20
set            45 lib/Parrot/Configure/Data.pm:105
settrigger     33 lib/Parrot/Configure/Data.pm:254
slurp           1 lib/Parrot/Configure/Data.pm:179

Uncovered Subroutines
---------------------

Subroutine  Count Location=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20
----------- ----- --------------------------------
BEGIN             lib/Parrot/Configure/Data.pm:180


lib/Parrot/Configure/Messages.pm

line  err   stmt   bran   cond    sub    pod   time   code
1                                                     # Copyright (C) 2001-=
2006, The Perl Foundation.
2                                                     # $Id: Messages.pm 18=
156 2007-04-11 23:27:33Z jkeenan $
3                                                     package Parrot::Confi=
gure::Messages;
4              1                    1            27   use strict;
               1                                  5=20=20=20
               1                                 29=20=20=20
5              1                    1            24   use warnings;
               1                                  5=20=20=20
               1                                 24=20=20=20
6              1                    1            19   use base qw( Exporter=
 );
               1                                  6=20=20=20
               1                                 23=20=20=20
7                                                     our @EXPORT_OK =3D qw(
8                                                         print_introduction
9                                                         print_conclusion
10                                                    );
11=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
12                                                    ################### S=
UBROUTINES ###################
13=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
14                                                    sub print_introductio=
n {
15             1                    1      1      6       my $parrot_versio=
n =3D shift;
16             1                                  7       print <<"END";
17                                                    Parrot Version $parro=
t_version Configure 2.0
18                                                    Copyright (C) 2001-20=
07, The Perl Foundation.
19=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
20                                                    Hello, I'm Configure.=
 My job is to poke and prod your system to figure out
21                                                    how to build Parrot. =
The process is completely automated, unless you passed in
22                                                    the `--ask' flag on t=
he command line, in which case it'll prompt you for a few
23                                                    pieces of info.
24=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
25                                                    Since you're running =
this program, you obviously have Perl 5--I'll be pulling
26                                                    some defaults from it=
s configuration.
27                                                    END
28             1                                 13       return 1;
29                                                    }
30=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
31                                                    sub print_conclusion {
32             1                    1      1      5       my $make =3D shif=
t;
33             1                                  8       print <<"END";
34=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
35                                                    Okay, we're done!
36=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
37                                                    You can now use `$mak=
e' to build your Parrot.
38                                                    (NOTE: do not use `$m=
ake -j <n>'!)
39                                                    After that, you can u=
se `$make test' to run the test suite.
40=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
41                                                    Happy Hacking,
42                                                            The Parrot Te=
am
43=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
44                                                    END
45             1                                  9       return 1;
46                                                    }
47=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
48                                                    1;
49=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
50                                                    #################### =
DOCUMENTATION ####################
51=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
52                                                    =3Dhead1 NAME
53=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
54                                                    Parrot::Configure::Me=
ssages - Introduce and conclude Parrot configuration process
55=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
56                                                    =3Dhead1 SYNOPSIS
57=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
58                                                        use Parrot::Confi=
gure::Messages qw(
59                                                            print_introdu=
ction
60                                                            print_conclus=
ion
61                                                        );
62=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
63                                                        print_introductio=
n($parrot_version);
64=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
65                                                        print_conclusion(=
$make_version);
66=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
67                                                    =3Dhead1 DESCRIPTION
68=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
69                                                    Parrot::Configure::Me=
ssages exports on demand two subroutines which print
70                                                    messages to STDOUT wh=
en F<Configure.pl> is run.
71=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
72                                                    =3Dhead1 SUBROUTINES
73=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
74                                                    =3Dhead2 C<print_intr=
oduction()>
75=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
76                                                    =3Dover 4
77=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
78                                                    =3Ditem * Purpose
79=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
80                                                    Print the Parrot vers=
ion, the version of F<Configure.pl>, the copyright notice
81                                                    and a message introdu=
cing the Parrot configuration process.
82=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
83                                                    =3Ditem * Arguments
84=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
85                                                    One argument:  String=
 holding the Parrot version number (currently supplied by
86                                                    C<Parrot::BuildUtil::=
parrot_version()>).
87=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
88                                                    =3Ditem * Return Value
89=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
90                                                    Implicit true value w=
hen C<print> returns successfully.
91=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
92                                                    =3Ditem * Comment
93=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
94                                                    =3Dback
95=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
96                                                    =3Dhead2 C<print_conc=
lusion()>
97=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
98                                                    =3Dover 4
99=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
100                                                   =3Ditem * Purpose
101=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
102                                                   Prints a message anno=
uncing the conclusion of the Parrot configuration process
103                                                   and instructing the u=
ser to run F<make>.
104=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
105                                                   =3Ditem * Arguments
106=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
107                                                   One argument:  String=
 holding the version of F<make> located by the
108                                                   configuration process.
109=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
110                                                   =3Ditem * Return Value
111=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
112                                                   Implicit true value w=
hen C<print> returns successfully.
113=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
114                                                   =3Ditem * Comment
115=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
116                                                   =3Dback
117=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
118                                                   =3Dhead1 NOTES
119=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
120                                                   The functionality in =
this package was transferred from F<Configure.pl> by Jim
121                                                   Keenan.
122=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
123                                                   =3Dhead1 SEE ALSO
124=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
125                                                   F<Configure.pl>.
126=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
127                                                   =3Dcut
128=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
129                                                   # Local Variables:
130                                                   #   mode: cperl
131                                                   #   cperl-indent-leve=
l: 4
132                                                   #   fill-column: 100
133                                                   # End:
134                                                   # vim: expandtab shif=
twidth=3D4:


Covered Subroutines
-------------------

Subroutine         Count Location=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20
------------------ ----- -----------------------------------
BEGIN                  1 lib/Parrot/Configure/Messages.pm:4=20
BEGIN                  1 lib/Parrot/Configure/Messages.pm:5=20
BEGIN                  1 lib/Parrot/Configure/Messages.pm:6=20
print_conclusion       1 lib/Parrot/Configure/Messages.pm:32
print_introduction     1 lib/Parrot/Configure/Messages.pm:15


lib/Parrot/Configure/Options.pm

line  err   stmt   bran   cond    sub    pod   time   code
1                                                     # Copyright (C) 2001-=
2006, The Perl Foundation.
2                                                     # $Id: Options.pm 181=
56 2007-04-11 23:27:33Z jkeenan $
3                                                     package Parrot::Confi=
gure::Options;
4             15                   15           348   use strict;
              15                                 59=20=20=20
              15                                648=20=20=20
5             15                   15           313   use warnings;
              15                                 77=20=20=20
              15                                274=20=20=20
6             15                   15           338   use base qw( Exporter=
 );
              15                                 69=20=20=20
              15                                397=20=20=20
7                                                     our @EXPORT_OK =3D qw(
8                                                         process_options
9                                                         get_valid_options
10                                                    );
11=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
12                                                    sub get_valid_options=
 {
13            29                   29      1   3713       return qw(ask bin=
dir cage cc ccflags ccwarn cgoto cxx datadir
14                                                            debugging def=
ine exec-prefix execcapable floatval gc help icu-config
15                                                            icudatadir ic=
uheaders icushared includedir infodir inline intval
16                                                            jitcapable ld=
 ldflags lex libdir libexecdir libs link linkflags
17                                                            localstatedir=
 m maintainer mandir miniparrot nomanicheck oldincludedir
18                                                            opcode ops op=
timize parrot_is_shared pmc prefix profile sbindir
19                                                            sharedstatedi=
r step sysconfdir verbose verbose-step version without-gdbm
20                                                            without-gmp w=
ithout-icu yacc);
21                                                    }
22=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
23                                                    sub process_options {
24            28                   28      1  18104       my $optionsref =
=3D shift;
25            28                                362       my @valid_opts =
=3D get_valid_options();
26            28    100                        1218       $optionsref->{arg=
v} =3D []
27                                                            unless define=
d $optionsref->{argv};
28            28    100                         239       $optionsref->{scr=
ipt} =3D q{Configure.pl}
29                                                            unless define=
d $optionsref->{script};
30            28    100                         259       die "Must provide=
 argument 'parrot_version'"
31                                                            unless $optio=
nsref->{parrot_version};
32            27    100                         232       die "Must provide=
 argument 'svnid'"
33                                                            unless $optio=
nsref->{svnid};
34            26                                115       my %args;
35            26                                120       for ( @{ $options=
ref->{argv} } ) {
              26                                270=20=20=20
36            23                                535           my ( $key, $v=
alue ) =3D m/--([-\w]+)(?:=3D(.*))?/;
37            23    100                        1990           $key   =3D 'h=
elp' unless defined $key;
38            23    100                         239           $value =3D 1 =
     unless defined $value;
39=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
40            23    100                        1282           unless ( grep=
 $key eq $_, @valid_opts ) {
41             1                                 11               die qq/In=
valid option $key. See "perl Configure.pl --help" for valid options\n/;
42                                                            }
43=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
44            22                                266           for ($key) {
45            22    100                         198               if ( $key=
 =3D~ m/version/ ) {
46             1                                 12                   print=
_version_info($optionsref);
47             1                                 36                   retur=
n;
48                                                                }
49=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
50            21    100                         149               if ( $key=
 =3D~ m/help/ ) {
51             2                                 19                   print=
_help($optionsref);
52             2                                 76                   retur=
n;
53                                                                }
54            19                                298               $args{$ke=
y} =3D $value;
55                                                            }
56                                                        }
57=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
58            22    100    100                  502       $args{debugging} =
=3D 1
59                                                            unless ( ( ex=
ists $args{debugging} ) && !$args{debugging} );
60            22    100    100                  805       $args{maintainer}=
 =3D 1 if defined $args{lex} or defined $args{yacc};
61            22                                989       return \%args;
62                                                    }
63=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
64                                                    ################### S=
UBROUTINES ###################
65=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
66                                                    sub print_version_inf=
o {
67    ***      1                    1      0      7       my $argsref =3D s=
hift;
68             1                                 12       print "Parrot Ver=
sion $argsref->{parrot_version} Configure 2.0\n";
69             1                                  6       print "$argsref->=
{svnid}\n";
70             1                                  6       return 1;
71                                                    }
72=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
73                                                    sub print_help {
74    ***      2                    2      0      9       my $argsref =3D s=
hift;
75             2                                 30       print <<"EOT";
76                                                    $argsref->{script} - =
Parrot Configure 2.0
77=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
78                                                    General Options:
79=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
80                                                       --help            =
   Show this text
81                                                       --version         =
   Show version information
82                                                       --verbose         =
   Output extra information
83                                                       --verbose=3D2     =
     Output every setting change
84                                                       --verbose-step=3DN=
     Set verbose for step N only
85                                                       --verbose-step=3Dr=
egex Set verbose for step matching description
86                                                       --nomanicheck     =
   Don't check the MANIFEST
87                                                       --step=3D(gen::lan=
guages)
88                                                                         =
   Execute a single configure step
89=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
90                                                       --ask             =
   Have Configure ask for commonly-changed info
91=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
92                                                    Compile Options:
93=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
94                                                       --debugging=3D0   =
     Disable debugging, default =3D 1
95                                                       --inline          =
   Compiler supports inline
96                                                       --optimize        =
   Optimized compile
97                                                       --optimize=3Dflags=
     Add given optimizer flags
98                                                       --parrot_is_shared=
   Link parrot dynamically
99                                                       --m=3D32          =
     Build 32bit executable on 64-bit architecture.
100                                                      --profile         =
   Turn on profiled compile (gcc only for now)
101                                                      --cage            =
   [CAGE] compile includes many additional warnings
102=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
103                                                      --cc=3D(compiler) =
     Use the given compiler
104                                                      --ccflags=3D(flags=
)    Use the given compiler flags
105                                                      --ccwarn=3D(flags)=
     Use the given compiler warning flags
106                                                      --cxx=3D(compiler)=
     Use the given C++ compiler
107                                                      --libs=3D(libs)   =
     Use the given libraries
108                                                      --link=3D(linker) =
     Use the given linker
109                                                      --linkflags=3D(fla=
gs)  Use the given linker flags
110                                                      --ld=3D(linker)   =
     Use the given loader for shared libraries
111                                                      --ldflags=3D(flags=
)    Use the given loader flags for shared libraries
112                                                      --lex=3D(lexer)   =
     Use the given lexical analyzer generator
113                                                      --yacc=3D(parser) =
     Use the given parser generator
114=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
115                                                      --define=3Dinet_at=
on   Quick hack to use inet_aton instead of inet_pton
116=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
117                                                   Parrot Options:
118=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
119                                                      --intval=3D(type) =
     Use the given type for INTVAL
120                                                      --floatval=3D(type=
)    Use the given type for FLOATVAL
121                                                      --opcode=3D(type) =
     Use the given type for opcodes
122                                                      --ops=3D(files)   =
     Use the given ops files
123                                                      --pmc=3D(files)   =
     Use the given PMC files
124=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
125                                                      --cgoto=3D0       =
     Don't build cgoto core - recommended when short of mem
126                                                      --jitcapable      =
   Use JIT
127                                                      --execcapable     =
   Use JIT to emit a native executable
128                                                      --gc=3D(type)     =
     Determine the type of garbage collection
129                                                                        =
   type=3D(gc|libc|malloc|malloc-trace) default is gc
130=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
131                                                   External Library Opti=
ons:
132=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
133                                                      --without-gmp     =
   Build parrot without GMP support
134                                                      --without-gdbm    =
   Build parrot without GDBM support
135=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
136                                                   ICU Options:
137=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
138                                                      For using a system=
 ICU, these options can be used:
139=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
140                                                      --icu-config=3D/pa=
th/to/icu-config
141                                                                        =
   Location of the script used for ICU autodetection.
142                                                                        =
   You just need to specify this option if icu-config
143                                                                        =
   is not in you PATH.
144=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
145                                                      --icu-config=3Dnon=
e    can be used to disable the autodetection feature.
146                                                                        =
   It will also be disabled if you specify any other
147                                                                        =
   of the following ICU options.
148=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
149                                                      If you do not have=
 a full ICU installation:
150=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
151                                                      --without-icu     =
   Build parrot without ICU support
152                                                      --icuheaders=3D(pa=
th)  Location of ICU headers without /unicode
153                                                      --icushared=3D(fla=
gs)  Full linker command to create shared libraries
154                                                      --icudatadir=3D(pa=
th)  Directory to locate ICU's data file(s)
155=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
156                                                   Other Options (may no=
t be implemented):
157=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
158                                                      --maintainer      =
   Create imcc's parser and lexer files. Needs a working
159                                                                        =
   parser and lexer.
160                                                      --miniparrot      =
   Build parrot assuming only pure ANSI C is available
161=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
162                                                   Install Options:
163=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
164                                                       --prefix=3DPREFIX=
         install architecture-independent files in PREFIX
165                                                                        =
       [/usr/local]
166                                                       --exec-prefix=3DE=
PREFIX   install architecture-dependent files in EPREFIX
167                                                                        =
       [PREFIX]
168=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
169                                                       By default, `make=
 install' will install all the files in
170                                                       `/usr/local/bin',=
 `/usr/local/lib' etc.  You can specify
171                                                       an installation p=
refix other than `/usr/local' using `--prefix',
172                                                       for instance `--p=
refix=3D\$HOME'.
173=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
174                                                       For better contro=
l, use the options below.
175=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
176                                                       Fine tuning of th=
e installation directories:
177                                                       --bindir=3DDIR   =
         user executables [EPREFIX/bin]
178                                                       --sbindir=3DDIR  =
         system admin executables [EPREFIX/sbin]
179                                                       --libexecdir=3DDI=
R        program executables [EPREFIX/libexec]
180                                                       --datadir=3DDIR  =
       read-only architecture-independent data [PREFIX/share]
181                                                       --sysconfdir=3DDI=
R        read-only single-machine data [PREFIX/etc]
182                                                       --sharedstatedir=
=3DDIR   modifiable architecture-independent data [PREFIX/com]
183                                                       --localstatedir=
=3DDIR     modifiable single-machine data [PREFIX/var]
184                                                       --libdir=3DDIR   =
         object code libraries [EPREFIX/lib]
185                                                       --includedir=3DDI=
R        C header files [PREFIX/include]
186                                                       --oldincludedir=
=3DDIR     C header files for non-gcc [/usr/include]
187                                                       --infodir=3DDIR  =
         info documentation [PREFIX/info]
188                                                       --mandir=3DDIR   =
         man documentation [PREFIX/man]
189=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
190                                                   EOT
191            2                                 19       return 1;
192                                                   }
193=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
194                                                   1;
195=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
196                                                   #################### =
DOCUMENTATION ####################
197=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
198                                                   =3Dhead1 NAME
199=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
200                                                   Parrot::Configure::Op=
tions - Process command-line options to F<Configure.pl>
201=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
202                                                   =3Dhead1 SYNOPSIS
203=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
204                                                       use Parrot::Confi=
gure::Options qw( process_options );
205=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
206                                                       $args =3D process=
_options( {
207                                                           argv         =
   =3D> [ @ARGV ],
208                                                           script       =
   =3D> $0,
209                                                           parrot_versio=
n  =3D> $parrot_version,
210                                                           svnid        =
   =3D>
211                                                               '$Id: Opt=
ions.pm 18156 2007-04-11 23:27:33Z jkeenan $',
212                                                       } );
213=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
214                                                       @valid_options =
=3D get_valid_options();
215=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
216                                                   =3Dhead1 DESCRIPTION
217=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
218                                                   Parrot::Configure::Op=
tions exports on demand two subroutines:
219                                                   C<process_options()>,=
 which processes the command-line options provided to
220                                                   F<Configure.pl>; and =
C<get_valid_options()>, which returns the list of
221                                                   currently valid optio=
ns.
222=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
223                                                   If you provide F<Conf=
igure.pl> with either C<--help> or C<--version>,
224                                                   C<process_options()> =
 will print out the appropriate message and perform a
225                                                   bare C<return>, I<i.e=
.>, the return value will be C<undef>.  The calling
226                                                   script -- whether F<C=
onfigure.pl> or a test file -- can then check for the
227                                                   definedness of C<proc=
ess_options()>'s return value and proceed appropriately.
228=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
229                                                   An array of valid com=
mand-line option names stored internally is consulted;
230                                                   the program will die =
if an invalid option is called.
231=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
232                                                   =3Dhead1 SUBROUTINES
233=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
234                                                   =3Dhead2 C<process_op=
tions()>
235=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
236                                                   =3Dover 4
237=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
238                                                   =3Ditem * Purpose
239=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
240                                                   Process command-line =
options provided to F<Configure.pl> and proceed
241                                                   appropriately.
242=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
243                                                   =3Ditem * Arguments
244=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
245                                                   One argument:  Refere=
nce to a hash holding the following key-value pairs:
246=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
247                                                       argv            :=
 reference to @ARGV; defaults to []
248                                                       script          :=
 Perl's $0:  the calling program;
249                                                                        =
 defaults to 'Configure.pl'
250                                                       parrot_version  :=
 string holding Parrot version number
251                                                                        =
 (currently supplied by
252                                                                        =
 Parrot::BuildUtil::parrot_version())
253                                                       svnid           :=
 string holding Subversion Id string
254=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
255                                                   =3Ditem * Return Value
256=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
257                                                   =3Dover 4
258=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
259                                                   =3Ditem * C<--version=
> or C<--help>
260=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
261                                                   Bare return (C<undef>=
).
262=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
263                                                   =3Ditem * All other o=
ptions
264=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
265                                                   Reference to a hash o=
f option names and values.
266=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
267                                                   =3Dback
268=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
269                                                   =3Ditem * Comment
270=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
271                                                   =3Dback
272=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
273                                                   =3Dhead2 C<get_valid_=
options()>
274=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
275                                                   =3Dover 4
276=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
277                                                   =3Ditem * Purpose
278=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
279                                                   Get a list of options=
 currently valid for F<Configure.pl>.
280=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
281                                                   =3Ditem * Arguments
282=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
283                                                   None.
284=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
285                                                   =3Ditem * Return Value
286=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
287                                                   List of currently val=
id options.
288=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
289                                                   =3Ditem * Comment
290=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
291                                                   =3Dback
292=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
293                                                   =3Dhead1 NOTES
294=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
295                                                   The functionality in =
this package was transferred from F<Configure.pl> by Jim
296                                                   Keenan.
297=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
298                                                   =3Dhead1 SEE ALSO
299=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
300                                                   F<Configure.pl>.
301=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
302                                                   =3Dcut
303=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
304                                                   # Local Variables:
305                                                   #   mode: cperl
306                                                   #   cperl-indent-leve=
l: 4
307                                                   #   fill-column: 100
308                                                   # End:
309                                                   # vim: expandtab shif=
twidth=3D4:


Branches
--------

line  err      %   true  false   branch
----- --- ------ ------ ------   ------
26           100      1     27   unless defined $$optionsref{'argv'}
28           100      1     27   unless defined $$optionsref{'script'}
30           100      1     27   unless $$optionsref{'parrot_version'}
32           100      1     26   unless $$optionsref{'svnid'}
37           100      1     22   unless defined $key
38           100      8     15   unless defined $value
40           100      1     22   unless (grep(($key eq $_), @valid_opts))
45           100      1     21   if ($key =3D~ /version/)
50           100      2     19   if ($key =3D~ /help/)
58           100     21      1   unless exists $args{'debugging'} and not $=
args{'debugging'}
60           100      2     20   if defined $args{'lex'} or defined $args{'=
yacc'}


Conditions
----------

and 3 conditions

line  err      %     !l  l&&!r   l&&r   expr
----- --- ------ ------ ------ ------   ----
58           100     20      1      1   exists $args{'debugging'} and not $=
args{'debugging'}

or 3 conditions

line  err      %      l  !l&&r !l&&!r   expr
----- --- ------ ------ ------ ------   ----
60           100      1      1     20   defined $args{'lex'} or defined $ar=
gs{'yacc'}


Covered Subroutines
-------------------

Subroutine         Count Location=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20
------------------ ----- ----------------------------------
BEGIN                 15 lib/Parrot/Configure/Options.pm:4=20
BEGIN                 15 lib/Parrot/Configure/Options.pm:5=20
BEGIN                 15 lib/Parrot/Configure/Options.pm:6=20
get_valid_options     29 lib/Parrot/Configure/Options.pm:13
print_help             2 lib/Parrot/Configure/Options.pm:74
print_version_info     1 lib/Parrot/Configure/Options.pm:67
process_options       28 lib/Parrot/Configure/Options.pm:24


lib/Parrot/Configure/Step.pm

line  err   stmt   bran   cond    sub    pod   time   code
1                                                     # Copyright (C) 2001-=
2006, The Perl Foundation.
2                                                     # $Id: Step.pm 18023 =
2007-04-07 00:42:23Z jkeenan $
3=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
4                                                     =3Dhead1 NAME
5=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
6                                                     Parrot::Configure::St=
ep - Configuration Step Utilities
7=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
8                                                     =3Dhead1 DESCRIPTION
9=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
10                                                    The C<Parrot::Configu=
re::Step> module contains utility functions for steps to
11                                                    use.
12=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
13                                                    Note that the actual =
configuration step itself is NOT an instance of this
14                                                    class, rather it is d=
efined to be in the C<package> C<Configure::Step>. See
15                                                    F<docs/configuration.=
pod> for more information on how to create new
16                                                    configuration steps.
17=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
18                                                    =3Dhead2 Functions
19=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
20                                                    =3Dover 4
21=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
22                                                    =3Dcut
23=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
24                                                    package Parrot::Confi=
gure::Step;
25=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
26            12                   12           571   use strict;
              12                                 65=20=20=20
              12                                330=20=20=20
27            12                   12          2019   use warnings;
              12                               3819=20=20=20
              12                               2031=20=20=20
28=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
29            12                   12           266   use base qw( Exporter=
 );
              12                                 63=20=20=20
              12                                190=20=20=20
30=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
31            12                   12           252   use Carp;
              12                                 49=20=20=20
              12                                657=20=20=20
32            12                   12           234   use File::Basename qw=
( basename );
              12                                588=20=20=20
              12                                355=20=20=20
33            12                   12         20236   use File::Copy ();
              12                                 66=20=20=20
              12                                113=20=20=20
34            12                   12           248   use File::Spec;
              12                                 47=20=20=20
              12                                369=20=20=20
35            12                   12         18417   use File::Which;
              12                                 78=20=20=20
              12                                607=20=20=20
36            12                   12           255   use lib ("lib");
              12                                 83=20=20=20
              12                                256=20=20=20
37            12                   12          3044   use Parrot::Configure;
              12                                 55=20=20=20
              12                                264=20=20=20
38=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
39                                                    my $conf =3D Parrot::=
Configure->new();
40=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
41                                                    our @EXPORT    =3D ();
42                                                    our @EXPORT_OK =3D qw=
(prompt genfile copy_if_diff move_if_diff integrate
43                                                        cc_gen cc_build c=
c_run cc_clean cc_run_capture
44                                                        capture_output ch=
eck_progs);
45                                                    our %EXPORT_TAGS =3D (
46                                                        inter =3D> [qw(pr=
ompt integrate)],
47                                                        auto  =3D> [
48                                                            qw(cc_gen cc_=
build cc_run cc_clean cc_run_capture
49                                                                capture_o=
utput check_progs)
50                                                        ],
51                                                        gen =3D> [qw(genf=
ile copy_if_diff move_if_diff)]
52                                                    );
53=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
54                                                    =3Ditem C<integrate($=
orig, $new)>
55=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
56                                                    Integrates C<$new> in=
to C<$orig>.  Returns C<$orig> if C<$new> is undefined.
57=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
58                                                    =3Dcut
59=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
60                                                    sub integrate {
61             4                    4      1     29       my ( $orig, $new =
) =3D @_;
62=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
63                                                        # Rather than spr=
inkling "if defined(...)", everywhere,
64                                                        # config/inter/pr=
ogs.pl just passes in potentially undefined
65                                                        # strings.  Just =
pass back the original in that case.  Don't
66                                                        # bother warning.=
  --AD, 12 Sep 2005
67                                                        # warn "String to=
 be integrated in to '$orig' undefined";
68             4    100                          47       return $orig unle=
ss defined $new;
69=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
70    ***      2     50                          52       if ( $new =3D~ /\=
S/ ) {
71             2                                 16           $orig =3D $ne=
w;
72                                                        }
73=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
74             2                                 27       return $orig;
75                                                    }
76=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
77                                                    =3Ditem C<prompt($mes=
sage, $value)>
78=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
79                                                    Prints out "message [=
default] " and waits for the user's response. Returns the
80                                                    response, or the defa=
ult if the user just hit C<ENTER>.
81=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
82                                                    =3Dcut
83=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
84                                                    sub prompt {
85    ***      0                    0      1      0       my ( $message, $v=
alue ) =3D @_;
86=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
87    ***      0                                  0       print("$message [=
$value] ");
88=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
89    ***      0                                  0       chomp( my $input =
=3D <STDIN> );
90=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
91    ***      0      0                           0       if ($input) {
92    ***      0                                  0           $value =3D $i=
nput;
93                                                        }
94=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
95    ***      0                                  0       return integrate(=
 $value, $input );
96                                                    }
97=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
98                                                    =3Ditem C<file_checks=
um($filename, $ignore_pattern)>
99=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
100                                                   Creates a checksum fo=
r the specified file. This is used to compare files.
101=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
102                                                   Any lines matching th=
e regular expression specified by C<$ignore_pattern> are
103                                                   not included in the c=
hecksum.
104=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
105                                                   =3Dcut
106=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
107                                                   sub file_checksum {
108            6                    6      1     43       my ( $filename, $=
ignore_pattern ) =3D @_;
109   ***      6     50                         554       open( my $file, '=
<', $filename ) or die "Can't open $filename: $!";
110            6                                 32       my $sum =3D 0;
111            6                                645       while (<$file>) {
112   ***      4     50     33                   46           next if defin=
ed($ignore_pattern) && /$ignore_pattern/;
113            4                                219           $sum +=3D unp=
ack( "%32C*", $_ );
114                                                       }
115   ***      6     50                         186       close($file) or d=
ie "Can't close $filename: $!";
116            6                                 77       return $sum;
117                                                   }
118=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
119                                                   =3Ditem C<copy_if_dif=
f($from, $to, $ignore_pattern)>
120=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
121                                                   Copies the file speci=
fied by C<$from> to the location specified by C<$to> if
122                                                   its contents have cha=
nged.
123=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
124                                                   The regular expressio=
n specified by C<$ignore_pattern> is passed to
125                                                   C<file_checksum()> wh=
en comparing the files.
126=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
127                                                   =3Dcut
128=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
129                                                   sub copy_if_diff {
130            2                    2      1     19       my ( $from, $to, =
$ignore_pattern ) =3D @_;
131=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
132                                                       # Don't touch the=
 file if it didn't change (avoid unnecessary rebuilds)
133   ***      2     50                         106       if ( -r $to ) {
134            2                                 17           my $from_sum =
=3D file_checksum( $from, $ignore_pattern );
135            2                                 48           my $to_sum   =
=3D file_checksum( $to,   $ignore_pattern );
136   ***      2     50                          39           return if $fr=
om_sum =3D=3D $to_sum;
137                                                       }
138=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
139            2                                 26       File::Copy::copy(=
 $from, $to );
140=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
141                                                       # Make sure the t=
imestamp is updated
142            2                                100       my $now =3D time;
143            2                                815       utime $now, $now,=
 $to;
144=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
145            2                                 39       return 1;
146                                                   }
147=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
148                                                   =3Ditem C<move_if_dif=
f($from, $to, $ignore_pattern)>
149=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
150                                                   Moves the file specif=
ied by C<$from> to the location specified by C<$to> if
151                                                   its contents have cha=
nged.
152=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
153                                                   =3Dcut
154=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
155                                                   sub move_if_diff {
156            1                    1      1      8       my ( $from, $to, =
$ignore_pattern ) =3D @_;
157            1                                  9       copy_if_diff( $fr=
om, $to, $ignore_pattern );
158            1                               1342       unlink $from;
159                                                   }
160=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
161                                                   =3Ditem C<genfile($so=
urce, $target, %options)>
162=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
163                                                   Takes the specified s=
ource file, replacing entries like C<@FOO@> with
164                                                   C<FOO>'s value from t=
he configuration system's data, and writes the results
165                                                   to specified target f=
ile.
166=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
167                                                   Respects the followin=
g options when manipulating files (Note: most of the
168                                                   replacement syntax as=
sumes the source text is on a single line.)
169=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
170                                                   =3Dover 4
171=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
172                                                   =3Ditem makefile
173=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
174                                                   If set to a true valu=
e, this flag sets (unless overriden) C<comment_type>
175                                                   to '#', C<replace_sla=
shes> to enabled, and C<conditioned_lines> to enabled.
176=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
177                                                   If the name of the fi=
le being generated ends in C<Makefile>, this option
178                                                   defaults to true.
179=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
180                                                   =3Ditem conditioned_l=
ines
181=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
182                                                   If conditioned_lines =
is true, then lines in the file that begin with:
183                                                   C<#CONDITIONED_LINE(v=
ar):> are skipped if the var condition is false. Lines
184                                                   that begin with C<#IN=
VERSE_CONDITIONED_LINE(var):> are skipped if
185                                                   the var condition is =
true.
186=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
187                                                   =3Ditem comment_type
188=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
189                                                   This option takes has=
 two possible values, C<#> or C</*>. If present and
190                                                   set to one of these t=
wo values, the generated file will contain a
191                                                   generated header that=
 is commented out appropriately.
192=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
193                                                   =3Ditem ignore_pattern
194=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
195                                                   A regular expression.=
 Any lines in the file matching this expression are
196                                                   ignored when determin=
ing if the target file has changed (and should therefore
197                                                   be overwritten with a=
 new copy).
198=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
199                                                   =3Ditem feature_file
200=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
201                                                   When feature_file is =
set to a true value, a lines beginning with C<#perl>
202                                                   forces the remaining =
lines of the file to be evaluated as perl code. Before
203                                                   this evaluation occur=
s, any substitution of @@ values is performed on the
204                                                   original text.
205=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
206                                                   =3Ditem replace_slash=
es
207=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
208                                                   If set to a true valu=
e, this causes any C</>s in the file to automatically
209                                                   be replaced with an a=
rchitecture appropriate slash. C</> or C<\>. This is
210                                                   a very helpful option=
 when writing Makefiles.
211=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
212                                                   =3Ditem expand_gmake_=
syntax
213=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
214                                                   If set to a true valu=
e, then certain types of gmake syntax will be expanded
215                                                   into their full equiv=
alents. For example:
216=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
217                                                    $(wildcard PATTERN)
218=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
219                                                   Will be replaced I<at=
 config time> with the list of files that match this
220                                                   pattern. Note! Be ver=
y careful when determining whether or not to disable
221                                                   this expansion during=
 config time and letting gmake evaluate these: the
222                                                   config system itself =
may change state of the filesystem, causing the
223                                                   directives to expand =
differently depending on when they're run. Another
224                                                   potential issue to co=
nsider there is that most makefiles, while generated
225                                                   from the root directo=
ry, are I<run> from a subdirectory. So relative path names
226                                                   become an issue.
227=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
228                                                   The gmake replacement=
s are done repeatedly on a single line, so nested
229                                                   syntax works ok.
230=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
231                                                   =3Dover 4
232=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
233                                                   =3Ditem addprefix
234=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
235                                                   =3Ditem basename
236=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
237                                                   =3Ditem wildcard
238=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
239                                                   =3Ditem notdir
240=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
241                                                   =3Dback
242=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
243                                                   =3Dback
244=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
245                                                   =3Dcut
246=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
247                                                   sub genfile {
248   ***      0                    0      1      0       my ( $source, $ta=
rget, %options ) =3D @_;
249=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
250   ***      0      0                           0       open my $in, '<',=
 $source or die "Can't open $source: $!";
251=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
252   ***      0      0                           0       open my $out, '>'=
, "$target.tmp" or die "Can't open $target.tmp: $!";
253=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
254   ***      0      0      0                    0       if ( !exists $opt=
ions{makefile} && $target =3D~ m/makefile$/i ) {
255   ***      0                                  0           $options{make=
file} =3D 1;
256                                                       }
257=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
258   ***      0      0                           0       if ( $options{mak=
efile} ) {
259   ***      0      0                           0           exists $optio=
ns{comment_type}      or $options{comment_type}      =3D '#';
260   ***      0      0                           0           exists $optio=
ns{replace_slashes}   or $options{replace_slashes}   =3D 1;
261   ***      0      0                           0           exists $optio=
ns{conditioned_lines} or $options{conditioned_lines} =3D 1;
262                                                       }
263=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
264   ***      0      0                           0       if ( $options{com=
ment_type} ) {
265   ***      0                                  0           my @comment =
=3D ( "DO NOT EDIT THIS FILE", "Generated by " . __PACKAGE__ . " from $sour=
ce" );
266=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
267   ***      0      0                           0           if ( $options=
{comment_type} eq '#' ) {
      ***             0=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20
268   ***      0                                  0               foreach m=
y $line (@comment) {
269   ***      0                                  0                   $line=
 =3D "# $line\n";
270                                                               }
271                                                           }
272                                                           elsif ( $opti=
ons{comment_type} eq '/*' ) {
273   ***      0                                  0               foreach m=
y $line (@comment) {
274   ***      0                                  0                   $line=
 =3D " * $line\n";
275                                                               }
276   ***      0                                  0               $comment[=
0]  =3D~ s{^}{/*\n};     # '/*'
277   ***      0                                  0               $comment[=
-1] =3D~ s{$}{\n */};    # ' */'
278                                                           }
279                                                           else {
280   ***      0                                  0               die "Unkn=
own comment type '$options{comment_type}'";
281                                                           }
282   ***      0                                  0           foreach my $l=
ine (@comment) { print $out $line; }
      ***      0                                  0=20=20=20
283   ***      0                                  0           print $out "\=
n";                    # extra newline after header
284                                                       }
285=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
286                                                       # this loop can n=
ot be implemented as a foreach loop as the body
287                                                       # is dependant on=
 <IN> being evaluated lazily
288=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
289   ***      0                                  0       while ( my $line =
=3D <$in> ) {
290=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
291                                                           # everything =
after the line starting with #perl is eval'ed
292   ***      0      0      0                    0           if ( $line =
=3D~ /^#perl/ && $options{feature_file} ) {
293=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
294                                                               # OUT was=
/is used at the output filehandle in eval'ed scripts
295                                                               # e.g. fe=
ature.pl or feature_h.in
296   ***      0                                  0               local *OU=
T =3D $out;
297   ***      0                                  0               my $text =
=3D do { local $/; <$in> };
      ***      0                                  0=20=20=20
      ***      0                                  0=20=20=20
298=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
299                                                               # interop=
late @foo@ values
300   ***      0                                  0               $text =3D=
~ s{ \@ (\w+) \@ }{\$conf->data->get("$1")}gx;
301   ***      0                                  0               eval $tex=
t;
302   ***      0      0                           0               die $@ if=
 $@;
303   ***      0                                  0               last;
304                                                           }
305   ***      0      0                           0           if ( $options=
{conditioned_lines} ) {
306   ***      0      0                           0               if ( $lin=
e =3D~ m/^#CONDITIONED_LINE\(([^)]+)\):(.*)/s ) {
      ***             0=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20
307   ***      0      0                           0                   next =
unless $conf->data->get($1);
308   ***      0                                  0                   $line=
 =3D $2;
309                                                               }
310                                                               elsif ( $=
line =3D~ m/^#INVERSE_CONDITIONED_LINE\(([^)]+)\):(.*)/s ) {
311   ***      0      0                           0                   next =
if $conf->data->get($1);
312   ***      0                                  0                   $line=
 =3D $2;
313                                                               }
314                                                           }
315=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
316                                                           # interpolate=
 gmake-ish expansions..
317   ***      0      0                           0           if ( $options=
{expand_gmake_syntax} ) {
318   ***      0                                  0               my $any_g=
make;
319   ***      0                                  0           GMAKES:
320                                                               $any_gmak=
e =3D 0;
321=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
322   ***      0      0                           0               if (
323                                                                   $line=
 =3D~ s{\$ \( wildcard \s+ ([^)]+) \)}{
324   ***      0                                  0                   join =
(' ', glob $1)
325                                                               }egx
326                                                                   )
327                                                               {
328   ***      0                                  0                   $any_=
gmake++;
329                                                               }
330=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
331   ***      0      0                           0               if (
332                                                                   $line=
 =3D~ s{\$ \( notdir \s+ ([^)]+) \)}{
333   ***      0                                  0                   join =
(' ',
334   ***      0                                  0                       m=
ap { (File::Spec->splitpath($_))[2] }
335                                                                        =
   split(' ', $1)
336                                                                   )
337                                                               }egx
338                                                                   )
339                                                               {
340   ***      0                                  0                   $any_=
gmake++;
341                                                               }
342=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
343                                                               # documen=
ted as removing any .-based suffix
344   ***      0      0                           0               if (
345                                                                   $line=
 =3D~ s{\$ \( basename \s+ ([^)]+) \)}{
346   ***      0                                  0                   join =
(' ',
347   ***      0                                  0                       m=
ap {
348   ***      0                                  0                        =
   my @split =3D File::Spec->splitpath($_);
349   ***      0                                  0                        =
   $split[2] =3D~ s/\.[^.]*$//;
350                                                                        =
   File::Spec->catpath(@split);
351                                                                       }=
 split(' ', $1)
352                                                                   )
353                                                               }egx
354                                                                   )
355                                                               {
356   ***      0                                  0                   $any_=
gmake++;
357                                                               }
358=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
359   ***      0      0                           0               if (
360                                                                   $line=
 =3D~ s{\$ \( addprefix \s+ ([^,]+) \s* , \s* ([^)]+) \)}{
361   ***      0                                  0                   my ($=
prefix,$list) =3D ($1, $2);
362   ***      0                                  0                   join =
(' ',
363   ***      0                                  0                       m=
ap { $_ =3D $prefix . $_, $_ }
364                                                                        =
   split(' ', $list)
365                                                                   )
366                                                               }egx
367                                                                   )
368                                                               {
369   ***      0                                  0                   $any_=
gmake++;
370                                                               }
371=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
372                                                               # we migh=
t have only gotten the innermost expression. try again.
373   ***      0      0                           0               goto GMAK=
ES if $any_gmake;
374                                                           }
375=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
376                                                           # interoplate=
 @foo@ values
377   ***      0                                  0           $line =3D~ s{=
 \@ (\w+) \@ }{
378   ***      0      0                           0               if(define=
d(my $val=3D$conf->data->get($1))) {
379                                                                   #use =
Data::Dumper;warn Dumper("val for $1 is ",$val);
380   ***      0                                  0                   $val;
381                                                               } else {
382   ***      0                                  0                   warn =
"value for '$1' in $source is undef";
383   ***      0                                  0                   '';
384                                                               }
385                                                           }egx;
386=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
387   ***      0      0                           0           if ( $options=
{replace_slashes} ) {
388   ***      0      0                           0               if ( $lin=
e =3D~ m{/$} ) {
389   ***      0                                  0                   die "=
$source:$.: line ends in a slash\n";
390                                                               }
391   ***      0                                  0               $line =3D=
~ s{(/+)}{
392   ***      0                                  0                   my $l=
en =3D length $1;
393   ***      0                                  0                   my $s=
lash =3D $conf->data->get('slash');
394   ***      0      0                           0                   '/' x=
 ($len/2) . ($len%2 ? $slash : '');
395                                                               }eg;
396=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
397                                                               # replace=
 \* with \\*, so make will not eat the \
398   ***      0                                  0               $line =3D=
~ s{(\\\*)}{\\$1}g;
399                                                           }
400=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
401   ***      0                                  0           print $out $l=
ine;
402                                                       }
403=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
404   ***      0      0                           0       close($in)  or di=
e "Can't close $source: $!";
405   ***      0      0                           0       close($out) or di=
e "Can't close $target: $!";
406=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
407   ***      0                                  0       move_if_diff( "$t=
arget.tmp", $target, $options{ignore_pattern} );
408                                                   }
409=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
410                                                   =3Ditem C<_run_comman=
d($command, $out, $err)>
411=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
412                                                   Runs the specified co=
mmand. Output is directed to the file specified by
413                                                   C<$out>, warnings and=
 errors are directed to the file specified by C<$err>.
414=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
415                                                   =3Dcut
416=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
417                                                   sub _run_command {
418   ***      0                    0             0       my ( $command, $o=
ut, $err, $verbose ) =3D @_;
419=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
420   ***      0      0                           0       if ($verbose) {
421   ***      0                                  0           print "$comma=
nd\n";
422                                                       }
423=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
424                                                       # Mostly copied f=
rom Parrot::Test.pm
425   ***      0                                  0       foreach ( $out, $=
err ) {
426   ***      0      0      0                    0           $_ =3D File::=
Spec->devnull
427                                                               if $_ and=
 $_ eq '/dev/null';
428                                                       }
429=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
430   ***      0      0      0                    0       if ( $out and $er=
r and $out eq $err ) {
      ***                    0=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20
431   ***      0                                  0           $err =3D "&ST=
DOUT";
432                                                       }
433=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
434   ***      0      0                           0       local *OLDOUT if =
$out;
435   ***      0      0                           0       local *OLDERR if =
$err;
436=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
437                                                       # Save the old fi=
lehandles; we must not let them get closed.
438   ***      0      0      0                    0       open OLDOUT, ">&S=
TDOUT" or die "Can't save     stdout" if $out;
439   ***      0      0      0                    0       open OLDERR, ">&S=
TDERR" or die "Can't save     stderr" if $err;
440=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
441   ***      0      0      0                    0       open STDOUT, ">",=
 "$out" or die "Can't redirect stdout" if $out;
442   ***      0      0      0                    0       open STDERR, ">$e=
rr" or die "Can't redirect stderr" if $err;
443=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
444   ***      0                                  0       system $command;
445   ***      0                                  0       my $exit_code =3D=
 $? >> 8;
446=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
447   ***      0      0      0                    0       close STDOUT or d=
ie "Can't close    stdout" if $out;
448   ***      0      0      0                    0       close STDERR or d=
ie "Can't close    stderr" if $err;
449=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
450   ***      0      0      0                    0       open STDOUT, ">&O=
LDOUT" or die "Can't restore  stdout" if $out;
451   ***      0      0      0                    0       open STDERR, ">&O=
LDERR" or die "Can't restore  stderr" if $err;
452=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
453   ***      0      0                           0       if ($verbose) {
454   ***      0                                  0           foreach ( $ou=
t, $err ) {
455   ***      0      0      0                    0               if (   ( =
defined($_) )
      ***                    0=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20
456                                                                   && ( =
$_ ne File::Spec->devnull )
457                                                                   && ( =
!m/^&/ ) )
458                                                               {
459   ***      0                                  0                   open(=
 my $out, "<", $_ );
460   ***      0                                  0                   print=
 <$out>;
461   ***      0                                  0                   close=
 $out;
462                                                               }
463                                                           }
464                                                       }
465=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
466   ***      0                                  0       return $exit_code;
467                                                   }
468=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
469                                                   =3Ditem C<cc_gen($sou=
rce)>
470=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
471                                                   Generates F<test.c> f=
rom the specified source file.
472=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
473                                                   =3Dcut
474=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
475                                                   sub cc_gen {
476   ***      0                    0      1      0       my ($source) =3D =
@_;
477=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
478   ***      0                                  0       genfile( $source,=
 "test.c" );
479                                                   }
480=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
481                                                   =3Ditem C<cc_build($c=
c_args, $link_args)>
482=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
483                                                   These items are used =
from current config settings:
484=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
485                                                     $cc, $ccflags, $ldo=
ut, $o, $link, $linkflags, $cc_exe_out, $exe, $libs
486=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
487                                                   Calls the compiler an=
d linker on F<test.c>.
488=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
489                                                   =3Dcut
490=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
491                                                   sub cc_build {
492   ***      0                    0      1      0       my ( $cc_args, $l=
ink_args ) =3D @_;
493=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
494   ***      0      0                           0       $cc_args   =3D ''=
 unless defined $cc_args;
495   ***      0      0                           0       $link_args =3D ''=
 unless defined $link_args;
496=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
497   ***      0                                  0       my $verbose =3D $=
conf->options->get('verbose');
498=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
499   ***      0                                  0       my ( $cc, $ccflag=
s, $ldout, $o, $link, $linkflags, $cc_exe_out, $exe, $libs ) =3D
500                                                           $conf->data->=
get(
501                                                           qw(cc ccflags=
 ld_out o link linkflags
502                                                               cc_exe_ou=
t exe libs)
503                                                           );
504=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
505   ***      0      0                           0       _run_command( "$c=
c $ccflags $cc_args -I./include -c test.c", 'test.cco', 'test.cco', $verbos=
e )
506                                                           and confess "=
C compiler failed (see test.cco)";
507=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
508   ***      0      0                           0       _run_command( "$l=
ink $linkflags test$o $link_args ${cc_exe_out}test$exe $libs",
509                                                           'test.ldo', '=
test.ldo', $verbose )
510                                                           and confess "=
Linker failed (see test.ldo)";
511                                                   }
512=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
513                                                   =3Ditem C<cc_run()>
514=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
515                                                   Calls the F<test> (or=
 F<test.exe>) executable. Any output is directed to
516                                                   F<test.out>.
517=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
518                                                   =3Dcut
519=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
520                                                   sub cc_run {
521   ***      0                    0      1      0       my $exe     =3D $=
conf->data->get('exe');
522   ***      0                                  0       my $slash   =3D $=
conf->data->get('slash');
523   ***      0                                  0       my $verbose =3D $=
conf->options->get('verbose');
524=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
525   ***      0      0      0                    0       if ( defined( $_[=
0] ) && length( $_[0] ) ) {
526   ***      0                                  0           local $" =3D =
' ';
527   ***      0                                  0           _run_command(=
 ".${slash}test${exe} @_", './test.out', undef, $verbose );
528                                                       }
529                                                       else {
530   ***      0                                  0           _run_command(=
 ".${slash}test${exe}", './test.out', undef, $verbose );
531                                                       }
532=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
533   ***      0                                  0       my $output =3D _s=
lurp('./test.out');
534=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
535   ***      0                                  0       return $output;
536                                                   }
537=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
538                                                   =3Ditem C<cc_run_capt=
ure()>
539=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
540                                                   Same as C<cc_run()> e=
xcept that warnings and errors are also directed to
541                                                   F<test.out>.
542=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
543                                                   =3Dcut
544=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
545                                                   sub cc_run_capture {
546   ***      0                    0      1      0       my $exe     =3D $=
conf->data->get('exe');
547   ***      0                                  0       my $slash   =3D $=
conf->data->get('slash');
548   ***      0                                  0       my $verbose =3D $=
conf->options->get('verbose');
549=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
550   ***      0      0      0                    0       if ( defined( $_[=
0] ) && length( $_[0] ) ) {
551   ***      0                                  0           local $" =3D =
' ';
552   ***      0                                  0           _run_command(=
 ".${slash}test${exe} @_", './test.out', './test.out', $verbose );
553                                                       }
554                                                       else {
555   ***      0                                  0           _run_command(=
 ".${slash}test${exe}", './test.out', './test.out', $verbose );
556                                                       }
557=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
558   ***      0                                  0       my $output =3D _s=
lurp('./test.out');
559=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
560   ***      0                                  0       return $output;
561                                                   }
562=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
563                                                   =3Ditem C<cc_clean()>
564=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
565                                                   Cleans up all files i=
n the root folder that match the glob F<test.*>.
566=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
567                                                   =3Dcut
568=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
569                                                   sub cc_clean {
570   ***      0                    0      1      0       unlink map "test$=
_", qw( .c .cco .ldo .out), $conf->data->get(qw( o exe ));
571                                                   }
572=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
573                                                   =3Ditem C<capture_out=
put($command)>
574=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
575                                                   Executes the given co=
mmand. The command's output (both stdout and stderr), and
576                                                   its return status is =
returned as a 3-tuple. B<STDERR> is redirected to
577                                                   F<test.err> during th=
e execution, and deleted after the command's run.
578=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
579                                                   =3Dcut
580=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
581                                                   sub capture_output {
582   ***      0                    0      1      0       my $command =3D j=
oin ' ', @_;
583=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
584                                                       # disable STDERR
585   ***      0                                  0       open OLDERR, ">&S=
TDERR";
586   ***      0                                  0       open STDERR, ">",=
 "test.err";
587=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
588   ***      0                                  0       my $output =3D `$=
command`;
589   ***      0      0                           0       my $retval =3D ( =
$? =3D=3D -1 ) ? -1 : ( $? >> 8 );
590=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
591                                                       # reenable STDERR
592   ***      0                                  0       close STDERR;
593   ***      0                                  0       open STDERR, ">&O=
LDERR";
594=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
595                                                       # slurp stderr
596   ***      0                                  0       my $out_err =3D _=
slurp('./test.err');
597=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
598                                                       # cleanup
599   ***      0                                  0       unlink "test.err";
600=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
601   ***      0      0                           0       return ( $output,=
 $out_err, $retval ) if wantarray;
602   ***      0                                  0       return $output;
603                                                   }
604=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
605                                                   =3Ditem C<check_progs=
([$programs])>
606=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
607                                                   Where C<$programs> ma=
y be either a scalar with the name of a single program or
608                                                   an array ref of progr=
ams to search the current C<PATH> for.  The first matching
609                                                   program name is retur=
ned or C<undef> on failure.  Note: this function only
610                                                   returns the name of t=
he program and not its complete path.
611=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
612                                                   This function is simi=
lar to C<autoconf>'s C<AC_CHECK_PROGS> macro.
613=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
614                                                   =3Dcut
615=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
616                                                   sub check_progs {
617            6                    6      1     44       my ( $progs, $ver=
bose ) =3D @_;
618=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
619            6    100                          88       $progs =3D [$prog=
s] unless ref $progs eq 'ARRAY';
620=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
621   ***      6     50                          38       print "checking f=
or program: ", join( " or ", @$progs ), "\n" if $verbose;
622            6                                 50       foreach my $prog =
(@$progs) {
623            6                                 25           my $util =3D =
$prog;
624=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
625                                                           # use the fir=
st word in the string to ignore any options
626            6                                 97           ($util) =3D $=
util =3D~ /(\S+)/;
627            6                                 72           my $path =3D =
which($util);
628=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
629   ***      6     50                         113           if ($verbose)=
 {
630   ***      0      0                           0               print "$p=
ath is executable\n" if $path;
631                                                           }
632=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
633            6    100                          74           return $prog =
if $path;
634                                                       }
635=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
636            4                                103       return;
637                                                   }
638=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
639                                                   =3Ditem C<_slurp($fil=
ename)>
640=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
641                                                   Slurps C<$filename> i=
nto memory and returns it as a string.
642=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
643                                                   =3Dcut
644=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
645                                                   sub _slurp {
646            1                    1             9       my $filename =3D =
shift;
647=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
648   ***      1     50                         108       open( my $fh, '<'=
, $filename ) or die "Can't open $filename: $!";
649            1                                  6       my $text =3D do {=
 local $/; <$fh> };
               1                                 14=20=20=20
               1                                168=20=20=20
650   ***      1     50                          45       close($fh) or die=
 "Can't close $filename: $!";
651=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
652            1                                 18       return $text;
653                                                   }
654=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
655                                                   =3Dback
656=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
657                                                   =3Dhead1 SEE ALSO
658=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
659                                                   =3Dover 4
660=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
661                                                   =3Ditem C<Parrot::Con=
figure::RunSteps>
662=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
663                                                   =3Ditem F<docs/config=
uration.pod>
664=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
665                                                   =3Dback
666=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
667                                                   =3Dcut
668=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
669                                                   1;
670=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
671                                                   # Local Variables:
672                                                   #   mode: cperl
673                                                   #   cperl-indent-leve=
l: 4
674                                                   #   fill-column: 100
675                                                   # End:
676                                                   # vim: expandtab shif=
twidth=3D4:


Branches
--------

line  err      %   true  false   branch
----- --- ------ ------ ------   ------
68           100      2      2   unless defined $new
70    ***     50      2      0   if ($new =3D~ /\S/)
91    ***      0      0      0   if ($input)
109   ***     50      0      6   unless open my $file, '<', $filename
112   ***     50      0      4   if defined $ignore_pattern and /$ignore_pa=
ttern/
115   ***     50      0      6   unless close $file
133   ***     50      2      0   if (-r $to)
136   ***     50      0      2   if $from_sum =3D=3D $to_sum
250   ***      0      0      0   unless open my $in, '<', $source
252   ***      0      0      0   unless open my $out, '>', "$target.tmp"
254   ***      0      0      0   if (not exists $options{'makefile'} and $t=
arget =3D~ /makefile$/i)
258   ***      0      0      0   if ($options{'makefile'})
259   ***      0      0      0   unless exists $options{'comment_type'}
260   ***      0      0      0   unless exists $options{'replace_slashes'}
261   ***      0      0      0   unless exists $options{'conditioned_lines'}
264   ***      0      0      0   if ($options{'comment_type'})
267   ***      0      0      0   if ($options{'comment_type'} eq '#') { }
      ***      0      0      0   elsif ($options{'comment_type'} eq '/*') {=
 }
292   ***      0      0      0   if ($line =3D~ /^#perl/ and $options{'feat=
ure_file'})
302   ***      0      0      0   if $@
305   ***      0      0      0   if ($options{'conditioned_lines'})
306   ***      0      0      0   if ($line =3D~ /^#CONDITIONED_LINE\(([^)]+=
)\):(.*)/s) { }
      ***      0      0      0   elsif ($line =3D~ /^#INVERSE_CONDITIONED_L=
INE\(([^)]+)\):(.*)/s) { }
307   ***      0      0      0   unless $conf->data->get($1)
311   ***      0      0      0   if $conf->data->get($1)
317   ***      0      0      0   if ($options{'expand_gmake_syntax'})
322   ***      0      0      0   if ($line =3D~ s/\$ \( wildcard \s+ ([^)]+=
) \)/join ' ', glob($1);/egx)
331   ***      0      0      0   if ($line =3D~ s/\$ \( notdir \s+ ([^)]+) =
\)/join ' ', map({('File::Spec'->splitpath($_))[2];} split(" ", $1, 0));/eg=
x)
344   ***      0      0      0   if ($line =3D~ s[\$ \( basename \s+ ([^)]+=
) \)][join ' ', map({my(@split) =3D 'File::Spec'->splitpath($_);
$split[2] =3D~ s/\.[^.]*$//;
'File::Spec'->catpath(@split);} split(" ", $1, 0));]egx)
359   ***      0      0      0   if ($line =3D~ s/\$ \( addprefix \s+ ([^,]=
+) \s* , \s* ([^)]+) \)/my($prefix, $list) =3D ($1, $2);
join ' ', map({$_ =3D $prefix . $_, $_;} split(" ", $list, 0));/egx)
373   ***      0      0      0   if $any_gmake
378   ***      0      0      0   if (defined(my $val =3D $conf->data->get($=
1))) { }
387   ***      0      0      0   if ($options{'replace_slashes'})
388   ***      0      0      0   if ($line =3D~ m[/$])
394   ***      0      0      0   $len % 2 ? :
404   ***      0      0      0   unless close $in
405   ***      0      0      0   unless close $out
420   ***      0      0      0   if ($verbose)
426   ***      0      0      0   if $_ and $_ eq '/dev/null'
430   ***      0      0      0   if ($out and $err and $out eq $err)
434   ***      0      0      0   if $out
435   ***      0      0      0   if $err
438   ***      0      0      0   if $out
439   ***      0      0      0   if $err
441   ***      0      0      0   if $out
442   ***      0      0      0   if $err
447   ***      0      0      0   if $out
448   ***      0      0      0   if $err
450   ***      0      0      0   if $out
451   ***      0      0      0   if $err
453   ***      0      0      0   if ($verbose)
455   ***      0      0      0   if (defined $_ and $_ ne 'File::Spec'->dev=
null and not /^&/)
494   ***      0      0      0   unless defined $cc_args
495   ***      0      0      0   unless defined $link_args
505   ***      0      0      0   if _run_command("$cc $ccflags $cc_args -I.=
/include -c test.c", 'test.cco', 'test.cco', $verbose)
508   ***      0      0      0   if _run_command("$link $linkflags test$o $=
link_args ${cc_exe_out}test$exe $libs", 'test.ldo', 'test.ldo', $verbose)
525   ***      0      0      0   if (defined $_[0] and length $_[0]) { }
550   ***      0      0      0   if (defined $_[0] and length $_[0]) { }
589   ***      0      0      0   $? =3D=3D -1 ? :
601   ***      0      0      0   if wantarray
619          100      3      3   unless ref $progs eq 'ARRAY'
621   ***     50      0      6   if $verbose
629   ***     50      0      6   if ($verbose)
630   ***      0      0      0   if $path
633          100      2      4   if $path
648   ***     50      0      1   unless open my $fh, '<', $filename
650   ***     50      0      1   unless close $fh


Conditions
----------

and 3 conditions

line  err      %     !l  l&&!r   l&&r   expr
----- --- ------ ------ ------ ------   ----
112   ***     33      4      0      0   defined $ignore_pattern and /$ignor=
e_pattern/
254   ***      0      0      0      0   not exists $options{'makefile'} and=
 $target =3D~ /makefile$/i
292   ***      0      0      0      0   $line =3D~ /^#perl/ and $options{'f=
eature_file'}
426   ***      0      0      0      0   $_ and $_ eq '/dev/null'
430   ***      0      0      0      0   $out and $err
      ***      0      0      0      0   $out and $err and $out eq $err
455   ***      0      0      0      0   defined $_ and $_ ne 'File::Spec'->=
devnull
      ***      0      0      0      0   defined $_ and $_ ne 'File::Spec'->=
devnull and not /^&/
525   ***      0      0      0      0   defined $_[0] and length $_[0]
550   ***      0      0      0      0   defined $_[0] and length $_[0]

or 2 conditions

line  err      %      l     !l   expr
----- --- ------ ------ ------   ----
438   ***      0      0      0   open OLDOUT, '>&STDOUT' or die q[Can't sav=
e     stdout]
439   ***      0      0      0   open OLDERR, '>&STDERR' or die q[Can't sav=
e     stderr]
441   ***      0      0      0   open STDOUT, '>', "$out" or die q[Can't re=
direct stdout]
442   ***      0      0      0   open STDERR, ">$err" or die q[Can't redire=
ct stderr]
447   ***      0      0      0   close STDOUT or die q[Can't close    stdou=
t]
448   ***      0      0      0   close STDERR or die q[Can't close    stder=
r]
450   ***      0      0      0   open STDOUT, '>&OLDOUT' or die q[Can't res=
tore  stdout]
451   ***      0      0      0   open STDERR, '>&OLDERR' or die q[Can't res=
tore  stderr]


Covered Subroutines
-------------------

Subroutine     Count Location=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20
-------------- ----- --------------------------------
BEGIN             12 lib/Parrot/Configure/Step.pm:26=20
BEGIN             12 lib/Parrot/Configure/Step.pm:27=20
BEGIN             12 lib/Parrot/Configure/Step.pm:29=20
BEGIN             12 lib/Parrot/Configure/Step.pm:31=20
BEGIN             12 lib/Parrot/Configure/Step.pm:32=20
BEGIN             12 lib/Parrot/Configure/Step.pm:33=20
BEGIN             12 lib/Parrot/Configure/Step.pm:34=20
BEGIN             12 lib/Parrot/Configure/Step.pm:35=20
BEGIN             12 lib/Parrot/Configure/Step.pm:36=20
BEGIN             12 lib/Parrot/Configure/Step.pm:37=20
_slurp             1 lib/Parrot/Configure/Step.pm:646
check_progs        6 lib/Parrot/Configure/Step.pm:617
copy_if_diff       2 lib/Parrot/Configure/Step.pm:130
file_checksum      6 lib/Parrot/Configure/Step.pm:108
integrate          4 lib/Parrot/Configure/Step.pm:61=20
move_if_diff       1 lib/Parrot/Configure/Step.pm:156

Uncovered Subroutines
---------------------

Subroutine     Count Location=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20
-------------- ----- --------------------------------
_run_command       0 lib/Parrot/Configure/Step.pm:418
capture_output     0 lib/Parrot/Configure/Step.pm:582
cc_build           0 lib/Parrot/Configure/Step.pm:492
cc_clean           0 lib/Parrot/Configure/Step.pm:570
cc_gen             0 lib/Parrot/Configure/Step.pm:476
cc_run             0 lib/Parrot/Configure/Step.pm:521
cc_run_capture     0 lib/Parrot/Configure/Step.pm:546
genfile            0 lib/Parrot/Configure/Step.pm:248
prompt             0 lib/Parrot/Configure/Step.pm:85=20


lib/Parrot/Configure/Step/Base.pm

line  err   stmt   bran   cond    sub    pod   time   code
1                                                     # Copyright (C) 2001-=
2005, The Perl Foundation.
2                                                     # $Id: Base.pm 17090 =
2007-02-20 20:06:55Z paultcochrane $
3=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
4                                                     =3Dpod
5=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
6                                                     =3Dhead1 NAME
7=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
8                                                     Parrot::Configure::St=
ep::Base - Configuration Step Base Class
9=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
10                                                    =3Dhead1 SYNOPSIS
11=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
12                                                        use base qw(Parro=
t::Configure::Step::Base);
13=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
14                                                    =3Dhead1 DESCRIPTION
15=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
16                                                    The C<Parrot::Configu=
re::Step::Base> module contains utility methods that
17                                                    should be inherited b=
y all configuration steps.
18=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
19                                                    =3Dhead1 USAGE
20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
21                                                    =3Dhead2 Import Param=
eters
22=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
23                                                    This module accepts n=
o arguments to it's C<import> method and exports no
24                                                    I<symbols>.
25=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
26                                                    =3Dcut
27=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
28                                                    package Parrot::Confi=
gure::Step::Base;
29=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
30            12                   12           261   use strict;
              12                                 54=20=20=20
              12                                345=20=20=20
31            12                   12           395   use warnings;
              12                                600=20=20=20
              12                                283=20=20=20
32=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
33                                                    =3Dhead2 Methods
34=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
35                                                    =3Dhead3 Constructors
36=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
37                                                    =3Dover 4
38=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
39                                                    =3Ditem * C<new()>
40=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
41                                                    Basic constructor.
42=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
43                                                    Accepts no arguments =
and returns a L<Parrot::Configure::Step::> object.
44=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
45                                                    =3Dcut
46=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
47                                                    sub new {
48            13                   13      1    109       my $class =3D shi=
ft;
49=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
50    ***     13            33                  542       return bless {}, =
ref $class || $class;
51                                                    }
52=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
53                                                    =3Dback
54=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
55                                                    =3Dhead3 Object Metho=
ds
56=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
57                                                    =3Dover 4
58=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
59                                                    =3Ditem * C<result()>
60=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
61                                                    Accepts no arguments =
and returns the value of C<$result> from the inheriting
62                                                    classes namespace.
63=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
64                                                    =3Dcut
65=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
66                                                    sub result {
67            11                   11      1     62       my $self =3D shif=
t;
68=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
69            11                                282       return $self->{re=
sult};
70                                                    }
71=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
72                                                    =3Ditem * C<set_resul=
t()>
73=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
74                                                    Accepts a scalar valu=
es and assigns it to the inheriting classes C<$result>
75                                                    variable.  Returns th=
e inheriting classes name.
76=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
77                                                    =3Dcut
78=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
79                                                    sub set_result {
80             1                    1      1      9       my ( $self, $resu=
lt ) =3D @_;
81=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
82             1                                  9       $self->{result} =
=3D $result;
83=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
84             1                                 12       return $self;
85                                                    }
86=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
87                                                    =3Dback
88=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
89                                                    =3Dhead3 Class Methods
90=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
91                                                    =3Dover 4
92=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
93                                                    =3Ditem * C<descripti=
on()>
94=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
95                                                    Accepts no arguments =
and returns the value of C<$description> from the
96                                                    inheriting classes na=
mespace.
97=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
98                                                    This method also work=
s as an object method.
99=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
100                                                   =3Dcut
101=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
102                                                   sub description {
103           12                   12      1     84       my $class =3D shi=
ft;
104   ***     12            66                  177       $class =3D ref $c=
lass || $class;
105                                                       {
106           12                   12           290           no strict 're=
fs';
              12                                 63=20=20=20
              12                                175=20=20=20
              12                                 68=20=20=20
107           12                                 64           return ${ $cl=
ass . "::description" };
              12                                267=20=20=20
108                                                       }
109                                                   }
110=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
111                                                   =3Ditem * C<args()>
112=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
113                                                   Accepts no arguments =
and returns the value of C<@args> from the inheriting
114                                                   classes namespace.
115=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
116                                                   This method also work=
s as an object method.
117=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
118                                                   =3Dcut
119=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
120                                                   sub args {
121            2                    2      1     15       my $class =3D shi=
ft;
122   ***      2            66                   58       $class =3D ref $c=
lass || $class;
123                                                       {
124           12                   12           232           no strict 're=
fs';
              12                                 59=20=20=20
              12                                144=20=20=20
               2                                 12=20=20=20
125            2                                  8           return @{ $cl=
ass . "::args" };
               2                                 77=20=20=20
126                                                       }
127                                                   }
128=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
129                                                   =3Dback
130=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
131                                                   =3Dhead1 AUTHOR
132=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
133                                                   Joshua Hoblitt C<jhob=
litt@cpan.org>
134=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
135                                                   =3Dhead1 SEE ALSO
136=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
137                                                   F<docs/configuration.=
pod>, L<Parrot::Configure>, L<Parrot::Configure::Data>,
138                                                   L<Parrot::Configure::=
Step>
139=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
140                                                   =3Dcut
141=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
142                                                   1;
143=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
144                                                   # Local Variables:
145                                                   #   mode: cperl
146                                                   #   cperl-indent-leve=
l: 4
147                                                   #   fill-column: 100
148                                                   # End:
149                                                   # vim: expandtab shif=
twidth=3D4:


Conditions
----------

or 3 conditions

line  err      %      l  !l&&r !l&&!r   expr
----- --- ------ ------ ------ ------   ----
50    ***     33      0     13      0   ref $class || $class
104   ***     66     11      1      0   ref $class || $class
122   ***     66      1      1      0   ref $class || $class


Covered Subroutines
-------------------

Subroutine  Count Location=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20
----------- ----- -------------------------------------
BEGIN          12 lib/Parrot/Configure/Step/Base.pm:106
BEGIN          12 lib/Parrot/Configure/Step/Base.pm:124
BEGIN          12 lib/Parrot/Configure/Step/Base.pm:30=20
BEGIN          12 lib/Parrot/Configure/Step/Base.pm:31=20
args            2 lib/Parrot/Configure/Step/Base.pm:121
description    12 lib/Parrot/Configure/Step/Base.pm:103
new            13 lib/Parrot/Configure/Step/Base.pm:48=20
result         11 lib/Parrot/Configure/Step/Base.pm:67=20
set_result      1 lib/Parrot/Configure/Step/Base.pm:80=20


lib/Parrot/Configure/Step/List.pm

line  err   stmt   bran   cond    sub    pod   time   code
1                                                     # Copyright (C) 2001-=
2006, The Perl Foundation.
2                                                     # $Id: List.pm 18157 =
2007-04-12 00:32:35Z jkeenan $
3                                                     package Parrot::Confi=
gure::Step::List;
4              3                    3            69   use strict;
               3                                 15=20=20=20
               3                                 90=20=20=20
5              3                    3            60   use warnings;
               3                                 16=20=20=20
               3                                130=20=20=20
6              3                    3            62   use base qw( Exporter=
 );
               3                                 16=20=20=20
               3                                 52=20=20=20
7                                                     our @EXPORT_OK =3D qw=
( get_steps_list );
8=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
9                                                     # EDIT HERE TO ADD NE=
W TESTS
10                                                    my @steps =3D qw(
11                                                        init::manifest
12                                                        init::defaults
13                                                        init::install
14                                                        init::miniparrot
15                                                        init::hints
16                                                        init::headers
17                                                        inter::progs
18                                                        inter::make
19                                                        inter::lex
20                                                        inter::yacc
21                                                        auto::gcc
22                                                        auto::msvc
23                                                        init::optimize
24                                                        inter::shlibs
25                                                        inter::libparrot
26                                                        inter::charset
27                                                        inter::encoding
28                                                        inter::types
29                                                        inter::ops
30                                                        inter::pmc
31                                                        auto::alignptrs
32                                                        auto::headers
33                                                        auto::sizes
34                                                        auto::byteorder
35                                                        auto::va_ptr
36                                                        auto::pack
37                                                        auto::format
38                                                        auto::isreg
39                                                        auto::jit
40                                                        gen::cpu
41                                                        auto::funcptr
42                                                        auto::cgoto
43                                                        auto::inline
44                                                        auto::gc
45                                                        auto::memalign
46                                                        auto::signal
47                                                        auto::socklen_t
48                                                        auto::env
49                                                        auto::aio
50                                                        auto::gmp
51                                                        auto::readline
52                                                        auto::gdbm
53                                                        auto::snprintf
54                                                        auto::perldoc
55                                                        auto::python
56                                                        auto::m4
57                                                        auto::cpu
58                                                        gen::icu
59                                                        gen::revision
60                                                        gen::config_h
61                                                        gen::core_pmcs
62                                                        gen::parrot_inclu=
de
63                                                        gen::languages
64                                                        gen::makefiles
65                                                        gen::platform
66                                                        gen::config_pm
67                                                    );
68=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
69             3                    3      1    301   sub get_steps_list { =
return @steps; }
70=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
71                                                    1;
72=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
73                                                    #################### =
DOCUMENTATION ####################
74=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
75                                                    =3Dhead1 NAME
76=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
77                                                    Parrot::Configure::St=
ep::List - Get sequence of configuration steps
78=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
79                                                    =3Dhead1 SYNOPSIS
80=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
81                                                        use Parrot::Confi=
gure::Step::List qw( get_steps_list );
82=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
83                                                        @steps =3D get_st=
eps_list();
84=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
85                                                    =3Dhead1 DESCRIPTION
86=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
87                                                    Parrot::Configure::St=
ep::List exports on demand a single subroutine,
88                                                    C<get_steps_list()>. =
 This subroutine returns a list of Parrot's configuration
89                                                    steps in the order in=
 which they are to be executed.  To change the order in
90                                                    which the steps are e=
xecuted, edit C<@steps> inside this module.
91=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
92                                                    =3Dhead1 SUBROUTINE
93=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
94                                                    =3Dhead2 C<get_steps_=
list()>
95=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
96                                                    =3Dover 4
97=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
98                                                    =3Ditem * Purpose
99=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
100                                                   Provide Parrot config=
uration steps in their order of execution.
101=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
102                                                   =3Ditem * Arguments
103=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
104                                                   None.
105=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
106                                                   =3Ditem * Return Value
107=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
108                                                   List holding strings =
representing the configuration steps.
109=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
110                                                   =3Ditem * Comment
111=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
112                                                   =3Dback
113=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
114                                                   =3Dhead1 NOTES
115=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
116                                                   The functionality in =
this package was transferred from F<Configure.pl> by Jim
117                                                   Keenan.
118=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
119                                                   =3Dhead1 SEE ALSO
120=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
121                                                   F<Configure.pl>.
122=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
123                                                   =3Dcut
124=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
125                                                   # Local Variables:
126                                                   #   mode: cperl
127                                                   #   cperl-indent-leve=
l: 4
128                                                   #   fill-column: 100
129                                                   # End:
130                                                   # vim: expandtab shif=
twidth=3D4:


Covered Subroutines
-------------------

Subroutine     Count Location=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20
-------------- ----- ------------------------------------
BEGIN              3 lib/Parrot/Configure/Step/List.pm:4=20
BEGIN              3 lib/Parrot/Configure/Step/List.pm:5=20
BEGIN              3 lib/Parrot/Configure/Step/List.pm:6=20
get_steps_list     3 lib/Parrot/Configure/Step/List.pm:69


lib/Parrot/IO/Capture/Mini.pm

line  err   stmt   bran   cond    sub    pod   time   code
1                                                     # Copyright (C) 2007,=
 The Perl Foundation.
2                                                     # $Id: Mini.pm 17579 =
2007-03-17 22:52:33Z paultcochrane $
3                                                     package Parrot::IO::C=
apture::Mini;
4             14                   14           323   use strict;
              14                                 69=20=20=20
              14                                458=20=20=20
5             14                   14           263   use warnings;
              14                                 62=20=20=20
              14                                235=20=20=20
6=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
7                                                     sub TIEHANDLE {
8             15                   15           103       my $class =3D shi=
ft;
9             15                                165       bless [], $class;
10                                                    }
11=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
12                                                    sub PRINT {
13            52                   52           209       my $self =3D shif=
t;
14            52                                737       push @$self, join=
 '', @_;
15                                                    }
16=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
17                                                    sub READLINE {
18            15                   15           161       my $self =3D shif=
t;
19            15    100                         568       return wantarray =
? @$self : shift @$self;
20                                                    }
21=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
22                                                    1;
23=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
24                                                    ################### D=
OCUMENTATION ###################
25=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
26                                                    =3Dhead1 NAME
27=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
28                                                    Parrot::IO::Capture::=
Mini - capture messages printed to STDOUT or STDERR during Parrot testing
29=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
30                                                    =3Dhead1 SYNOPSIS
31=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
32                                                        use Parrot::IO::C=
apture::Mini;
33=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
34                                                    Tie C<STDOUT> or C<ST=
DERR>.
35=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
36                                                        $tie =3D tie *STD=
ERR, "Parrot::IO::Capture::Mini" or croak "Unable to tie";
37=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
38                                                    Call a function which=
 is likely to generate a warning or error message.
39=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
40                                                        $self =3D Parrot:=
:Ops2c::Utils->new( {
41                                                            argv         =
   =3D> [ qw( CSwitch  dan.ops dan.ops ) ],
42                                                            flag         =
   =3D> { dynamic =3D> 1 },
43                                                        } );
44=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
45                                                    Store what was captur=
ed in a variable, then C<untie>.
46=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
47                                                        $msg =3D $tie->RE=
ADLINE;
48                                                        untie *STDERR or =
croak "Unable to untie";
49=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
50                                                    Use that variable in =
a test.
51=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
52                                                        like($msg,
53                                                            qr/Ops file '=
dan\.ops' mentioned more than once!/,
54                                                            "Got expected=
 error message about mentioning same file twice");
55=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
56                                                    =3Dhead1 DESCRIPTION
57=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
58                                                    This package provides=
 the bare minimum level of functionality needed to
59                                                    capture messages prin=
ted to C<STDOUT> or C<STDERR> by Parrot build tools
60                                                    written in Perl 5.
61=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
62                                                    =3Dhead1 AUTHOR
63=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
64                                                    Adapted by Jim Keenan=
 from CPAN module IO::Capture::Tie_STDx.  Thanks as
65                                                    always to the authors=
 of IO::Capture, Mark Reynolds and Jon Morgan!
66=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
67                                                    =3Dhead1 SEE ALSO
68=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
69                                                    IO::Capture (L<http:/=
/search.cpan.org/dist/IO-Capture/>).
70=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
71                                                    =3Dcut
72=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
73                                                    # Local Variables:
74                                                    #   mode: cperl
75                                                    #   cperl-indent-leve=
l: 4
76                                                    #   fill-column: 100
77                                                    # End:
78                                                    # vim: expandtab shif=
twidth=3D4:


Branches
--------

line  err      %   true  false   branch
----- --- ------ ------ ------   ------
19           100      9      6   wantarray ? :


Covered Subroutines
-------------------

Subroutine Count Location=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20
---------- ----- --------------------------------
BEGIN         14 lib/Parrot/IO/Capture/Mini.pm:4=20
BEGIN         14 lib/Parrot/IO/Capture/Mini.pm:5=20
PRINT         52 lib/Parrot/IO/Capture/Mini.pm:13
READLINE      15 lib/Parrot/IO/Capture/Mini.pm:18
TIEHANDLE     15 lib/Parrot/IO/Capture/Mini.pm:8=20


lib/Parrot/Revision.pm

line  err   stmt   bran   cond    sub    pod   time   code
1                                                     # Copyright (C) 2005,=
 The Perl Foundation.
2                                                     # $Id: Revision.pm 17=
090 2007-02-20 20:06:55Z paultcochrane $
3=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
4                                                     =3Dhead1 NAME
5=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
6                                                     Parrot::Revision - SV=
N Revision
7=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
8                                                     =3Dhead1 SYNOPSIS
9=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20
10                                                        use Parrot::Revis=
ion;
11=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
12                                                        print $Parrot::Re=
vision::current;
13                                                        print $Parrot::Re=
vision::config;
14=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
15                                                    =3Dhead1 DESCRIPTION
16=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
17                                                    Get parrot's current =
and configure time revision.
18=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
19                                                    =3Dcut
20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
21                                                    package Parrot::Revis=
ion;
22=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
23             1                    1           881   use strict;
               1                                 15=20=20=20
               1                                 32=20=20=20
24             1                    1            24   use warnings;
               1                                  6=20=20=20
               1                                 20=20=20=20
25             1                    1            20   use File::Spec;
               1                                  5=20=20=20
               1                                 35=20=20=20
26=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
27                                                    our $svn_entries =3D =
undef;
28=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
29                                                    sub __get_revision {
30    ***      1     50             1            74       return 0 unless (=
 -e 'DEVELOPING' );
31             1                                 10       my $ent =3D ".svn=
/entries";
32=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
33             1                                  4       my $revision;
34=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
35                                                        # code taken from=
 pugs/util/version_h.pl rev 14410
36             1                                 41       my $nul =3D File:=
:Spec->devnull;
37    ***      1     50     33                71388       if ( my @svn_info=
 =3D qx/svn info 2>$nul/ and $? =3D=3D 0 ) {
      ***             0      0=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20
      ***             0      0=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20
38    ***      1     50                         151           if ( my ($lin=
e) =3D grep /^Revision:/, @svn_info ) {
39             1                                 61               ($revisio=
n) =3D $line =3D~ / (\d+)$/;
40                                                            }
41                                                        }
42                                                        elsif ( defined $=
svn_entries and -r $svn_entries ) {
43    ***      0      0                           0           open FH, '<',=
 $svn_entries
44                                                                or die "U=
nable to open file ($svn_entries). Aborting. Error returned was: $!";
45    ***      0                                  0           while (<FH>) {
46    ***      0      0                           0               /^ *commi=
tted-rev=3D.(\d+)./ or next;
47    ***      0                                  0               $revision=
 =3D $1;
48    ***      0                                  0               last;
49                                                            }
50    ***      0                                  0           close FH;
51                                                        }
52                                                        elsif ( my @svk_i=
nfo =3D qx/svk info 2>$nul/ and $? =3D=3D 0 ) {
53    ***      0      0                           0           if ( my ($lin=
e) =3D grep /(?:file|svn|https?)\b/, @svk_info ) {
      ***             0=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20
54    ***      0                                  0               ($revisio=
n) =3D $line =3D~ / (\d+)$/;
55                                                            }
56                                                            elsif ( my ($=
source_line) =3D grep /^(Copied|Merged) From/, @svk_info ) {
57    ***      0      0                           0               if ( my (=
$source_depot) =3D $source_line =3D~ /From: (.*?), Rev\. \d+/ ) {
58=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
59                                                                    # con=
vert /svk/trunk to //svk/trunk or /depot/svk/trunk
60    ***      0                                  0                   my ($=
depot_root) =3D map { m{Depot Path: (/[^/]*)} } @svk_info;
      ***      0                                  0=20=20=20
61    ***      0             0                    0                   $depo=
t_root ||=3D '/';
62    ***      0                                  0                   $sour=
ce_depot =3D $depot_root . $source_depot;
63    ***      0      0      0                    0                   if ( =
my @svk_info =3D qx/svk info $source_depot/ and $? =3D=3D 0 ) {
64    ***      0      0                           0                       i=
f ( my ($line) =3D grep /(?:file|svn|https?)\b/, @svk_info ) {
65    ***      0                                  0                        =
   ($revision) =3D $line =3D~ / (\d+)$/;
66                                                                        }
67                                                                    }
68                                                                }
69                                                            }
70                                                        }
71    ***      1            50                   72       return ( $revisio=
n || 0 );
72                                                    }
73=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
74                                                    our $current =3D __ge=
t_revision();
75                                                    our $config  =3D $cur=
rent;
76=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
77                                                    # check if Parrot::Co=
nfig is available
78             1                    1          1761   eval 'use Parrot::Con=
fig; $config =3D $PConfig{revision};';
               1                                  6=20=20=20
               1                                 38=20=20=20
79=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
80                                                    1;
81=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20=20
82                                                    # Local Variables:
83                                                    #   mode: cperl
84                                                    #   cperl-indent-leve=
l: 4
85                                                    #   fill-column: 100
86                                                    # End:
87                                                    # vim: expandtab shif=
twidth=3D4:


Branches
--------

line  err      %   true  false   branch
----- --- ------ ------ ------   ------
30    ***     50      0      1   unless -e 'DEVELOPING'
37    ***     50      1      0   if (my(@svn_info) =3D `svn info 2>$nul` an=
d $? =3D=3D 0) { }
      ***      0      0      0   elsif (defined $svn_entries and -r $svn_en=
tries) { }
      ***      0      0      0   elsif (my(@svk_info) =3D `svk info 2>$nul`=
 and $? =3D=3D 0) { }
38    ***     50      1      0   if (my($line) =3D grep(/^Revision:/, @svn_=
info))
43    ***      0      0      0   unless open FH, '<', $svn_entries
46    ***      0      0      0   unless /^ *committed-rev=3D.(\d+)./
53    ***      0      0      0   if (my($line) =3D grep(/(?:file|svn|https?=
)\b/, @svk_info)) { }
      ***      0      0      0   elsif (my($source_line) =3D grep(/^(Copied=
|Merged) From/, @svk_info)) { }
57    ***      0      0      0   if (my($source_depot) =3D $source_line =3D=
~ /From: (.*?), Rev\. \d+/)
63    ***      0      0      0   if (my(@svk_info) =3D `svk info $source_de=
pot` and $? =3D=3D 0)
64    ***      0      0      0   if (my($line) =3D grep(/(?:file|svn|https?=
)\b/, @svk_info))


Conditions
----------

and 3 conditions

line  err      %     !l  l&&!r   l&&r   expr
----- --- ------ ------ ------ ------   ----
37    ***     33      0      0      1   my(@svn_info) =3D `svn info 2>$nul`=
 and $? =3D=3D 0
      ***      0      0      0      0   defined $svn_entries and -r $svn_en=
tries
      ***      0      0      0      0   my(@svk_info) =3D `svk info 2>$nul`=
 and $? =3D=3D 0
63    ***      0      0      0      0   my(@svk_info) =3D `svk info $source=
_depot` and $? =3D=3D 0

or 2 conditions

line  err      %      l     !l   expr
----- --- ------ ------ ------   ----
61    ***      0      0      0   $depot_root ||=3D '/'
71    ***     50      1      0   $revision || 0


Covered Subroutines
-------------------

Subroutine     Count Location=20=20=20=20=20=20=20=20=20=20=20=20=20=20=20=
=20=20
-------------- ----- -------------------------
BEGIN              1 lib/Parrot/Revision.pm:23
BEGIN              1 lib/Parrot/Revision.pm:24
BEGIN              1 lib/Parrot/Revision.pm:25
BEGIN              1 lib/Parrot/Revision.pm:78
__get_revision     1 lib/Parrot/Revision.pm:30



------------=_1177712874-1687-207--

