From perl6-all-return-82228-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri Jun 22 04:49:17 2007
Return-Path: <perl6-all-return-82228-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5M8nEL9004018
	for <ktwarwic@flax9.uwaterloo.ca>; Fri, 22 Jun 2007 04:49:15 -0400
Received: (qmail 5571 invoked by uid 514); 22 Jun 2007 08:49:11 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 5566 invoked from network); 22 Jun 2007 08:49:11 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
Date: Fri, 22 Jun 2007 10:48:40 +0200
From: Mark Overmeer <mark@overmeer.net>
To: Smylers <Smylers@stripey.com>
Cc: perl6-language@perl.org
Subject: Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn
Message-ID: <20070622084840.GJ16156@earth.overmeer.net>
Mail-Followup-To: Smylers <Smylers@stripey.com>, perl6-language@perl.org
References: <20070613205525.7ECA0CB9B8@x12.develooper.com> <ef30550b0706131429o34838a6es6704e8ec73851b49@mail.gmail.com> <467073C4.6020708@conway.org> <20070614082341.GU31918@earth.overmeer.net> <832f158a0706141717j7accfb36w92bf3a2ed7a8e115@mail.gmail.com> <20070615075949.GR31918@earth.overmeer.net> <20070616090944.GG6900@stripey.com> <20070616103358.GB10601@earth.overmeer.net> <20070621180226.GK6900@stripey.com>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <20070621180226.GK6900@stripey.com>
Organization: MARKOV Solutions
User-Agent: Mutt/1.5.9i
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS


I fully agree with David's response to this mail.  The only
thing I would like to add:

* Smylers (Smylers@stripey.com) [070621 18:02]:
>   [*0]  Consider a function C<valid_postcode>.  I'd document it along
>   the lines of:
> 
>     valid_postcode
> 
>       Returns whether the specified postcode is valid, for example:
> 
>         if (valid_postcode $postcode) {
> 
>   Javadoc-style systems seem to insist on documentation like:
> 
>     valid_postcode
>       Description: Returns whether the specified postcode is valid.
>       Parameters:
>         $postcode: (string) The postcode to test for validity
>       Returns: (boolean) Whether $postcode is valid
>       Exceptions: none
>       Side Effects: none

Of course, you can write horrible documentation in any syntax: that's
up to the authors.  But now, just try to write above documentation in
the new POD6 syntax... in that case, it is not only horrible documentation,
but also 2 pages long.

In my idea, it suffices to write:

  method isValidPostalCode(str $postalcode) returns bool {...}

By introspection during manual-page creation, it can collect
sufficient information to create this documentation item (controlled
by a (user-provided) template).  With the POD back-end, something like
(blank lines removed)

  =head1 METHODS
  =over 4
  =item $obj->isValidPostalCode(str $postalcode) returns bool
  =back

Then, when you want to add some docs to the method, to help the
correct use, add it, for instance like:

  method isValidPostalCode(str $postalcode) returns bool {...}
     ` Check wether the postal code confirms to the standards
     `$postalcode: a string with blanks trimmed.
     `return: the string is not cleaned-up.

or maybe (exact syntax open to discussion)

  method isValidPostalCode(str $postalcode) returns bool {...}
  #=  Check wether the postal code confirms to the standards
  #=$postalcode
  #=  a string with blanks trimmed.
  #=return
  #=  the string is not cleaned-up.

or

  method isValidPostalCode(str $postalcode) returns bool {...}
  //  Check wether the postal code confirms to the standards
  //
  //  $postalcode    a string with blanks trimmed.
  //  return         the string is not cleaned-up, if you need
  //                 that, call M<cleanupPostalCode()>.

or maybe at the bottom of your file, whatever you like

 __DOC__
 =doc isValidPostalCode
 Check wether the postal code confirms to the standards

 $postalcode    a string with blanks trimmed.
 return         the string is not cleaned-up, if you need
                that, call M<cleanupPostalCode()>.

There is so much user-friendliness to gain.

Very condensed documentation.  Of course, you will get simple ways to
change the default mark-up of the parameters, for instance for the case
of MMD's, huge parameter lists, or where the parser cannot figure-out
info automatically.
-- 
Regards,

               MarkOv

------------------------------------------------------------------------
       Mark Overmeer MSc                                MARKOV Solutions
       Mark@Overmeer.net                          solutions@overmeer.net
http://Mark.Overmeer.net                   http://solutions.overmeer.net

