From beginners-return-91416-ktwarwic=speedy.uwaterloo.ca@perl.org  Tue May  8 09:49:27 2007
Return-Path: <beginners-return-91416-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l48DnOqD015809
	for <ktwarwic@flax9.uwaterloo.ca>; Tue, 8 May 2007 09:49:25 -0400
Received: (qmail 27939 invoked by uid 514); 8 May 2007 13:49:17 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 27930 invoked from network); 8 May 2007 13:49:17 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 8 May 2007 13:49:17 -0000
Received: (qmail 322 invoked by uid 225); 8 May 2007 13:49:16 -0000
Delivered-To: beginners@perl.org
Received: (qmail 316 invoked by alias); 8 May 2007 13:49:15 -0000
X-Spam-Status: No, hits=3.1 required=8.0
	tests=BAYES_40,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,FH_HOST_EQ_D_D_D_D,KARMA_CONNECT_NEGATIVE,RDNS_DYNAMIC,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
Received: from adsl-64-149-243-139.dsl.chcgil.sbcglobal.net (HELO sktymx1.sktydev.com) (64.149.243.139)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Tue, 08 May 2007 06:49:07 -0700
Received: from localhost (sktymx1.sktydev.com [127.0.0.1])
	by sktymx1.sktydev.com (Postfix) with ESMTP id 520FC3BE4BB;
	Tue,  8 May 2007 09:06:10 -0400 (EDT)
Received: from sktymx1.sktydev.com ([127.0.0.1])
 by localhost (sktymx1.sktydev.com [127.0.0.1]) (amavisd-new, port 10025)
 with ESMTP id 21381-02; Tue,  8 May 2007 09:05:58 -0400 (EDT)
Received: from sktymail1.sktydev.com (sktymail1.sktydev.com [10.10.33.198])
	by sktymx1.sktydev.com (Postfix) with ESMTP id 2326C3BE37C;
	Tue,  8 May 2007 09:05:57 -0400 (EDT)
Content-class: urn:content-classes:message
Subject: RE: array and hash patter matching
MIME-Version: 1.0
Content-Type: text/plain;
	charset="iso-8859-1"
Date: Tue, 8 May 2007 08:46:43 -0500
X-MimeOLE: Produced By Microsoft Exchange V6.5
Message-ID: <8AB6E1A249644643AF0A32306C7F37D41E57@sktymail1.sktydev.com>
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
Thread-Topic: array and hash patter matching
Thread-Index: AceQ0OMt330y9a9SS4mdnFZ7Dlbl2wApe4ww
From: "Tim Wolak" <twolak@sktydev.com>
To: "John W. Krahn" <krahnj@telus.net>, "Perl Beginners" <beginners@perl.org>
X-Virus-Scanned: amavisd-new at sktydev.com
X-Spam-Score: -2.738
X-Spam-Level: 
X-Virus-Checked: Checked
X-Old-Spam-Status: No, hits=-2.738 required=3 tests=[ALL_TRUSTED=-2.82, AWL=0.082]
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from quoted-printable to 8bit by flax9.uwaterloo.ca id l48DnOqD015809

John,

Below are ansewers to your questions.

-----Original Message-----
From: John W. Krahn [mailto:krahnj@telus.net] 
Sent: Monday, May 07, 2007 12:57 PM
To: Perl Beginners
Subject: Re: array and hash patter matching

Tim Wolak wrote:
> Morning all,

Hello,

> I am working on a script that reads in /var/log/auth.log,, takes the ip
> addresses puts them into a hash keeping track of how many times it finds
> that address and compare it to addresses found in /etc/hosts.deny and
> only write the addresses that are new in the file.  So far I can get the
> addresses from the log file no problem and write them to the deny file,
> however I am struggling on how to compare the hash with an array for any
> duplicate addresses.  What is the best approach to take with this?


[ Code reformatted to reflect the actual structure. ]

use warnings;
use strict;

> open (LOGFILE, "/var/log/auth.log") or die "Can't open log file : $!\n";
> open (DENY, "/etc/hosts.deny") or die "Can't open log file: $!\n";
> 
> while (<DENY>) {
>     if ($_ =~ /Invalid user/ || /Failed password for/) {


[Tim Wolak] Valid point understand.

Why use "$_ =~" in front of the first match and not in front of the second
match?  Either use it for both or use it for neither (be consistent.)  The
file /etc/hosts.deny doesn't even contain those strings does it?

man 5 hosts_access


>         push @origDeny, $_;
>     }
>     foreach $orig (@origDeny) {


[Tim Wolak]  I'm using the loop to capture and step through each line of the /var/log/auth.log file.

Why are you using this foreach loop inside the while loop?  If the file
contains five IP addresses then the first one will be pushed onto @hosts 5
times and the second one 4 times and the third one 3 times, etc.

>         if ($off =~ /((\d+)\.(\d+)\.(\d+)\.(\d+))/) {


[Tim Wolak] See above..

Why are you capturing five different strings when you are only using one?

>             push @hosts, $1;
>         }
>     }
> }

The two arrays you just populated are not used again after the while loop ends
so what was the point?


> close DENY;
> while (<LOGFILE>) {
>     if ($_ =~ /Invalid user/ || /Failed password for/) {
>         push @offenders, $_;
>     }
> }
> foreach $off (@offenders) {
>     if ($off =~ /((\d+)\.(\d+)\.(\d+)\.(\d+))/) {
>         push @list, $1;
>     }
> }
> foreach $number (@list) {
>     if (exists $iplist{$number}) {
>         $iplist{$number} ++;
>     } else {
>         $iplist{$number} = "1";
>     }
> }


[Tim Wolak] This is the kind of advice I was looking for.

Why use three loops to do something that you only need one loop for?

my %iplist;
while ( <LOGFILE> ) {
    if ( /Invalid user|Failed password for/ && /(\d+\.\d+\.\d+\.\d+)/ ) {
        $iplist{ $1 }++;
    }
}


> open (DENY, ">>/etc/hosts.deny") or die "Can't open log file: $!\n";
> foreach $key (keys %iplist) {
>     if ($iplist{$key} > 5) {


[Tim Wolak] Five because that is the limit for how many times the IP is appearing in the auth.log file and then the "attacker" will be put in the hosts.deny file.

Why 5?

>         foreach $tim (@list) {
>             if ($tim !~ /$iplist{$key}/) {


[Tim Wolak] I'm matching the so when the authentication attempts are multiple attempts that are logged I do not put 100 of the same IP addresses in the deny file.  i.e. if its in the deny file already don't put it in there again....

Why are you trying to match the number in $iplist{$key} to the IP address in $tim?

>                 print DENY "$key\n";

According to hosts_access(5) the /etc/hosts.deny file needs more on the line
than just the IP address.

man 5 hosts_access

[ snip ]

ACCESS CONTROL RULES
       Each access control file consists of zero or more lines of text.  These
       lines are processed in order of appearance. The search terminates when
       a match is found.

       ·      A newline character is ignored when it is preceded by a
              backslash character. This permits you to break up long lines so
              that they are easier to edit.

       ·      Blank lines or lines that begin with a `#´ character are
              ignored.  This permits you to insert comments and whitespace so
              that the tables are easier to  read.

       ·      All other lines should satisfy the following format, things
              between [] being optional:

                 daemon_list : client_list [ : shell_command ]

       daemon_list is a list of one or more daemon process names (argv[0]
       values) or wildcards (see below).

       client_list is a list of one or more host names, host addresses,
       patterns or wildcards (see below) that will be matched against the
       client host name or address.

       The more complex forms daemon@host and user@host are explained in the
       sections on server endpoint patterns and on client username lookups,
       respectively.

       List elements should be separated by blanks and/or commas.

       With the exception of NIS (YP) netgroup lookups, all access control
       checks are case insensitive.


>             }
>         }
>     }
> 
> }
> close LOGFILE;
> close DENY;



John
-- 
Perl isn't a toolbox, but a small machine shop where you can special-order
certain sorts of tools at low cost and in short order.       -- Larry Wall

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/



-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/



