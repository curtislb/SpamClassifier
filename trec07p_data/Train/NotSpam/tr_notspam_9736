From beginners-return-91591-ktwarwic=speedy.uwaterloo.ca@perl.org  Sat May 12 10:52:15 2007
Return-Path: <beginners-return-91591-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4CEqEqD011797
	for <ktwarwic@flax9.uwaterloo.ca>; Sat, 12 May 2007 10:52:14 -0400
Received: (qmail 23836 invoked by uid 514); 12 May 2007 14:52:07 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 23827 invoked from network); 12 May 2007 14:52:07 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 12 May 2007 14:52:07 -0000
Received: (qmail 3670 invoked by uid 225); 12 May 2007 14:52:06 -0000
Delivered-To: beginners@perl.org
Received: (qmail 3664 invoked by alias); 12 May 2007 14:52:06 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of tom.phoenix@gmail.com designates 66.249.82.225 as permitted sender)
Received: from wx-out-0506.google.com (HELO wx-out-0506.google.com) (66.249.82.225)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Sat, 12 May 2007 07:49:16 -0700
Received: by wx-out-0506.google.com with SMTP id t16so1137300wxc
        for <beginners@perl.org>; Sat, 12 May 2007 07:49:11 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:sender:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=k/asDsrb08Miockv8EEBERHy6IJUwBXNK2FB9sxGmxnwfKhj+haasb7wcMcLe/i6lJANIZbDmYAr9nryRSr2RGvhZDMgmN5kCzp39S6LJy6C9eUjdM61PEmwSH8tU7Jiw0AvHWjpoQVnNiEONVyd0cUAmDeqZ66w4rJHc9s/QRE=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:sender:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=lF12qoreBFZ2Xu6PO5KHkdsjbhWDCtzV0WdZgBIHb3c/VT1/MwgjZoUtOfw+fyMnwJvDTSJYhfWLcAcAIvDF7mzyuWWzz84uiC2i4FU0vFzWMbWBT1SxNE7MGY6E4H5R45T6Tr93pCaf8j1Oz0v6jCscOm5soksc9Av2PlSZVZc=
Received: by 10.90.25.3 with SMTP id 3mr3870701agy.1178981351643;
        Sat, 12 May 2007 07:49:11 -0700 (PDT)
Received: by 10.90.113.16 with HTTP; Sat, 12 May 2007 07:49:11 -0700 (PDT)
Message-ID: <31086b240705120749q192f151aif322e5fbd850a7f@mail.gmail.com>
Date: Sat, 12 May 2007 07:49:11 -0700
From: "Tom Phoenix" <tom@stonehenge.com>
Sender: tom.phoenix@gmail.com
To: "Steve Bertrand" <iaccounts@ibctech.ca>
Subject: Re: $1 $2 var confusion
Cc: beginners@perl.org
In-Reply-To: <4645CD59.3020508@ibctech.ca>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <4645CD59.3020508@ibctech.ca>
X-Google-Sender-Auth: 4f70973022b52adb

On 5/12/07, Steve Bertrand <iaccounts@ibctech.ca> wrote:

> my $email = 'steveb@domain.com';
> $email =~ /(.*)@(.*)/;
> if ($2 !~ /domain\.com/) {
>         print "var 2 is bad\n";
> }
> print "$1\n";

At this point, what is $1? It's the value from the last successful
pattern match. But was that the test against $email, or the one
against $2? If the latter succeeded in matching (which it should,
given this data) the pattern doesn't have a $1, so it's undef.

> my $email = 'steveb@wrong.com';
> $email =~ /(.*)@(.*)/;
> if ($2 !~ /domain\.com/) {
>         print "var 2 is bad\n";
> }
> print "$1\n";

This time, the second match failed, so $1 is left over from the first match.

The solution is generally to copy the match variables to ordinary
variables before doing further pattern matches, and to take care to
use match variables only after the match has succeeded.

But are you really trying to do something like validate an email
address? They're more complex than you may realize. (For example,
there may be more than one '@' sign in an e-mail address.) Maybe
there's a module on CPAN that could help you with whatever you're
doing.

Cheers!

--Tom Phoenix
Stonehenge Perl Training

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


