From perl6-all-return-81951-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed Jun 13 18:47:04 2007
Return-Path: <perl6-all-return-81951-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5DMl2L9013406
	for <ktwarwic@flax9.uwaterloo.ca>; Wed, 13 Jun 2007 18:47:03 -0400
Received: (qmail 16316 invoked by uid 514); 13 Jun 2007 22:47:00 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 16311 invoked from network); 13 Jun 2007 22:47:00 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: domain of thoughtstream@gmail.com designates 64.233.162.230 as permitted sender)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:reply-to:user-agent:mime-version:to:subject:references:in-reply-to:content-type:content-transfer-encoding:sender;
        b=X1IxWoXzuWQU+rkeC1M5in1GSwxZ+niUYEB0JtklAJbJioC0UYM5b+DeS2xgIjKy6YeVYUYwykPaDLjKM25r+NX9g8kFE1yZXnETRmY4exUrX8+CgXK5lMjjv3YTUnl0zOcbxEw977pb7eKap2OA+Y5UOSyE3t1C7usoOcaaNNc=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:reply-to:user-agent:mime-version:to:subject:references:in-reply-to:content-type:content-transfer-encoding:sender;
        b=VutuB4YRHZL6wMHtu4hWN7mk+lkQeDztifO4ggVUu7ts9VvgWvreZqIf+cS7c4DJGb5tvpd8xXX2IK/qmadXQlDXkzIp4AOkX8Tdsn/wMbrLI92wRSMjA/m/M8x8+1pjhII2HeruMYk3lSOaCyTn+0jbrsXgwzFdJUGP/8GRpTg=
Message-ID: <467073C4.6020708@conway.org>
Date: Thu, 14 Jun 2007 08:46:28 +1000
From: Damian Conway <damian@conway.org>
Reply-To: damian@conway.org
User-Agent: Thunderbird 2.0.0.0 (Macintosh/20070326)
MIME-Version: 1.0
To: "perl6-language@perl.org" <perl6-language@perl.org>
Subject: Re: [svn:perl6-synopsis] r14421 - doc/trunk/design/syn
References: <20070613205525.7ECA0CB9B8@x12.develooper.com> <ef30550b0706131429o34838a6es6704e8ec73851b49@mail.gmail.com>
In-Reply-To: <ef30550b0706131429o34838a6es6704e8ec73851b49@mail.gmail.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit
Sender: Damian Conway <thoughtstream@gmail.com>
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS

Jonathan Lang asked:

> What's the rationale for keeping POD comments that are nested in block
> comments visible to the POD parser?

The rationale is that Perl 6 and Pod 6 have been designed to be completely 
independent and uncoupled. That way, you can look at a piece of Pod without 
worrying about any syntactic or semantic effects from the surrounding Perl 
code...and look at a piece of Perl code without worrying about any syntactic 
or semantic effects from the surrounding Pod. We think that's highly valuable.

The separation of Perl and Pod also makes parsing each language considerably 
easier. As the two languages are now specified, the Perl parser doesn't have 
to worry about embedded Pod, since it can be removed in a preprocessor stage, 
or easily handled as part of the parser (since the Pod syntax is simple and 
distinctive and morally equivalent to whitespace). Likewise the Pod parser 
doesn't have to worry about Perl, since no Perl construct can affect the 
meaning of embedded Pod. This second point is by far the more important, since 
it means that the (comparatively simple) Pod parser doesn't have to have a 
full implementation of a (far more complex) Perl parser within it.

The separation also means that you can--potentially, at least--use Pod to 
document source in *any* language (i.e. not just Perl) provided that language 
allows for a preprocessor to strip the Pod from any source before compilation. 
And because Pod ignores "ambient" source code, the standard Pod parsing and 
transformation tools will be able to be used, regardless of the interleaved 
language.


> It seems to me that the least surprising behavior would be for the POD
> comment to be swallowed up by the block comment, on the basis that a
> block comment ought to be equivalent to prefixing every line from its
> start to end with a C<# >. Conversely, I'd expect a block comment
> that's nested inside a POD comment to be passed to the POD parser as
> ordinary POD text. In short, whichever kind of comment comes first
> should dominate.

"Least surprise" always depends on your underlying model of a phenomenon.

My underlying model is that documentation and the source it's documenting 
should be entirely orthogonal. So, to me, it would be very surprising if a 
programming construct (block comments) interacted with documentation. Or vice 
versa.

To put it another way:

     * At the Perl 6 level, all Pod is syntactically and semantically
       invisible and therefore already equivalent to a comment.
       So there's no need for Perl 6 comments to interact with Pod
       (since commenting out a comment is a null operation, as far as
       Perl is concerned).

     * At the Pod 6 level, all Perl code is merely meaningless ambient
       background noise and therefore already equivalent to whitespace.
       So there's no need for Pod comments to interact with Perl 6 (since
       commenting out whitespace is a null operation, as far as Pod is
       concerned).


For all of the above reasons, I'm strongly convinced that the total separation 
of Church (i.e. documentation of belief) and State (i.e. specification of 
action) is as a good thing for programming languages as it is for nations. :-)

Damian




