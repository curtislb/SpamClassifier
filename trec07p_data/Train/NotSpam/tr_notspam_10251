From perl6-all-return-81328-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon May 14 14:58:52 2007
Return-Path: <perl6-all-return-81328-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4EIwpqD026014
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 14 May 2007 14:58:51 -0400
Received: (qmail 22002 invoked by uid 514); 14 May 2007 18:58:48 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 21997 invoked from network); 14 May 2007 18:58:48 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=0.0 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: moderator for perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
X-Spam-Checker-Version: SpamAssassin 3.1.5 (2006-08-29) on csd3.localdomain
X-Spam-Level: 
Message-ID: <46489E95.6010402@comple.at>
Date: Mon, 14 May 2007 19:38:29 +0200
From: Tibor Foeldes <tifo@comple.at>
User-Agent: Thunderbird 1.5.0.10 (X11/20070403)
MIME-Version: 1.0
To: perl6-language@perl.org
Subject: Re: Is Perl 6 too late?
References: <583653118@web.de> <20070514113520.17175.qmail@lists.develooper.com>
In-Reply-To: <20070514113520.17175.qmail@lists.develooper.com>
Content-Type: text/plain; charset=ISO-8859-15; format=flowed
Content-Transfer-Encoding: 7bit
X-Old-Spam-Status: No, score=-4.2 required=7.0 tests=ALL_TRUSTED,AWL,BAYES_00,
	SPF_HELO_PASS autolearn=ham version=3.1.5
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=3.5 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,FH_HOST_EQ_D_D_D_D,FH_HOST_EQ_D_D_D_DB,FM_SEX_HOSTDDDD,RDNS_DYNAMIC,SPF_PASS,TVD_RCVD_IP

OK! Be concrete  !   :-) ( Hart wie Beton !)
> As Ruby and Python are getting more and more attraction [1][2] I think
> they do something right, that Perl doesn't.
> What I think where both (especially Python) do better is in readable 
> code.
>
> What makes Perl hard to read is the excessive use of special characters
> (/\W/).
>   
(/\W/)
It is  in Ruby the same.  In Python  re.search('\W',foo).    Is  it  
really nicer ?

> In my opinion, reducing the use of those characters would make Perl a
> lot easier to read and also easier to write.
> Global variables with cryptic names, that no beginner can make any sense
> of by reading it. And after not working with "$<" for some months I
> can't remember it either, although I've got quite some Perl experience.
>
>   
In Perl6:  $*UID   (see S02.pod)
> Additionally I'm not a friend of sigils: Typing them is relatively
> painful, for reading there is no advantage if you use an editor with
> decent syntax highlighting and the code looks more cryptic. The answer
> in Perl6 are twigils, great... One step backwards in my optinion.
> Most programming languages
> /C(++|#)?|Java(Script)?|Python|Ruby|Groovy/... don't need them. The only
> obvious advantage of using sigils is variable interpolation in strings.
> But that could easily be done only in strings without the need to put a
> $ in front of each and every variable name in the rest of the code.
>
>   
Perl is a language with sigils. We must see it more penetrating ! The 
advantages of sigils in Perl are overall, by item access in structures, 
by the flexibility of subroutine calls, interpolation , global 
variables,  ....
Perl wants separate variables from other language structures . Perl 
without sigils is not Perl more.  Perl6 in this regards is really to 
late for you :-)
> I would also like semicolons to be optional. There are far more cases of
> single line statements than multiline statements. So you would save
> quite some characters, when the semicolon would be optional and you
> could concatenate multiline statements with e.g. a backslash.
>
> Some say that there are too much operators in Perl(6). I partially
> agree. I don't like the implicit type casting forced by the operators
> (== int / eq string). That's harder to learn and remember. Harder to
> read also.
Operators are only another format ( nice ) of functions.
> I really like the Python way of doing it: Set the variables type on the
>   assignment and remember it. The (fewer) operators now work according to
> the type of the operands. No implicit (and error prone) type casting.
> That way seems to be the best compromise of easiness and type safety.
> I could continue on that, but I've already written too much...
>   
"use warnings" is helping you !

And you can always make explicit type conversion. That does mean 
explicit :-) . But you must type something more.
The only builtin implicit type casting in Perl is this numeric / string 
conversion and it is fairly obvious and absolutely not error-prone.

> [1] http://radar.oreilly.com/archives/2007/05/state_of_the_co_6.html
> [2] http://www.google.com/trends?q=perl%2C+python+-snake%2C+ruby
>
>   
These reports are fairly special. These are not about popularity of a 
programming language , but
how many books O'Reilly sold, and how many were googled. What about is 
not clear. Maybe waiting for Perl6 ?
In place of contributing? Searching for redemption ?
> People not only want code that _is_ sexy, but they also want it to
> _look_ sexy.
>   
Sex is oftentimes perversion ;-) Well, natural selection. Survives the 
fittest idea , not necessarily the sexiest look.

Tibor

