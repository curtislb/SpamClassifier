From perl6-all-return-81380-ktwarwic=speedy.uwaterloo.ca@perl.org  Tue May 15 13:50:33 2007
Return-Path: <perl6-all-return-81380-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4FHoWqD007886
	for <ktwarwic@flax9.uwaterloo.ca>; Tue, 15 May 2007 13:50:32 -0400
Received: (qmail 31461 invoked by uid 514); 15 May 2007 17:50:29 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 31446 invoked from network); 15 May 2007 17:50:29 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-1.1 required=8.0
	tests=BAYES_05,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: neutral (x1.develooper.com: local policy)
X-ORBL: [71.139.40.156]
Date: Tue, 15 May 2007 10:29:06 -0700
From: Larry Wall <larry@wall.org>
To: perl6-language@perl.org
Subject: Re: Is Perl 6 too late?
Message-ID: <20070515172905.GA19501@wall.org>
Mail-Followup-To: perl6-language@perl.org
References: <010520071004503787%brian.d.foy@gmail.com> <1584795397.20070503140643@shitov.ru> <200705111448.05991.chromatic@wgz.org> <20070513224235.28013.qmail@lists.develooper.com> <46479C1C.4000305@casella.verplant.org> <20070514105154.5648.qmail@lists.develooper.com> <464949B2.6000909@u.washington.edu>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <464949B2.6000909@u.washington.edu>
User-Agent: Mutt/1.4.2.2i
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-0.1 required=8.0
	tests=BAYES_20,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL

On Mon, May 14, 2007 at 10:48:34PM -0700, Garrett Cooper wrote:
: No one mentioned that if it wasn't for sigils, many strings would be 
: increased, length-wise, to do operator concatentation. If it wasn't for 
: that then simple string insertions couldn't be used.

Well, except you can interpolate in Perl 6 with bare closures, so

    say "answer = {foo}"

wouldn't be so bad.

: The only thing I hate about Perl with required formatting is the silly 
: braces. If it's one line and separated by visible whitespace, why is the 
: only option available to me the
: 
: 	statement_1 if(statement_2);
: 
: or
: 
: 	statement_1 unless(statement_2);
: 
: syntax? Seems less readable than:
: 
: 	if(statement_2)
: 		statement_1
: 
: or
: 
: 	unless(statement_2)
: 		statement_1

That has been a not-infrequent complaint about Perl from people coming
from a C-ish background.  However, what we discovered with the Perl 6
design was that it was not, in fact, the braces that were silly, but
the parentheses.  The braces consistently represent a closure in Perl 6,
even in control constructs, which are not special-cased as in C and Perl 5.
But by taking that approach we can get rid of the parens that are doing
only syntactic work without carrying any semantic weight.  So Perl 6 ends
up with the one-liner:

    if statement_2 { statement_1 }

and that's no more characters than your parentesized version.

Now you might think that the curlies are still useless there, but the
fact that it's a closure means you can capture the value of the control
condition if you like.  This would be rare with an if, but with other
control flow structures it's quite common.  In particular this very
common construct:

    for 1..100 -> $i { say $i }

Since -> is just a built-in way of writing an anonymous sub with
arguments, there's no need to invent special syntax for loop variables!

And when you say

    for 1..100 { say $_ }

you're still logically calling an anonymous sub with a single parameter
called $_.  I freely admit that the use of braces in C and Perl 5 is
silly, but the braces in Perl 6 are about as far from silly as you
can get.

: The only legitimacy for the first set of formats would be if in fact you 
: were reading off the logic statement in a left-to-right language. But 
: then again many languages don't follow that convention (Japanese, 
: Korean, etc etc for instance).

Oddly, the statement modifier is borrowed directly from English.

: The same opinion goes for all loops, except the
: 
: 	do { statement } ( { while, until } );
: 
: variety.

That particular construct comprises several additional cans of worms.  :)

Larry

