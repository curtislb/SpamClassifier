From perl6-all-return-81371-ktwarwic=speedy.uwaterloo.ca@perl.org  Tue May 15 01:49:20 2007
Return-Path: <perl6-all-return-81371-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4F5nJqD001222
	for <ktwarwic@flax9.uwaterloo.ca>; Tue, 15 May 2007 01:49:19 -0400
Received: (qmail 24110 invoked by uid 514); 15 May 2007 05:49:16 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 24104 invoked from network); 15 May 2007 05:49:15 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
X-Auth-Received: from [192.168.10.45] (c-67-174-148-212.hsd1.ca.comcast.net [67.174.148.212])
	(authenticated authid=youshi10)
	by smtp.washington.edu (8.13.7+UW06.06/8.13.7+UW07.03) with ESMTP id l4F5mZeg007697
	(version=TLSv1/SSLv3 cipher=DHE-RSA-AES256-SHA bits=256 verify=NOT);
	Mon, 14 May 2007 22:48:35 -0700
Message-ID: <464949B2.6000909@u.washington.edu>
Date: Mon, 14 May 2007 22:48:34 -0700
From: Garrett Cooper <youshi10@u.washington.edu>
User-Agent: Thunderbird 2.0.0.0 (Windows/20070326)
MIME-Version: 1.0
To: Thomas Wittek <mail@gedankenkonstrukt.de>
CC: perl6-language@perl.org
Subject: Re: Is Perl 6 too late?
References: <010520071004503787%brian.d.foy@gmail.com> <1584795397.20070503140643@shitov.ru> <200705111448.05991.chromatic@wgz.org> <20070513224235.28013.qmail@lists.develooper.com> <46479C1C.4000305@casella.verplant.org> <20070514105154.5648.qmail@lists.develooper.com>
In-Reply-To: <20070514105154.5648.qmail@lists.develooper.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-PMX-Version: 5.3.1.294258, Antispam-Engine: 2.5.1.298604, Antispam-Data: 2007.5.14.223243
X-Uwash-Spam: Gauge=IIIIIII, Probability=7%, Report='__CT 0, __CTE 0, __CT_TEXT_PLAIN 0, __HAS_MSGID 0, __MIME_TEXT_ONLY 0, __MIME_VERSION 0, __SANE_MSGID 0, __USER_AGENT 0'
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.0 required=8.0
	tests=BAYES_50,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,KARMA_CONNECT_POSITIVE,SPF_PASS

Thomas Wittek wrote:
> Moritz Lenz schrieb:
>>> What makes Perl hard to read is the excessive use of special characters
>>> (/\W/).
>>
>> I disagree: The make it look ugly, but not hard to read.
> 
> Even if it's "only" ugly: To what advantage? I don't think ugliness is a 
> good characteristic of a programming language.
> 
>>> Global variables with cryptic names, that no beginner can make any sense
>>> of by reading it. And after not working with "$<" for some months I
>>> can't remember it either, although I've got quite some Perl experience.
>>
>> Well, most of them are gone or renamed to more readable ones in p6.
> 
> I hope so. I could only find the counterparts for __PACKAGE__ etc. in 
> S02. I didn't find the one for e.g. $<.
> 
>>> Additionally I'm not a friend of sigils: 
>>
>> Then you shouldn't program in perl. Really.
> 
> Reason? I still haven't seen a good justification for sigils.
> To allow arrays and scalars and subs to have the same name (besides the 
> sigil) although they have different content? No good idea I think.
> I also can't remember that I ever named a variable like a "reserved 
> word" or operator. And even if I could, I'd consider it to be bad style.

No one mentioned that if it wasn't for sigils, many strings would be 
increased, length-wise, to do operator concatentation. If it wasn't for 
that then simple string insertions couldn't be used.

Plus sigils are a defacto form of representing variables in other 
languages, like Unix scripting and PHP. I'd rather read a data item 
[scalar, { associative, 1-D } array, list, class object ] and have a 
good idea of what the target data type is. References is the only data 
type ones that introduces some sort of mystery to this mix, IMO.

>>> I would also like semicolons to be optional. 
>>
>> Most people don't ;-).
> 
> Oh, really? Source? :)
> I think they were invented to allow easier parsing and not easier coding.
> E.g. in JavaScript, Python, Ruby and Groovy they are optional or even 
> don't exist. As I said, there are much more cases where you wouldn't 
> need them but have to write them than vice versa.
> Optional semicolons save keystrokes, eye pain and stupid syntactic 
> errors. And if you still like them, you could just use them, which is 
> the definition of "optional".

Almost all mainstream languages do it though, and it serves as nice 
visual breaks in source. I honestly hate lack of semi-colons, with the 
exception of shell scripts, all of which I produce that are less than 
150 lines long.

Then again I don't do more than 2 sets of statements in a given line for 
shell scripts either, and I don't so the same with Perl.

<rant>

The only thing I hate about Perl with required formatting is the silly 
braces. If it's one line and separated by visible whitespace, why is the 
only option available to me the

	statement_1 if(statement_2);

or

	statement_1 unless(statement_2);

syntax? Seems less readable than:

	if(statement_2)
		statement_1

or

	unless(statement_2)
		statement_1

The only legitimacy for the first set of formats would be if in fact you 
were reading off the logic statement in a left-to-right language. But 
then again many languages don't follow that convention (Japanese, 
Korean, etc etc for instance).

The same opinion goes for all loops, except the

	do { statement } ( { while, until } );

variety.

</rant>

>>> I really like the Python way of doing it: Set the variables type on the
>>> assignment and remember it. The (fewer) operators now work according to
>>> the type of the operands. No implicit (and error prone) type casting.
>>> That way seems to be the best compromise of easiness and type safety.
>>
>> Well, if you like the python way, feel free to code in python.
> 
> Oh, if I didn't like Perl, why should I care about posting my ideas here?
> Perl has stolen the largest part of the language from other languages.
> Why not do so again by adopting good ideas.
> 
>> Don't get me wrong, there's nothing bad in writing some critics, but
>> yours is impossible to realize in Perl 6
> 
> Admittedly I'm much too late and I didn't expect applause for my critics 
> -- but at least I hoped to get a discussion based on arguments.
> 
>  > and therefore are it's hard to call it constructive.
> 
> Unfortunately I already thought this. Even if everyone agreed that 
> sigils (or forced semicolons, or tons of operators, ...) are more bad 
> than good (and this seems like persuading the pope to allow homosexual 
> muslims to marry with priests) the design process is probably too far to 
> introduce such dramatic changes.
> Sadly.

Yes, probably about as likely as Neo-Nazi's getting married to Haccidic 
Jewish people with Satanic priests presiding.

-Garrett

