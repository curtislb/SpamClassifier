From beginners-return-90988-ktwarwic=speedy.uwaterloo.ca@perl.org  Sun Apr 22 18:19:06 2007
Return-Path: <beginners-return-90988-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by speedy.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l3MMJ40I024682
	for <ktwarwic@speedy.uwaterloo.ca>; Sun, 22 Apr 2007 18:19:05 -0400
Received: (qmail 13445 invoked by uid 514); 22 Apr 2007 22:18:35 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 13434 invoked from network); 22 Apr 2007 22:18:35 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 22 Apr 2007 22:18:35 -0000
Received: (qmail 9719 invoked by uid 225); 22 Apr 2007 22:18:35 -0000
Delivered-To: beginners@perl.org
Received: (qmail 9715 invoked by alias); 22 Apr 2007 22:18:34 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of anexpert@gmail.com designates 64.233.162.235 as permitted sender)
Received: from nz-out-0506.google.com (HELO nz-out-0506.google.com) (64.233.162.235)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Sun, 22 Apr 2007 15:18:32 -0700
Received: by nz-out-0506.google.com with SMTP id s1so1079824nze
        for <beginners@perl.org>; Sun, 22 Apr 2007 15:18:28 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:sender:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=XAyx1xrQGiIRxkKJsfQ+dDsVfoyTiOxxgvc3anq3o6Yyw8Xx53Akqu1T1ygmoDf4Dk/5rjufyMD62AGo6C+x8/yK49+oU8ErxNtXJUIkFRyKiE53Wbe7g9UAI/gsvWJbF+Dl8HMzWjH12kpjBW4D/KCqi/p8bdyWQm0UCLm8ETk=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:sender:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=e4KxjMK5CVNHwRK07Q5zScBVLUbwXlliX41hZX2pCpwrQ9hZ811dgCSW9zPiESMCghbqMr6apdZnxtlEmObzptiL9WjG1p3P7wTM/1i9BnElt8uUV8ZOS38dVw+043D1AMkYaoP5SkYyJykLviVCGTafdypHtxb0LZrsQe8bPtI=
Received: by 10.64.242.5 with SMTP id p5mr10519358qbh.1177280308330;
        Sun, 22 Apr 2007 15:18:28 -0700 (PDT)
Received: by 10.64.185.12 with HTTP; Sun, 22 Apr 2007 15:18:28 -0700 (PDT)
Message-ID: <ca5781c80704221518w6e01bf5che9c4e8b4a45c9310@mail.gmail.com>
Date: Sun, 22 Apr 2007 18:18:28 -0400
From: yitzle <yitzle@users.sourceforge.net>
Sender: anexpert@gmail.com
To: "Mike Lesser" <exceptions@earthlink.net>
Subject: Re: testing return values
Cc: "Beginners Perl" <beginners@perl.org>
In-Reply-To: <395B6D9C-5936-4CE9-AAEB-450EF98F6AA4@earthlink.net>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <395B6D9C-5936-4CE9-AAEB-450EF98F6AA4@earthlink.net>
X-Google-Sender-Auth: 746e4f9df0a117ec
Status: O
Content-Length: 1672
Lines: 52

Now, why can't you do this?

> while( $tree_element = read_tree( $argument ) ){
>    do_something( $tree_element );
> }

I would certainly use it. In C this is called operation overflow or something...


On 4/22/07, Mike Lesser <exceptions@earthlink.net> wrote:
> Hiya. I'm looking for the correct Perl style for testing and storing
> a return value in a control statement. The solution in any other
> language is pretty obvious, but I get the distinct impression that
> there's a 'right' way in Perl...
>
> Let's say I want to test a scalar returned from a subroutine, and
> also keep a copy for my own use:
>
>   $scalar = sub( $argument );
>
>   if( $scalar ){
>   }
>
> Naturally that's no big deal. Now let's say I have a tree I want to
> traverse, or some similar open-ended thing to evaluate, and want to
> run it until a condition is reached..
>
>   while( read_tree( $argument ){
>   }
>
> Again no biggie. The problem is if I want to keep the result.
> Obviously I can't do this:
>
> while( $tree_element = read_tree( $argument ) ){
>     do_something( $tree_element );
> }
>
> I can come up with a brute-force solution of course, but there's
> probably a better, Perlish way that I'm not aware of. In addition, I
> don't expect a return value from some module to be consistently
> undefined or zero; it could change under some circumstances. This
> makes me think that the problem has been dealt with long ago, and
> just doesn't stick out in the llama/alpaca/whatever books.
>
> Hopefully I explained this correctly!
>

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


