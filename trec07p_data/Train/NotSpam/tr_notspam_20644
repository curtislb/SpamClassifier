From beginners-return-92551-ktwarwic=speedy.uwaterloo.ca@perl.org  Tue Jun 19 15:45:13 2007
Return-Path: <beginners-return-92551-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5JJjAL9000709
	for <ktwarwic@flax9.uwaterloo.ca>; Tue, 19 Jun 2007 15:45:12 -0400
Received: (qmail 27919 invoked by uid 514); 19 Jun 2007 19:45:01 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 27899 invoked from network); 19 Jun 2007 19:45:01 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 19 Jun 2007 19:45:01 -0000
Received: (qmail 19979 invoked by uid 225); 19 Jun 2007 19:45:00 -0000
Delivered-To: beginners@perl.org
Received: (qmail 19961 invoked by alias); 19 Jun 2007 19:44:59 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of rvm@cbord.com designates 24.39.174.11 as permitted sender)
Received: from mx1.cbord.com (HELO Email.cbord.com) (24.39.174.11)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Tue, 19 Jun 2007 12:44:56 -0700
X-MIMEOLE: Produced By Microsoft Exchange V6.5
Content-class: urn:content-classes:message
MIME-Version: 1.0
Content-Type: text/plain;
	charset="us-ascii"
Subject: RE: Inter-thread communications
Date: Tue, 19 Jun 2007 15:44:18 -0400
Message-ID: <FF8482A96323694490C194BABEAC24A00113084B@Email.cbord.com>
In-Reply-To: <ee9g73tn1mgg10usjfk06kokk9q5alqnqa@4ax.com>
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
Thread-Topic: Inter-thread communications
Thread-Index: AceypPf7aWIalddTS0yGiEofy3LIKAAA6NsQ
References: <FF8482A96323694490C194BABEAC24A0010EC84E@Email.cbord.com> <ee9g73tn1mgg10usjfk06kokk9q5alqnqa@4ax.com>
From: "Bob McConnell" <rvm@CBORD.com>
To: "zentara" <zentara@highstream.net>, <beginners@perl.org>
X-Virus-Checked: Checked
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from quoted-printable to 8bit by flax9.uwaterloo.ca id l5JJjAL9000709

> -----Original Message-----
> From: Linux@lists.develooper.com 
> [mailto:Linux@lists.develooper.com] On Behalf Of zentara
> Sent: Tuesday, June 19, 2007 2:55 PM
> To: beginners@perl.org
> Subject: Re: Inter-thread communications
> 
> On Mon, 18 Jun 2007 12:58:31 -0400, rvm@CBORD.com ("Bob McConnell")
> wrote:
> 
> >I have two questions about this. First, is there a standard Perl IPC
> >interface between threads? I am not familiar with pipes in 
> this context,
> >although I have used mailboxes and single word messages in various
> >multi-processing environments, including POSIX threads.
> 
> This is a big topic, so I'll briefly try to bring you up to speed.
> 
> I'm assuming you are talking about threads in the pure sense, 
> as opposed
> to calling separate processes "threads". ( It's further confused by
> MSWindows, emulating fork with threads).
> 
> There are totally independent processes, for which you can do IPC with
> pipes, sockets, shared memory segments, etc.
> 
> Threads are different.
> Threads are sort of concurrent code which can all run under the same
> parent pid. If one thread exits, the whole thread system will die. So
> care must be taken. However, you can easily share scalar data between
> running threads, and this is their advantage.
> 
> So the standard Perl IPC interface for threads, is shared variables:
> see "perldoc threads::shared". Also to be
> happy with threads under Perl, you need a version greater than 5.8
> Perl5.6 uses an obsolete thread version which will give you trouble.
> 
> If you are not specifically interested in perl threads, you 
> may want to
> read "perldoc perlipc". The things mentioned in perlipc, are the
> original methods of ipc, before threads came along (only recently). 
> 
> There are 2 things threads can do for you.
> 1. Share variables in realtime between threads.
> 2. Share filehandles between threads, by passing their fileno
>     thru the shared variable mechanism.
> 
> The problem is that one thread will not know if another thread has
> changed a shared variable, so you either need an event-loop system,
> or a complex while() loop to constantly monitor the values of 
> the shared
> variables.
> 
> The typical setup is a main thread which has an event loop (Tk, POE,
> Glib, etc), and as many worker threads as you want. The worker threads
> will do things and set shared variables, and the main thread will
> monitor the value of the shared vars and do what is needed.
> 
> The main thread will also clean up the worker threads at program end.
> 
> >
> >Second, is there a way to set this up so the transmit thread 
> timeout can
> >be easily implemented as a side effect of waiting for the ACK/NAK to
> >arrive on that interface? I was thinking of using a 
> semaphore, but they
> >don't appear to be implemented on Win32.
> 
> Yeah, it depends on how your code is written, but you can setup many
> timers in an event-loop system to time out something. 
> Warning.... alarm 
> does not work well in threads, you need timers.
> 
> See how GLib can help
> http://perlmonks.org?node_id=538341
> 
> Also there is POE, and (Tk and Gtk2 if you want a GUI).
> 
> >
> >For this emulation, the outgoing messages are read from a 
> text file and
> >the incoming messages are stored in another text file. Timing of
> >outgoing messages is controlled when that file is read. I am 
> hoping this
> >can provide a workaround for the alarm failure I ran into on 
> the single
> >threaded version as well as being a better emulation of the actual
> >system.
> 
> 
> I run linux, so there may be win32 problems that I'm unfamiliar with,
> but all of it seems feasible.
> 
> It seems that once the serial port connection is established, and you
> have the filehandle, you could have a main thread to control, and 2 
> worker threads, one to send, and one to receive.  You would setup
> some shared variables, like "$ack_received" , etc., and share 
> the fileno
> of the port filehandle between the threads.
> Then again, with a proper IO::Select setup, you may not need threads
> at all.
> 
> You might want to ask this on http://perlmonks.org
> A few monks there are good with win32, and Win32::SerialPort.
> If you could show some pseudo-code it would be helpful to them.
> 
> Goodluck,
> zentara

I have been trying to implement this in ActivePerl 5.8.8.820 on W2K, so
I am working in the thread based fork() implementation. IPC does not
seem to exist in that implementation.

I had pretty much figured out that alarm doesn't work in Win32. I had
tried to use it to interrupt read() on a serial port, and that wasn't
working. Neither did SIGINT or SIGTERM. The only way to get out of it
was Ctrl->Break, which shuts down the whole process.

Unless the Glib timer can interrupt a serial port read() call, I don't
see any way to timeout a serial port input function on Win32.
Unfortunately, that means I will probably need to steal one of the FC5
boxes from the next room in order to get it to work.

Thank you,

Bob McConnell

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/



