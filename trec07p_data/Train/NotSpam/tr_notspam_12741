From beginners-return-91861-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed May 23 04:02:06 2007
Return-Path: <beginners-return-91861-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l4N824qD022478
	for <ktwarwic@flax9.uwaterloo.ca>; Wed, 23 May 2007 04:02:05 -0400
Received: (qmail 17159 invoked by uid 514); 23 May 2007 08:01:54 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 17149 invoked from network); 23 May 2007 08:01:53 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 23 May 2007 08:01:53 -0000
Received: (qmail 31317 invoked by uid 225); 23 May 2007 08:01:53 -0000
Delivered-To: beginners@perl.org
Received: (qmail 31311 invoked by alias); 23 May 2007 08:01:52 -0000
X-Spam-Status: No, hits=6.8 required=8.0
	tests=BAYES_40,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_TESTING,DK_SIGNED,DK_VERIFIED,KARMA_CONNECT_NEGATIVE,RCVD_IN_BH_CNKR,RCVD_IN_NERD_CN,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
Received: from elasmtp-dupuy.atl.sa.earthlink.net (HELO elasmtp-dupuy.atl.sa.earthlink.net) (209.86.89.62)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Wed, 23 May 2007 01:01:44 -0700
DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws;
  s=dk20050327; d=earthlink.net;
  b=fPqE/HDkpe0V5lermvv9U9yssxbt5sMiLOqxdltxADdQqHEryjeD/nUqCW1O/XMG;
  h=Received:Message-ID:Date:From:User-Agent:MIME-Version:To:CC:Subject:References:In-Reply-To:Content-Type:Content-Transfer-Encoding:X-ELNK-Trace:X-Originating-IP;
Received: from [59.41.216.153] (helo=[192.168.0.101])
	by elasmtp-dupuy.atl.sa.earthlink.net with asmtp (Exim 4.34)
	id 1Hqlms-0004bY-2r; Wed, 23 May 2007 04:01:39 -0400
Message-ID: <4653F4DC.7060601@earthlink.net>
Date: Wed, 23 May 2007 16:01:32 +0800
From: Jeff Pang <pangj@earthlink.net>
User-Agent: Thunderbird 2.0.0.0 (Windows/20070326)
MIME-Version: 1.0
To: =?UTF-8?B?VGhvbWFzIELDpHR6bGVy?= <t.baetzler@bringe.com>
CC: beginners@perl.org
Subject: Re: Query an IP from file
References: <E350C77ABFDBD242BDD51F5DA07905C10188768E@SONNE.gw.bringe.net>
In-Reply-To: <E350C77ABFDBD242BDD51F5DA07905C10188768E@SONNE.gw.bringe.net>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 8bit
X-ELNK-Trace: 7070c57df59c6c2974bf435c0eb9d4780e74e32b2412d3e64fd96fbdaa0c73b664a98bdb7dd3a5c3350badd9bab72f9c350badd9bab72f9c350badd9bab72f9c
X-Originating-IP: 59.41.216.153

Thomas Bätzler 写道:
> Hi, 
> 
> Jeff Pang <pangj@earthlink.net> asked:
> 
>> I have a text file which contains lots of IPs,like:
>>
>> 58.253.0.0/16;
>> 58.254.0.0/16;
>> 58.255.0.0/16;
>> 60.0.0.0/16;
>> 60.1.0.0/16;
>> 60.10.0.0/16;
>> 60.16.0.0/16;
>> 60.17.0.0/16;
>> 60.18.0.0/16;
>> 60.19.0.0/16;
>> 60.2.0.0/16;
>> 60.20.0.0/16;
>> 60.21.0.0/16;
>> 60.22.0.0/16;
>> 60.23.0.0/16;
>> 60.3.0.0/16;
>>
>> My question is,given an IP,ie 59.32.232.33,how can I know it 
>> exists in this file or not?
>> Is there a module already?thanks.
> 
> It's not a module, but here's some of my code that
> might be useful if you want to test many ip adresses
> against a fixed set of networks.
> 
> It is built on the facts that IP adresses can be 
> converted to integers that retain the ordering
> of the adresses and that networks are a range of
> ip adresses - so your problem is really figuring
> out whether a number x falls into one of n discrete
> intervals.
> 
> The method of choice for this kind of problem is
> doing a binary search.
> 
> I've tested several approaches and settled for
> dynamically creating an unrolled variant of an
> iterative binary search.
> 
> HTH,
> Thomas


Hello Thomas,

I tried your codes,it's good I think.
I've modified some of the codes to fit my situation.
But if the network data files include too much IPs,my program used up 
all memory and couldn't get continued.
Below are my modified codes.Attachments are two network data files.

Any suggestion guys?Thanks.


================================
#!/usr/bin/perl
use strict;
use warnings;
use Socket;
#use Data::Dumper;

#------------------
# main
#------------------

# read from ISPs' network data files,each item in files looks like 
"222.85.93.0/24"
# "tel_acl.txt" store TEL's network data,"cnc_acl.txt" store CNC's 
network data.
our $teldata = build_array("tel_acl.txt");
our $cncdata = build_array("cnc_acl.txt");

# default ISP,when an IP belong to neither TEL nor CNC,then specify it 
to this default ISP
our $default_isp = 'unknown';

#
# main loop,accept an ip from STDIN
#
while(<>) {
     chomp;
     my $isp = query_an_ip($_);
     print $isp,"\n";
}


#------------------
# subroutines
#------------------

#
# verify an ip belong to which ISP
#
sub query_an_ip {
         my $ip = shift;
         my $int = ip_to_number($ip);

         if (binSearch($teldata,$int) != -1) {
                 return 'tel';
         } elsif (binSearch($cncdata,$int) != -1) {
                 return 'cnc';
         } else {
                 return $default_isp;
         }
}

#
# build an array for binary search
#

sub build_array {
     my $file = shift;
     my @data = ();

     open FILE,$file or die $!;
     while(<FILE>) {
         next unless /^(\d+\.\d+\.\d+\.\d+)\/(\d+)/;
         my ($netnum,$mask) = ($1,$2);

         # translate netnum and mask to int
         $netnum = ip_to_number($netnum);
         $mask = make_mask($mask);

         # Sanity check: Network number ANDed to the host mask must be 0
         next if $netnum & $mask;

         for (my $i=$netnum;$i<=$netnum+$mask;$i++) {
             push @data,$i
         }
     }
     close FILE;

     # sort this array and get rid of duplicated items
     my %tmp;
     @data = grep { ++$tmp{$_} < 2 }
             sort {$a <=> $b} @data;

     return \@data;
}


#
# number of mask bits => inverted Bit mask
#
# converts the xx number of mask bits (in ip.ip.ip.ip/xx) to an
# inverted bit mask, i.e. 24 becomes 0x000000FF
#

sub make_mask {

     if( $_[0] < 0 || $_[0] > 32 ){
         die "Illegal mask /$_[0]";
     } else {
         return( 2 ** ( 32 - $_[0] ) - 1);
     }
}


#
# ip.ip.ip.ip => 0x????????
#
# convert a dottect decimal IP address to an unsigned long number
# in host byte order.
#

sub ip_to_number {

     if( defined ( my $nl = inet_aton( $_[0] ) ) ){
         # convert network to host byte order
         return( unpack( 'N', $nl ) );
     } else {
         die "Invalid IP address '$_[0]'!\n";
     }
}


#
# binary search,need a sorted array
#

sub binSearch
{
     my $arr_ref = shift;
     my $key = shift;
     my $low = 0;
     my $high = $#$arr_ref;

     my $middle;

     while($low <= $high) {
         $middle = int(($low+$high)/2);
         if ($key == $arr_ref->[$middle]) {
             return $middle;
         } elsif ($key < $arr_ref->[$middle]) {
             $high = $middle -1;
         } else {
             $low = $middle +1;
         }
     }

     return -1;
}

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


