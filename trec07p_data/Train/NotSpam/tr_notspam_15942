From beginners-return-92126-ktwarwic=speedy.uwaterloo.ca@perl.org  Sun Jun  3 22:52:23 2007
Return-Path: <beginners-return-92126-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l542qMhB022353
	for <ktwarwic@flax9.uwaterloo.ca>; Sun, 3 Jun 2007 22:52:23 -0400
Received: (qmail 13143 invoked by uid 514); 4 Jun 2007 02:52:12 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 13134 invoked from network); 4 Jun 2007 02:52:12 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 4 Jun 2007 02:52:12 -0000
Received: (qmail 14848 invoked by uid 225); 4 Jun 2007 02:52:12 -0000
Delivered-To: beginners@perl.org
Received: (qmail 14841 invoked by alias); 4 Jun 2007 02:52:11 -0000
X-Spam-Status: No, hits=-0.2 required=8.0
	tests=BAYES_40,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of cryan2@stny.rr.com designates 24.24.2.59 as permitted sender)
Received: from ms-smtp-05.nyroc.rr.com (HELO ms-smtp-05.nyroc.rr.com) (24.24.2.59)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Sun, 03 Jun 2007 19:43:26 -0700
Received: from [192.168.0.106] (cpe-69-205-188-200.stny.res.rr.com [69.205.188.200])
	by ms-smtp-05.nyroc.rr.com (8.13.6/8.13.6) with ESMTP id l542gSXK013530
	for <beginners@perl.org>; Sun, 3 Jun 2007 22:42:29 -0400 (EDT)
Message-ID: <46637A80.3040305@stny.rr.com>
Date: Sun, 03 Jun 2007 22:35:44 -0400
From: Ryan <cryan2@stny.rr.com>
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.0.4) Gecko/20060516 SeaMonkey/1.0.2
MIME-Version: 1.0
To: beginners@perl.org
Subject: Re: freeze after <STDIN>
References: <46625E55.20306@stny.rr.com> <58ce48dc0706030242v9ab59ddp690ee65eaf45fc96@mail.gmail.com>
In-Reply-To: <58ce48dc0706030242v9ab59ddp690ee65eaf45fc96@mail.gmail.com>
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Virus-Scanned: Symantec AntiVirus Scan Engine

Now I think I understand better, thanks.

The idea of changing the record separator to something else I borrowed 
from another thread on the list archives, which dealt with a similar 
problem to mine.  I have large text files that contain multi-line, 
multi-paragraph sections that pertain to a variety of patients.  I 
separated them with ***.  I thought as my first exercise in perl, I 
would try to learn how to extract from those files all the sections that 
pertain to a particular patient, and print them to the screen.  I 
couldn't think how to do it by walking through the file line-by-line. 
So that thread about sections and separators really helped.  With your 
suggestions, and a small test input file, it looks like it is working.

I thought the * character needed a backslash to be taken literally.  But 
I guess that's only in regular expressions?  I was confused about that.

--Chris

Chas Owens wrote:
> On 6/3/07, Ryan <cryan2@stny.rr.com> wrote:
> snip
>> open F, "JunkTestText.txt";
>> local $/ = "\*\*\*";
>> my @sections = <F>;
>> close F;
> snip
>> When executed, it runs up to and including asking me for input from the
>> terminal.  When I enter a value for $patient (a 7-digit number) and
>> press enter, nothing happens.  The cursor goes down to the next line and
>> just waits.
> snip
> 
> The Problem is in that section of code.  You did the right thing using
> local to limit the scope of $/, but failed to do the other necessary
> thing: add a block around the code to cause it to revert back.  This
> being Perl there are several solutions.  Here are few in order of my
> preference.
> 
> #!/usr/bin/perl
> 
> use strict;
> use warnings;
> 
> print "use do to make the three steps into one\n";
> my @sections1 = do {
>        open my $file, '<', 'JunkTestText.txt';
>        local $/ = '***';
>        <$file>;
> };
> 
> print map { "[$_]\n" } @sections1;
> 
> print "use a bare block to limit the scope\n";
> my @sections2;
> {
>        open my $file, '<', 'JunkTestText.txt';
>        local $/ = '***';
>        @sections2 = <$file>;
> }
> 
> print map { "[$_]\n" } @sections2;
> 
> print "save to old value of \$/ and put it back\n";
> my $old_in_sep = $/;
> $/ = '***';
> open my $file, '<', 'JunkTestText.txt';
> my @sections3 = <$file>;
> #this was not necessary before because
> #the file handle closes when it goes
> #out of scope
> close $file;
> $/ = $old_in_sep;
> 
> print map { "[$_]\n" } @sections3;
> 

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


