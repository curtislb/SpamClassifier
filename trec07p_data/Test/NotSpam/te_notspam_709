From beginners-return-92848-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu Jun 28 08:40:54 2007
Return-Path: <beginners-return-92848-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5SCeqL9010468
	for <ktwarwic@flax9.uwaterloo.ca>; Thu, 28 Jun 2007 08:40:53 -0400
Received: (qmail 11237 invoked by uid 514); 28 Jun 2007 12:40:44 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 11220 invoked from network); 28 Jun 2007 12:40:44 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 28 Jun 2007 12:40:44 -0000
Received: (qmail 6764 invoked by uid 225); 28 Jun 2007 12:40:43 -0000
Delivered-To: beginners@perl.org
Received: (qmail 6756 invoked by alias); 28 Jun 2007 12:40:43 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
Received: from h206.core.ignum.cz (HELO h206.core.ignum.cz) (217.31.49.206)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 28 Jun 2007 05:40:32 -0700
Received: from localhost (localhost [127.0.0.1])
	by hroch.core.ignum.cz (Postfix) with SMTP id 6EC8F5D2529
	for <beginners@perl.org>; Thu, 28 Jun 2007 14:40:12 +0200 (CEST)
Received: from kartac.core.ignum.cz (kartac.local.ignum.cz [192.168.1.62])
	by hroch.core.ignum.cz (Postfix) with ESMTP id 3E4C958B3FA
	for <beginners@perl.org>; Thu, 28 Jun 2007 14:40:12 +0200 (CEST)
Received: from [10.118.11.232] (unknown [194.228.230.147])
	by kartac.core.ignum.cz (Postfix) with ESMTP id 166932EF214
	for <beginners@perl.org>; Thu, 28 Jun 2007 14:40:24 +0200 (CEST)
From: "Jenda Krynicky" <Jenda@Krynicky.cz>
To: beginners@perl.org
Date: Thu, 28 Jun 2007 14:40:25 +0200
MIME-Version: 1.0
Subject: Re: More loops
Message-ID: <4683C859.9681.A15D0E2@Jenda.Krynicky.cz>
Priority: normal
In-reply-to: <848c3f360706280253n7de68c69g62bec916e57f6401@mail.gmail.com>
References: <848c3f360706280253n7de68c69g62bec916e57f6401@mail.gmail.com>
X-mailer: Pegasus Mail for Windows (4.41)
Content-type: text/plain; charset=US-ASCII
Content-transfer-encoding: 7BIT
Content-description: Mail message body

From: "Amichai Teumim" <amichai@teumim.com>
> I need to use two loops and an if statement to sort the contents of
> this array so
> that the number go from lowest to highest.

@sorted = sort {$a <=> $b} @unsorted;

You can use the builtin function sort(). All you have to do is to 
tell it how do you want the elements compared.
 
> So I tried to implement this:
> 
> #!/usr/bin/perl
> 
> @array = (5,3,2,1,4);
> 
> for (i=0; i<n-1; i++) {
>   for (j=0; j<n-1-i; j++)
>     if ($array[j+1] < $array[j]) {  /* compare the two neighbors */
>       tmp = $array[j];         /* swap $array[j] and $array[j+1]      */
>       $array[j] = $array[j+1];
>       $array[j+1] = tmp;
>   }
> }

The first thing you are missing are sigils. All variables in Perl 
have to start with a sigil ($, @, %, ...).

 for ($i=0; $i<$n-1; $i++) {
   for ($j=0; $j<$n-1-$i; $j++)
     if ($array[$j+1] < $array[$j]) {  /* compare the two neighbors 
*/
       $tmp = $array[$j];         /* swap $array[j] and $array[j+1]   
   */
       $array[$j] = $array[$j+1];
       $array[$j+1] = $tmp;
   }
 }

Next thing is that you do not need a third variable to exchange the 
values of two variables.

 ($a, $b) = ($b, $a);

is perfectly legal and more efficient.
So you can write the body of the inner loop like this:

 ($array[j], $array[j+1]) = ($array[j+1], $array[j]);

You may even use so called "array slices". That is instead of writing
	($array[j+1], $array[j])
you can write just
	@array[j+1,j]
so the body of the loop will be

	@array[j,j+1] = @array[j+1,j];

You may also use the foreach style of loop instead of the C-style 
for():

foreach my $i (0 .. $#array) {
 foreach my $j (0 .. $#array-1-$i) {
  if ($array[$j+1] < $array[$j]) { 
   @array[j,j+1] = @array[j+1,j];
  }
 }
}


> foreach $elem (@array){
>   print "$elem\n";
> }

This can be simplified to

print join("\n", @array), "\n";

Jenda
===== Jenda@Krynicky.cz === http://Jenda.Krynicky.cz =====
When it comes to wine, women and song, wizards are allowed 
to get drunk and croon as much as they like.
	-- Terry Pratchett in Sourcery


-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


