From samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org  Fri Jun 29 13:28:36 2007
Return-Path: <samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org>
Received: from lists.samba.org (mail.samba.org [66.70.73.150])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l5THSZL9028768
	for <ktwarwic@speedy.uwaterloo.ca>; Fri, 29 Jun 2007 13:28:35 -0400
Received: from dp.samba.org (localhost [127.0.0.1])
	by lists.samba.org (Postfix) with ESMTP id 18F36163865
	for <ktwarwic@speedy.uwaterloo.ca>; Fri, 29 Jun 2007 17:28:32 +0000 (GMT)
X-Spam-Checker-Version: SpamAssassin 3.1.7 (2006-10-05) on dp.samba.org
X-Spam-Level: 
X-Spam-Status: No, score=-0.1 required=3.8 tests=AWL,BAYES_00,NO_REAL_NAME,
	NO_RELAYS,RCVD_IN_DSBL autolearn=no version=3.1.7
X-Original-To: samba-cvs@samba.org
Delivered-To: samba-cvs@samba.org
Received: by lists.samba.org (Postfix, from userid 605)
	id 1110F162AC1; Fri, 29 Jun 2007 17:28:01 +0000 (GMT)
To: samba-cvs@samba.org
From: vlendec@samba.org
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Message-Id: <20070629172801.1110F162AC1@lists.samba.org>
Date: Fri, 29 Jun 2007 17:28:01 +0000 (GMT)
Subject: svn commit: samba r23660 - in branches: SAMBA_3_0/source
	SAMBA_3_0/source/lib SAMBA_3_0/source/torture
	SAMBA_3_0_26/source SAMBA_3_0_26/source/lib
	SAMBA_3_0_26/source/torture
X-BeenThere: samba-cvs@lists.samba.org
X-Mailman-Version: 2.1.5
Precedence: list
Reply-To: samba-technical@lists.samba.org
List-Id: Samba CVS and subversion commit messages <samba-cvs.lists.samba.org>
List-Unsubscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=unsubscribe>
List-Archive: <http://lists.samba.org/archive/samba-cvs>
List-Post: <mailto:samba-cvs@lists.samba.org>
List-Help: <mailto:samba-cvs-request@lists.samba.org?subject=help>
List-Subscribe: <https://lists.samba.org/mailman/listinfo/samba-cvs>,
	<mailto:samba-cvs-request@lists.samba.org?subject=subscribe>
Sender: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org
Errors-To: samba-cvs-bounces+ktwarwic=speedy.uwaterloo.ca@lists.samba.org

Author: vlendec
Date: 2007-06-29 17:27:59 +0000 (Fri, 29 Jun 2007)
New Revision: 23660

WebSVN: http://websvn.samba.org/cgi-bin/viewcvs.cgi?view=rev&root=samba&rev=23660

Log:
Anybody know what check_dos_char() was used for? It wasn't called at
all, so it's gone. With it 8k bss went away.

Removed:
   branches/SAMBA_3_0/source/torture/t_doschar.c
   branches/SAMBA_3_0_26/source/torture/t_doschar.c
Modified:
   branches/SAMBA_3_0/source/Makefile.in
   branches/SAMBA_3_0/source/lib/charcnv.c
   branches/SAMBA_3_0/source/lib/util_unistr.c
   branches/SAMBA_3_0_26/source/Makefile.in
   branches/SAMBA_3_0_26/source/lib/charcnv.c
   branches/SAMBA_3_0_26/source/lib/util_unistr.c


Changeset:
Modified: branches/SAMBA_3_0/source/Makefile.in
===================================================================
--- branches/SAMBA_3_0/source/Makefile.in	2007-06-29 17:09:39 UTC (rev 23659)
+++ branches/SAMBA_3_0/source/Makefile.in	2007-06-29 17:27:59 UTC (rev 23660)
@@ -1735,8 +1735,6 @@
 bin/t_stringoverflow@EXEEXT@: $(BINARY_PREREQS) bin/libbigballofmud.@SHLIBEXT@ torture/t_stringoverflow.o
 	$(CC) $(FLAGS) -o $@ $(DYNEXP) torture/t_stringoverflow.o -L./bin -lbigballofmud
 
-bin/t_doschar@EXEEXT@: $(BINARY_PREREQS) bin/libbigballofmud.@SHLIBEXT@ torture/t_doschar.o
-	$(CC) $(FLAGS) -o $@ $(DYNEXP) $(LIBS) torture/t_doschar.o -L ./bin -lbigballofmud
 bin/t_push_ucs2@EXEEXT@: $(BINARY_PREREQS) bin/libbigballofmud.@SHLIBEXT@ torture/t_push_ucs2.o
 	$(CC) $(FLAGS) -o $@ $(DYNEXP) $(LIBS) torture/t_push_ucs2.o -L ./bin -lbigballofmud
 

Modified: branches/SAMBA_3_0/source/lib/charcnv.c
===================================================================
--- branches/SAMBA_3_0/source/lib/charcnv.c	2007-06-29 17:09:39 UTC (rev 23659)
+++ branches/SAMBA_3_0/source/lib/charcnv.c	2007-06-29 17:27:59 UTC (rev 23660)
@@ -179,7 +179,6 @@
 		 * codepage changes? */
 		/* XXX: Is the did_reload test too strict? */
 		conv_silent = True;
-		init_doschar_table();
 		init_valid_table();
 		conv_silent = False;
 	}

Modified: branches/SAMBA_3_0/source/lib/util_unistr.c
===================================================================
--- branches/SAMBA_3_0/source/lib/util_unistr.c	2007-06-29 17:09:39 UTC (rev 23659)
+++ branches/SAMBA_3_0/source/lib/util_unistr.c	2007-06-29 17:27:59 UTC (rev 23660)
@@ -36,14 +36,6 @@
 static BOOL valid_table_use_unmap;
 
 /**
- * This table says which Unicode characters are valid dos
- * characters.
- *
- * Each value is just a single bit.
- **/
-static uint8 doschar_table[8192]; /* 65536 characters / 8 bits/byte */
-
-/**
  * Destroy global objects allocated by load_case_tables()
  **/
 void gfree_case_tables(void)
@@ -150,21 +142,6 @@
 #endif
 }
 
-/*
-  see if a ucs2 character can be mapped correctly to a dos character
-  and mapped back to the same character in ucs2
-*/
-
-int check_dos_char(smb_ucs2_t c)
-{
-	lazy_initialize_conv();
-	
-	/* Find the right byte, and right bit within the byte; return
-	 * 1 or 0 */
-	return (doschar_table[(c & 0xffff) / 8] & (1 << (c & 7))) != 0;
-}
-
-
 static int check_dos_char_slowly(smb_ucs2_t c)
 {
 	char buf[10];
@@ -182,34 +159,7 @@
 	return (c == c2);
 }
 
-
 /**
- * Fill out doschar table the hard way, by examining each character
- **/
-
-void init_doschar_table(void)
-{
-	int i, j, byteval;
-
-	/* For each byte of packed table */
-	
-	for (i = 0; i <= 0xffff; i += 8) {
-		byteval = 0;
-		for (j = 0; j <= 7; j++) {
-			smb_ucs2_t c;
-
-			c = i + j;
-			
-			if (check_dos_char_slowly(c)) {
-				byteval |= 1 << j;
-			}
-		}
-		doschar_table[i/8] = byteval;
-	}
-}
-
-
-/**
  * Load the valid character map table from <tt>valid.dat</tt> or
  * create from the configured codepage.
  *
@@ -257,7 +207,7 @@
 	for (;i<0x10000;i++) {
 		smb_ucs2_t c;
 		SSVAL(&c, 0, i);
-		valid_table[i] = check_dos_char(c);
+		valid_table[i] = check_dos_char_slowly(c);
 	}
 }
 

Deleted: branches/SAMBA_3_0/source/torture/t_doschar.c
===================================================================
--- branches/SAMBA_3_0/source/torture/t_doschar.c	2007-06-29 17:09:39 UTC (rev 23659)
+++ branches/SAMBA_3_0/source/torture/t_doschar.c	2007-06-29 17:27:59 UTC (rev 23660)
@@ -1,42 +0,0 @@
-/*
-   Samba - Unix SMB/CIFS implementation
-   Test harness for check_dos_char
-   Copyright (C) Martin Pool 2003
-   
-   This program is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2 of the License, or
-   (at your option) any later version.
-   
-   This program is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-   GNU General Public License for more details.
-   
-   You should have received a copy of the GNU General Public License
-   along with this program; if not, write to the Free Software
-   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-*/
-
-#include "includes.h"
-
-
-/*
- * Just print out DOS validity or not for every character.
- *
- * DOS validity for a Unicode character set means that it can be
- * represented in DOS codepage, and that the DOS character maps back
- * to the same Unicode character.
- *
- * This depends on which DOS codepage is configured.
- */
- int main(void)
-{
-	smb_ucs2_t	i;
-
-	for (i = 0; i < 0xffff; i++) {
-		printf("%d %d\n", (int) i, (int) check_dos_char(i));
-	}
-	
-	return 0;
-}

Modified: branches/SAMBA_3_0_26/source/Makefile.in
===================================================================
--- branches/SAMBA_3_0_26/source/Makefile.in	2007-06-29 17:09:39 UTC (rev 23659)
+++ branches/SAMBA_3_0_26/source/Makefile.in	2007-06-29 17:27:59 UTC (rev 23660)
@@ -1725,8 +1725,6 @@
 bin/t_stringoverflow@EXEEXT@: $(BINARY_PREREQS) bin/libbigballofmud.@SHLIBEXT@ torture/t_stringoverflow.o
 	$(CC) $(FLAGS) -o $@ $(DYNEXP) torture/t_stringoverflow.o -L./bin -lbigballofmud
 
-bin/t_doschar@EXEEXT@: $(BINARY_PREREQS) bin/libbigballofmud.@SHLIBEXT@ torture/t_doschar.o
-	$(CC) $(FLAGS) -o $@ $(DYNEXP) $(LIBS) torture/t_doschar.o -L ./bin -lbigballofmud
 bin/t_push_ucs2@EXEEXT@: $(BINARY_PREREQS) bin/libbigballofmud.@SHLIBEXT@ torture/t_push_ucs2.o
 	$(CC) $(FLAGS) -o $@ $(DYNEXP) $(LIBS) torture/t_push_ucs2.o -L ./bin -lbigballofmud
 

Modified: branches/SAMBA_3_0_26/source/lib/charcnv.c
===================================================================
--- branches/SAMBA_3_0_26/source/lib/charcnv.c	2007-06-29 17:09:39 UTC (rev 23659)
+++ branches/SAMBA_3_0_26/source/lib/charcnv.c	2007-06-29 17:27:59 UTC (rev 23660)
@@ -179,7 +179,6 @@
 		 * codepage changes? */
 		/* XXX: Is the did_reload test too strict? */
 		conv_silent = True;
-		init_doschar_table();
 		init_valid_table();
 		conv_silent = False;
 	}

Modified: branches/SAMBA_3_0_26/source/lib/util_unistr.c
===================================================================
--- branches/SAMBA_3_0_26/source/lib/util_unistr.c	2007-06-29 17:09:39 UTC (rev 23659)
+++ branches/SAMBA_3_0_26/source/lib/util_unistr.c	2007-06-29 17:27:59 UTC (rev 23660)
@@ -36,14 +36,6 @@
 static BOOL valid_table_use_unmap;
 
 /**
- * This table says which Unicode characters are valid dos
- * characters.
- *
- * Each value is just a single bit.
- **/
-static uint8 doschar_table[8192]; /* 65536 characters / 8 bits/byte */
-
-/**
  * Destroy global objects allocated by load_case_tables()
  **/
 void gfree_case_tables(void)
@@ -150,21 +142,6 @@
 #endif
 }
 
-/*
-  see if a ucs2 character can be mapped correctly to a dos character
-  and mapped back to the same character in ucs2
-*/
-
-int check_dos_char(smb_ucs2_t c)
-{
-	lazy_initialize_conv();
-	
-	/* Find the right byte, and right bit within the byte; return
-	 * 1 or 0 */
-	return (doschar_table[(c & 0xffff) / 8] & (1 << (c & 7))) != 0;
-}
-
-
 static int check_dos_char_slowly(smb_ucs2_t c)
 {
 	char buf[10];
@@ -182,34 +159,7 @@
 	return (c == c2);
 }
 
-
 /**
- * Fill out doschar table the hard way, by examining each character
- **/
-
-void init_doschar_table(void)
-{
-	int i, j, byteval;
-
-	/* For each byte of packed table */
-	
-	for (i = 0; i <= 0xffff; i += 8) {
-		byteval = 0;
-		for (j = 0; j <= 7; j++) {
-			smb_ucs2_t c;
-
-			c = i + j;
-			
-			if (check_dos_char_slowly(c)) {
-				byteval |= 1 << j;
-			}
-		}
-		doschar_table[i/8] = byteval;
-	}
-}
-
-
-/**
  * Load the valid character map table from <tt>valid.dat</tt> or
  * create from the configured codepage.
  *
@@ -257,7 +207,7 @@
 	for (;i<0x10000;i++) {
 		smb_ucs2_t c;
 		SSVAL(&c, 0, i);
-		valid_table[i] = check_dos_char(c);
+		valid_table[i] = check_dos_char_slowly(c);
 	}
 }
 

Deleted: branches/SAMBA_3_0_26/source/torture/t_doschar.c
===================================================================
--- branches/SAMBA_3_0_26/source/torture/t_doschar.c	2007-06-29 17:09:39 UTC (rev 23659)
+++ branches/SAMBA_3_0_26/source/torture/t_doschar.c	2007-06-29 17:27:59 UTC (rev 23660)
@@ -1,42 +0,0 @@
-/*
-   Samba - Unix SMB/CIFS implementation
-   Test harness for check_dos_char
-   Copyright (C) Martin Pool 2003
-   
-   This program is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2 of the License, or
-   (at your option) any later version.
-   
-   This program is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-   GNU General Public License for more details.
-   
-   You should have received a copy of the GNU General Public License
-   along with this program; if not, write to the Free Software
-   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-*/
-
-#include "includes.h"
-
-
-/*
- * Just print out DOS validity or not for every character.
- *
- * DOS validity for a Unicode character set means that it can be
- * represented in DOS codepage, and that the DOS character maps back
- * to the same Unicode character.
- *
- * This depends on which DOS codepage is configured.
- */
- int main(void)
-{
-	smb_ucs2_t	i;
-
-	for (i = 0; i < 0xffff; i++) {
-		printf("%d %d\n", (int) i, (int) check_dos_char(i));
-	}
-	
-	return 0;
-}

