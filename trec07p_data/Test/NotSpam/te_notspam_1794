From sugar-bounces@lists.laptop.org  Mon Jul  2 18:34:44 2007
Return-Path: <sugar-bounces@lists.laptop.org>
Received: from mail.laptop.org (pedal.laptop.org [18.85.2.148])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l62MYiL9019859
	for <ktwarwic@speedy.uwaterloo.ca>; Mon, 2 Jul 2007 18:34:44 -0400
Received: from [127.0.1.1] (localhost [127.0.0.1])
	by mail.laptop.org (Postfix) with ESMTP id D7DCB58BC7CB;
	Mon,  2 Jul 2007 18:33:34 -0400 (EDT)
Received: from mo-p00-ob.rzone.de (mo-p00-ob.rzone.de [81.169.146.160])
	by mail.laptop.org (Postfix) with ESMTP id 76D6258BC7CB
	for <sugar@lists.laptop.org>; Mon,  2 Jul 2007 18:33:33 -0400 (EDT)
Received: from [192.168.10.136]
	(pD95166D7.dip0.t-ipconnect.de [217.81.102.215])
	by post.webmailer.de (mrclete mo8) (RZmta 7.6)
	with ESMTP id f03dd5j62KGJcx ; Tue, 3 Jul 2007 00:34:35 +0200 (MEST)
In-Reply-To: <1183393558.6454.27.camel@bruno-laptop>
References: <1183291166.5419.62.camel@bruno> <4687FB00.2010208@redhat.com>
	<1183322514.5461.8.camel@bruno> <46890EB4.9070901@redhat.com>
	<C4673EB3-106A-43D5-B54C-161786663740@freudenbergs.de>
	<1183393558.6454.27.camel@bruno-laptop>
Mime-Version: 1.0 (Apple Message framework v752.3)
Message-Id: <198D4600-84AA-465C-8910-F274956FBFA1@freudenbergs.de>
From: Bert Freudenberg <bert@freudenbergs.de>
Date: Tue, 3 Jul 2007 00:34:33 +0200
To: Bruno Coudoin <bruno.coudoin@free.fr>
X-Mailer: Apple Mail (2.752.3)
X-RZG-AUTH: klDUxUd2aRrnQr9PAdUndyTugUZ8lgF4ymAgUtj97vJmJIo5NwBaO+Q6nsQyVKm7
X-RZG-CLASS-ID: mo00
Cc: GCompris developpers list <gcompris-devel@lists.sourceforge.net>,
   sugar@lists.laptop.org
Subject: Re: [sugar] GComprisXO progress
X-BeenThere: sugar@lists.laptop.org
X-Mailman-Version: 2.1.9
Precedence: list
List-Id: "Discussion of OLPC design,
	desktop platform and user experience" <sugar.lists.laptop.org>
List-Unsubscribe: <http://lists.laptop.org/listinfo/sugar>,
	<mailto:sugar-request@lists.laptop.org?subject=unsubscribe>
List-Archive: <http://lists.laptop.org/pipermail/sugar>
List-Post: <mailto:sugar@lists.laptop.org>
List-Help: <mailto:sugar-request@lists.laptop.org?subject=help>
List-Subscribe: <http://lists.laptop.org/listinfo/sugar>,
	<mailto:sugar-request@lists.laptop.org?subject=subscribe>
Content-Type: text/plain; charset="iso-8859-1"
Sender: sugar-bounces@lists.laptop.org
Errors-To: sugar-bounces@lists.laptop.org
Content-Transfer-Encoding: 8bit
X-MIME-Autoconverted: from quoted-printable to 8bit by flax9.uwaterloo.ca id l62MYiL9019859

On Jul 2, 2007, at 18:25 , Bruno Coudoin wrote:

> Le lundi 02 juillet 2007 à 17:05 +0200, Bert Freudenberg a écrit :
>> On Jul 2, 2007, at 16:41 , Marco Pesenti Gritti wrote:
>>
>>> I'd suggest to have a look at sugar-native-factory.c in sugar  
>>> git. You
>>> can either add something like that to the binary or use it as is to
>>> launch the binary.
>>
>> For an example of its use, see the Etoys activity in git. If anything
>> is unclear, feel free to ask.
>
> Yes, this is unclear. I checked twice and could not even found  
> where the
> dbus code for the registering and the event management is. Could you
> please tell me which files I have to look at and a mini description of
> what it does.

Start by looking into Etoys "activity.info". It contains this exec spec:

exec = etoys-factory org.vpri.EtoysActivity etoys-instance

This calls the "etoys-factory" which just sets up a few env vars and  
opens the log file, the executes sugar-native-factory passing all its  
parameters. Thus "sugar-native-factory" is called with the service  
name as argument plus another script ("etoys-instance") to be  
executed for each activity instance. That is, each time you click the  
activity icon, the shell sends a create() message to the factory  
which forks a new process and executes the "etoys-instance" script  
with all the parameters as key/value pairs given to create(). The  
instance script just checks these parameters and the executes the  
actual binary.

An example invocation of the etoys-instance script could look like this:

etoys-instance bundle_id org.vpri.Etoys  \
	activity_id 6f7f3acacca87886332f50bdd522d805f0abbf1f \
	object_id 456def123abc789aaa

Each activity instance then can be single threaded and does not need  
to manage multiple invocations. It still needs to create a dbus  
service providing the activity instance protocol as described in

	http://wiki.laptop.org/go/Activity_DBus_API

So the sugar-native-factory program only handles the Activity Factory  
protocol, perhaps a similarly generic program could be written to  
handle the Activity Instance protocol.

- Bert -


_______________________________________________
Sugar mailing list
Sugar@lists.laptop.org
http://lists.laptop.org/listinfo/sugar

