From beginners-return-93044-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed Jul  4 13:26:40 2007
Return-Path: <beginners-return-93044-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l64HQcL9013497
	for <ktwarwic@flax9.uwaterloo.ca>; Wed, 4 Jul 2007 13:26:39 -0400
Received: (qmail 3993 invoked by uid 514); 4 Jul 2007 17:26:29 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 3983 invoked from network); 4 Jul 2007 17:26:28 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 4 Jul 2007 17:26:28 -0000
Received: (qmail 24985 invoked by uid 225); 4 Jul 2007 17:26:27 -0000
Delivered-To: beginners@perl.org
Received: (qmail 24965 invoked by alias); 4 Jul 2007 17:26:25 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of tom.phoenix@gmail.com designates 66.249.82.231 as permitted sender)
Received: from wx-out-0506.google.com (HELO wx-out-0506.google.com) (66.249.82.231)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Wed, 04 Jul 2007 10:26:22 -0700
Received: by wx-out-0506.google.com with SMTP id t11so1214021wxc
        for <beginners@perl.org>; Wed, 04 Jul 2007 10:26:17 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:sender:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=aL+YY3NsVYhZ6LgCETYoBpk2RAqAHHHeOcrgVjbH23WNqigoyYo1HY/kxLnhOCxdqTgKgxNSA24IwvrwIRLR7TDvdlqP5us+vnGARpC5YCliBiOGvXyqtWVBmvo1AqqOksfc1jx/9OwKF0MH0r6G8CYSyCYVknALeazflF4eLLw=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:sender:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=EPOUEguPdWPgrYECxscsOt3vO6+MgWZZehwYsoiktCURRXkQJ45OxPINleBLll/knHwd0FeNC/E88fRGund9tiIMYYvpJWWf2xWaLXIDlpxwpysVgdODWNsWAXW5+ZgEwr0sxwOK0412G7nNU4xlxyvroZXQPZuEdvnUdtN67mM=
Received: by 10.90.51.17 with SMTP id y17mr7270773agy.1183569977392;
        Wed, 04 Jul 2007 10:26:17 -0700 (PDT)
Received: by 10.90.116.2 with HTTP; Wed, 4 Jul 2007 10:26:17 -0700 (PDT)
Message-ID: <31086b240707041026x59128db6m55307dd80f10565f@mail.gmail.com>
Date: Wed, 4 Jul 2007 10:26:17 -0700
From: "Tom Phoenix" <tom@stonehenge.com>
Sender: tom.phoenix@gmail.com
To: "kyle.halberstam@gmail.com" <kyle.halberstam@gmail.com>
Subject: Re: Check if file is being modified by another process
Cc: beginners@perl.org
In-Reply-To: <1183562620.505242.300810@57g2000hsv.googlegroups.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <1183562620.505242.300810@57g2000hsv.googlegroups.com>
X-Google-Sender-Auth: f45b28ed941eb160

On 7/4/07, kyle.halberstam@gmail.com <kyle.halberstam@gmail.com> wrote:

> I have an application that creates and writes to an output file I need
> to process. I need to process the file when it is completely written
> to. I do not initially know how big the file will be in the end.
> Further, the application does NOT put a write lock on the file while
> it is writing it. because of the buffering, the program wirtes to the
> file in random chunks not continuously. And what is worse, the file
> format itself could vary so there is nothing in the actual file that
> signals the end of it. Everything is on a linux server.
>
> What's the most efficient way of checking this? - one way is perhaps
> inifinite loop checking mmtime until it is stable for a certain amount
> of time?? I am not sure.

That's probably the right road to choose. Choose some time interval
that's long enough to be sure the file is done, but not so long that
it results in undue impatience in whoever is waiting for the end
results.

An alternative might be if there is some way to spy on the process
doing the writing. This requires new interactions between the two
programs and the OS, making everything more fragile. But if you can
determine that the other process has finished execution, or in any
other way has closed its equivalent of a filehandle, you can probably
be certain that the writing is finished. Probably.

Still, I'd prefer polling, using the longest interval I could justify.

Is there absolutely no clue available, though? For example, you speak
of buffering; if a file's size isn't a multiple of the buffer size,
does that mean that it's finished? It may be that your application
will be happiest with nearly all data at the earliest possible moment,
even though one file out of 8192 will be delayed by an extra hour to
be sure that it's really finished. But it would be bad, even fatal,
for some applications to get data out-of-order. (Or does it write just
 one file at a time, so that you know the first is done when the
second is starting?)

One frill you could add would reduce impatience by increasing the
polling frequency. It would take a lot of trouble, and maybe cause a
lot of trouble, so it's probably not worth it. But you could set the
polling interval to be arbitrarily quick, adding some code that would
recognize when some file has been updated and announcing "This
supersedes file #42", or whatever. It all depends upon whether clients
will be more troubled by missing information that is slow to come in,
or incomplete information that is quick to be updated (although
possibly still incomplete).

One last alternative comes to mind: Determine the supplier of the
mystery application, and use any means necessary to have appropriate
file locking or equivalent behavior added to their source code. If
your clients are impatient, it's transitive: they're impatient with
this other software, really.

In the end, the road you take depends upon where your clients'
impatience drives you.

Good luck with it!

--Tom Phoenix
Stonehenge Perl Training

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


