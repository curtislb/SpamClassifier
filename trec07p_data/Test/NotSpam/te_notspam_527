From beginners-return-92817-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed Jun 27 17:18:20 2007
Return-Path: <beginners-return-92817-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5RLIIL9032595
	for <ktwarwic@flax9.uwaterloo.ca>; Wed, 27 Jun 2007 17:18:19 -0400
Received: (qmail 4721 invoked by uid 514); 27 Jun 2007 21:18:09 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 4712 invoked from network); 27 Jun 2007 21:18:09 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 27 Jun 2007 21:18:09 -0000
Received: (qmail 26798 invoked by uid 225); 27 Jun 2007 21:18:09 -0000
Delivered-To: beginners@perl.org
Received: (qmail 26792 invoked by alias); 27 Jun 2007 21:18:08 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of chas.owens@gmail.com designates 209.85.146.179 as permitted sender)
Received: from wa-out-1112.google.com (HELO wa-out-1112.google.com) (209.85.146.179)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Wed, 27 Jun 2007 14:18:04 -0700
Received: by wa-out-1112.google.com with SMTP id v27so17053wah
        for <beginners@perl.org>; Wed, 27 Jun 2007 14:17:59 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=kvUlJntRZdC1JplaK1npSJHeH6HcIHWhAPlSWKZQG/OpHTOFnzw0cvKEeDyo4BLIQ9eycOSc1T0YAFk2qRK0yGtxxoVEy4hvxK93YzxbcW1lcFz/Md143VH0zUfiEtD7+2tGfiMdS6qzMd2NWsqNYtK9rnxZH2L+K9NWff1HKd0=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=dCmr7bn7UGeeiOaAqQMnnUgaXtvaz7foV0ezLtRDJTGbLiwyMPUoLEyX0IxcgjC22EuMd5RjArua0GkcQQOugNwQxeBupGE392ydjON5ZtdQtbI7Gal6FbbrQLzIMPm6gtSPhN7jnKSYYiZHRY1K/k2RhgLWkp5fydd3LLD8JVY=
Received: by 10.114.158.1 with SMTP id g1mr880488wae.1182979078978;
        Wed, 27 Jun 2007 14:17:58 -0700 (PDT)
Received: by 10.114.102.6 with HTTP; Wed, 27 Jun 2007 14:17:58 -0700 (PDT)
Message-ID: <58ce48dc0706271417s5fcb70bewa21263244ff0e79a@mail.gmail.com>
Date: Wed, 27 Jun 2007 17:17:58 -0400
From: "Chas Owens" <chas.owens@gmail.com>
To: "Tom Phoenix" <tom@stonehenge.com>
Subject: Re: String Manipulation
Cc: "Dharshana Eswaran" <dharshana.ve@gmail.com>,
   "Perl Beginners" <beginners@perl.org>
In-Reply-To: <31086b240706271234i2eea880ey5da3277e01406002@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <9f91e0840706271220q2566504fq6042ad20af74fad6@mail.gmail.com>
	 <31086b240706271234i2eea880ey5da3277e01406002@mail.gmail.com>

On 6/27/07, Tom Phoenix <tom@stonehenge.com> wrote:
snip
> Does the data have some defined grammar, or a definable one at least?
> If you are up to using Parse::RecDescent, it will probably do the job.
snip

Many people are afraid to use Parse::RecDescent because of the
learning curve involved.  I find that odd given that these people
already use regexes, but perhaps an example will spur people to use
it.  This is a simple parser for the strings provided.  Given the
structure of the strings I have no doubt that the grammar is
incomplete (for instance, I only allow one dimensional arrays), but it
can probably be extended from here as new examples present themselves.

#!/usr/bin/perl

use strict;
use warnings;
use Parse::RecDescent;

my @string = (
"{
   STACK_CC_SS_COMMON_TYPE_REFERENCE_ID_T    pp_reference_id;
   STACK_CC_SS_COMMON_TYPE_CM_LOCAL_CAUSE_T  generic_cause;
   STACK_CC_SS_COMMON_TYPE_CM_LOCAL_CAUSE_T  specific_cause;
   STACK_CC_SS_COMMON_TYPE_CHANNEL_INFO_T    channel_info;
   STACK_REG_COMMON_TYPE_RAB_RB_INFO_T       rab_info;
   STACK_CC_SS_COMMON_TYPE_L3_MSG_UNIT_T     pp_l3_msg;
} STACK_PRIMITIVE_MNCC_MESSAGE_T;
};",
"{
  UINT8  mms;  /* More messages to send */
  UINT8  transport_method;
  UINT8  mo_rpdu[STACK_MSG_COMMON_TYPE_TF_MAX_VAR_MSG_LEN];
} STACK_PRIMITIVE_MNSMS_EST_REQ_T;
};",
"{
   STACK_REG_COMMON_TYPE_REG_CAUSE_T        pp_reg_cause; /* Reason
the primitive was sent */
   STACK_REG_COMMON_TYPE_PLMN_T             pp_plmn;      /* PLMN MS
should move to */
   STACK_REG_COMMON_TYPE_SIM_T              pp_sim_type;  /* Valid
only on BUTE */
   STACK_REG_COMMON_TYPE_NW_MENU_PARAMS_T   pp_nw_menu_params; /*
Valid only when pp_reg_cause is
                                                *
_CAUSE_NW_MENU_CHANGE, _CAUSE_POWER_ON */
   BOOL                  cingular_ens_sim_phone;  /* Valid when
pp_reg_cause is SIM_INSERT */
   BOOL                  tty_enabled;    /* Valid only on BUTE. This
is valid when the reg_cause
                                                * is SIM_INSERT,
POWERON and BANDSWITCH.
                                                * TRUE : restrict RAT to GSM
                                                * FALSE: Don't
restrict RAT to GSM
                                                */
} STACK_PRIMITIVE_MNMM_REG_REQ;
};"
);

my $p = Parse::RecDescent->new(join '', <DATA>) or die "parser error";

for my $s (@string) {
        warn "could not parse [$s]" unless $p->text($s);
}

__DATA__
text: <skip: qr{\s* (/[*] .*? [*]/ \s*)*}sx> '{' statement(s) '}'
identifier ';' '};' {
        our @vars;
        print "$item[5]\n@vars";
        @vars = ();
        1; #make sure the rule returns true
}
statement: identifier identifier array(?) ';' {
        our @vars;
        my ($type, $var, $elems) = (@item[1,2], $item[3][0]);
        if ($elems) {
                $elems =~ s/\[(.*)\]/$1/;
                $type = "array of $type with $elems elements";
        }
        push @vars, "\tdata type is $type and variable name is $var\n";
        1; #make sure the rule returns true
}
array: /\[.*?\]/
identifier: /[A-Za-z_][A-Za-z0-9_]*/

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


