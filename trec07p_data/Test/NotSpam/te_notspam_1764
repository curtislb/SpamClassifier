From perl6-all-return-82509-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon Jul  2 16:35:43 2007
Return-Path: <perl6-all-return-82509-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l62KZgL9018699
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 2 Jul 2007 16:35:43 -0400
Received: (qmail 21522 invoked by uid 514); 2 Jul 2007 20:35:37 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 21517 invoked from network); 2 Jul 2007 20:35:37 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-language-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-language
List-Id: <perl6-language.perl.org>
Delivered-To: mailing list perl6-language@perl.org
Delivered-To: perl6-language@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
Date: Mon, 2 Jul 2007 22:35:03 +0200
From: Mark Overmeer <mark@overmeer.net>
To: Richard Hainsworth <richard@rusrating.ru>
Cc: perl6 language <perl6-language@perl.org>
Subject: Re: Documenting Perl6
Message-ID: <20070702203503.GB8164@earth.overmeer.net>
Mail-Followup-To: Richard Hainsworth <richard@rusrating.ru>,
	perl6 language <perl6-language@perl.org>
References: <20070702080851.GB18822@earth.overmeer.net> <4689307D.4020208@rusrating.ru>
Mime-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline
In-Reply-To: <4689307D.4020208@rusrating.ru>
Organization: MARKOV Solutions
User-Agent: Mutt/1.5.9i
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS

* Richard Hainsworth (richard@rusrating.ru) [070702 17:06]:
> Having read this posting, I find it VERY hard to understand exactly how 
> Damian and Mark differ fundamentally. They both seem to be after the 
> same thing in the end.

Damain defines a markup language, and says that "tools" (to be defined)
will do the actual work.  I try to define the needs to create good tools
first.  The unspoken conclusion from my list must be that POD6 is not
bringing us closer to the goal than POD(5) does, because most of the
needs are not answered in that design.

> A rhetorical question of my own and an answer.
> Q) what is the real difference between comments and documentation?
> - Syntactically for the perl parser they are both white space.
> - Both are used to explain the code.

Docs are for end-users, which do want to use the code but were
the internal organization is a black box.  Comments explain code
where it is not obvious for maintainers, looking at the guts.

> Questions:
> 1) Would it be possible to unify all comments and documentation into a 
> single paradigm, such as a sort of bracketting convention with optional 
> extra information for other tools to use, eg., layout information, 
> grouping information, context (viz., for a tutorial, or reference) 
> information?

All are forms of text, so yes.  However, probably you loose more than
you win, because, as you said yourself: their purpose is very different.
When you forcefully merge unrelated things, you add complexity.

> 2) Would it be possible for the brackets to have different 'opacities' 
> for the perl parser, so that code can be recognised both as code and as 
> documentation with extra information? In this way, code would be 
> included in some forms of documentation (eg., function signatures in 
> reference manuals) just by placing "transparent" documentation brackets 
> around them.

Actually, for commenting code you probably already use invisible brackets:
you put comments on seperate lines before a piece of code, and when the
next comment block starts, the previous ends.

> 3) Would it be possible for the brackets to have 'opacities' for the 
> perl parser that can be set by the value of some variable, hence 
> debugging / tracing code could be switched on by setting that variable 
> in the code?

Are you merging the idea of assertions with documentation here?

> 4) Is there a means for specifying the way documentation is reassembled, 
> eg., a means for defining for say a tutorial a different structure than 
> the linear structure of the documentation strings within the software?

I would like to put this responsibility in the back-ends, with a
big "YES".

> c) Am I wrong in thinking that implementing the suggestions in the 
> questions should not require a substantial redesign of perl6?

There is no need for any redesign.

> d) If what I have suggested can already be done with Pod, could some 
> examples be shown.

I have asked for more extensive demonstrations how POD6 would
be used, but uptill now only saw very small documentation fragments.
But IMO, POD6 is not the problem: it's just not the solution.
-- 
Regards,
               MarkOv

------------------------------------------------------------------------
       Mark Overmeer MSc                                MARKOV Solutions
       Mark@Overmeer.net                          solutions@overmeer.net
http://Mark.Overmeer.net                   http://solutions.overmeer.net

