From beginners-return-92828-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu Jun 28 03:34:53 2007
Return-Path: <beginners-return-92828-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5S7YlL9006821
	for <ktwarwic@flax9.uwaterloo.ca>; Thu, 28 Jun 2007 03:34:48 -0400
Received: (qmail 15588 invoked by uid 514); 28 Jun 2007 07:34:39 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 15579 invoked from network); 28 Jun 2007 07:34:38 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 28 Jun 2007 07:34:38 -0000
Received: (qmail 1058 invoked by uid 225); 28 Jun 2007 07:34:36 -0000
Delivered-To: beginners@perl.org
Received: (qmail 982 invoked by alias); 28 Jun 2007 07:34:34 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,HTML_MESSAGE,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of dharshana.ve@gmail.com designates 64.233.166.179 as permitted sender)
Received: from py-out-1112.google.com (HELO py-out-1112.google.com) (64.233.166.179)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 28 Jun 2007 00:34:28 -0700
Received: by py-out-1112.google.com with SMTP id a25so949740pyi
        for <beginners@perl.org>; Thu, 28 Jun 2007 00:34:24 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=RiSnetPWuQ1rlfzDYPa1yozabskmRll6GiorDZqQFRc+RimQYquN0uTR1mYHFUYy/9Rb+vuvfyKworxWN40EL5fQAzqJteCHBrtwZS60wdmKEcSAAkOXQ/MeJePBZEZyxsDGQHwyO1+41a8O8vRNAab8NdFwBY8yUe2nB0iZp6g=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:references;
        b=KIU22EK8RUrfjWqNUub9JQRdHyBP4IbUdRu1jZORDjXzGx3SzEqb0JwEu9xfTxhpomdU2HnknFB/ktCBlmuqETWXq8R3ZoQCXFJclUc8FNvBTfl0lj5Oyo0KZRq06jk+8kJg8l0/KWSaSPmg4SBciUDYmdi7yrOS+UCUuwTdO/s=
Received: by 10.64.143.12 with SMTP id q12mr2421564qbd.1183016063854;
        Thu, 28 Jun 2007 00:34:23 -0700 (PDT)
Received: by 10.64.179.6 with HTTP; Thu, 28 Jun 2007 00:34:23 -0700 (PDT)
Message-ID: <9f91e0840706280034ma0d81afr83c7febb6f70a224@mail.gmail.com>
Date: Thu, 28 Jun 2007 13:04:23 +0530
From: "Dharshana Eswaran" <dharshana.ve@gmail.com>
To: "Chas Owens" <chas.owens@gmail.com>
Subject: Re: String Manipulation
Cc: "Tom Phoenix" <tom@stonehenge.com>, "Perl Beginners" <beginners@perl.org>
In-Reply-To: <58ce48dc0706271945w48343976u35354ff81392fb1a@mail.gmail.com>
MIME-Version: 1.0
Content-Type: multipart/alternative; 
	boundary="----=_Part_10322_136659.1183016063785"
References: <9f91e0840706271220q2566504fq6042ad20af74fad6@mail.gmail.com>
	 <31086b240706271234i2eea880ey5da3277e01406002@mail.gmail.com>
	 <9f91e0840706271810y641b8cd2y25d3756c51224c03@mail.gmail.com>
	 <58ce48dc0706271945w48343976u35354ff81392fb1a@mail.gmail.com>
X-Virus-Checked: Checked

------=_Part_10322_136659.1183016063785
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

Thank you. But i am unable to understand the working of the code which you
have written. Can you please explain it?

Thanks and Regards,
Dharshana

On 6/28/07, Chas Owens <chas.owens@gmail.com> wrote:
>
> On 6/27/07, Dharshana Eswaran <dharshana.ve@gmail.com> wrote:
> > On 6/28/07, Tom Phoenix <tom@stonehenge.com> wrote:
> > >
> > > On 6/27/07, Dharshana Eswaran <dharshana.ve@gmail.com> wrote:
> > >
> > > > I am unable to get a generalised way in which it can extract them as
> few
> > > > structures have comments, few does not hav comments etc.
> > >
> > > Does the data have some defined grammar, or a definable one at least?
> >
> >
> >
> > The defined Grammer here is
> > {
> > xyz1 abc1; /*Comments*/
> > xyz2 abc2;
> > xyz3 abc3[req];
> > xyz4 abc4[req]; /*Comments*/
> > };
> >
> > Here, i have defined different possibility of occurences of the
> structure
> > elements. If i could get a regex for extracting xyz1, xyz2, xyz3, xyz4
> and
> > abc1, abc2, abc3[req], abc4[req] would be helpful. Here, the comments
> are of
> > no use, i just need to ignore them.
> >
> > >If you are up to using Parse::RecDescent, it will probably do the job.
> >
> > I am restricted from using modules and i am unable to come up with a
> regex
> > or regexes to do this job.
> >
> >   >http://search.cpan.org/author/DCONWAY/Parse-RecDescent-1.94
> > >/lib/Parse/RecDescent.pod
> >
> > >Hope this helps!
> >
> > >--Tom Phoenix
> > >Stonehenge Perl Training
> >
> > Can anyone guide me in this?
> >
> > Thanks and Regards,
> > Dharshana
> >
>
> It is fragile, but here are a set of regexes that parse the string you
> mentioned.  I did notice that this string differs significantly from
> the ones you gave earlier and this set of regexes will not correctly
> handle them.
>
> #!/usr/bin/perl
>
> use strict;
> use warnings;
>
> my $comment    = qr{\s* (?:/\* .*? \*/ \s*)*}xs;
> my $identifier = qr{ [A-Za-z_]\w* }xs;
> my $statement  = qr{
>         \s*
>         ($identifier)
>         \s+
>         ($identifier)
>         \s*
>         (?: \[ (.*?) \] )?
>         \s*
>         ;
>         \s*
>         $comment?
> }xs;
>
> my $str = <<EOS;
> {
>         xyz1 abc1; /*Comments*/
>         xyz2 abc2;
>         xyz3 abc3[req];
>         xyz4 abc4[req]; /*Comments*/
> };
> EOS
>
> my @m = $str =~ /$statement/g;
>
> my $iter = by_n(3, \@m);
>
> while ((my ($type, $var, $elems) = $iter->()) == 3) {
>         if ($elems) {
>                 $type = "array of $type with $elems elements";
>         }
>         print "type is $type and variable is $var\n";
> }
>
> sub by_n {
>         my ($n, $a) = @_;
>         my $i = 0;
>         sub {
>                 return undef if $i > $#$a;
>                 my @ret = @{$a}[$i .. $i + $n - 1];
>                 $i += $n;
>                 return @ret;
>         }
> }
>

------=_Part_10322_136659.1183016063785--

