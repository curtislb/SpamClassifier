From beginners-return-92949-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon Jul  2 09:15:21 2007
Return-Path: <beginners-return-92949-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l62DFKL9014095
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 2 Jul 2007 09:15:21 -0400
Received: (qmail 18734 invoked by uid 514); 2 Jul 2007 13:15:11 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 18725 invoked from network); 2 Jul 2007 13:15:11 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 2 Jul 2007 13:15:11 -0000
Received: (qmail 6508 invoked by uid 225); 2 Jul 2007 13:15:10 -0000
Delivered-To: beginners@perl.org
Received: (qmail 6503 invoked by alias); 2 Jul 2007 13:15:10 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of a.r.ferreira@gmail.com designates 64.233.166.179 as permitted sender)
Received: from py-out-1112.google.com (HELO py-out-1112.google.com) (64.233.166.179)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Mon, 02 Jul 2007 06:15:05 -0700
Received: by py-out-1112.google.com with SMTP id a25so2790987pyi
        for <beginners@perl.org>; Mon, 02 Jul 2007 06:15:00 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=ZZYqP/+KEXejCAOprBAje7OT84Cq7Dv991AUZdghoBowMg+GXqvkhIEOF+W/Mbuf7TE5yZ1gWZBy5pNWP777vYW3jqHemfmsVmpKI8mcYS8n2kZWxXtE5cjjGK4xUcMNN4lShI/Y+VKgjNuN5wO4sbKl6xxvByWsZFdcZdp83ik=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=guo0ybO9o67YZF2HXkC5RwQH4LyZoXNecy2kHjJ42EDsg69Q1NSJt1L2kuj9gbr8bhMfRqQSviYcjhbz3+OBTCoT2UQAuSL+naYRNtonT8s2tkQXntxo61jWVGM/3ZZhBWN3MSGX7g/4LXDWg6FO5m2b2SuL9eiPSlqn44cfsrg=
Received: by 10.141.155.5 with SMTP id h5mr1440769rvo.1183382099182;
        Mon, 02 Jul 2007 06:14:59 -0700 (PDT)
Received: by 10.141.71.4 with HTTP; Mon, 2 Jul 2007 06:14:59 -0700 (PDT)
Message-ID: <73ddeb6c0707020614l10c42fdbo61a0bd34f890a539@mail.gmail.com>
Date: Mon, 2 Jul 2007 10:14:59 -0300
From: "Adriano Ferreira" <a.r.ferreira@gmail.com>
To: "Gabriel Striewe" <email@gabriel-striewe.de>, beginners@perl.org
Subject: Re: interpolation of function reference in a here doc
In-Reply-To: <2n8nl4-62j.ln1@desktop.gabriel>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <2n8nl4-62j.ln1@desktop.gabriel>

On 7/2/07, Gabriel Striewe <email@gabriel-striewe.de> wrote:
> Dear List,
>
> I wanted to interpolate a function reference in a here doc.
> The following works fine:
>
> my $hello = sub {
>                  return "hello world!";
>                 };
>
> printf "hello $s\n", &$hello();
>
> But when I use a heredoc instead, it doesn't work:
>
> print <<END;
> hello &$hello()
> END
>
> At least it does not properly dereference this function
> reference.
>
> What do I do wrong?

You will encounter the problem if instead of

    printf "hello %s\n", &$hello();

you would have tried:

    print "hello &$hello()\n";

That's an issue with the rules of string interpolation. (Read "perldoc
perlop", section on quote-like operators.) Simplistically, I think the
right thing you are expecting for (calling the code ref in $hello) is
not done because the only sigils that matter in interpolation are $
and @. That's why

   $ perl -e '$h = sub {1}; print "hello &$h()" '
   hello &CODE(0x10240d64)()

(where the only thing interpolated was the stringification of the code
ref in $h).

The weird/scary way to make it work is

$ perl -e '$h = sub {1}; print "hello @{[ &$h() ]}" '
hello 1

>
> Thanks for your advice.
>
> Gabriel
>
> --
> http://www.gabriel-striewe.de
>
>
>
> --
> To unsubscribe, e-mail: beginners-unsubscribe@perl.org
> For additional commands, e-mail: beginners-help@perl.org
> http://learn.perl.org/
>
>
>

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


