From perl6-all-return-82443-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri Jun 29 09:22:12 2007
Return-Path: <perl6-all-return-82443-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5TDMBL9026232
	for <ktwarwic@flax9.uwaterloo.ca>; Fri, 29 Jun 2007 09:22:11 -0400
Received: (qmail 17007 invoked by uid 514); 29 Jun 2007 13:22:06 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 17002 invoked from network); 29 Jun 2007 13:22:06 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: neutral (x1.develooper.com: local policy)
X-Spam-Checker-Version: SpamAssassin 3.1.8 (2007-02-13) on pluna
X-Spam-Level: 
Date: Fri, 29 Jun 2007 15:21:21 +0200
From: pancake <pancake@youterm.com>
To: perl6-internals@perl.org
Subject: parrot as a vm for real processors
Message-Id: <20070629152121.40002db2.pancake@youterm.com>
Organization: nopcode
X-Mailer: Sylpheed 2.4.1 (GTK+ 2.10.12; i386-pc-linux-gnu)
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit
X-Old-Spam-Status: No, score=0.0 required=3.0 tests=AWL autolearn=disabled
	version=3.1.8
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-1.9 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL

yesterday i was thinking about a way for interpretting assembly code of ARM
(and maybe other architectures) while defining a grammar for its assembly.

This way it will be possible to embed parrot on a debugger and let't interact
between the code and the debugger implementing in this way a pseudo-assembly-
language for multiple architectures.

The only thing that will be needed is the hardware interaction that can be
extended with libraries and so, but atm i'm just interested on interpretting
a sequence of opcodes and emulate them. Registers can be directly mapped into
parrot registers and atm i'm only thinking on supporting text-based assembly,
binary one can be added later.

Here my questions: 

I think it would be rather simple to do it, but i don't have the skills yet
for doing it. What's the 'easiest' language to start working on as a template?

It is possible to define a binary grammar or i should write a parser for it
in pure parrot and passing this code to a function that interprets a one
line of assembly code.

Should be better to implement everything in parrot instead of using a grammar?

PD: I was trying to implement some hooks on the exception layer, but I saw
that the interface it's not yet defined and I'll wait for it to continue this
work.

Thanks!

  --pancake

