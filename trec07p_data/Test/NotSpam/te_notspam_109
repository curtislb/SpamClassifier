From perl6-all-return-82383-ktwarwic=speedy.uwaterloo.ca@perl.org  Tue Jun 26 09:49:42 2007
Return-Path: <perl6-all-return-82383-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5QDnfL9011539
	for <ktwarwic@flax9.uwaterloo.ca>; Tue, 26 Jun 2007 09:49:41 -0400
Received: (qmail 5572 invoked by uid 514); 26 Jun 2007 13:49:37 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 5567 invoked from network); 26 Jun 2007 13:49:37 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: moderator for perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
From: Ron Blaschke (via RT) <parrotbug-followup@parrotcode.org>
X-RT-NewTicket: yes
To: bugs-bitbucket@netlabs.develooper.com
Resent-To: perl6-internals@perl.org
Mail-Followup-To: perl6-internals@perl.org
Reply-To: perl6-internals@perl.org
Date: Tue, 26 Jun 2007 02:08:05 -0700
Subject: [perl #43381] [PATCH] Force Range and Free Lock 
In-Reply-To: <4680D722.4050307@rblasch.org>
References: <RT-Ticket-43381@perl.org> <4680D722.4050307@rblasch.org>
Message-ID: <rt-3.6.HEAD-1276-1182848885-1297.43381-72-0@perl.org>
X-RT-Loop-Prevention: perl
RT-Ticket: perl #43381
Managed-by: RT 3.6.HEAD (http://www.bestpractical.com/rt/)
RT-Originator: ron@rblasch.org
MIME-Version: 1.0
X-RT-Original-Encoding: utf-8
Content-type: multipart/mixed; boundary="----------=_1182848885-1276-58"
Resent-Message-Id: <20070626090805.A1DE62AFE1@x3.develooper.com>
Resent-Date: Tue, 26 Jun 2007 02:08:05 -0700 (PDT)
Resent-From: rt-ron=rblasch.org@netlabs.develooper.com
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS

------------=_1182848885-1276-58
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit

# New Ticket Created by  Ron Blaschke 
# Please include the string:  [perl #43381]
# in the subject line of all future correspondence about this issue. 
# <URL: http://rt.perl.org/rt3/Ticket/Display.html?id=43381 >


With Visual C++ it's possible to add run time range checks for casts, to
check if there are any bits lost.  The change to F<src/mmd.c> ensures
the data is truncated before the cast, which I guess was intended in the
first place.  In <src/unicode.h> the UTF-8 bit mask should only affect a
byte, so we truncate the extra bits spilling over from the left shift.

F<src/pmc.c> is changed to free the lock (MUTEX_DESTROY) before freeing
the memory where it lives.

Changed Files:
    src/mmd.c
    src/unicode.h
    src/pmc.c


Ron

------------=_1182848885-1276-58
Content-Type: text/plain;
 charset="ascii";
 name="force_range_and_free_lock.patch"
Content-Disposition: inline; filename="force_range_and_free_lock.patch"
Content-Transfer-Encoding: 7bit
RT-Attachment: 43381/265049/115962

Index: src/mmd.c
===================================================================
--- src/mmd.c	(revision 19310)
+++ src/mmd.c	(working copy)
@@ -1083,8 +1083,8 @@
 static INTVAL
 distance_cmp(Interp *interp /*NULLOK*/, INTVAL a, INTVAL b)
 {
-    short da = (short)a & 0xffff;
-    short db = (short)b & 0xffff;
+    short da = (short) (a & 0xffff);
+    short db = (short) (b & 0xffff);
     /* sort first by distance */
     if (da > db)
         return 1;
Index: src/unicode.h
===================================================================
--- src/unicode.h	(revision 19310)
+++ src/unicode.h	(working copy)
@@ -68,7 +68,7 @@
 #define UTF8_IS_CONTINUATION(c)         ((c) >= 0x80u && (c) <= 0xBFu)
 #define UTF8_IS_CONTINUED(c)            ((c) &  0x80u)
 
-#define UTF8_START_MARK(len) (len == 1 ? 0 : 0x7Eu << (7-len))
+#define UTF8_START_MARK(len) (len == 1 ? 0 : (0x7Eu << (7-len)) & 0xFF)
 #define UTF8_START_MASK(len) (len == 1 ? 0x7Fu : 0x1Fu >> (len-2))
 
 #define UTF8_CONTINUATION_MARK           0x80u
Index: src/pmc.c
===================================================================
--- src/pmc.c	(revision 19310)
+++ src/pmc.c	(working copy)
@@ -426,8 +426,11 @@
          */
         Small_Object_Pool * const ext_pool =
             interp->arena_base->pmc_ext_pool;
-        if (PMC_sync(_class))
+        if (PMC_sync(_class)) {
+            MUTEX_DESTROY(PMC_sync(_class)->pmc_lock);
             mem_internal_free(PMC_sync(_class));
+            PMC_sync(_class) = NULL;
+        }
         ext_pool->add_free_object(interp, ext_pool, _class->pmc_ext);
     }
     _class->pmc_ext = NULL;

------------=_1182848885-1276-58--

