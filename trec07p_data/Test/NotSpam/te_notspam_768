From beginners-return-92863-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu Jun 28 11:25:41 2007
Return-Path: <beginners-return-92863-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5SFPeL9012431
	for <ktwarwic@flax9.uwaterloo.ca>; Thu, 28 Jun 2007 11:25:40 -0400
Received: (qmail 23025 invoked by uid 514); 28 Jun 2007 15:25:32 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 23016 invoked from network); 28 Jun 2007 15:25:31 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 28 Jun 2007 15:25:31 -0000
Received: (qmail 5107 invoked by uid 225); 28 Jun 2007 15:25:28 -0000
Delivered-To: beginners@perl.org
Received: (qmail 5085 invoked by alias); 28 Jun 2007 15:25:25 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of tom.phoenix@gmail.com designates 66.249.82.231 as permitted sender)
Received: from wx-out-0506.google.com (HELO wx-out-0506.google.com) (66.249.82.231)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 28 Jun 2007 08:25:21 -0700
Received: by wx-out-0506.google.com with SMTP id r21so600852wxc
        for <beginners@perl.org>; Thu, 28 Jun 2007 08:25:12 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:sender:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=Qy5klroPJUZqS0p1gLJ1jMwh6AlAG4bFmeHD4yfK1beLndFgCdR/dKF9ZJJVCLl4KjvCvS3d64CrS9CUcnjuPEEVo4myfI+kYlSGO+DCmJ4Nj8QgMnB6sq/IJhL6d4xBwztG1nVwSSNVwmrnGrmgQexknSE6Yb6jDSVnfkkSo1s=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:sender:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=gOVYpsRKQokEVN3ooG72OywR2YUdIdEUsB22+NSPl0ftXvK1FD428KDGmn+gt6IkkLuuephr/E30taxKXlZ9ioPDQOMG2NSeRSnFyIu7vssxLFaPybJKljewNVbjDHhZCG/enylEu2I68OGxoShFX7w++5WtsqgF6Bf/stHt7ho=
Received: by 10.90.71.3 with SMTP id t3mr1834301aga.1183044312357;
        Thu, 28 Jun 2007 08:25:12 -0700 (PDT)
Received: by 10.90.116.9 with HTTP; Thu, 28 Jun 2007 08:25:12 -0700 (PDT)
Message-ID: <31086b240706280825g4551864dw32e21034279ddb43@mail.gmail.com>
Date: Thu, 28 Jun 2007 08:25:12 -0700
From: "Tom Phoenix" <tom@stonehenge.com>
Sender: tom.phoenix@gmail.com
To: "Amichai Teumim" <amichai@teumim.com>
Subject: Re: missing curly - brain fried
Cc: beginners@perl.org
In-Reply-To: <848c3f360706280754h86d4ec4kb423735f3da9a574@mail.gmail.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <848c3f360706280754h86d4ec4kb423735f3da9a574@mail.gmail.com>
X-Google-Sender-Auth: 7b8f45516f88533e

On 6/28/07, Amichai Teumim <amichai@teumim.com> wrote:

> Where is the open curly missing here?

Here it is:

    @array = sort { $a <=> $b } @array;

But if you really want to do it the hard, slow way.... Well, then you
should be programming this as a shell script. But let's at least
translate your code to Perl.

> #!/usr/bin/perl

  use strict;
  use warnings;

> @array = (5,3,2,1,4);

Declare most new variables with my().

  my @array = (5, 3, 2, 1, 4);

> for ($i=0; $i<$n-1; $i++) {
> (  for ($j=0; $j<$n-1-$i; $j++)

The curly braces of a block are never optional in Perl, unlike in C.
Most uses of the C-style computed for loop are simpler as a foreach
loop in Perl:

  for my $i (0..$#array-1) {
    for my $j (0..$#array-1-$i) {

> if ($array[$j+1] < $array[$j]) {  /* compare the two neighbors
> */
>       $tmp = $array[$j];         /* swap $array[j] and $array[j+1]
>   */
>       $array[$j] = $array[$j+1];
>       $array[$j+1] = $tmp;
>   }
>  }

Perl doesn't have multi-line comments like C, and it doesn't need to
use temp variables to swap two items.

      # compare two neighbors
      if ($array[$j+1] < $array[$j]) {
        # swap these two
        ($array[$j], $array[$j+1]) = ($array[$j+1], $array[$j]);
      }

      # end two nested loops
    }
  }

> foreach $elem (@array){
>   print "$elem";
> }

  print "Results: @array\n";

But I like the one liner better, perhaps because I have more
confidence in its algorithm. Hope this helps!

--Tom Phoenix
Stonehenge Perl Training

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


