From beginners-return-92962-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon Jul  2 13:11:08 2007
Return-Path: <beginners-return-92962-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l62HB6L9016598
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 2 Jul 2007 13:11:07 -0400
Received: (qmail 4788 invoked by uid 514); 2 Jul 2007 17:10:48 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 4744 invoked from network); 2 Jul 2007 17:10:48 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 2 Jul 2007 17:10:48 -0000
Received: (qmail 4777 invoked by uid 225); 2 Jul 2007 17:10:47 -0000
Delivered-To: beginners@perl.org
Received: (qmail 4771 invoked by alias); 2 Jul 2007 17:10:47 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of chas.owens@gmail.com designates 209.85.146.178 as permitted sender)
Received: from wa-out-1112.google.com (HELO wa-out-1112.google.com) (209.85.146.178)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Mon, 02 Jul 2007 10:10:43 -0700
Received: by wa-out-1112.google.com with SMTP id v27so1950926wah
        for <beginners@perl.org>; Mon, 02 Jul 2007 10:10:38 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=qaoW7dpSGChosk8NAMASC8A4RHOl9bE8miJYTHpIx6JFSRy3cD2z7ReDqD0LaSK6+7Wq1ex+y0WSoJFLtUzltIqUtXSrsCxSjOKbT7CRgNCNAEJ+6TKRBFscpbimOgRKG8BcXXi5Nbzu5ABzIpFfdm3RfjsoeaG6aIC0Aig8a2o=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references;
        b=Avm5HRjQO8Sh0VlUYjU6nO/tEZEITFBcKEjgQvwIt0BG8/TYiPxDsTZu05G3U0DljGZasQEoe0E9zNR+aTAJBQt5t6fehdY+h3kK7i48+iTmLQd4OkxQzcyk5K5OmsdbcNHJY0JIsJKqhIeMFO8T/TGmzxjODeg7QrdLrzhIReg=
Received: by 10.114.103.1 with SMTP id a1mr5308445wac.1183396238562;
        Mon, 02 Jul 2007 10:10:38 -0700 (PDT)
Received: by 10.114.79.3 with HTTP; Mon, 2 Jul 2007 10:10:38 -0700 (PDT)
Message-ID: <58ce48dc0707021010y60146574q2c6108e072eaab02@mail.gmail.com>
Date: Mon, 2 Jul 2007 13:10:38 -0400
From: "Chas Owens" <chas.owens@gmail.com>
To: "alok nath" <aloknathlight@yahoo.com>
Subject: Re: parsing a line
Cc: beginners@perl.org
In-Reply-To: <510316.7828.qm@web53202.mail.re2.yahoo.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <510316.7828.qm@web53202.mail.re2.yahoo.com>

On 7/1/07, alok nath <aloknathlight@yahoo.com> wrote:
>
> Hi Chas,
>   Can you please explain the portion ( ([\w ]*\w)\s*= )of the regex.?
>   And why its stored in $s.Can it be directly stored in hash my %rec.
> Thanks
> Alok
snip

First off, the results of the regex are not being stored in $s; the
regex is being applied to the string in $s.  Therefore the results are
being stored directly into %rec.

As to what the regex does, whenever one runs up against a regex that
you don't understand, it is wise to break the regex into its simplest
parts and analyze how those parts interact with the input.  The
following script outputs

\s*:    [ ]
[\w ]*: [Test Descriptio]
\w:     [n]
\s*:    [ ]
=:      [=]
\s*:    [ ]
":      ["]
.*?:    [Test 1]
":      ["]

\s*:    [  ]
[\w ]*: [I]
\w:     [D]
\s*:    [  ]
=:      [=]
\s*:    [  ]
":      ["]
.*?:    [ID A1]
":      ["]

\s*:    [ ]
[\w ]*: [DirAbsolut]
\w:     [e]
\s*:    [ ]
=:      [=]
\s*:    [ ]
":      ["]
.*?:    [C:/perl]
":      ["]

We can see from this that the pattern [\w ]*\w holds the key and the
pattern .*? holds the value.  Also we can see that the whitespace
patterns match the whitespace characters and the constants match the
constants.  One might reasonably ask why we are using  [\w ]*\w
instead of just [\w ]+ since \w is part of the character class.  here
is the what the output would look like if we did that:

\s*:    [ ]
[\w ]+: [Test Description ]
\s*:    [ ]
=:      [=]
\s*:    [ ]
":      ["]
.*?:    [Test 1]
":      ["]

\s*:    [  ]
[\w ]+: [ID ]
\s*:    [  ]
=:      [=]
\s*:    [  ]
":      ["]
.*?:    [ID A1]
":      ["]

\s*:    [ ]
[\w ]+: [DirAbsolute ]
\s*:    [ ]
=:      [=]
\s*:    [ ]
":      ["]
.*?:    [C:/perl]
":      ["]

Ah-ha, it appears as if [\w ]+ matches the space after the key and the
\s* is matching nothing.  This might cause a problem if we are
expecting to have "DirAbsolute" rather than "DirAbsolute ".

#!/usr/bin/perl

use strict;
use warnings;

#strings to test
my @a = (
        '<Test Description = "Test 1" ',
        'ID =  "ID A1" ',
        'DirAbsolute = "C:/perl"/>',
);

#regex broken down into individual parts
my @parts = (
        q(\s*),
        q([\w ]*),
        q(\w),
        q(\s*),
        q(=),
        q(\s*),
        q("),
        q(.*?),
        q(")
);

my $regex = join '', map { "($_)" } @parts;

for my $s (@a) {
        my %h;
        @h{@parts} = $s =~ /$regex/;
        print  "\n", map { "$_:\t[$h{$_}]\n" } @parts;
}

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


