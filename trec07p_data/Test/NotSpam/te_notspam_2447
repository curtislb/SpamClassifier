From beginners-return-93079-ktwarwic=speedy.uwaterloo.ca@perl.org  Thu Jul  5 07:41:42 2007
Return-Path: <beginners-return-93079-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l65BfeL9025441
	for <ktwarwic@flax9.uwaterloo.ca>; Thu, 5 Jul 2007 07:41:41 -0400
Received: (qmail 23010 invoked by uid 514); 5 Jul 2007 11:41:31 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 23001 invoked from network); 5 Jul 2007 11:41:31 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 5 Jul 2007 11:41:31 -0000
Received: (qmail 26499 invoked by uid 225); 5 Jul 2007 11:41:30 -0000
Delivered-To: beginners@perl.org
Received: (qmail 26482 invoked by alias); 5 Jul 2007 11:41:29 -0000
X-Spam-Status: No, hits=-1.9 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: local policy)
Received: from mail-in-01.arcor-online.net (HELO mail-in-01.arcor-online.net) (151.189.21.41)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Thu, 05 Jul 2007 04:41:16 -0700
Received: from mail-in-13-z2.arcor-online.net (mail-in-13-z2.arcor-online.net [151.189.8.30])
	by mail-in-01.arcor-online.net (Postfix) with ESMTP id 37A2C15C431
	for <beginners@perl.org>; Thu,  5 Jul 2007 13:41:10 +0200 (CEST)
Received: from mail-in-01.arcor-online.net (mail-in-01.arcor-online.net [151.189.21.41])
	by mail-in-13-z2.arcor-online.net (Postfix) with ESMTP id 1C07C1B8E59
	for <beginners@perl.org>; Thu,  5 Jul 2007 13:41:10 +0200 (CEST)
Received: from localhost (dslb-084-056-115-166.pools.arcor-ip.net [84.56.115.166])
	(Authenticated sender: micha105@arcor.de)
	by mail-in-01.arcor-online.net (Postfix) with ESMTP id BA04119B325
	for <beginners@perl.org>; Thu,  5 Jul 2007 13:41:09 +0200 (CEST)
From: Michael Scondo <michael.scondo@phil.stud.uni-erlangen.de>
To: beginners@perl.org
Subject: Memory leaks with threads
Date: Thu, 5 Jul 2007 13:37:12 +0000
User-Agent: KMail/1.9.5
MIME-Version: 1.0
Content-Type: text/plain;
  charset="us-ascii"
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
Message-Id: <200707051337.12867.michael.scondo@phil.stud.uni-erlangen.de>

Hi,
I'm still trying to get familiar with threads and sockets.

However, I got in some troubles with memory leaks, could anyone perhaps give 
me a hint in which way I should write a multithreaded socket server ?


I wrote a small server, which accepts connections on a tcp socket and spawns a 
new thread for each connection, which terminates when the socket has been 
closed.

The server runs fine, however, while stresstesting, I experienced a runaway of 
the memory consumption.
After a few hundred connects and disconnects I'll get an Out of memory. :-(

In order to test threads in perl, I wrote a new script which just spawns and 
terminates threads. ( Attached it below )

I already figured out that global variables seem to lead to memory leaks, 
however, although the memory size raises slower now, it still raises. ( which 
I didn't expect ).

I stumbled over http://search.cpan.org/~rybskej/forks-0.23/lib/forks.pm, which 
seems to be a replacement for ithreads and also has the advantage of not 
needing a thread enabled perl.
However, there are still memory leaks with this module.



My conclusion is to write a preforked server, using the forks module mentioned 
above and create a pool of  say 50 preforked threads at startup time.

But, are there perhaps any better possiblities or recommendations ?

Thanks,
Michael

--------------------------

#!/usr/bin/perl -w

use threads;
use threads::shared;

#use forks;
#use forks::shared;

share $threadscount;
$threadscount = 0;

share $createthreads;
$createthreads = 1;

share $maxthreads;
$maxthreads = 0;


sub thread{
		my $count;
		{ 
				lock $threadscount;
				$threadscount ++;
				$count = $threadscount;

				lock $maxthreads;
				if ( $count>$maxthreads ){
						$maxthreads = $count;
				}
		}
		#print "$count\n";
		sleep 4;

		lock $threadscount;
		$threadscount --;
}


sub threadcreator{
		my $tc;
		do {
				my $t = threads->create("thread");
				$t->detach();
				lock $createthreads;
				$tc = $createthreads;
		} while ( $tc );
}
	

while ( 1 ){
{
		lock $createthreads;
		$createthreads = 1;
}

my $thread = threads->create("threadcreator");
$thread->detach();
sleep 4;

{
		lock $createthreads;
		$createthreads = 0;
}

my $count;
do {
		#sleep 3;
		lock $threadscount;
		$count = $threadscount;
} while ( $count > 0 );
{ 
		lock $maxthreads;
		print "maxthreads: $maxthreads\n";
}
}


-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


