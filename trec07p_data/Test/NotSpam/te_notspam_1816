From beginners-return-92971-ktwarwic=speedy.uwaterloo.ca@perl.org  Mon Jul  2 20:05:54 2007
Return-Path: <beginners-return-92971-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l6305rL9021158
	for <ktwarwic@flax9.uwaterloo.ca>; Mon, 2 Jul 2007 20:05:53 -0400
Received: (qmail 2275 invoked by uid 514); 3 Jul 2007 00:05:44 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Delivered-To: moderator for beginners@perl.org
Received: (qmail 8418 invoked from network); 2 Jul 2007 18:15:35 -0000
Delivered-To: beginners@perl.org
X-Spam-Status: No, hits=-1.9 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_NEUTRAL
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: neutral (x1.develooper.com: local policy)
X-Virus-Scanned: amavisd-new at intunet.co.uk memset.net
In-Reply-To: <915496.33086.qm@web60814.mail.yahoo.com>
References: <915496.33086.qm@web60814.mail.yahoo.com>
Mime-Version: 1.0 (Apple Message framework v752.3)
Content-Type: text/plain; charset=US-ASCII; delsp=yes; format=flowed
Message-Id: <03C80A1D-BF97-4354-8992-8C28F18DAB3B@quietstars.com>
Cc: Perl QA <perl-qa@perl.org>, beginners@perl.org
Content-Transfer-Encoding: 7bit
From: Adrian Howard <adrianh@quietstars.com>
Subject: Re: Test::Class fixture problem
Date: Mon, 2 Jul 2007 19:15:17 +0100
To: Ovid <curtis_ovid_poe@yahoo.com>
X-Mailer: Apple Mail (2.752.3)

Belated response...

On 1 Jul 2007, at 23:19, Ovid wrote:
[snip]
> I've just spent quite a bit of time debugging a problem where a  
> Test::Class setup method was misbehaving.  My tests passed, but  
> mysql was spitting out errors directly to STDERR and quite a bit of  
> tracing led me to the following:
>
>   sub setup : Tests(setup) {
>       my $test = shift;
>       $test->SUPER::startup;
>       $test->_make_test_servers(
>           num_servers => 2,
>           username    => 'Ovid',
>       );
>   }
>
> As you can see, I called SUPER::startup instead of SUPER::setup.
[snip]

Not that it helps solve your problem - but I tend to use multiple  
setup routines rather than inheritance to add extra set up code to a  
class. I generally find it reads more cleanly since I can give my  
methods more intention revealing names.

[snip]
> It's trivial to write code in my stubs which check the caller and  
> issue a warning and maybe I can just walk back through the call  
> stack to issue a warning if I'm ever called by an inappropriately  
> named method, but that seems a bit hackish.  Is there some better  
> way to solve this problem?
[snip]

Nothing obvious springs to mind - seems like a generic perl problem/ 
feature.
Then again I'm not exactly feeling 100% at the moment so I could be  
missing something obvious :-)

You could, of course, use something like chromatic's SUPER and write  
it as:

   sub setup : Tests(setup) {
       my $test = shift;
       super;
       $test->_make_test_servers(
           num_servers => 2,
           username    => 'Ovid',
       );
   }

?

Adrian

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


