From r-help-bounces@stat.math.ethz.ch  Wed Jun 27 12:21:33 2007
Return-Path: <r-help-bounces@stat.math.ethz.ch>
Received: from hypatia.math.ethz.ch (hypatia.math.ethz.ch [129.132.145.15])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l5RGLVL9029254
	for <ktwarwic@flax9.uwaterloo.ca>; Wed, 27 Jun 2007 12:21:32 -0400
Received: from hypatia.math.ethz.ch (hypatia [129.132.145.15])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l5RGKO3R008705;
	Wed, 27 Jun 2007 18:20:42 +0200
X-Spam-Checker-Version: SpamAssassin 3.2.0 (2007-05-01) on hypatia.math.ethz.ch
X-Spam-Level: 
X-Spam-Status: No, score=-0.2 required=5.0 tests=AWL, BAYES_50,
	DKIM_POLICY_SIGNSOME, HTML_MESSAGE autolearn=no version=3.2.0
Received: from ipex1.johnshopkins.edu (ipex1.johnshopkins.edu [162.129.8.141])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l5RFxYw6032351
	(version=TLSv1/SSLv3 cipher=RC4-SHA bits=128 verify=FAIL)
	for <r-help@stat.math.ethz.ch>; Wed, 27 Jun 2007 17:59:35 +0200
Received: from dom-59mfy81.monument1.jhmi.edu (HELO DOM59MFY81)
	([10.16.148.124]) by ipex1.johnshopkins.edu with ESMTP/TLS/RC4-MD5;
	27 Jun 2007 11:59:33 -0400
X-BrightmailFiltered: true
X-Brightmail-Tracker: AAAAAA==
X-IronPort-AV: i="4.16,467,1175486400"; 
	d="txt'?scan'208,217"; a="156913453:sNHT201834934"
From: "Ravi Varadhan" <rvaradhan@jhmi.edu>
To: <r-help@stat.math.ethz.ch>
Date: Wed, 27 Jun 2007 11:59:30 -0400
Message-ID: <000301c7b8d4$266b6b20$7c94100a@win.ad.jhu.edu>
MIME-Version: 1.0
Content-Type: multipart/mixed;
	boundary="----=_NextPart_000_0004_01C7B8B2.9F59CB20"
X-Mailer: Microsoft Office Outlook 11
X-MIMEOLE: Produced By Microsoft MimeOLE V6.00.2900.3138
Thread-index: Ace41CWEwV1T+T3gSO2joXZQt4LNDw==
X-Virus-Scanned: by amavisd-new at stat.math.ethz.ch
X-Content-Filtered-By: Mailman/MimeDel 2.1.9
Subject: [R] Solving a system of nonlinear equations
X-BeenThere: r-help@stat.math.ethz.ch
X-Mailman-Version: 2.1.9
Precedence: list
List-Id: "Main R Mailing List: Primary help" <r-help.stat.math.ethz.ch>
List-Unsubscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=unsubscribe>
List-Archive: <https://stat.ethz.ch/pipermail/r-help>
List-Post: <mailto:r-help@stat.math.ethz.ch>
List-Help: <mailto:r-help-request@stat.math.ethz.ch?subject=help>
List-Subscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=subscribe>
Sender: r-help-bounces@stat.math.ethz.ch
Errors-To: r-help-bounces@stat.math.ethz.ch

This is a multi-part message in MIME format.

------=_NextPart_000_0004_01C7B8B2.9F59CB20
Content-Type: text/plain;
	charset="us-ascii"
Content-Transfer-Encoding: 7bit

Hi All,

 

Here is a modification of nlsolve() that I had submitted before.  The new
version of nlsolve() has the option to generate multiple random starting
values in order to improve the chances of locating the zeros of the
nonlinear system.  The last test example in the attached file, the
Freudenstein-Roth function, shows the usefulness of the multiple random
starts.  

 

Hope this is useful,

Ravi.

----------------------------------------------------------------------------
-------

Ravi Varadhan, Ph.D.

Assistant Professor, The Center on Aging and Health

Division of Geriatric Medicine and Gerontology 

Johns Hopkins University

Ph: (410) 502-2619

Fax: (410) 614-9625

Email: rvaradhan@jhmi.edu

Webpage:  http://www.jhsph.edu/agingandhealth/People/Faculty/Varadhan.html

 

----------------------------------------------------------------------------
--------

 


------=_NextPart_000_0004_01C7B8B2.9F59CB20
Content-Type: text/plain;
	name="nlsolve_R.txt"
Content-Transfer-Encoding: quoted-printable
Content-Disposition: attachment;
	filename="nlsolve_R.txt"

##########################################
nlsolve <- function(par, fn, method=3D"BFGS", nstarts =3D 1, ...) {
###########################
#  A solver for finding a zero of a system of non-linear equations
#  Actually minimizes the squared-norm of the set of functions by =
calling optim()
#  Uses the BFGS algorithm within optim()
#  All the control parameters can be passed as in the call to optim()
#  Uses a random multiple start approach to locate the zeros of the =
system
#
#  Author:  Ravi Varadhan, Center on Aging and Health, Johns Hopkins =
University, rvaradhan@jhmi.edu
#
#  June 21, 2007
#
func <- function(x, ...) sum(fn(x, ...)^2)
ans <- optim(par, fn=3Dfunc, method=3Dmethod, ...)
err <- sqrt(ans$val/length(par))=20
istart <- 1

while (err > 0.01 & istart < nstarts) {
par <- par * ( 1 + runif(length(par), -1, 1) )  # generating random =
starting values
ans <- try (optim(par, fn=3Dfunc, method=3Dmethod, ...))
if (class(ans) !=3D "try-error") err <- sqrt(ans$val/length(par))=20
istart <- istart + 1
}

if (err > 0.01) cat(" \n Caution:  Zero of the function has not been =
located!!! \n Increase nstart \n \n")

ans
}

#
##########################################
#
# Some examples illustrating the use of nlsolve()
#
expo1 <- function(p) {
#  From La Cruz and Raydan, Optim Methods and Software 2003, 18 =
(583-599)
n <- length(p)
f <- rep(NA, n)
f[1] <- exp(p[1] - 1) - 1
f[2:n] <- (2:n) * (exp(p[2:n] - 1) - p[2:n])
f
}

n <- 50
p0 <- runif(n)
nlsolve(par=3Dp0, fn=3Dexpo1)

############
expo3 <- function(p) {
#  From La Cruz and Raydan, Optim Methods and Software 2003, 18 =
(583-599)
n <- length(p)
f <- rep(NA, n)
onm1 <- 1:(n-1)=20
f[onm1] <- onm1/10 * (1 - p[onm1]^2 - exp(-p[onm1]^2))
f[n] <- n/10 * (1 - exp(-p[n]^2))
f
}

n <- 15
p0 <- (1:n)/(4*n^2)
nlsolve(par=3Dp0, fn=3Dexpo3)

############
func1 <- function(x) {
f <- rep(0,3)
f[1] <- 1/3*cos(x[2]*x[3]) - x[1] + 1/6
f[2] <- 1/9 * sqrt(x[1]^2 + sin(x[3])+ 1.06) - x[2] - 0.1
f[3] <- -1/20*exp(-x[1]*x[2]) - x[3] - (10*pi - 3)/60
f
}

p0 <- runif(3)
nlsolve(par=3Dp0, fn=3Dfunc1)

############
# This example illustrates the use of multiple random starts to obtain =
the global minimum of zero (i.e. the roots of the system)
#
froth <- function(p){
# Freudenstein and Roth function (Broyden, Mathematics of Computation =
1965, p. 577-593)
f <- rep(NA,length(p))
f[1] <- -13 + p[1] + (p[2]*(5 - p[2]) - 2) * p[2]
f[2] <- -29 + p[1] + (p[2]*(1 + p[2]) - 14) * p[2]
f
}

p0 <- c(3,2)  # this gives the zero of the system
nlsolve(par=3Dp0, fn=3Dfroth)

p0 <- c(1,1)  # this gives the local minimum that is not the zero of the =
system
nlsolve(par=3Dp0, fn=3Dfroth)
nlsolve(par=3Dp0, fn=3Dfroth, nstart=3D100)

p0 <- rpois(2,10)
nlsolve(par=3Dp0, fn=3Dfroth)
nlsolve(par=3Dp0, fn=3Dfroth, nstart=3D10)


------=_NextPart_000_0004_01C7B8B2.9F59CB20
Content-Type: text/plain; charset="us-ascii"
MIME-Version: 1.0
Content-Transfer-Encoding: 7bit
Content-Disposition: inline

______________________________________________
R-help@stat.math.ethz.ch mailing list
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.

------=_NextPart_000_0004_01C7B8B2.9F59CB20--

