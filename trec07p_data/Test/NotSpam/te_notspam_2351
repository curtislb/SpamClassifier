From r-help-bounces@stat.math.ethz.ch  Wed Jul  4 18:01:30 2007
Return-Path: <r-help-bounces@stat.math.ethz.ch>
Received: from hypatia.math.ethz.ch (hypatia.math.ethz.ch [129.132.145.15])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with ESMTP id l64M1TL9016062
	for <ktwarwic@flax9.uwaterloo.ca>; Wed, 4 Jul 2007 18:01:30 -0400
Received: from hypatia.math.ethz.ch (hypatia [129.132.145.15])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l64M0b6N022493;
	Thu, 5 Jul 2007 00:01:00 +0200
X-Spam-Checker-Version: SpamAssassin 3.2.0 (2007-05-01) on hypatia.math.ethz.ch
X-Spam-Level: 
X-Spam-Status: No, score=0.0 required=5.0 tests=BAYES_50,
	DKIM_POLICY_SIGNSOME autolearn=no version=3.2.0
Received: from out1.smtp.messagingengine.com (out1.smtp.messagingengine.com
	[66.111.4.25])
	by hypatia.math.ethz.ch (8.13.6/8.13.6) with ESMTP id l64LeHP8016831
	for <r-help@stat.math.ethz.ch>; Wed, 4 Jul 2007 23:40:17 +0200
Received: from compute1.internal (compute1.internal [10.202.2.41])
	by out1.messagingengine.com (Postfix) with ESMTP id 59D20689A;
	Wed,  4 Jul 2007 17:40:16 -0400 (EDT)
Received: from heartbeat1.messagingengine.com ([10.202.2.160])
	by compute1.internal (MEProxy); Wed, 04 Jul 2007 17:40:16 -0400
X-Sasl-enc: As2FYGuTAqIs43DC0QhuCEuguQc7Mvu0YjLFg+rlmZLt 1183585215
Received: from [192.168.0.8] (80-194-239-130.cable.ubr05.hari.blueyonder.co.uk
	[80.194.239.130])
	by mail.messagingengine.com (Postfix) with ESMTP id 80C532865;
	Wed,  4 Jul 2007 17:40:15 -0400 (EDT)
Message-ID: <468C13C3.7070701@frumin.net>
Date: Wed, 04 Jul 2007 22:40:19 +0100
From: Michael Frumin <michael@frumin.net>
User-Agent: Thunderbird 1.5.0.12 (Windows/20070509)
MIME-Version: 1.0
To: Peter Dalgaard <p.dalgaard@biostat.ku.dk>
References: <11435994.post@talk.nabble.com> <468BF958.9060102@biostat.ku.dk>
In-Reply-To: <468BF958.9060102@biostat.ku.dk>
X-Virus-Scanned: by amavisd-new at stat.math.ethz.ch
Cc: r-help@stat.math.ethz.ch
Subject: Re: [R] Lookups in R
X-BeenThere: r-help@stat.math.ethz.ch
X-Mailman-Version: 2.1.9
Precedence: list
List-Id: "Main R Mailing List: Primary help" <r-help.stat.math.ethz.ch>
List-Unsubscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=unsubscribe>
List-Archive: <https://stat.ethz.ch/pipermail/r-help>
List-Post: <mailto:r-help@stat.math.ethz.ch>
List-Help: <mailto:r-help-request@stat.math.ethz.ch?subject=help>
List-Subscribe: <https://stat.ethz.ch/mailman/listinfo/r-help>,
	<mailto:r-help-request@stat.math.ethz.ch?subject=subscribe>
Content-Type: text/plain; charset="us-ascii"
Content-Transfer-Encoding: 7bit
Sender: r-help-bounces@stat.math.ethz.ch
Errors-To: r-help-bounces@stat.math.ethz.ch

i wish it were that simple.  unfortunately the logic i have to do on 
each transaction is substantially more complicated, and involves 
referencing the existing values of the user table through a number of 
conditions.

any other thoughts on how to get better-than-linear performance time?  
is there a recommended binary searching/sorting (i.e. BTree) module that 
I could use to maintain my own index?

thanks,
mike

Peter Dalgaard wrote:
> mfrumin wrote:
>> Hey all; I'm a beginner++ user of R, trying to use it to do some 
>> processing
>> of data sets of over 1M rows, and running into a snafu.  imagine that my
>> input is a huge table of transactions, each linked to a specif user 
>> id.  as
>> I run through the transactions, I need to update a separate table for 
>> the
>> users, but I am finding that the traditional ways of doing a table 
>> lookup
>> are way too slow to support this kind of operation.
>>
>> i.e:
>>
>> for(i in 1:1000000) {
>>    userid = transactions$userid[i];
>>    amt = transactions$amounts[i];
>>    users[users$id == userid,'amt'] += amt;
>> }
>>
>> I assume this is a linear lookup through the users table (in which 
>> there are
>> 10's of thousands of rows), when really what I need is O(constant 
>> time), or
>> at worst O(log(# users)).
>>
>> is there any way to manage a list of ID's (be they numeric, string, 
>> etc) and
>> have them efficiently mapped to some other table index?
>>
>> I see the CRAN package for SQLite hashes, but that seems to be going 
>> a bit
>> too far.
>>   
> Sometimes you need a bit of lateral thinking. I suspect that you could 
> do it like this:
>
> tbl <- with(transactions, tapply(amount, userid, sum))
> users$amt <- users$amt + tbl[users$id]
>
> one catch is that there could be users with no transactions, in which 
> case you may need to replace userid by factor(userid, 
> levels=users$id). None of this is tested, of course.

______________________________________________
R-help@stat.math.ethz.ch mailing list
https://stat.ethz.ch/mailman/listinfo/r-help
PLEASE do read the posting guide http://www.R-project.org/posting-guide.html
and provide commented, minimal, self-contained, reproducible code.

