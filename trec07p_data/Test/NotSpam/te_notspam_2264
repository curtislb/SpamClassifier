From beginners-return-93037-ktwarwic=speedy.uwaterloo.ca@perl.org  Wed Jul  4 11:14:58 2007
Return-Path: <beginners-return-93037-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l64FEsL9012112
	for <ktwarwic@flax9.uwaterloo.ca>; Wed, 4 Jul 2007 11:14:56 -0400
Received: (qmail 23002 invoked by uid 514); 4 Jul 2007 15:14:45 -0000
Mailing-List: contact beginners-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:beginners@perl.org>
List-Help: <mailto:beginners-help@perl.org>
List-Unsubscribe: <mailto:beginners-unsubscribe@perl.org>
List-Subscribe: <mailto:beginners-subscribe@perl.org>
List-Id: <beginners.perl.org>
Delivered-To: mailing list beginners@perl.org
Received: (qmail 22993 invoked from network); 4 Jul 2007 15:14:44 -0000
Received: from x1a.develooper.com (HELO x1.develooper.com) (216.52.237.111)
  by lists.develooper.com with SMTP; 4 Jul 2007 15:14:44 -0000
Received: (qmail 10052 invoked by uid 225); 4 Jul 2007 15:14:44 -0000
Delivered-To: beginners@perl.org
Received: (qmail 10042 invoked by alias); 4 Jul 2007 15:14:43 -0000
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_SIGNED,DKIM_VERIFIED,DK_POLICY_SIGNSOME,DK_SIGNED,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: domain of tom.phoenix@gmail.com designates 66.249.82.231 as permitted sender)
Received: from wx-out-0506.google.com (HELO wx-out-0506.google.com) (66.249.82.231)
    by la.mx.develooper.com (qpsmtpd/0.28) with ESMTP; Wed, 04 Jul 2007 08:14:39 -0700
Received: by wx-out-0506.google.com with SMTP id t11so1180385wxc
        for <beginners@perl.org>; Wed, 04 Jul 2007 08:14:35 -0700 (PDT)
DKIM-Signature: a=rsa-sha1; c=relaxed/relaxed;
        d=gmail.com; s=beta;
        h=domainkey-signature:received:received:message-id:date:from:sender:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=soXTTCwJDFHRA4DDhvaMrAkvyJb1r663bNsJwpfnN+RSKboh/UOviXUD/7Iti8p7hCNcmE/mpzYPRWj7qmr1AnZHqdljq8BAt9MZ/lTO4Kio8Z1H7Eitt2Fhprgt354zbHv7782iBEunqRlEL06qGmQpadmn9b6LuxWPTirmCsk=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=gmail.com; s=beta;
        h=received:message-id:date:from:sender:to:subject:cc:in-reply-to:mime-version:content-type:content-transfer-encoding:content-disposition:references:x-google-sender-auth;
        b=hK749Gustu/BuYav/ltCk/pWZrcJ5TrfFB/pbAic+sDzsg0np90PFgBpHx0ZOQXxO0s6vdBAFKeACzoo+2X5VIq9tKof1zDkOYf1O1Ecfjdh4MHF+2wWAkRLf1vH14p3yw8Vdzic8pIOvhgC018pTarxIh7n0MPT8e41ZMdCiVo=
Received: by 10.90.29.18 with SMTP id c18mr7168800agc.1183562075134;
        Wed, 04 Jul 2007 08:14:35 -0700 (PDT)
Received: by 10.90.116.2 with HTTP; Wed, 4 Jul 2007 08:14:35 -0700 (PDT)
Message-ID: <31086b240707040814i48333701ha58d2327aa929ff3@mail.gmail.com>
Date: Wed, 4 Jul 2007 08:14:35 -0700
From: "Tom Phoenix" <tom@stonehenge.com>
Sender: tom.phoenix@gmail.com
To: "Mathew Snyder" <theillien@yahoo.com>
Subject: Re: Problem with runaway format
Cc: "Perl Beginners" <beginners@perl.org>
In-Reply-To: <468BA0AC.9010102@yahoo.com>
MIME-Version: 1.0
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
Content-Disposition: inline
References: <4687767F.9070206@yahoo.com>
	 <31086b240707021010v47bd2f86k87b23476cbe7dfd7@mail.gmail.com>
	 <46893D27.90002@yahoo.com>
	 <31086b240707021141g19d758a5qa5e4e7339d552236@mail.gmail.com>
	 <468BA0AC.9010102@yahoo.com>
X-Google-Sender-Auth: c757bf1025d5ce5a

On 7/4/07, Mathew Snyder <theillien@yahoo.com> wrote:

> >> foreach my $user (keys %tickets) {
> >>         foreach my $env (keys %{ $tickets{$user} }) {
> >>                 foreach my $tikID (keys %{ $tickets{$user}{$env} }) {
> >>                         foreach my $subject (keys %{
> >> $tickets{$user}{$env}{$tikID} }) {
> >
> > You're doing the same dereferencing, just getting deeper each time.
> > You'll save some time if you make some of those into temporary
> > variables. That fourth nested loop could look more like this, but
> > possibly with better variable names:
> >
> >        my $subjects_hash = $envs_hash->{$env};
> >        foreach my $subject (keys %$subjects_hash) {
> >
>
> Can you explain the reason for skipping the {$id} portion and assigning the
> {$env} portion to %subjects_hash?  The logic eludes me.

Maybe I've put the parts together wrong, or named them poorly. But the
general idea is that most references are copied to scalars, so that
you don't have to dereference $tickets{$user} as part of every
variable you access within four nested loops. That's probably going to
give you clearer code, but it will also be faster to execute.

The outer loop looks like this:

  foreach my $user (keys %tickets) {

Since there's just one value for $user each time through the loop,
$tickets{$user} will have just one value each time through the loop.
So instead of doing that hash lookup again and again, we'll keep the
result in a scalar.

    my $users_tix = $tickets{$user};

Since the scalar is declared just inside the loop, its scope ends at
the same place that $user's scope ends. So any line of code that used
to use $tickets{$user} can now use $users_tix just as well. (If their
scopes ended in different places, those two expressions wouldn't
always be interchangeable.)

Of course, the scalar could have been named $tickets_for_user or
$current_users_tickets, or something that does a better job of
matching what it's really about. I'm not clear on the nature of the
overall task or I'd have more confidence in my choice of name. I hope
that the technique is clear enough.

So, from now on, whenever we need $tickets{$user}, we can use
$users_tix. And we need it in the next nested loop, which used to look
like this:

    foreach my $env (keys %{ $tickets{$user} }) {

But now it looks like this:

    foreach my $env (keys %{ $users_tix }) {

Or, because the curly braces are optional around a just-plain-scalar,
many people prefer this:

    foreach my $env (keys %$users_tix) {

Using the same trick another level down, we get the easy way to write
$tickets{$user}{$env} , which could also be written
$tickets{$user}->{$env} :

      my $users_env = $users_tix->{$env};

The small arrow is optional in $tickets{$user}->{$env} because the
other punctuation is sufficient. If there are curly braces or square
brackets on both sides of the arrow, or one of each, the small arrow
may be omitted. But it reappears in the line of code above; it's
mandatory here because there's no longer a "closing" piece of
punctuation to its left.

And so on. By the time you get to the body of the fourth nested loop,
each variable access has become significantly shorter, so each line of
code is that much more readable and speedy to execute.

Good luck with it!

--Tom Phoenix
Stonehenge Perl Training

-- 
To unsubscribe, e-mail: beginners-unsubscribe@perl.org
For additional commands, e-mail: beginners-help@perl.org
http://learn.perl.org/


