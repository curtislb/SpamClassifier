From perl6-all-return-82448-ktwarwic=speedy.uwaterloo.ca@perl.org  Fri Jun 29 10:58:11 2007
Return-Path: <perl6-all-return-82448-ktwarwic=speedy.uwaterloo.ca@perl.org>
Received: from lists.develooper.com (x6.develooper.com [63.251.223.186])
	by flax9.uwaterloo.ca (8.12.8/8.12.5) with SMTP id l5TEw9L9027224
	for <ktwarwic@flax9.uwaterloo.ca>; Fri, 29 Jun 2007 10:58:10 -0400
Received: (qmail 26724 invoked by uid 514); 29 Jun 2007 14:58:05 -0000
Mailing-List: contact perl6-all-help@perl.org; run by ezmlm
Precedence: bulk
List-Post: <mailto:perl6-all@perl.org>
List-Help: <mailto:perl6-all-help@perl.org>
List-Unsubscribe: <mailto:perl6-all-unsubscribe@perl.org>
List-Subscribe: <mailto:perl6-all-subscribe@perl.org>
List-Id: <perl6-all.perl.org>
Delivered-To: mailing list perl6-all@perl.org
Received: (qmail 26718 invoked from network); 29 Jun 2007 14:58:05 -0000
Delivered-To: perl6-all-poster@perl.org
X-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS
X-Spam-Check-By: la.mx.develooper.com
Received-SPF: pass (x1.develooper.com: local policy)
X-Mailing-List: contact perl6-internals-help@perl.org; run by ezmlm
X-Mailing-List-Name: perl6-internals
List-Id: <perl6-internals.perl.org>
Delivered-To: mailing list perl6-internals@perl.org
Delivered-To: perl6-internals@perl.org
Received-SPF: pass (x1.develooper.com: local policy)
Subject: [perl #43342] [TODO] config/init/miniparrot.pm:  Write unit tests 
From: "James Keenan via RT" <parrotbug-followup@parrotcode.org>
Reply-To: parrotbug-followup@parrotcode.org
In-Reply-To: <E1I1tkq-0000eI-A9@li11-226.members.linode.com>
References: <RT-Ticket-43342@perl.org> <E1I1tkq-0000eI-A9@li11-226.members.linode.com>
Message-ID: <rt-3.6.HEAD-1276-1183129034-1088.43342-15-0@perl.org>
X-RT-Loop-Prevention: perl
RT-Ticket: perl #43342
Managed-by: RT 3.6.HEAD (http://www.bestpractical.com/rt/)
RT-Originator: jkeen@verizon.net
Cc: perl6-internals@perl.org
To: "OtherRecipients of perl Ticket #43342": ;
MIME-Version: 1.0
X-RT-Original-Encoding: utf-8
Content-type: multipart/mixed; boundary="----------=_1183129036-1276-128"
Date: Fri, 29 Jun 2007 07:57:16 -0700
X-Virus-Checked: Checked
X-Virus-Checked: Checked
X-Old-Spam-Check-By: la.mx.develooper.com
X-Old-Spam-Status: No, hits=-2.6 required=8.0
	tests=BAYES_00,DKIM_POLICY_SIGNSOME,DK_POLICY_SIGNSOME,SPF_PASS

------------=_1183129036-1276-128
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 8bit

There was code in several of the test files in the reconfigure/ branch which was repeated.  At 
the hackathon, David Adler refactored it into a subroutine which I then placed in new file 
Auxiliary.pm.  That file is contained in this patch along with a revised t/104-init_miniparrot.t 
and appropriate MANIFEST revisions.

Please review.  Thank you very much.
kid51

------------=_1183129036-1276-128
Content-Type: text/plain; charset="ascii"; name="diff.miniparrot.patch.txt"
Content-Disposition: inline; filename="diff.miniparrot.patch.txt"
Content-Transfer-Encoding: 7bit
RT-Attachment: 43342/266016/116373

Index: MANIFEST
===================================================================
--- MANIFEST	(revision 19464)
+++ MANIFEST	(working copy)
@@ -1,7 +1,7 @@
 # ex: set ro:
 # $Id$
 #
-# generated by tools/dev/mk_manifest_and_skip.pl Thu Jun 28 21:14:19 2007 UT
+# generated by tools/dev/mk_manifest_and_skip.pl Fri Jun 29 14:51:05 2007 UT
 #
 # See tools/dev/install_files.pl for documentation on the
 # format of this file.
@@ -2862,6 +2862,7 @@
 t/configure/config_steps.t                                  []
 t/configure/data.t                                          []
 t/configure/step.t                                          []
+t/configure/testlib/Auxiliary.pm                            []
 t/configure/testlib/Make_VERSION_File.pm                    []
 t/configure/testlib/init/alpha.pm                           []
 t/configure/testlib/init/beta.pm                            []
Index: MANIFEST.SKIP
===================================================================
--- MANIFEST.SKIP	(revision 19464)
+++ MANIFEST.SKIP	(working copy)
@@ -1,6 +1,6 @@
 # ex: set ro:
 # $Id$
-# generated by tools/dev/mk_manifest_and_skip.pl Thu Jun 28 20:58:24 2007 UT
+# generated by tools/dev/mk_manifest_and_skip.pl Fri Jun 29 14:51:05 2007 UT
 #
 # This file should contain a transcript of the svn:ignore properties
 # of the directories in the Parrot subversion repository. (Needed for
Index: t/configure/104-init_miniparrot.t
===================================================================
--- t/configure/104-init_miniparrot.t	(revision 19464)
+++ t/configure/104-init_miniparrot.t	(working copy)
@@ -7,20 +7,14 @@
 use warnings;
 use Test::More tests => 22;
 use Carp;
-use lib qw( . lib ../lib ../../lib );
+use lib qw( . lib ../lib ../../lib t/configure/testlib );
 use_ok('config::init::defaults');
 use_ok('config::init::miniparrot');
 use Parrot::BuildUtil;
 use Parrot::Configure;
 use Parrot::Configure::Options qw( process_options );
+use Auxiliary qw( test_step_thru_runstep);
 
-=for hints_for_testing This file ought to test what happens when you
-first create a Parrot::Configure object, populate it with default
-settings as in init::defaults, then override those settings per
-init::miniparrot.
-
-=cut
-
 my $parrot_version = Parrot::BuildUtil::parrot_version();
 my $args = process_options( {
     argv            => [ q{--miniparrot} ],
@@ -31,23 +25,8 @@
 
 my $conf = Parrot::Configure->new;
 
-my ($pkg, $task, $step_name, @step_params, $step, $ret);
+test_step_thru_runstep($conf, q{init::defaults}, $args, 0);
 
-$pkg = q{init::defaults};
-$conf->add_steps($pkg);
-$conf->options->set(%{$args});
-
-$task = $conf->steps->[0];
-$step_name   = $task->step;
-@step_params = @{ $task->params };
-
-$step = $step_name->new();
-ok(defined $step, "$step_name constructor returned defined value");
-isa_ok($step, $step_name);
-ok($step->description(), "$step_name has description");
-$ret = $step->runstep($conf);
-ok(defined $ret, "$step_name runstep() returned defined value");
-
 is($conf->data->get('miniparrot'), undef,
     "miniparrot is not yet enabled");
 is($conf->data->get('jitarchname'), undef,
@@ -59,23 +38,8 @@
 is($conf->data->get('jitosname'), undef,
     "jitosname undef as expected");
 
+test_step_thru_runstep($conf, q{init::miniparrot}, $args, 1);
 
-$pkg = q{init::miniparrot};
-
-$conf->add_steps($pkg);
-$conf->options->set(%{$args});
-
-$task = $conf->steps->[1];
-$step_name   = $task->step;
-@step_params = @{ $task->params };
-
-$step = $step_name->new();
-ok(defined $step, "$step_name constructor returned defined value");
-isa_ok($step, $step_name);
-ok($step->description(), "$step_name has description");
-$ret = $step->runstep($conf);
-ok(defined $ret, "$step_name runstep() returned defined value");
-
 ok($conf->data->get('miniparrot'),
     "miniparrot is enabled");
 is($conf->data->get('jitarchname'), 'nojit',
Index: t/configure/testlib/Auxiliary.pm
===================================================================
--- t/configure/testlib/Auxiliary.pm	(revision 0)
+++ t/configure/testlib/Auxiliary.pm	(revision 0)
@@ -0,0 +1,89 @@
+# Copyright (C) 2007, The Perl Foundation.
+# $Id: GenerateCore.pm 17576 2007-03-17 22:50:07Z paultcochrane $
+package Auxiliary;
+use strict;
+use warnings;
+our ( @ISA, @EXPORT_OK );
+@ISA       = qw(Exporter);
+@EXPORT_OK = qw(
+    test_step_thru_runstep
+);
+use Carp;
+*ok = *Test::More::ok;
+*isa_ok = *Test::More::isa_ok;
+use lib qw( . lib ../lib ../../lib );
+use Parrot::Configure;
+
+sub test_step_thru_runstep {
+    my ($conf, $pkg, $args, $stepnum) = @_;
+    my ($task, $step_name, @step_params, $step, $ret);
+    
+    $conf->add_steps($pkg);
+    $conf->options->set(%{$args});
+
+    $task = $conf->steps->[$stepnum];
+    $step_name   = $task->step;
+    @step_params = @{ $task->params };
+
+    $step = $step_name->new();
+    ok(defined $step, "$step_name constructor returned defined value");
+    isa_ok($step, $step_name);
+    ok($step->description(), "$step_name has description");
+    $ret = $step->runstep($conf);
+    ok(defined $ret, "$step_name runstep() returned defined value");
+}
+
+1;
+
+################### DOCUMENTATION ###################
+
+=head1 NAME
+
+Auxiliary - subroutines used in F<t/configure/*> tests
+
+=head1 SYNOPSIS
+
+    use lib qw( . lib ../lib ../../lib t/configure/testlib );
+    use Auxiliary qw( test_step_thru_runstep );
+
+    $parrot_version = Parrot::BuildUtil::parrot_version();
+    $args = process_options( {
+    argv            => [ ],
+    script          => $0,
+    parrot_version  => $parrot_version,
+    svnid           => '$Id: 105-init_hints.01.t 19432 2007-06-29 00:24:16Z jkeenan $',
+} );
+
+    $conf = Parrot::Configure->new;
+    test_step_thru_runstep($conf, q{init::defaults}, $args, 0);
+
+=head1 DESCRIPTION
+
+The subroutines in this package are used to simplify tests found in
+F<t/configure/>.
+
+So far, only one subroutine is available for export on demand:
+C<test_step_thru_runstep()>.  This subroutine takes as arguments the
+Parrot::Configure object, a string holding the name of the step to be run,
+hashref C<$args> which is the output of C<process_options()> and an integer
+which, so far, must be manually incremented between invocations of the
+subroutine.
+
+Each invocation of C<test_step_thru_runstep()> runs 4 tests.
+
+=head1 AUTHOR
+
+David H Adler and James E Keenan
+
+=head1 SEE ALSO
+
+F<Configure.pl>.
+
+=cut
+
+# Local Variables:
+#   mode: cperl
+#   cperl-indent-level: 4
+#   fill-column: 100
+# End:
+# vim: expandtab shiftwidth=4:

------------=_1183129036-1276-128--

